# file opened: diskrom.asm
   1  0000              ; DOS1.MAC
   2  0000
   3  0000              ; DOS 1.03 kernel (latest version known, SONY HB-F1XV)
   4  0000              ; version number is not offical, it is created by me
   5  0000              ; Assume this is version Aug 23, 1985 (fixed control-C problem)
   6  0000
   7  0000              ; Source re-created by Z80DIS 2.2
   8  0000              ; Z80DIS was written by Kenneth Gielow, Palo Alto, CA
   9  0000
  10  0000              ; Code Copyrighted by ASCII and maybe others
  11  0000              ; Source comments by Arjen Zeilemaker
  12  0000
  13  0000              ; Sourcecode supplied for STUDY ONLY
  14  0000              ; Recreation NOT permitted without authorisation of the copyrightholders
  15  0000
  16  0000              ; BLOAD header
  17  0000 FE               db 0x0fe
  18  0001 00 40 00 80      dw BEGIN, ENDADR, START_BASIC
  18  0005 00 40
  19  0007
  20  0007                      ORG     04000H
  21  4000              BEGIN:
  22  4000              START_BASIC:
  23  4000
  24  4000              ; symbols which must be defined by the disk hardware driver
  25  4000
  26  4000              ;       EXTRN   INIHRD
  27  4000              ;       EXTRN   DRIVES
  28  4000              ;       EXTRN   INIENV
  29  4000              ;       EXTRN   DSKIO
  30  4000              ;       EXTRN   DSKCHG
  31  4000              ;       EXTRN   GETDPB
  32  4000              ;       EXTRN   CHOICE
  33  4000              ;       EXTRN   DSKFMT
  34  4000              ;       EXTRN   MTOFF
  35  4000              ;       EXTRN   OEMSTA
  36  4000              ;       EXTRN   MYSIZE
  37  4000              ;       EXTRN   SECLEN
  38  4000              ;       EXTRN   DEFDPB
  39  4000
  40  4000              ; symbols of routines which can be used by the disk hardware driver
  41  4000
  42  4000              ;       PUBLIC  PROMPT
  43  4000              ;       PUBLIC  SETINT
  44  4000              ;       PUBLIC  PRVINT
  45  4000              ;       PUBLIC  GETSLT
  46  4000              ;       PUBLIC  GETWRK
  47  4000              ;       PUBLIC  DIV16
  48  4000              ;       PUBLIC  ENASLT
  49  4000              ;       PUBLIC  XFER
  50  4000
  51  4000
  52  4000              WBOOT   equ     00000H
  53  4000              RDSLT   equ     0000CH
  54  4000              WRSLT   equ     00014H
  55  4000              CALSLT  equ     0001CH
  56  4000              ENASLT  equ     00024H
  57  4000              IDBYT0  equ     0002BH
  58  4000              CALLF   equ     00030H
  59  4000              M0034   equ     00034H
  60  4000              KEYINT  equ     00038H
  61  4000              LDIRMV  equ     00059H
  62  4000              LDIRVM  equ     0005CH
  63  4000              CHSNS   equ     0009CH
  64  4000              CHGET   equ     0009FH
  65  4000              CHPUT   equ     000A2H
  66  4000              LPTOUT  equ     000A5H
  67  4000              BREAKX  equ     000B7H
  68  4000              CKCNTC  equ     000BDH
  69  4000              ERAFNK  equ     000CCH
  70  4000              TOTEXT  equ     000D2H
  71  4000              SNSMAT  equ     00141H
  72  4000              PHYDIO  equ     00144H
  73  4000              KILBUF  equ     00156H
  74  4000              CALBAS  equ     00159H
  75  4000
  76  4000              X003B   equ     0003BH                  ; helper routine in DOS memoryspace: store and change secundairy slotregister
  77  4000              X0046   equ     00046H                  ; helper routine in DOS memoryspace: restore secundairy slotregister (RDSLT/WRSLT)
  78  4000              X004B   equ     0004BH                  ; helper routine in DOS memoryspace: restore secundairy slotregister (CALSLT/CALLF)
  79  4000
  80  4000              XF1C9   equ     0F1C9H                  ; output string (BDOS 9), also start of fixed diskvars
  81  4000              XF1D9   equ     0F1D9H                  ; XFER, transfer to DOS memory
  82  4000              XF1E2   equ     0F1E2H                  ; WBOOT, warm boot DOS system
  83  4000              XF1E8   equ     0F1E8H                  ; start handler in DOS memory
  84  4000              XF1F4   equ     0F1F4H                  ; validate FCB filename
  85  4000              YF1F7   equ     0F1F7H                  ; reserved devicenames
  86  4000              YF20B   equ     0F20BH                  ; direntry for devices
  87  4000              YF22B   equ     0F22BH                  ; days in month table
  88  4000              YF237   equ     0F237H                  ; BDOS console output columnpos
  89  4000              YF238   equ     0F238H                  ; console columnpos at start of lineinput
  90  4000              YF239   equ     0F239H                  ; lineinput insert flag
  91  4000              YF23A   equ     0F23AH                  ; lineinput secret message flag
  92  4000              YF23B   equ     0F23BH                  ; console output to printer flag
  93  4000              YF23C   equ     0F23CH                  ; directory buffer changed flag
  94  4000              YF23D   equ     0F23DH                  ; transferaddress
  95  4000              YF23F   equ     0F23FH                  ; sectornumber in data buffer
  96  4000              YF241   equ     0F241H                  ; driveid of sector in data buffer
  97  4000              YF242   equ     0F242H                  ; data buffer changed flag
  98  4000              YF243   equ     0F243H                  ; DPB pointer current operation
  99  4000              YF245   equ     0F245H                  ; sectornumber (offset) in directory buffer
 100  4000              YF246   equ     0F246H                  ; driveid of sector in directory buffer
 101  4000              YF247   equ     0F247H                  ; default driveid
 102  4000              YF248   equ     0F248H                  ; current day (1..31)
 103  4000              YF249   equ     0F249H                  ; current month (1..12)
 104  4000              YF24A   equ     0F24AH                  ; current year (offset to 1980)
 105  4000              YF24C   equ     0F24CH                  ; current days since 1-1-1980
 106  4000              YF24E   equ     0F24EH                  ; current day of week (0=sunday)
 107  4000
 108  4000              XF24F   equ     0F24FH                  ; prompt for disk hook
 109  4000              XF252   equ     0F252H                  ; get fat entry content hook
 110  4000              XF255   equ     0F255H                  ; check if devicename hook
 111  4000              XF258   equ     0F258H                  ; try next direntry hook
 112  4000              XF25B   equ     0F25BH                  ; get next direntry hook
 113  4000              XF25E   equ     0F25EH                  ; next direntry hook
 114  4000              XF261   equ     0F261H                  ; validate FCB drive and filename hook
 115  4000              XF264   equ     0F264H                  ; fcb open hook
 116  4000              XF267   equ     0F267H                  ; get latest FAT hook
 117  4000              XF26A   equ     0F26AH                  ; get pointer to DPB of current drive hook
 118  4000              XF26D   equ     0F26DH                  ; write FAT hook
 119  4000              XF270   equ     0F270H                  ; read sector hook
 120  4000              XF273   equ     0F273H                  ; diskerror hook
 121  4000              XF276   equ     0F276H                  ; write dirsector hook
 122  4000              XF279   equ     0F279H                  ; write sector hook
 123  4000              XF27C   equ     0F27CH                  ; multiply hook
 124  4000              XF27F   equ     0F27FH                  ; divide hook
 125  4000              XF282   equ     0F282H                  ; get absolute cluster hook
 126  4000              XF285   equ     0F285H                  ; get next absolute cluster hook
 127  4000              XF288   equ     0F288H                  ; partical sector read hook
 128  4000              XF28B   equ     0F28BH                  ; partical sector write hook
 129  4000              XF28E   equ     0F28EH                  ; start read recordoperation from disk hook
 130  4000              XF291   equ     0F291H                  ; finish read recordoperation from disk hook
 131  4000              XF294   equ     0F294H                  ; end read recordoperation from disk hook
 132  4000              XF297   equ     0F297H                  ; record operation error at start hook
 133  4000              XF29A   equ     0F29AH                  ; start write recordoperation to disk hook
 134  4000              XF29D   equ     0F29DH                  ; finish write recordoperation to disk hook
 135  4000              XF2A0   equ     0F2A0H                  ; calculate sequencial sectors hook
 136  4000              XF2A3   equ     0F2A3H                  ; get sectornumber of cluster hook
 137  4000              XF2A6   equ     0F2A6H                  ; allocate FAT chain hook
 138  4000              XF2A9   equ     0F2A9H                  ; release FAT chain hook
 139  4000              XF2AC   equ     0F2ACH                  ; lineinput headloop hook
 140  4000              XF2AF   equ     0F2AFH                  ; console output hook
 141  4000              XF2B2   equ     0F2B2H                  ; get time and date for direntry hook
 142  4000              XF2B5   equ     0F2B5H                  ; setup days in februari hook
 143  4000
 144  4000              YF2B8   equ     0F2B8H                  ; current direntry number
 145  4000              YF2B9   equ     0F2B9H                  ; filename1
 146  4000              YF2C4   equ     0F2C4H                  ; original DR byte FCB
 147  4000              YF2C5   equ     0F2C5H                  ; filename2 (rename)
 148  4000              YF2D0   equ     0F2D0H                  ; temporary save for F2B9 and F2C4 (rename)
 149  4000              YF2DC   equ     0F2DCH                  ; flag ignore fileattributes
 150  4000              YF2DD   equ     0F2DDH                  ; current relative sector in cluster
 151  4000              YF2DE   equ     0F2DEH                  ; result of recordoperation
 152  4000              YF2DF   equ     0F2DFH                  ; flag increase current relative sector in cluster (0 means not)
 153  4000              YF2E0   equ     0F2E0H                  ; flag flake read (0 means real read)
 154  4000              YF2E1   equ     0F2E1H                  ; current driveid
 155  4000              YF2E2   equ     0F2E2H                  ; transferaddress for recordoperation
 156  4000              YF2E4   equ     0F2E4H                  ; start record (32 bit) for recordoperation
 157  4000              YF2E8   equ     0F2E8H                  ; number of records for recordoperation
 158  4000              YF2EA   equ     0F2EAH                  ; current relative cluster of file
 159  4000              YF2EC   equ     0F2ECH                  ; current cluster of file
 160  4000              YF2EE   equ     0F2EEH                  ; start relative sector for recordoperation
 161  4000              YF2F0   equ     0F2F0H                  ; relative cluster after fileend for write recordoperation
 162  4000              YF2F2   equ     0F2F2H                  ; start offset in sector for recordoperation
 163  4000              YF2F4   equ     0F2F4H                  ; start fileposition (32 bit) for recordoperation
 164  4000              YF2F8   equ     0F2F8H                  ; partical sector transfer at start
 165  4000              YF2FA   equ     0F2FAH                  ; partical sector transfer at end
 166  4000              YF2FC   equ     0F2FCH                  ; number of complete sectors to transfer
 167  4000              YF2FE   equ     0F2FEH                  ; first free direntry (0FFH if none found)
 168  4000              YF2FF   equ     0F2FFH                  ; flag diskoperation (0 if read, 1 if write)
 169  4000              YF300   equ     0F300H                  ; pointer to remaining lineinput from CON read record operation
 170  4000              YF302   equ     0F302H                  ; temporary store for maximium cluster
 171  4000                                                      ; looks like F304-F305 are unused!
 172  4000              YF306   equ     0F306H                  ; flag CP/M compatible BDOS call (0 means no CP/M, HL has value, <>0 means CP/M, HL is compatible filled)
 173  4000              YF307   equ     0F307H                  ; saved pointer to FCB search first, used for search next
 174  4000              YF309   equ     0F309H                  ; saved pointer to DPB search first, used for search next
 175  4000              YF30B   equ     0F30BH                  ; saved current direntry number search first/next (FFh means invalid)
 176  4000              YF30C   equ     0F30CH                  ; original EX byte FCB
 177  4000              RAWFLG  equ     0F30DH                  ; read after write (verify) flag
 178  4000              YF30E   equ     0F30EH                  ; date format (0 japanese, 1 european, 2 american)
 179  4000              KANJTA  equ     0F30FH
 180  4000              YF30F   equ     0F30FH                  ; double byte header char table
 181  4000              FUTURE  equ     0F313H                  ; looks like F313-F322 are unused
 182  4000              DISKVE  equ     0F323H
 183  4000              YF323   equ     0F323H                  ; diskerror handler pointer
 184  4000              BREAKV  equ     0F325H
 185  4000              YF325   equ     0F325H                  ; abort handler pointer
 186  4000              AUXBOD  equ     0F327H
 187  4000              XF327   equ     0F327H                  ; AUX input hook (MSXHOOK style), default returns CTRL-Z in register A
 188  4000              XF32C   equ     0F32CH                  ; AUX output hook (MSXHOOK style), default does nothing
 189  4000              BDOSBO  equ     0F331H
 190  4000              XF331   equ     0F331H                  ; BDOS hook (MSXHOOK style)
 191  4000              YF336   equ     0F336H                  ; flag saved input available (0 = none available)
 192  4000              YF337   equ     0F337H                  ; save input
 193  4000              TIMFLG  equ     0F338H
 194  4000              YF338   equ     0F338H                  ; use clockchip flag
 195  4000              YF339   equ     0F339H                  ; saved stackpointer format routine
 196  4000              YF33B   equ     0F33BH                  ; days since 1-1-1980, used when no clockchip
 197  4000              YF33D   equ     0F33DH                  ; recordsize GET/PUT recordoperations
 198  4000              YF33F   equ     0F33FH                  ; at systeminit: CTRL key flag, later: saved driveid driveroperation (0=A:)
 199  4000              YF340   equ     0F340H                  ; flag kernel cold boot (0 = cold, <>0 = warm)
 200  4000              RAMAD0  equ     0F341H                  ; slotid DOS ram page 0
 201  4000              RAMAD1  equ     0F342H                  ; slotid DOS ram page 1
 202  4000              RAMAD2  equ     0F343H                  ; slotid DOS ram page 2
 203  4000              RAMAD3  equ     0F344H                  ; slotid DOS ram page 3
 204  4000              YF345   equ     0F345H                  ; maximum number of diskbasic FCB's
 205  4000              YF346   equ     0F346H                  ; flag MSXDOS has been running (0 = no MSXDOS yet)
 206  4000              YF347   equ     0F347H                  ; number of drives in disksystem
 207  4000              MASTER  equ     0F348H
 208  4000              YF348   equ     0F348H                  ; slotid disksytem rom
 209  4000              HIMSAV  equ     0F349H
 210  4000              YF349   equ     0F349H                  ; disksystem bottom (lowest address used by the disksystem)
 211  4000              DOSHIM  equ     0F34BH
 212  4000              YF34B   equ     0F34BH                  ; msxdos system bottom
 213  4000              SECBUF equ     0F34DH                  ; pointer to sectorbuffer, can be used by the disk hardware driver
 214  4000              YF34F   equ     0F34FH                  ; pointer to datasectorbuffer
 215  4000              YF351   equ     0F351H                  ; pointer to directorysectorbuffer
 216  4000              YF353   equ     0F353H                  ; pointer to the diskbasic FCB's
 217  4000              YF355   equ     0F355H                  ; DPB table for 8 drives
 218  4000              RSLREG  equ     0F365H
 219  4000              XF365   equ     0F365H                  ; routine read primary slotregister
 220  4000              DOSON  equ     0F368H
 221  4000              XF368   equ     0F368H                  ; routine enable disksystem rom on page 1
 222  4000              DOSOF  equ     0F36BH
 223  4000              XF36B   equ     0F36BH                  ; routine enable dos ram on page 1
 224  4000              XFER    equ     0F36EH                  ; routine transfer to/from dos ram
 225  4000              AUXIN  equ     0F371H
 226  4000              XF371   equ     0F371H                  ; auxiliary input routine
 227  4000              AUXOU  equ     0F374H
 228  4000              XF374   equ     0F374H                  ; auxiliary output routine
 229  4000              BLDCHK  equ     0F377H
 230  4000              XF377   equ     0F377H                  ; routine diskbasic BLOAD
 231  4000              XF37A   equ     0F37AH                  ; routine diskbasic BSAVE
 232  4000              BSVCHK  equ     0F37AH
 233  4000              BDOS    equ     0F37DH
 234  4000              XF37D   equ     0F37DH                  ; BDOS entry point
 235  4000
 236  4000              RDPRIM  equ     0F380H
 237  4000              WRPRIM  equ     0F385H
 238  4000              CLPRIM  equ     0F38CH
 239  4000              CLPRM1  equ     0F398H
 240  4000              LINLEN  equ     0F3B0H
 241  4000              CNSDFG  equ     0F3DEH
 242  4000              LPTPOS  equ     0F415H
 243  4000              PRTFLG  equ     0F416H
 244  4000              CURLIN  equ     0F41CH
 245  4000              KBUF    equ     0F41FH
 246  4000              BUF     equ     0F55EH
 247  4000              TTYPOS  equ     0F661H
 248  4000              VALTYP  equ     0F663H
 249  4000              MEMSIZ  equ     0F672H
 250  4000              STKTOP  equ     0F674H
 251  4000              TXTTAB  equ     0F676H
 252  4000              TEMPPT  equ     0F678H
 253  4000              TEMPST  equ     0F67AH
 254  4000              DSCTMP  equ     0F698H
 255  4000              FRETOP  equ     0F69BH
 256  4000              AUTLIN  equ     0F6ABH
 257  4000              SAVSTK  equ     0F6B1H
 258  4000              VARTAB  equ     0F6C2H
 259  4000              STREND  equ     0F6C6H
 260  4000              DAC     equ     0F7F6H
 261  4000              ARG     equ     0F847H
 262  4000              MAXFIL  equ     0F85FH
 263  4000              FILTAB  equ     0F860H
 264  4000              NULBUF  equ     0F862H
 265  4000              PTRFIL  equ     0F864H
 266  4000              FILNAM  equ     0F866H
 267  4000              NLONLY  equ     0F87CH
 268  4000              SAVEND  equ     0F87DH
 269  4000              HOKVLD  equ     0FB20H
 270  4000              YFB21   equ     0FB21H                  ; disk interface table
 271  4000              YFB29   equ     0FB29H                  ; disk interface interrupt table
 272  4000              BOTTOM  equ     0FC48H
 273  4000              HIMEM   equ     0FC4AH
 274  4000              FLBMEM  equ     0FCAEH
 275  4000              RUNBNF  equ     0FCBEH
 276  4000              SAVENT  equ     0FCBFH
 277  4000              EXPTBL  equ     0FCC1H
 278  4000              SLTTBL  equ     0FCC5H
 279  4000              SLTATR  equ     0FCC9H
 280  4000              SLTWRK  equ     0FD09H
 281  4000              PROCNM  equ     0FD89H
 282  4000              DEVICE  equ     0FD99H			; used temp for disk interface count
 283  4000
 284  4000              H.TIMI  equ     0FD9FH
 285  4000              H.DSKO  equ     0FDEFH
 286  4000              H.NAME  equ     0FDF9H
 287  4000              H.KILL  equ     0FDFEH
 288  4000              H.COPY  equ     0FE08H
 289  4000              H.DSKF  equ     0FE12H
 290  4000              H.DSKI  equ     0FE17H
 291  4000              H.LSET  equ     0FE21H
 292  4000              H.RSET  equ     0FE26H
 293  4000              H.FIEL  equ     0FE2BH
 294  4000              H.MKI  equ     0FE30H
 295  4000              H.MKS  equ     0FE35H
 296  4000              H.MKD  equ     0FE3AH
 297  4000              H.CVI   equ     0FE3FH
 298  4000              H.CVS   equ     0FE44H
 299  4000              H.CVD   equ     0FE49H
 300  4000              H.GETP  equ     0FE4EH
 301  4000              H.NOFO  equ     0FE58H
 302  4000              H.NULO  equ     0FE5DH
 303  4000              H.NTFL  equ     0FE62H
 304  4000              H.BINS  equ     0FE71H
 305  4000              H.BINL  equ     0FE76H
 306  4000              H.FILE  equ     0FE7BH
 307  4000              H.DGET  equ     0FE80H
 308  4000              H.FILO  equ     0FE85H
 309  4000              H.INDS  equ     0FE8AH
 310  4000              H.LOC   equ     0FE99H
 311  4000              H.LOF   equ     0FE9EH
 312  4000              H.EOF   equ     0FEA3H
 313  4000              H.BAKU  equ     0FEADH
 314  4000              H.PARD  equ     0FEB2H
 315  4000              H.NODE  equ     0FEB7H
 316  4000              H.POSD  equ     0FEBCH
 317  4000              H.RUNC  equ     0FECBH
 318  4000              H.CLEA  equ     0FED0H
 319  4000              H.LOPD  equ     0FED5H
 320  4000              H.STKE  equ     0FEDAH
 321  4000              H.ERRP  equ     0FEFDH
 322  4000              H.PHYD  equ     0FFA7H
 323  4000              H.FORM  equ     0FFACH
 324  4000              EXTBIO  equ     0FFCAH
 325  4000              DISINT  equ     0FFCFH
 326  4000              ENAINT  equ     0FFD4H
 327  4000
 328  4000              YFFFF   equ     0FFFFH
 329  4000
 330  4000
 331  4000              YC000   equ     0C000H          ; bootsector transferaddress
 332  4000              YCONBF  equ     KBUF+186        ; KBUF is reused for read CON device records, size 127+2
 333  4000              YCONTP  equ     KBUF+58         ; KBUF is reused for temporary buffer buffered input, size 128
 334  4000
 335  4000
 336  4000              ; Basic routines
 337  4000
 338  4000              DECSUB  equ     0268CH          ; dbl subtract
 339  4000              DECADD  equ     0269AH          ; dbl add
 340  4000              DECDIV  equ     0289FH          ; dbl divide
 341  4000              VMOVE   equ     02EF3H          ; copy variable content
 342  4000              VMOVFM  equ     02F08H          ; copy variable content to DAC
 343  4000              VMOVMF  equ     02F10H          ; copy variable content from DAC
 344  4000              MAKINT  equ     02F99H          ; integer to DAC
 345  4000              CONDS   equ     03042H          ; convert DAC from sgn to dbl
 346  4000              INT     equ     030D1H          ; dbl to integer
 347  4000              SGNMUL  equ     0325CH          ; sgn multiply
 348  4000              NULSTR  equ     03FD6H          ; empty string
 349  4000              ERROR   equ     0406FH          ; BASIC error
 350  4000              READYR  equ     0409BH          ; restart BASIC
 351  4000              M4173   equ     04173H          ; execute statement
 352  4000              LINKER  equ     04253H          ; recalculate linepointers
 353  4000              NEWSTT  equ     04601H          ; execution loop
 354  4000              CHRGTR  equ     04666H          ; CHRGTR
 355  4000              FLTLIN  equ     046FFH          ; convert to SNG
 356  4000              INTID2  equ     04756H          ; evaluate word operand and check for 0-32767 range
 357  4000              FINPRT  equ     04AFFH          ; output back to screen
 358  4000              FRMEQL  equ     04C5FH          ; evaluate =expression
 359  4000              FRMEVL  equ     04C64H          ; evaluate expression
 360  4000              DOCNVF  equ     0517AH          ; convert DAC to other type
 361  4000              GTBYTC  equ     0521BH          ; evaluate next byte operand
 362  4000              GETBYT  equ     0521CH          ; evaluate byte operand
 363  4000              CONINT  equ     0521FH          ; convert to byte
 364  4000              GETUIN  equ     0542FH          ; evaluate address operand
 365  4000              M5432   equ     05432H          ; convert address to integer
 366  4000              SCCPTR  equ     054F7H          ; convert pointers to linenumbers
 367  4000              GETYPR  equ     05597H          ; GETYPR
 368  4000              PTRGET  equ     05EA4H          ; get address of variable
 369  4000              STRINI  equ     06627H          ; allocate temp string
 370  4000              GETSPA  equ     0668EH          ; allocate stringspace
 371  4000              FRESTR  equ     067D0H          ; free temporary string
 372  4000              FILEVL  equ     06A0EH          ; evaluate filespecification
 373  4000              FILIDX  equ     06A6DH          ; get i/o channel pointer
 374  4000              OPNFIL  equ     06AFAH          ; open i/o channel
 375  4000              CLSFIL  equ     06B24H          ; close i/o channel
 376  4000              CLSALL  equ     06C1CH          ; close all i/o channels
 377  4000              NOSKCR  equ     06E41H          ; resume character putback routine
 378  4000              BSAVE   equ     06E92H          ; start of BSAVE routine
 379  4000              BLOAD   equ     06EC6H          ; start of BLOAD routine
 380  4000              BLDFIN  equ     06EF4H          ; finish BLOAD
 381  4000              M6F0B   equ     06F0BH          ; evaluate address operand (BLOAD/SAVE)
 382  4000              PARDEV  equ     06F15H          ; skip strong cassette devicecheck
 383  4000              CRDONZ  equ     07323H          ; newline to OUTDO if not at start of line
 384  4000              CRDO    equ     07328H          ; newline to OUTDO
 385  4000              M739A   equ     0739AH          ; quit loading & start (headloop/executing)
 386  4000              M7D17   equ     07D17H          ; continue start of MSX-BASIC without executing BASIC programs in ROM
 387  4000              M7D2F   equ     07D2FH          ; address initialize BASIC screen
 388  4000              M7D31   equ     07D31H          ; BASIC initscreen (without INITXT & CNSDFG)
 389  4000              M7E14   equ     07E14H          ; start MSX-BASIC program in ROM
 390  4000
 391  4000              RETRTN  equ     WRPRIM+6        ; address with a RET instruction, allways available
 392  4000
 393  4000
 394  4000              ; FCB structure
 395  4000
 396  4000              ; off   name    cp/m function           msx function
 397  4000
 398  4000              ; +0    DR      drive                   drive
 399  4000              ; +1,8  F1-F8   filename                filename
 400  4000              ; +9,3  T1-T3   filetype                filetype
 401  4000              ; +12   EX      extent                  extent
 402  4000              ; +13   S1      reserved                fileattribute
 403  4000              ; +14   S2      reserved                extent high byte / recordsize low byte (block)
 404  4000              ; +15   RC      record count in extent  record count in extent / recordsize high byte (block)
 405  4000              ; +16   AL      allocation              Filesize
 406  4000              ; +20   AL      allocation              Date
 407  4000              ; +22   AL      allocation              Time
 408  4000              ; +24   AL      allocation              Devicecode
 409  4000              ; +25   AL      allocation              Directoryentry Number
 410  4000              ; +26   AL      allocation              Start Cluster
 411  4000              ; +28   AL      allocation              Current Cluster
 412  4000              ; +30   AL      allocation              Current Relative Cluster
 413  4000              ; +32   CR      record in extent        record in extent
 414  4000              ; +33,3 R0-R2   random access record    random access record
 415  4000              ; +36   R3      not used                random access record when recordsize <64
 416  4000
 417  4000
 418  4000
 419  4000 41 42                defb    "AB"
 420  4002 6F 57                defw    A576F
 421  4004 76 65                defw    A6576
 422  4006 00 00                defw    0
 423  4008 00 00                defw    0
 424  400A 00 00 00...          defs    6
 425  4010
 426  4010              ; disk hardware driver entries
 427  4010
 428  4010 C3 0A 74     T4010:  jp      DSKIO                   ; DSKIO entrypoint
 429  4013 C3 11 74     T4013:  jp      DSKCHG                  ; DSKCHG entrypoint
 430  4016 C3 15 74     T4016:  jp      GETDPB                  ; GETDPB entrypoint
 431  4019 C3 37 74     T4019:  jp      CHOICE                  ; CHOICE entrypoint
 432  401C C3 5C 74     T401C:  jp      DSKFMT                  ; DSKFMT entrypoint
 433  401F C3 62 74     T401F:  jp      MTOFF                   ; MTOFF entrypoint
 434  4022
 435  4022              ; kernel entries
 436  4022
 437  4022 C3 3A 5B     A4022:  jp      A5B3A                   ; start DiskBasic entrypoint
 438  4025 37           A4025:  scf                             ; format disk entrypoint (workarea must be supplied)
 439  4026 C3 B1 60             jp      A60B1
 440  4029 C3 0D 62     A4029:  jp      A620D                   ; stop all disks entry point
 441  402C
 442  402C              ; Unused code ??
 443  402C
 444  402C 00                   nop
 445  402D
 446  402D              GETSLT:
 447  402D C3 B3 5F     A402D:  jp      A5FB3                   ; get slotid entrypoint
 448  4030
 449  4030              ;       Subroutine      get MSX-DOS system bottom
 450  4030              ;       Inputs          -
 451  4030              ;       Outputs         HL = lowest address used by the base MSX-DOS system
 452  4030
 453  4030 2A 4B F3     A4030:  ld      hl,(YF34B)
 454  4033 C9                   ret
 455  4034
 456  4034              ;       Subroutine      check if keyboardinput available
 457  4034              ;       Inputs          -
 458  4034              ;       Outputs         Zx set if no input, Zx reset if input, A = input
 459  4034
 460  4034 DD E5        A4034:  push    ix
 461  4036 DD 21 B7 00          ld      ix,BREAKX
 462  403A CD AB 40             call    A40AB                   ; BREAKX BIOS call
 463  403D DD E1                pop     ix                      ; CTRL-STOP pressed ?
 464  403F 30 0A                jr      nc,A404B                ; nope,
 465  4041 3E 03                ld      a,003H
 466  4043 32 36 F3             ld      (YF336),a               ; saved input available
 467  4046 32 37 F3             ld      (YF337),a               ; CTRL-C
 468  4049 A7                   and     a                       ; flag NZ
 469  404A C9                   ret
 470  404B
 471  404B 3A 36 F3     A404B:  ld      a,(YF336)
 472  404E A7                   and     a                       ; saved input available ?
 473  404F 3A 37 F3             ld      a,(YF337)
 474  4052 C0                   ret     nz                      ; yep, return it (flag NZ)
 475  4053 DD E5                push    ix
 476  4055 DD 21 9C 00          ld      ix,CHSNS
 477  4059 CD AB 40             call    A40AB                   ; CHSNS BIOS call
 478  405C DD E1                pop     ix                      ; any chars in the keyboard buffer ?
 479  405E C8                   ret     z                       ; nope, quit (flag Z)
 480  405F 3E FF                ld      a,0FFH
 481  4061 32 36 F3             ld      (YF336),a               ; flag saved input available
 482  4064 DD E5                push    ix
 483  4066 DD 21 9F 00          ld      ix,CHGET
 484  406A CD AB 40             call    A40AB                   ; CHGET BIOS call
 485  406D DD E1                pop     ix                      ; get char from keyboard buffer
 486  406F 32 37 F3             ld      (YF337),a               ; save char
 487  4072 C5                   push    bc
 488  4073 06 00                ld      b,000H
 489  4075 04                   inc     b
 490  4076 C1                   pop     bc                      ; flag NZ
 491  4077 C9                   ret
 492  4078
 493  4078              ;       Subroutine      get keyboardinput
 494  4078              ;       Inputs          -
 495  4078              ;       Outputs         A = input
 496  4078
 497  4078 E5           A4078:  push    hl
 498  4079 21 36 F3             ld      hl,YF336
 499  407C AF                   xor     a
 500  407D BE                   cp      (hl)                    ; saved input available ?
 501  407E 77                   ld      (hl),a                  ; not anymore!
 502  407F 23                   inc     hl
 503  4080 7E                   ld      a,(hl)
 504  4081 E1                   pop     hl
 505  4082 C0                   ret     nz                      ; yep, return it
 506  4083 DD E5                push    ix
 507  4085 DD 21 9F 00          ld      ix,CHGET
 508  4089 CD AB 40             call    A40AB                   ; CHGET BIOS call
 509  408C DD E1                pop     ix                      ; get char
 510  408E C9                   ret
 511  408F
 512  408F              ;       Subroutine      output to screen
 513  408F              ;       Inputs          A = output
 514  408F              ;       Outputs         -
 515  408F
 516  408F DD E5        A408F:  push    ix
 517  4091 DD 21 A2 00          ld      ix,CHPUT
 518  4095 CD AB 40             call    A40AB                   ; CHPUT BIOS call
 519  4098 DD E1                pop     ix
 520  409A C9                   ret
 521  409B
 522  409B              ;       Subroutine      output to printer
 523  409B              ;       Inputs          A = output
 524  409B              ;       Outputs         -
 525  409B
 526  409B DD E5        A409B:  push    ix
 527  409D DD 21 A5 00          ld      ix,LPTOUT
 528  40A1 CD AB 40             call    A40AB                   ; LPTOUT BIOS call
 529  40A4 DD E1                pop     ix
 530  40A6 C9                   ret
 531  40A7
 532  40A7              ;       Subroutine      BDOS 00 (system reset)
 533  40A7              ;       Inputs
 534  40A7              ;       Outputs         ________________________
 535  40A7
 536  40A7
 537  40A7 DD 21 9B 40  A40A7:  ld      ix,READYR               ; restart BASIC
 538  40AB
 539  40AB              ;       Subroutine      MSX-BIOS call
 540  40AB              ;       Inputs          IX = bios call, others depends on the bios call
 541  40AB              ;       Outputs         depends on the bios call
 542  40AB
 543  40AB FD E5        A40AB:  push    iy
 544  40AD FD 2A C0 FC          ld      iy,(EXPTBL-1+0)
 545  40B1 CD 1C 00             call    CALSLT
 546  40B4 FB                   ei
 547  40B5 FD E1                pop     iy
 548  40B7 C9                   ret
 549  40B8
 550  40B8              ;       Subroutine      check for and initialize clockchip
 551  40B8              ;       Inputs          -
 552  40B8              ;       Outputs         -
 553  40B8
 554  40B8 3E 0D        A40B8:  ld      a,13
 555  40BA D3 B4                out     (0B4H),a
 556  40BC 3E 0A                ld      a,00AH
 557  40BE D3 B5                out     (0B5H),a                ; alarm off, clock running, bank 2
 558  40C0 AF                   xor     a
 559  40C1 D3 B4                out     (0B4H),a                ; pos 0
 560  40C3 06 0F                ld      b,00FH
 561  40C5 DB B5        A40C5:  in      a,(0B5H)                ; read data
 562  40C7 E6 0F                and     00FH
 563  40C9 A8                   xor     b
 564  40CA D3 B5                out     (0B5H),a                ; change it and write back
 565  40CC 4F                   ld      c,a
 566  40CD 00                   nop                             ; wait (orginal had 2x EX (SP),HL but by saving one byte all routine after this routine stay alligned)
 567  40CE DB B5                in      a,(0B5H)
 568  40D0 E6 0F                and     00FH
 569  40D2 B9                   cp      c                       ; correctly readback ?
 570  40D3 C0                   ret     nz                      ; nope, no clockchip!
 571  40D4 A8                   xor     b
 572  40D5 D3 B5                out     (0B5H),a                ; restore orginal data
 573  40D7 10 EC                djnz    A40C5                   ; try all values
 574  40D9 3E FF                ld      a,0FFH
 575  40DB 32 38 F3             ld      (YF338),a               ; flag use clockchip
 576  40DE 3E 0D                ld      a,13
 577  40E0 D3 B4                out     (0B4H),a
 578  40E2 3E 09                ld      a,009H
 579  40E4 D3 B5                out     (0B5H),a                ; alarm off, clock running, bank 1
 580  40E6 3E 0A                ld      a,10
 581  40E8 D3 B4                out     (0B4H),a                ; pos 10
 582  40EA 3E 01                ld      a,1
 583  40EC D3 B5                out     (0B5H),a                ; 24 hour system
 584  40EE 3E 0D                ld      a,13
 585  40F0 D3 B4                out     (0B4H),a
 586  40F2 AF                   xor     a
 587  40F3 D3 B5                out     (0B5H),a                ; alarm off, clock paused, bank 0
 588  40F5 01 00 0D             ld      bc,00D00H
 589  40F8 79           A40F8:  ld      a,c
 590  40F9 D3 B4                out     (0B4H),a
 591  40FB DB B5                in      a,(0B5H)
 592  40FD F5                   push    af
 593  40FE 0C                   inc     c
 594  40FF 10 F7                djnz    A40F8                   ; save time registers
 595  4101 3E 0E                ld      a,14
 596  4103 D3 B4                out     (0B4H),a
 597  4105 AF                   xor     a
 598  4106 D3 B5                out     (0B5H),a                ; clear testbits
 599  4108 06 0D                ld      b,00DH
 600  410A 0D           A410A:  dec     c
 601  410B 79                   ld      a,c
 602  410C D3 B4                out     (0B4H),a
 603  410E F1                   pop     af
 604  410F D3 B5                out     (0B5H),a
 605  4111 10 F7                djnz    A410A                   ; restore time registers
 606  4113 18 39                jr      A414E                   ; put clock in running mode
 607  4115
 608  4115              ;       Subroutine      store date
 609  4115              ;       Inputs
 610  4115              ;       Outputs         -
 611  4115
 612  4115 22 3B F3     A4115:  ld      (YF33B),hl
 613  4118 3A 38 F3             ld      a,(YF338)
 614  411B A7                   and     a                       ; use clockchip ?
 615  411C C8                   ret     z                       ; no, quit
 616  411D 3A 4A F2             ld      a,(YF24A)
 617  4120 47                   ld      b,a
 618  4121 3A 49 F2             ld      a,(YF249)
 619  4124 4F                   ld      c,a
 620  4125 3A 48 F2             ld      a,(YF248)
 621  4128 57                   ld      d,a                     ; current day
 622  4129 1E 07                ld      e,007H                  ; nibble 7 (date)
 623  412B CD 59 41             call    A4159                   ; pause clock, select bank 0
 624  412E 18 12                jr      A4142
 625  4130
 626  4130              ;       Subroutine      store time
 627  4130              ;       Inputs
 628  4130              ;       Outputs         -
 629  4130
 630  4130 3A 38 F3     A4130:  ld      a,(YF338)
 631  4133 A7                   and     a                       ; use clockchip ?
 632  4134 C8                   ret     z                       ; no, quit
 633  4135 1E 00                ld      e,000H                  ; nibble 0 (time)
 634  4137 CD 59 41             call    A4159                   ; pause clock, select bank 0
 635  413A 3E 0F                ld      a,00FH
 636  413C D3 B4                out     (0B4H),a
 637  413E 3E 02                ld      a,002H
 638  4140 D3 B5                out     (0B5H),a                ; time reset
 639  4142 62           A4142:  ld      h,d
 640  4143 CD 60 41             call    A4160                   ; write clockchip byte
 641  4146 61                   ld      h,c
 642  4147 CD 60 41             call    A4160                   ; write clockchip byte
 643  414A 60                   ld      h,b
 644  414B CD 60 41             call    A4160                   ; write clockchip byte
 645  414E
 646  414E              ;       Subroutine      put clockchip in running mode
 647  414E              ;       Inputs          -
 648  414E              ;       Outputs         -
 649  414E
 650  414E 3E 0D        A414E:  ld      a,13
 651  4150 D3 B4                out     (0B4H),a
 652  4152 DB B5                in      a,(0B5H)
 653  4154 F6 08                or      008H
 654  4156 D3 B5        A4156:  out     (0B5H),a
 655  4158 C9                   ret
 656  4159
 657  4159              ;       Subroutine      pause clockchip and select bank 0
 658  4159              ;       Inputs          -
 659  4159              ;       Outputs         -
 660  4159
 661  4159 CD 4E 41     A4159:  call    A414E                   ; clock in running mode
 662  415C E6 04                and     004H
 663  415E 18 F6                jr      A4156                   ; clock paused, select bank 0
 664  4160
 665  4160              ;       Subroutine      write byte to clockchip
 666  4160              ;       Inputs          H = data, E = nibblenumber
 667  4160              ;       Outputs         E = updated nibblenumber (+2)
 668  4160
 669  4160 AF           A4160:  xor     a
 670  4161 2E 08                ld      l,8
 671  4163 CB 04        A4163:  rlc     h
 672  4165 8F                   adc     a,a
 673  4166 27                   daa
 674  4167 2D                   dec     l
 675  4168 20 F9                jr      nz,A4163                ; convert to BCD
 676  416A CD 71 41             call    A4171
 677  416D 0F                   rrca
 678  416E 0F                   rrca
 679  416F 0F                   rrca
 680  4170 0F                   rrca
 681  4171 F5           A4171:  push    af
 682  4172 7B                   ld      a,e
 683  4173 1C                   inc     e
 684  4174 D3 B4                out     (0B4H),a
 685  4176 F1                   pop     af
 686  4177 18 DD                jr      A4156
 687  4179
 688  4179              ;       Subroutine      get date and time
 689  4179              ;       Inputs
 690  4179              ;       Outputs         Cx set if from clockchip,
 691  4179
 692  4179 3A 38 F3     A4179:  ld      a,(YF338)
 693  417C A7                   and     a                       ; use clockchip ?
 694  417D 47                   ld      b,a
 695  417E 4F                   ld      c,a
 696  417F 57                   ld      d,a
 697  4180 5F                   ld      e,a                     ; 00:00:00
 698  4181 2A 3B F3             ld      hl,(YF33B)              ; days since 1-1-1980
 699  4184 C8                   ret     z                       ; no clockchip, quit
 700  4185 CD 59 41             call    A4159                   ; clock paused, select bank 0
 701  4188 1E 0D                ld      e,12+1
 702  418A CD AD 41             call    A41AD                   ; read byte from clockchip
 703  418D CD 23 55             call    A5523                   ; setup days in februari
 704  4190 CD AD 41             call    A41AD                   ; read byte from clockchip
 705  4193 32 49 F2             ld      (YF249),a               ; current month
 706  4196 CD AD 41             call    A41AD                   ; read byte from clockchip
 707  4199 32 48 F2             ld      (YF248),a               ; current day
 708  419C 1D                   dec     e                       ; nibble 5
 709  419D CD AD 41             call    A41AD                   ; read byte from clockchip
 710  41A0 47                   ld      b,a
 711  41A1 CD AD 41             call    A41AD                   ; read byte from clockchip
 712  41A4 4F                   ld      c,a
 713  41A5 CD AD 41             call    A41AD                   ; read byte from clockchip
 714  41A8 CD 4E 41             call    A414E                   ; clock in running mode
 715  41AB 37                   scf
 716  41AC C9                   ret
 717  41AD
 718  41AD              ;       Subroutine      read byte from clockchip
 719  41AD              ;       Inputs          E = nibblenumber+1
 720  41AD              ;       Outputs         E = updated nibblenumber (-2), A = data
 721  41AD
 722  41AD AF           A41AD:  xor     a
 723  41AE CD B5 41             call    A41B5
 724  41B1 87                   add     a,a
 725  41B2 87                   add     a,a
 726  41B3 82                   add     a,d
 727  41B4 87                   add     a,a
 728  41B5 57           A41B5:  ld      d,a
 729  41B6 1D                   dec     e
 730  41B7 7B                   ld      a,e
 731  41B8 D3 B4                out     (0B4H),a
 732  41BA DB B5                in      a,(0B5H)
 733  41BC E6 0F                and     00FH
 734  41BE 82                   add     a,d
 735  41BF 57                   ld      d,a
 736  41C0 C9                   ret
 737  41C1
 738  41C1              ; Identification string (not used)
 739  41C1
 740  41C1 20 4D 53 58  S41C1:  defb    " MSX-DOS ver. 2.2 Copyright 1984 by Microsoft "
 740  41C5 2D 44 4F 53
 740  41C9 20 76 65 72
 740  41CD 2E 20 32 2E
 740  41D1 32 20 43 6F
 740  41D5 70 79 72 69
 740  41D9 67 68 74 20
 740  41DD 31 39 38 34
 740  41E1 20 62 79 20
 740  41E5 4D 69 63 72
 740  41E9 6F 73 6F 66
 740  41ED 74 20
 741  41EF
 742  41EF              ;       Subroutine      BDOS 0C (return version number)
 743  41EF              ;       Inputs
 744  41EF              ;       Outputs         ________________________
 745  41EF
 746  41EF
 747  41EF 06 00        A41EF:  ld      b,000H                  ; machinetype 8080, plain CP/M
 748  41F1 3E 22                ld      a,022H                  ; CP/M version 2.2
 749  41F3 C9                   ret
 750  41F4
 751  41F4              ;       Subroutine      get FAT entry content
 752  41F4              ;       Inputs          HL = clusternumber, IX = pointer to DPB
 753  41F4              ;       Outputs         HL = clusterentry content, Zx set if entry is free, DE = pointer to FAT buffer
 754  41F4
 755  41F4 DD 5E 13     A41F4:  ld      e,(ix+19)
 756  41F7 DD 56 14             ld      d,(ix+20)               ; pointer to FAT buffer of drive
 757  41FA CD 52 F2     A41FA:  call    XF252
 758  41FD D5                   push    de
 759  41FE 5D                   ld      e,l
 760  41FF 54                   ld      d,h
 761  4200 CB 3C                srl     h
 762  4202 CB 1D                rr      l
 763  4204 1F                   rra
 764  4205 19                   add     hl,de
 765  4206 D1                   pop     de
 766  4207 19                   add     hl,de
 767  4208 17                   rla
 768  4209 7E                   ld      a,(hl)
 769  420A 23                   inc     hl
 770  420B 66                   ld      h,(hl)
 771  420C 30 0C                jr      nc,A421A
 772  420E CB 3C                srl     h
 773  4210 1F                   rra
 774  4211 CB 3C                srl     h
 775  4213 1F                   rra
 776  4214 CB 3C                srl     h
 777  4216 1F                   rra
 778  4217 CB 3C                srl     h
 779  4219 1F                   rra
 780  421A 6F           A421A:  ld      l,a
 781  421B 7C                   ld      a,h
 782  421C E6 0F                and     00FH
 783  421E 67                   ld      h,a
 784  421F B5                   or      l
 785  4220 C9                   ret
 786  4221
 787  4221              ;       Subroutine      set FAT entry content
 788  4221              ;       Inputs          HL = clusternumber, DE = pointer to FAT buffer, BC = clusterentry content
 789  4221              ;       Outputs         -
 790  4221
 791  4221 D5           A4221:  push    de
 792  4222 5D                   ld      e,l
 793  4223 54                   ld      d,h
 794  4224 CB 3C                srl     h
 795  4226 CB 1D                rr      l
 796  4228 1F                   rra
 797  4229 19                   add     hl,de
 798  422A D1                   pop     de
 799  422B 19                   add     hl,de
 800  422C 17                   rla
 801  422D 30 18                jr      nc,A4247
 802  422F CB 21                sla     c
 803  4231 CB 10                rl      b
 804  4233 CB 21                sla     c
 805  4235 CB 10                rl      b
 806  4237 CB 21                sla     c
 807  4239 CB 10                rl      b
 808  423B CB 21                sla     c
 809  423D CB 10                rl      b
 810  423F 7E                   ld      a,(hl)
 811  4240 E6 0F                and     00FH
 812  4242 B1                   or      c
 813  4243 77                   ld      (hl),a
 814  4244 23                   inc     hl
 815  4245 70                   ld      (hl),b
 816  4246 C9                   ret
 817  4247
 818  4247 71           A4247:  ld      (hl),c
 819  4248 23                   inc     hl
 820  4249 7E                   ld      a,(hl)
 821  424A E6 F0                and     0F0H
 822  424C B0                   or      b
 823  424D 77                   ld      (hl),a
 824  424E C9                   ret
 825  424F
 826  424F              ;       Subroutine      compare with filename1
 827  424F              ;       Inputs          HL = pointer to buffer, B = size
 828  424F              ;       Outputs         Zx set if equal
 829  424F
 830  424F 11 B9 F2     A424F:  ld      de,YF2B9
 831  4252
 832  4252              ;       Subroutine      compare
 833  4252              ;       Inputs          DE = pointer to buffer1, HL = pointer to buffer2, B = size
 834  4252              ;       Outputs         Zx set if equal
 835  4252
 836  4252 1A           A4252:  ld      a,(de)
 837  4253 BE                   cp      (hl)
 838  4254 23                   inc     hl
 839  4255 13                   inc     de
 840  4256 C0                   ret     nz
 841  4257 10 F9                djnz    A4252
 842  4259 C9                   ret
 843  425A
 844  425A              ;       Subroutine      check if devicename
 845  425A              ;       Inputs
 846  425A              ;       Outputs         ________________________
 847  425A
 848  425A CD 55 F2     A425A:  call    XF255
 849  425D 21 F7 F1             ld      hl,YF1F7                ; table with devicenames
 850  4260 0E 05                ld      c,5                     ; 5 devices
 851  4262 06 04        A4262:  ld      b,4                     ; only check 4 bytes (because devicenames are only 4 chars long)
 852  4264 CD 4F 42             call    A424F                   ; compare with filename1
 853  4267 20 2F                jr      nz,A4298                ; not this device, try the next
 854  4269 06 04                ld      b,4
 855  426B 1A           A426B:  ld      a,(de)
 856  426C 13                   inc     de
 857  426D FE 20                cp      " "
 858  426F 20 32                jr      nz,A42A3                ; last 4 bytes of filename not spaces, not a device
 859  4271 10 F8                djnz    A426B
 860  4273 79                   ld      a,c
 861  4274 ED 44                neg
 862  4276 32 16 F2             ld      (YF20B+11),a            ; devicecode
 863  4279 21 B9 F2             ld      hl,YF2B9
 864  427C 11 0B F2             ld      de,YF20B
 865  427F 01 04 00             ld      bc,4
 866  4282 ED B0                ldir                            ; copy of devicename
 867  4284 CD 96 54             call    A5496                   ; get time and date (dirformat)
 868  4287 ED 43 23 F2          ld      (YF20B+24),bc
 869  428B ED 53 21 F2          ld      (YF20B+22),de
 870  428F 21 0B F2             ld      hl,YF20B
 871  4292 E5                   push    hl
 872  4293 FD E1                pop     iy
 873  4295 F6 01                or      001H                    ; Cx reset, Zx reset
 874  4297 C9                   ret
 875  4298
 876  4298 05           A4298:  dec     b
 877  4299 7D                   ld      a,l
 878  429A 80                   add     a,b
 879  429B 6F                   ld      l,a
 880  429C 7C                   ld      a,h
 881  429D CE 00                adc     a,000H
 882  429F 67                   ld      h,a
 883  42A0 0D                   dec     c
 884  42A1 20 BF                jr      nz,A4262
 885  42A3                                                      ; Zx set
 886  42A3 37           A42A3:  scf
 887  42A4 C9                   ret
 888  42A5
 889  42A5              ;       Subroutine      validate FCB, clear S2 and find direntry
 890  42A5              ;       Inputs
 891  42A5              ;       Outputs         ________________________
 892  42A5
 893  42A5
 894  42A5 D5           A42A5:  push    de
 895  42A6 21 0E 00             ld      hl,14
 896  42A9 19                   add     hl,de
 897  42AA 36 00                ld      (hl),0                  ; FCB S2 (extent high byte)
 898  42AC CD B1 42             call    A42B1                   ; validate FCB drive and filename and find direntry
 899  42AF D1                   pop     de
 900  42B0 C9                   ret
 901  42B1
 902  42B1 CD 0E 44     A42B1:  call    A440E                   ; validate FCB drive and filename
 903  42B4 D8                   ret     c                       ; invalid, quit
 904  42B5
 905  42B5              ;       Subroutine      find first directoryentry
 906  42B5              ;       Inputs
 907  42B5              ;       Outputs         ________________________
 908  42B5
 909  42B5
 910  42B5 CD 5A 42     A42B5:  call    A425A                   ; check if devicename
 911  42B8 D0                   ret     nc                      ; yep, quit with pointer to fake device direntry
 912  42B9 CD D3 44             call    A44D3                   ; reset direntry search and get latest FAT
 913  42BC
 914  42BC              ;       Subroutine      find next directoryentry
 915  42BC              ;       Inputs
 916  42BC              ;       Outputs         ________________________
 917  42BC
 918  42BC CD 58 F2     A42BC:  call    XF258
 919  42BF CD 0E 43             call    A430E                   ; get next direntry
 920  42C2 D8                   ret     c                       ; no more, quit
 921  42C3 7E           A42C3:  ld      a,(hl)
 922  42C4 B7                   or      a
 923  42C5 28 35                jr      z,A42FC                 ; unused entry,
 924  42C7 FE E5                cp      0E5H
 925  42C9 28 31                jr      z,A42FC                 ; deleted entry,
 926  42CB E5                   push    hl
 927  42CC 06 0B                ld      b,11
 928  42CE 11 B9 F2             ld      de,YF2B9
 929  42D1 CD 52 42     A42D1:  call    A4252                   ; compare with fcb filename
 930  42D4 28 06                jr      z,A42DC                 ; equal, found!
 931  42D6 FE 3F                cp      "?"
 932  42D8 20 1B                jr      nz,A42F5                ; on difference no wildcard, try next
 933  42DA 10 F5                djnz    A42D1                   ; wildcard pos ignored, check rest
 934  42DC E1           A42DC:  pop     hl
 935  42DD E5                   push    hl
 936  42DE FD E1                pop     iy
 937  42E0 3A C4 F2             ld      a,(YF2C4)
 938  42E3 EE 80                xor     080H
 939  42E5 CB 7F                bit     7,a
 940  42E7 C8                   ret     z                       ; orginal FCB DR byte had b7 set, ignore direntryattribute
 941  42E8 FD 7E 0B             ld      a,(iy+11)
 942  42EB E6 1E                and     01EH
 943  42ED C8                   ret     z                       ; files with archive or read-only bit set are ok, quit
 944  42EE 3A DC F2             ld      a,(YF2DC)
 945  42F1 B7                   or      a                       ; include special fileattribute flag set ?
 946  42F2 C0                   ret     nz                      ; yep, every direntry is ok, quit
 947  42F3 18 01                jr      A42F6
 948  42F5
 949  42F5 E1           A42F5:  pop     hl
 950  42F6 CD 48 43     A42F6:  call    A4348                   ; get next direntry (while searching)
 951  42F9 30 C8                jr      nc,A42C3                ; ok, check it
 952  42FB C9                   ret
 953  42FC
 954  42FC 3A FE F2     A42FC:  ld      a,(YF2FE)
 955  42FF 3C                   inc     a                       ; already found a free direntry ?
 956  4300 20 06                jr      nz,A4308
 957  4302 3A B8 F2             ld      a,(YF2B8)
 958  4305 32 FE F2             ld      (YF2FE),a               ; nope, register it
 959  4308 7E           A4308:  ld      a,(hl)
 960  4309 B7                   or      a                       ; unused direntry ?
 961  430A 20 EA                jr      nz,A42F6                ; nope, the search goes on!
 962  430C 37                   scf
 963  430D C9                   ret
 964  430E
 965  430E              ;       Subroutine      get next direntry (at start of search)
 966  430E              ;       Inputs
 967  430E              ;       Outputs         ________________________
 968  430E
 969  430E 3A B8 F2     A430E:  ld      a,(YF2B8)
 970  4311 3C                   inc     a
 971  4312 DD BE 0B             cp      (ix+11)                 ; last direntry ?
 972  4315 30 50                jr      nc,A4367                ; yep, update directory of disk when needed and quit
 973  4317
 974  4317              ;       Subroutine      get direntry
 975  4317              ;       Inputs
 976  4317              ;       Outputs         ________________________
 977  4317
 978  4317 CD 5B F2     A4317:  call    XF25B
 979  431A 32 B8 F2             ld      (YF2B8),a
 980  431D 4F                   ld      c,a
 981  431E DD A6 04             and     (ix+4)                  ; dirmask
 982  4321 6F                   ld      l,a
 983  4322 26 00                ld      h,0
 984  4324 29                   add     hl,hl
 985  4325 29                   add     hl,hl
 986  4326 29                   add     hl,hl
 987  4327 29                   add     hl,hl
 988  4328 29                   add     hl,hl
 989  4329 ED 5B 51 F3          ld      de,(YF351)              ; dirsector buffer
 990  432D 19                   add     hl,de
 991  432E DD 46 05             ld      b,(ix+5)                ; dirshift
 992  4331 CB 39        A4331:  srl     c
 993  4333 10 FC                djnz    A4331
 994  4335 3A 45 F2             ld      a,(YF245)
 995  4338 B9                   cp      c                       ; same as dirsector currently in buffer ?
 996  4339 20 07                jr      nz,A4342                ; nope, go get it
 997  433B 3A 46 F2             ld      a,(YF246)
 998  433E DD BE 00             cp      (ix+0)                  ; same driveid as dirsector buffer owner ?
 999  4341 C8                   ret     z                       ; yep, do nothing
1000  4342 E5           A4342:  push    hl
1001  4343 CD A4 46             call    A46A4                   ; read dirsector
1002  4346 E1                   pop     hl
1003  4347 C9                   ret
1004  4348
1005  4348              ;       Subroutine      get next direntry (while searching)
1006  4348              ;       Inputs
1007  4348              ;       Outputs         ________________________
1008  4348
1009  4348 CD 5E F2     A4348:  call    XF25E
1010  434B 3A B8 F2             ld      a,(YF2B8)
1011  434E 3C                   inc     a
1012  434F DD BE 0B             cp      (ix+11)                 ; last direntry ?
1013  4352 30 13                jr      nc,A4367                ; yep, update directory of disk when needed and quit
1014  4354 32 B8 F2             ld      (YF2B8),a
1015  4357 11 20 00             ld      de,00020H
1016  435A 19                   add     hl,de
1017  435B DD A6 04             and     (ix+4)                  ; dirmask
1018  435E C0                   ret     nz
1019  435F 0C                   inc     c
1020  4360 CD A4 46             call    A46A4                   ; read dirsector
1021  4363 2A 51 F3             ld      hl,(YF351)              ; dirsector buffer
1022  4366 C9                   ret
1023  4367
1024  4367              ;       Subroutine      at end of directory
1025  4367              ;       Inputs
1026  4367              ;       Outputs         ________________________
1027  4367
1028  4367 CD 43 47     A4367:  call    A4743                   ; flush directory buffer
1029  436A 37                   scf
1030  436B C9                   ret
1031  436C
1032  436C              ;       Subroutine      BDOS 13 (delete file)
1033  436C              ;       Inputs
1034  436C              ;       Outputs         ________________________
1035  436C
1036  436C CD 0E 44     A436C:  call    A440E                   ; validate FCB drive and filename
1037  436F D4 B5 42             call    nc,A42B5                ; valid, find first directoryentry
1038  4372 3E FF                ld      a,0FFH
1039  4374 D8                   ret     c                       ; invalid or not found, quit with error
1040  4375 C0                   ret     nz                      ; device, quit with error
1041  4376 3E E5        A4376:  ld      a,0E5H
1042  4378 32 3C F2             ld      (YF23C),a               ; flag directory buffer changed
1043  437B 77                   ld      (hl),a                  ; deleted direntry
1044  437C FD 6E 1A             ld      l,(iy+26)
1045  437F FD 66 1B             ld      h,(iy+27)
1046  4382 7C                   ld      a,h                     ; file has start cluster ?
1047  4383 B5                   or      l
1048  4384 C4 9B 4F             call    nz,A4F9B                ; yep, release cluster chain
1049  4387 CD BC 42             call    A42BC                   ; find next directoryentry
1050  438A 30 EA                jr      nc,A4376                ; found, delete next file
1051  438C CD 03 44             call    A4403                   ; update directory of disk (SHOULD BE: CALL A4748)
1052  438F C3 CF 45             jp      A45CF                   ; write FAT buffer (SHOULD BE: JP A45C4, flush FAT buffer)
1053  4392
1054  4392              ;       Subroutine      BDOS 17 (rename file)
1055  4392              ;       Inputs
1056  4392              ;       Outputs         ________________________
1057  4392
1058  4392 CD 0E 44     A4392:  call    A440E                   ; validate FCB drive and filename
1059  4395 38 74                jr      c,A440B                 ; invalid, quit with error
1060  4397 11 05 00             ld      de,00005H
1061  439A 19                   add     hl,de                   ; to new filename
1062  439B 11 C5 F2             ld      de,YF2C5                ; new filenamebuffer
1063  439E CD F4 F1             call    XF1F4                   ; validate FCB filename (new filename)
1064  43A1 D4 B5 42             call    nc,A42B5                ; new filename valid, find first directoryentry
1065  43A4 38 65                jr      c,A440B                 ; invalid or not found, quit with error
1066  43A6 20 63                jr      nz,A440B
1067  43A8 21 B9 F2             ld      hl,YF2B9
1068  43AB 11 D0 F2             ld      de,YF2D0
1069  43AE 01 0C 00             ld      bc,11+1
1070  43B1 ED B0                ldir                            ; save filename (search specifier) + orginal DR byte
1071  43B3 21 C5 F2     A43B3:  ld      hl,YF2C5                ; new filename
1072  43B6 11 B9 F2             ld      de,YF2B9
1073  43B9 06 0B                ld      b,11
1074  43BB 7E           A43BB:  ld      a,(hl)
1075  43BC FE 3F                cp      "?"                     ; wildcard char ?
1076  43BE 20 03                jr      nz,A43C3                ; nope, use the char of the new filename
1077  43C0 FD 7E 00             ld      a,(iy+0)                ; yep, use the char of the orginal filename
1078  43C3 12           A43C3:  ld      (de),a
1079  43C4 23                   inc     hl
1080  43C5 13                   inc     de
1081  43C6 FD 23                inc     iy
1082  43C8 10 F1                djnz    A43BB
1083  43CA 3E 80                ld      a,080H
1084  43CC 12                   ld      (de),a                  ; orginal DR byte b7 set (ignore fileattribute)
1085  43CD CD 5A 42             call    A425A                   ; check if devicename
1086  43D0 30 36                jr      nc,A4408                ; yep, end rename with error
1087  43D2 3A B8 F2             ld      a,(YF2B8)
1088  43D5 F5                   push    af
1089  43D6 3E FF                ld      a,0FFH
1090  43D8 32 B8 F2             ld      (YF2B8),a               ; flag direntry search start at the begin
1091  43DB CD BC 42             call    A42BC                   ; find next directoryentry
1092  43DE C1                   pop     bc
1093  43DF 30 27                jr      nc,A4408                ; found, so resulting filename does already exist. end rename with error
1094  43E1 78                   ld      a,b
1095  43E2 CD 17 43             call    A4317                   ; get direntry which get renamed
1096  43E5 EB                   ex      de,hl
1097  43E6 21 B9 F2             ld      hl,YF2B9
1098  43E9 01 0B 00             ld      bc,11
1099  43EC ED B0                ldir                            ; replace filename with new one
1100  43EE 3E FF                ld      a,0FFH
1101  43F0 32 3C F2             ld      (YF23C),a               ; flag directory buffer changed
1102  43F3 21 D0 F2             ld      hl,YF2D0
1103  43F6 11 B9 F2             ld      de,YF2B9
1104  43F9 01 0C 00             ld      bc,11+1
1105  43FC ED B0                ldir                            ; restore filename (search specifier) + orginal DR byte
1106  43FE CD BC 42             call    A42BC                   ; find next directoryentry
1107  4401 30 B0                jr      nc,A43B3                ; found, rename next file
1108  4403 CD 43 47     A4403:  call    A4743                   ; flush directory buffer
1109  4406 AF                   xor     a                       ; no error
1110  4407 C9                   ret
1111  4408
1112  4408 CD 43 47     A4408:  call    A4743                   ; flush directory buffer
1113  440B 3E FF        A440B:  ld      a,0FFH                  ; error
1114  440D C9                   ret
1115  440E
1116  440E              ;       Subroutine      validate FCB drive and filename
1117  440E              ;       Inputs
1118  440E              ;       Outputs         ________________________
1119  440E
1120  440E CD 61 F2     A440E:  call    XF261
1121  4411 AF                   xor     a
1122  4412 32 DC F2             ld      (YF2DC),a               ; do not include special fileattributes
1123  4415 EB                   ex      de,hl
1124  4416 7E                   ld      a,(hl)
1125  4417 23                   inc     hl
1126  4418 32 C4 F2             ld      (YF2C4),a               ; save FCB DR byte
1127  441B E6 0F                and     00FH                    ; only use b3-b0 for drive
1128  441D CD 27 44             call    A4427                   ; validate fcb driveid
1129  4420 D8                   ret     c
1130  4421 11 B9 F2             ld      de,YF2B9
1131  4424 C3 F4 F1             jp      XF1F4                   ; validate FCB filename
1132  4427
1133  4427              ;       Subroutine      Validate driveid (FCB style)
1134  4427              ;       Inputs          A = driveid
1135  4427              ;       Outputs         ________________________
1136  4427
1137  4427 4F           A4427:  ld      c,a
1138  4428 3A 47 F3             ld      a,(YF347)
1139  442B B9                   cp      c
1140  442C D8                   ret     c
1141  442D 79                   ld      a,c
1142  442E 3D                   dec     a
1143  442F F2 35 44             jp      p,A4435
1144  4432 3A 47 F2             ld      a,(YF247)               ; default driveid
1145  4435 32 E1 F2     A4435:  ld      (YF2E1),a               ; set current driveid
1146  4438 C9                   ret
1147  4439
1148  4439              ;       Subroutine      get max record and extent
1149  4439              ;       Inputs
1150  4439              ;       Outputs         ________________________
1151  4439
1152  4439 FD 7E 1F     A4439:  ld      a,(iy+31)
1153  443C B7                   or      a
1154  443D 20 1F                jr      nz,A445E                ; filesize > 16777215, use max value
1155  443F FD 7E 1C             ld      a,(iy+28)
1156  4442 FD 4E 1D             ld      c,(iy+29)
1157  4445 FD 46 1E             ld      b,(iy+30)
1158  4448 87                   add     a,a
1159  4449 CB 11                rl      c
1160  444B CB 10                rl      b                       ; number of records (128 bytes)
1161  444D 38 0F                jr      c,A445E                 ; >65535, use max value
1162  444F B7                   or      a                       ; is filesize a multiply of 128 ?
1163  4450 28 05                jr      z,A4457
1164  4452 03                   inc     bc                      ; nope, increase the recordnumber
1165  4453 78                   ld      a,b
1166  4454 B1                   or      c                       ; does that fit ?
1167  4455 28 07                jr      z,A445E                 ; nope, use max value
1168  4457 79           A4457:  ld      a,c
1169  4458 CB B9                res     7,c                     ; c = max recordnumber (0-127)
1170  445A 87                   add     a,a
1171  445B CB 10                rl      b                       ; b = max extent
1172  445D D0                   ret     nc                      ; does fit, quit
1173  445E 01 7F FF     A445E:  ld      bc,0FF7FH               ; extent 255, record 127
1174  4461 C9                   ret
1175  4462
1176  4462              ;       Subroutine      BDOS 0F (open file)
1177  4462              ;       Inputs
1178  4462              ;       Outputs         ________________________
1179  4462
1180  4462 CD A5 42     A4462:  call    A42A5                   ; validate FCB, clear S2 and find direntry
1181  4465 38 A4                jr      c,A440B                 ; error, quit with error
1182  4467 CD 39 44             call    A4439                   ; get max record and extent
1183  446A 3A 0C F3             ld      a,(YF30C)               ; original FCB EX byte
1184  446D 04                   inc     b                       ; ?? correct for large files (filesize > 4177919 where extend is 0FFH)
1185  446E B8                   cp      b                       ; is extent of file big enough ?
1186  446F 30 9A                jr      nc,A440B                ; nope, quit with error
1187  4471 CD 64 F2     A4471:  call    XF264
1188  4474 EB                   ex      de,hl
1189  4475 01 0F 00             ld      bc,0000FH
1190  4478 09                   add     hl,bc
1191  4479 CD 39 44             call    A4439                   ; get max record and extent
1192  447C 3A 0C F3             ld      a,(YF30C)
1193  447F B8                   cp      b                       ; orginal FCB EX byte same as max extent ?
1194  4480 28 06                jr      z,A4488                 ; same, use RC=max recordnumber (means extent is not full)
1195  4482 0E 80                ld      c,080H
1196  4484 38 02                jr      c,A4488                 ; smaller, use RC=128 (means extend is full)
1197  4486 0E 00                ld      c,000H                  ; bigger, use RC=0 (means extend is empty)
1198  4488 71           A4488:  ld      (hl),c                  ; RC
1199  4489 23                   inc     hl
1200  448A EB                   ex      de,hl
1201  448B 01 1C 00             ld      bc,0001CH
1202  448E 09                   add     hl,bc
1203  448F 0E 04                ld      c,004H
1204  4491 ED B0                ldir                            ; copy filesize
1205  4493 01 F8 FF             ld      bc,0FFF8H
1206  4496 09                   add     hl,bc
1207  4497 ED A0                ldi
1208  4499 ED A0                ldi                             ; creation date
1209  449B 0E FC                ld      c,0FCH
1210  449D 09                   add     hl,bc
1211  449E ED A0                ldi
1212  44A0 ED A0                ldi                             ; creation time
1213  44A2 FD 7E 0B             ld      a,(iy+11)
1214  44A5 CB 7F                bit     7,a
1215  44A7 20 05                jr      nz,A44AE                ; device,
1216  44A9 DD 7E 00             ld      a,(ix+0)                ; driveid
1217  44AC F6 40                or      040H                    ; flag diskfile unchanged
1218  44AE 12           A44AE:  ld      (de),a                  ; devicecode
1219  44AF 13                   inc     de
1220  44B0 3A B8 F2             ld      a,(YF2B8)
1221  44B3 12                   ld      (de),a                  ; direntry number
1222  44B4 13                   inc     de
1223  44B5 FD 7E 1A             ld      a,(iy+26)
1224  44B8 12                   ld      (de),a
1225  44B9 13                   inc     de
1226  44BA 13                   inc     de
1227  44BB 12                   ld      (de),a
1228  44BC 1B                   dec     de
1229  44BD FD 7E 1B             ld      a,(iy+27)
1230  44C0 12                   ld      (de),a
1231  44C1 13                   inc     de
1232  44C2 13                   inc     de
1233  44C3 12                   ld      (de),a                  ; start cluster and last cluster accessed
1234  44C4 13                   inc     de
1235  44C5 AF                   xor     a
1236  44C6 12                   ld      (de),a
1237  44C7 13                   inc     de
1238  44C8 12                   ld      (de),a                  ; last cluster accessed, relative
1239  44C9 C9                   ret
1240  44CA
1241  44CA              ;       Subroutine      handle DSKCHG error
1242  44CA              ;       Inputs
1243  44CA              ;       Outputs         ________________________
1244  44CA
1245  44CA 4F           A44CA:  ld      c,a
1246  44CB 3A E1 F2             ld      a,(YF2E1)               ; current driveid
1247  44CE CD 0A 47             call    A470A                   ; start diskerror handler
1248  44D1 18 08                jr      A44DB                   ; get latest FAT (try again)
1249  44D3
1250  44D3              ;       Subroutine      reset direntry search and get latest FAT
1251  44D3              ;       Inputs
1252  44D3              ;       Outputs         ________________________
1253  44D3
1254  44D3 3E FF        A44D3:  ld      a,0FFH
1255  44D5 32 B8 F2             ld      (YF2B8),a               ; invalid latest direntry (search from the begin)
1256  44D8 32 FE F2             ld      (YF2FE),a               ; not found a free direntry
1257  44DB
1258  44DB              ;       Subroutine      get latest FAT
1259  44DB              ;       Inputs
1260  44DB              ;       Outputs         ________________________
1261  44DB
1262  44DB CD 67 F2     A44DB:  call    XF267
1263  44DE CD 53 45             call    A4555                   ; get pointer to DPB of current drive
1264  44E1 3A E1 F2             ld      a,(YF2E1)               ; current driveid
1265  44E4 DD 4E 01             ld      c,(ix+1)                ; mediadesciptor
1266  44E7 06 00                ld      b,0
1267  44E9 B7                   or      a
1268  44EA CD 67 60             call    A6067                   ; DSKCHG
1269  44ED 38 DB                jr      c,A44CA                 ; error,
1270  44EF CD 33 45             call    A4536                   ; update DPBTBL entry current drive
1271  44F2 DD 6E 13             ld      l,(ix+19)
1272  44F5 DD 66 14             ld      h,(ix+20)
1273  44F8 2B                   dec     hl
1274  44F9 78                   ld      a,b                     ; DSKCHG status
1275  44FA B6                   or      (hl)                    ; combined with the FAT buffer status
1276  44FB 3A E1 F2             ld      a,(YF2E1)               ; current driveid
1277  44FE 2A 41 F2             ld      hl,(YF241)
1278  4501 FA 0A 45             jp      m,A450A                 ; FAT buffer invalid OR diskchange unknown, read the FAT
1279  4504 C0                   ret     nz                      ; FAT buffer changed OR disk unchanged, do not read the FAT and quit
1280  4505 BD                   cp      l                       ; current drive same as datasector buffer owner ?
1281  4506 20 0B                jr      nz,A4516                ; nope, read the FAT
1282  4508 25                   dec     h                       ; datasector buffer changed ?
1283  4509 C8                   ret     z                       ; yep, do not read the FAT and quit
1284  450A 95           A450A:  sub     l                       ; current drive same as datasector buffer owner ?
1285  450B 20 06                jr      nz,A4516                ; nope, leave the datasector buffer alone
1286  450D 6F                   ld      l,a
1287  450E 67                   ld      h,a
1288  450F
1289  450F              ; VERSION 1.1 CHANGE
1290  450F              ; ld (YF23F),hl is removed, because it is not explicit needed
1291  450F              ; room is used later on to fix the FAT reading bug when one of the other FAT copies is used (when first FAT read generates a error)
1292  450F
1293  450F 2D                   dec     l
1294  4510 22 41 F2             ld      (YF241),hl              ; invalid datasector buffer
1295  4513 3E FF        A4516:  ld      a,0FFH
1296  4515 32 46 F2             ld      (YF246),a               ; invalid dirsector buffer
1297  4518 CD FA 45             call    A45FA                   ; get FAT parameters
1298  451B 2B                   dec     hl
1299  451C 36 00                ld      (hl),0                  ; FAT buffer unchanged
1300  451E 23                   inc     hl
1301  451F F5           A4522:  push    af
1302  4520 CD D7 46             call    A46D7                   ; read FAT sectors
1303  4523 38 19                jr      c,A4541                 ; error, try the next FAT copy
1304  4525 F1                   pop     af
1305  4526 46           A4529:  ld      b,(hl)                  ; mediabyte of FAT sector
1306  4527 3A E1 F2             ld      a,(YF2E1)               ; current driveid
1307  452A DD 4E 01             ld      c,(ix+1)                ; mediadescriptor
1308  452D DD E5                push    ix
1309  452F E1                   pop     hl
1310  4530 CD 6F 60             call    A606F                   ; GETDPB
1311  4533 E5           A4536:  push    hl
1312  4534 DD E1                pop     ix
1313  4536 EB                   ex      de,hl
1314  4537 CD 61 45             call    A4563                   ; get DPBTBL entry of current drive
1315  453A 73                   ld      (hl),e
1316  453B 23                   inc     hl
1317  453C 72                   ld      (hl),d
1318  453D C9                   ret
1319  453E
1320  453E 7B           A4541:  ld      a,e
1321  453F 81                   add     a,c
1322  4540 5F                   ld      e,a
1323  4541 30 01                jr      nc,A4547
1324  4543 14                   inc     d
1325  4544 F1           A4547:  pop     af                      ; adjust first FAT sector to the first FAT sector of the next FAT copy
1326  4545
1327  4545              ; VERSION 1.1 BUGFIX
1328  4545              ; Begin of change
1329  4545
1330  4545 41                   ld      b,c                     ; restore sectors per FAT (B is destroyed by the DSKIO)
1331  4546
1332  4546              ; End of change
1333  4546
1334  4546 3D                   dec     a
1335  4547 20 D6                jr      nz,A4522                ; there is a other FAT copy, try that one
1336  4549 CD FA 45             call    A45FA                   ; get FAT parameters (so the first FAT copy is used)
1337  454C E5                   push    hl
1338  454D CD C5 46             call    A46C5                   ; read FAT sectors with DOS error handling
1339  4550 E1                   pop     hl
1340  4551 18 D3                jr      A4529                   ; use FAT buffer
1341  4553
1342  4553              ;       Subroutine      get pointer to DPB of current drive
1343  4553              ;       Inputs
1344  4553              ;       Outputs         HL = IX = pointer to DPB
1345  4553
1346  4553 CD 6A F2     A4555:  call    XF26A
1347  4556 CD 61 45             call    A4563                   ; get DPBTBL entry of current drive
1348  4559 7E                   ld      a,(hl)
1349  455A 23                   inc     hl
1350  455B 66                   ld      h,(hl)
1351  455C 6F                   ld      l,a
1352  455D E5                   push    hl
1353  455E DD E1                pop     ix
1354  4560 C9                   ret
1355  4561
1356  4561              ;       Subroutine      get DPBTBL entry of current drive
1357  4561              ;       Inputs          HL = address of pointer
1358  4561              ;       Outputs         ________________________
1359  4561
1360  4561 3A E1 F2     A4563:  ld      a,(YF2E1)               ; current driveid
1361  4564 21 55 F3             ld      hl,YF355
1362  4567 87                   add     a,a
1363  4568 85                   add     a,l
1364  4569 6F                   ld      l,a
1365  456A D0                   ret     nc
1366  456B 24                   inc     h
1367  456C C9                   ret
1368  456D
1369  456D              ; CHANGED, TO KEEP ROUTINES ALIGNED WITH PREVIOUS VERSION
1370  456D
1371  456D 00 00                defs    0456FH-$,0
1372  456F
1373  456F              ;       Subroutine      BDOS 10 (close file)
1374  456F              ;       Inputs
1375  456F              ;       Outputs         ________________________
1376  456F
1377  456F D5           A456F:  push    de
1378  4570 FD E1                pop     iy
1379  4572 CD 0E 44             call    A440E                   ; validate FCB drive and filename
1380  4575 3E FF                ld      a,0FFH
1381  4577 D8                   ret     c                       ; invalid, quit with error
1382  4578 FD 7E 18             ld      a,(iy+24)
1383  457B E6 C0                and     0C0H
1384  457D 3E 00                ld      a,0                     ; ok
1385  457F C0                   ret     nz                      ; device OR unchanged diskfile, quit
1386  4580 3A E1 F2             ld      a,(YF2E1)               ; current driveid
1387  4583 2A 41 F2             ld      hl,(YF241)
1388  4586 BD                   cp      l                       ; same drive as owner datasector buffer ?
1389  4587 CC 2D 47             call    z,A472D                 ; yep, flush datasector buffer
1390  458A CD 53 45             call    A4555                   ; get pointer to DPB of current drive
1391  458D FD 7E 19             ld      a,(iy+25)               ; direntrynumber
1392  4590 CD 17 43             call    A4317                   ; get direntry
1393  4593 06 0B                ld      b,11
1394  4595 CD 4F 42             call    A424F                   ; compare with filename1
1395  4598 20 54                jr      nz,A45EE                ; not the same, make FAT buffer unchanged and quit with error
1396  459A FD E5                push    iy
1397  459C D1                   pop     de
1398  459D 0E 0B                ld      c,00BH
1399  459F 09                   add     hl,bc
1400  45A0 EB                   ex      de,hl
1401  45A1 0E 16                ld      c,016H
1402  45A3 09                   add     hl,bc
1403  45A4 ED A0                ldi
1404  45A6 ED A0                ldi
1405  45A8 01 FC FF             ld      bc,0FFFCH
1406  45AB 09                   add     hl,bc
1407  45AC ED A0                ldi
1408  45AE ED A0                ldi
1409  45B0 01 04 00             ld      bc,00004H
1410  45B3 09                   add     hl,bc
1411  45B4 ED A0                ldi
1412  45B6 ED A0                ldi
1413  45B8 01 F4 FF             ld      bc,0FFF4H
1414  45BB 09                   add     hl,bc
1415  45BC 01 04 00             ld      bc,00004H
1416  45BF ED B0                ldir
1417  45C1 CD 48 47             call    A4748                   ; update directory of disk
1418  45C4
1419  45C4              ;       Subroutine      flush FAT buffer
1420  45C4              ;       Inputs
1421  45C4              ;       Outputs         ________________________
1422  45C4
1423  45C4 DD 6E 13     A45C4:  ld      l,(ix+19)
1424  45C7 DD 66 14             ld      h,(ix+20)
1425  45CA 2B                   dec     hl
1426  45CB 7E                   ld      a,(hl)
1427  45CC FE 01                cp      1                       ; FAT buffer changed ?
1428  45CE C0                   ret     nz                      ; nope, quit (?? return error if FAT buffer invalid)
1429  45CF
1430  45CF              ;       Subroutine      write FAT buffer
1431  45CF              ;       Inputs
1432  45CF              ;       Outputs         ________________________
1433  45CF
1434  45CF CD 6D F2     A45CF:  call    XF26D
1435  45D2 CD FA 45             call    A45FA                   ; get FAT parameters
1436  45D5 2B                   dec     hl
1437  45D6 36 00                ld      (hl),0                  ; FAT buffer unchanged
1438  45D8 23                   inc     hl
1439  45D9 F5           A45D9:  push    af
1440  45DA D5                   push    de
1441  45DB C5                   push    bc
1442  45DC E5                   push    hl
1443  45DD CD 55 47             call    A4755                   ; write FAT sectors with DOS error handling
1444  45E0 E1                   pop     hl
1445  45E1 C1                   pop     bc
1446  45E2 D1                   pop     de
1447  45E3 7B                   ld      a,e
1448  45E4 80                   add     a,b
1449  45E5 5F                   ld      e,a
1450  45E6 30 01                jr      nc,A45E9
1451  45E8 14                   inc     d                       ; to start sector of the next FAT
1452  45E9 F1           A45E9:  pop     af
1453  45EA 3D                   dec     a
1454  45EB 20 EC                jr      nz,A45D9                ; write next FAT
1455  45ED C9                   ret
1456  45EE
1457  45EE              ;       Subroutine      make FAT buffer unchanged and quit with error
1458  45EE              ;       Inputs
1459  45EE              ;       Outputs         ________________________
1460  45EE
1461  45EE DD 6E 13     A45EE:  ld      l,(ix+19)
1462  45F1 DD 66 14             ld      h,(ix+20)
1463  45F4 2B                   dec     hl
1464  45F5 36 00                ld      (hl),0                  ; FAT buffer unchanged
1465  45F7 3E FF                ld      a,0FFH                  ; error
1466  45F9 C9                   ret
1467  45FA
1468  45FA              ;       Subroutine      get FAT parameters
1469  45FA              ;       Inputs          IX = pointer to DPB
1470  45FA              ;       Outputs         A = number of FATs, DE = first FAT sector, B = number sectors per FAT, HL = pointer to FAT buffer
1471  45FA
1472  45FA DD 7E 0A     A45FA:  ld      a,(ix+10)               ; number of FATs
1473  45FD DD 6E 13             ld      l,(ix+19)
1474  4600 DD 66 14             ld      h,(ix+20)               ; pointer to FAT buffer
1475  4603 DD 46 10             ld      b,(ix+16)               ; number of sectors per FAT
1476  4606 DD 5E 08             ld      e,(ix+8)
1477  4609 DD 56 09             ld      d,(ix+9)                ; first FAT sector
1478  460C C9                   ret
1479  460D
1480  460D              ;       Subroutine      get dir parameters
1481  460D              ;       Inputs          IX = pointer to DPB, A = relative dirsector, DE = first dirsector
1482  460D              ;       Outputs         DE = dirsector, B = 1, HL = pointer to dirsector buffer
1483  460D
1484  460D DD 86 11     A460D:  add     a,(ix+17)
1485  4610 5F                   ld      e,a
1486  4611 DD 56 12             ld      d,(ix+18)
1487  4614 30 01                jr      nc,A4617
1488  4616 14                   inc     d                       ; + first dir sector
1489  4617 2A 51 F3     A4617:  ld      hl,(YF351)              ; dirsector buffer
1490  461A 06 01                ld      b,1                     ; 1 sector
1491  461C C9                   ret
1492  461D
1493  461D              ;       Subroutine      BDOS 16 (create file)
1494  461D              ;       Inputs
1495  461D              ;       Outputs         ________________________
1496  461D
1497  461D D5           A461D:  push    de
1498  461E CD 0E 44     T461E:  call    A440E                   ; validate FCB drive and filename
1499  4621 38 2A                jr      c,A464D                 ; invalid, quit with error
1500  4623 23                   inc     hl
1501  4624 23                   inc     hl
1502  4625 36 00                ld      (hl),0                  ; clear S2 byte
1503  4627 21 B9 F2             ld      hl,YF2B9
1504  462A 3E 3F                ld      a,"?"
1505  462C 01 0B 00             ld      bc,11
1506  462F ED B1                cpir                            ; wildcard char in filename ?
1507  4631 28 1A                jr      z,A464D                 ; yep, quit with error
1508  4633 CD B5 42             call    A42B5                   ; find first directoryentry
1509  4636 30 19                jr      nc,A4651                ; found, special actions for existing file/device
1510  4638 3A FE F2             ld      a,(YF2FE)
1511  463B FE FF                cp      0FFH                    ; found free direntry ?
1512  463D 28 0E                jr      z,A464D                 ; nope, quit with error (directory is full)
1513  463F CD 17 43             call    A4317                   ; get direntry
1514  4642 E5                   push    hl
1515  4643 FD E1                pop     iy
1516  4645 18 22                jr      A4669                   ; setup direntry
1517  4647
1518  4647 FD CB 0B 7E  A4647:  bit     7,(iy+11)
1519  464B 20 50                jr      nz,A469D                ; device, treat as open file
1520  464D                                                      ; file with special fileattribute, quit with error
1521  464D D1           A464D:  pop     de
1522  464E 3E FF                ld      a,0FFH
1523  4650 C9                   ret
1524  4651
1525  4651 20 F4        A4651:  jr      nz,A4647                ; device or file with special fileattribute,
1526  4653 3A 0C F3             ld      a,(YF30C)               ; orginal FCB EX byte
1527  4656 B7                   or      a
1528  4657 20 44                jr      nz,A469D                ; is not zero, just open the file
1529  4659 FD 6E 1A             ld      l,(iy+26)
1530  465C FD 66 1B             ld      h,(iy+27)
1531  465F 7C                   ld      a,h
1532  4660 B5                   or      l                       ; has start cluster ?
1533  4661 28 06                jr      z,A4669                 ; nop,
1534  4663 CD 9B 4F             call    A4F9B                   ; release cluster chain
1535  4666 CD CF 45             call    A45CF                   ; write FAT buffer
1536  4669 FD E5        A4669:  push    iy
1537  466B D1                   pop     de
1538  466C 21 B9 F2             ld      hl,YF2B9
1539  466F 01 0B 00             ld      bc,11
1540  4672 ED B0                ldir                            ; copy filename in FCB to direntry
1541  4674 7E                   ld      a,(hl)
1542  4675 17                   rla
1543  4676 3E 00                ld      a,000H
1544  4678 30 02                jr      nc,A467C                ; b7 DR byte reset, ordinary file
1545  467A 3E 06                ld      a,006H                  ; b7 DR byte set, hidden system file
1546  467C 12           A467C:  ld      (de),a
1547  467D 13                   inc     de
1548  467E EB                   ex      de,hl
1549  467F 06 0A                ld      b,10
1550  4681 AF                   xor     a
1551  4682 77           A4682:  ld      (hl),a
1552  4683 23                   inc     hl
1553  4684 10 FC                djnz    A4682                   ; clear unused bytes direntry
1554  4686 E5                   push    hl
1555  4687 CD 96 54             call    A5496                   ; get time and date (dirformat)
1556  468A E1                   pop     hl
1557  468B 73                   ld      (hl),e
1558  468C 23                   inc     hl
1559  468D 72                   ld      (hl),d
1560  468E 23                   inc     hl
1561  468F 71                   ld      (hl),c
1562  4690 23                   inc     hl
1563  4691 70                   ld      (hl),b
1564  4692 23                   inc     hl                      ; fill in time and date in direntry
1565  4693 AF                   xor     a
1566  4694 06 06                ld      b,2+4
1567  4696 77           A4696:  ld      (hl),a
1568  4697 23                   inc     hl
1569  4698 10 FC                djnz    A4696                   ; fill in no first cluster, filesize 0 in direntry
1570  469A CD 48 47             call    A4748                   ; update directory of disk
1571  469D
1572  469D FD E5        A469D:  push    iy
1573  469F E1                   pop     hl
1574  46A0 D1                   pop     de
1575  46A1 C3 71 44             jp      A4471                   ; continue with open file
1576  46A4
1577  46A4              ;       Subroutine      read dirsector
1578  46A4              ;       Inputs          C = relative dir sector
1579  46A4              ;       Outputs         ________________________
1580  46A4
1581  46A4 C5           A46A4:  push    bc
1582  46A5 CD 43 47             call    A4743                   ; flush directory buffer
1583  46A8 C1                   pop     bc
1584  46A9 DD 46 00             ld      b,(ix+0)                ; driveid
1585  46AC ED 43 45 F2          ld      (YF246-1),bc            ; set driveid and sector dirsector buffer
1586  46B0 C5                   push    bc
1587  46B1 79                   ld      a,c                     ; relative dirsector
1588  46B2 CD 0D 46             call    A460D                   ; setup dirsector parameters
1589  46B5 CD C5 46             call    A46C5                   ; read dirsector with DOS error handling
1590  46B8 C1                   pop     bc
1591  46B9 C9                   ret
1592  46BA
1593  46BA              ;       Subroutine      BDOS 2F (read logical sector)
1594  46BA              ;       Inputs
1595  46BA              ;       Outputs         ________________________
1596  46BA
1597  46BA 44           A46BA:  ld      b,h
1598  46BB 7D                   ld      a,l
1599  46BC 32 E1 F2             ld      (YF2E1),a               ; set current driveid
1600  46BF CD 53 45             call    A4555                   ; get pointer to DPB of current drive
1601  46C2 2A 3D F2             ld      hl,(YF23D)              ; transferaddress
1602  46C5
1603  46C5              ;       Subroutine      read sectors with DOS error handling
1604  46C5              ;       Inputs
1605  46C5              ;       Outputs         ________________________
1606  46C5
1607  46C5 CD 70 F2     A46C5:  call    XF270
1608  46C8 AF                   xor     a
1609  46C9 32 FF F2             ld      (YF2FF),a               ; flag read disk operation
1610  46CC CD D7 46             call    A46D7                   ; read sector
1611  46CF D0                   ret     nc                      ; no error, quit
1612  46D0 CD E8 46             call    A46E8                   ; adjust parameters to restart at error sector and start diskerror handler
1613  46D3 3D                   dec     a
1614  46D4 28 EF                jr      z,A46C5                 ; RETRY, try again
1615  46D6 C9                   ret                             ; IGNORE, quit
1616  46D7
1617  46D7              ;       Subroutine      read sectors
1618  46D7              ;       Inputs
1619  46D7              ;       Outputs         ________________________
1620  46D7
1621  46D7 DD 7E 00     A46D7:  ld      a,(ix+0)                ; driveid
1622  46DA DD 4E 01             ld      c,(ix+1)                ; mediadescriptor
1623  46DD E5                   push    hl
1624  46DE D5                   push    de
1625  46DF C5                   push    bc
1626  46E0 CD 52 60             call    A6052                   ; read disksector
1627  46E3 D1                   pop     de
1628  46E4 4A                   ld      c,d
1629  46E5 D1                   pop     de
1630  46E6 E1                   pop     hl
1631  46E7 C9                   ret
1632  46E8
1633  46E8              ;       Subroutine      adjust parameters to restart at error sector and start diskerror handler
1634  46E8              ;       Inputs
1635  46E8              ;       Outputs         ________________________
1636  46E8
1637  46E8 F5           A46E8:  push    af
1638  46E9 79                   ld      a,c
1639  46EA 90                   sub     b
1640  46EB 4F                   ld      c,a
1641  46EC C5                   push    bc
1642  46ED 06 00                ld      b,000H
1643  46EF EB                   ex      de,hl
1644  46F0 09                   add     hl,bc
1645  46F1 E5                   push    hl
1646  46F2 D5                   push    de
1647  46F3 DD 5E 02             ld      e,(ix+2)
1648  46F6 DD 56 03             ld      d,(ix+3)                ; sectorsize
1649  46F9 CD 16 49             call    A4916                   ; multiply
1650  46FC E1                   pop     hl
1651  46FD D1                   pop     de
1652  46FE 09                   add     hl,bc
1653  46FF C1                   pop     bc
1654  4700 F1                   pop     af
1655  4701 4F                   ld      c,a
1656  4702 3A FF F2             ld      a,(YF2FF)               ; type of diskoperation
1657  4705 B1                   or      c
1658  4706 4F                   ld      c,a
1659  4707 DD 7E 00             ld      a,(ix+0)                ; driveid
1660  470A
1661  470A              ;       Subroutine      start diskerror handler
1662  470A              ;       Inputs
1663  470A              ;       Outputs         ________________________
1664  470A
1665  470A CD 73 F2     A470A:  call    XF273
1666  470D C5                   push    bc
1667  470E D5                   push    de
1668  470F E5                   push    hl
1669  4710 2A 23 F3             ld      hl,(YF323)
1670  4713 CD E8 F1             call    XF1E8                   ; start diskerror handler in DOS memory
1671  4716 79                   ld      a,c                     ; requested action
1672  4717 E1                   pop     hl
1673  4718 D1                   pop     de
1674  4719 C1                   pop     bc
1675  471A FE 02                cp      2
1676  471C C0                   ret     nz
1677  471D C3 E2 F1             jp      XF1E2                   ; Warm boot
1678  4720
1679  4720              ;       Subroutine      BDOS 30 (write logical sector)
1680  4720              ;       Inputs
1681  4720              ;       Outputs         ________________________
1682  4720
1683  4720 44           A4720:  ld      b,h
1684  4721 7D                   ld      a,l
1685  4722 32 E1 F2             ld      (YF2E1),a               ; set current driveid
1686  4725 CD 53 45             call    A4555                   ; get pointer to DPB of current drive
1687  4728 2A 3D F2             ld      hl,(YF23D)              ; transferaddress
1688  472B 18 28                jr      A4755                   ; write sectors with DOS error handling
1689  472D
1690  472D              ;       Subroutine      flush datasector buffer
1691  472D              ;       Inputs
1692  472D              ;       Outputs         ________________________
1693  472D
1694  472D 21 42 F2     A472D:  ld      hl,YF242
1695  4730 AF                   xor     a
1696  4731 BE                   cp      (hl)                    ; datasector buffer changed ?
1697  4732 77                   ld      (hl),a                  ; now it is unchanged
1698  4733 C8                   ret     z                       ; nope, quit
1699  4734 DD 2A 43 F2          ld      ix,(YF243)              ; saved DPB pointer
1700  4738 2A 4F F3             ld      hl,(YF34F)              ; datasector buffer
1701  473B 06 01                ld      b,1                     ; 1 sector
1702  473D ED 5B 3F F2          ld      de,(YF23F)              ; sectornumber of datasector buffer
1703  4741 18 12                jr      A4755                   ; write sector with DOS error handling
1704  4743
1705  4743              ;       Subroutine      flush directory buffer
1706  4743              ;       Inputs
1707  4743              ;       Outputs         ________________________
1708  4743
1709  4743 3A 3C F2     A4743:  ld      a,(YF23C)
1710  4746 B7                   or      a                       ; directory buffer changed ?
1711  4747 C8                   ret     z                       ; nope, quit
1712  4748
1713  4748              ;       Subroutine      write dirsector buffer
1714  4748              ;       Inputs
1715  4748              ;       Outputs         ________________________
1716  4748
1717  4748 CD 76 F2     A4748:  call    XF276
1718  474B AF                   xor     a
1719  474C 32 3C F2             ld      (YF23C),a               ; directory buffer unchanged
1720  474F 3A 45 F2             ld      a,(YF245)               ; current dirsector (offset)
1721  4752 CD 0D 46             call    A460D                   ; setup dirsector parameters
1722  4755
1723  4755              ;       Subroutine      write sectors with DOS error handling
1724  4755              ;       Inputs
1725  4755              ;       Outputs         ________________________
1726  4755
1727  4755 CD 79 F2     A4755:  call    XF279
1728  4758 3E 01                ld      a,1
1729  475A 32 FF F2             ld      (YF2FF),a               ; flag write disk operation
1730  475D DD 7E 00             ld      a,(ix+0)                ; driveid
1731  4760 DD 4E 01             ld      c,(ix+1)                ; mediadescriptor
1732  4763 E5                   push    hl
1733  4764 D5                   push    de
1734  4765 C5                   push    bc
1735  4766 CD 54 60             call    A6054                   ; write disksector
1736  4769 D1                   pop     de
1737  476A 4A                   ld      c,d
1738  476B D1                   pop     de
1739  476C E1                   pop     hl
1740  476D D0                   ret     nc                      ; no error, quit
1741  476E CD E8 46             call    A46E8                   ; adjust parameters to restart at error sector and start diskerror handler
1742  4771 3D                   dec     a
1743  4772 28 E1                jr      z,A4755                 ; RETRY, try again
1744  4774 C9                   ret                             ; IGNORE, quit
1745  4775
1746  4775              ;       Subroutine      BDOS 14 (read next record)
1747  4775              ;       Inputs
1748  4775              ;       Outputs         ________________________
1749  4775
1750  4775 CD F8 4E     A4775:  call    A4EF8                   ; get recordnumber from CR,EX and S2 fields
1751  4778 CD 23 4B             call    A4B23                   ; read record
1752  477B 18 06                jr      A4783                   ; update sequencial fields
1753  477D
1754  477D              ;       Subroutine      BDOS 15 (write next record)
1755  477D              ;       Inputs
1756  477D              ;       Outputs         ________________________
1757  477D
1758  477D CD F8 4E     A477D:  call    A4EF8                   ; get recordnumber from CR,EX and S2 fields
1759  4780 CD A3 4C             call    A4CA3                   ; write record
1760  4783 CD 6A 48     A4783:  call    A486A                   ; increase recordnumber if something was read/written
1761  4786 18 14                jr      A479C                   ; update CR,EX and S2 field
1762  4788
1763  4788              ;       Subroutine      BDOS 21 (random access read record)
1764  4788              ;       Inputs
1765  4788              ;       Outputs         ________________________
1766  4788
1767  4788 CD 57 48     A4788:  call    A4857                   ; get recordnumber from Rx fields, 1 record
1768  478B CD 23 4B             call    A4B23                   ; read record
1769  478E 18 09                jr      A4799                   ; update Rx, CR,EX and S2 field
1770  4790
1771  4790 FD E5        A4790:  push    iy
1772  4792 D1                   pop     de
1773  4793
1774  4793              ;       Subroutine      BDOS 22 (random access write record)
1775  4793              ;       Inputs
1776  4793              ;       Outputs         ________________________
1777  4793
1778  4793 CD 57 48     A4793:  call    A4857                   ; get recordnumber from Rx fields, 1 record
1779  4796 CD A3 4C             call    A4CA3                   ; write record
1780  4799 CD 44 48     A4799:  call    A4844                   ; update Rx fields
1781  479C
1782  479C 7D           A479C:  ld      a,l
1783  479D E6 7F                and     07FH
1784  479F FD 77 20             ld      (iy+32),a               ; CR
1785  47A2 CB 25                sla     l
1786  47A4 CB 14                rl      h
1787  47A6 FD 74 0C             ld      (iy+12),h               ; S2
1788  47A9 CB 13                rl      e
1789  47AB FD 73 0E             ld      (iy+14),e               ; EX
1790  47AE 3A DE F2             ld      a,(YF2DE)               ; result recordoperation
1791  47B1 C9                   ret
1792  47B2
1793  47B2              ;       Subroutine      BDOS 27 (MSXDOS random block read)
1794  47B2              ;       Inputs
1795  47B2              ;       Outputs         ________________________
1796  47B2
1797  47B2 AF           A47B2:  xor     a
1798  47B3 32 06 F3             ld      (YF306),a               ; no CP/M call
1799  47B6 CD 5A 48             call    A485A                   ; get random record number
1800  47B9 CD 23 4B             call    A4B23                   ; read record(s)
1801  47BC 18 0A                jr      A47C8
1802  47BE
1803  47BE              ;       Subroutine      BDOS 26 (MSXDOS random block write)
1804  47BE              ;       Inputs
1805  47BE              ;       Outputs         ________________________
1806  47BE
1807  47BE AF           A47BE:  xor     a
1808  47BF 32 06 F3             ld      (YF306),a               ; no CP/M call
1809  47C2 CD 5A 48             call    A485A                   ; get random record number
1810  47C5 CD A3 4C             call    A4CA3                   ; write record(s)
1811  47C8 CD 6A 48     A47C8:  call    A486A                   ; increase recordnumber if something was read/written
1812  47CB CD 44 48             call    A4844                   ; update Rx fields
1813  47CE 69                   ld      l,c
1814  47CF 60                   ld      h,b
1815  47D0 C9                   ret
1816  47D1
1817  47D1              ;       Subroutine      BDOS 28 (write random with zero fill)
1818  47D1              ;       Inputs
1819  47D1              ;       Outputs         ________________________
1820  47D1
1821  47D1 D5           A47D1:  push    de
1822  47D2 FD E1                pop     iy
1823  47D4 FD 7E 10             ld      a,(iy+16)
1824  47D7 FD 4E 11             ld      c,(iy+17)
1825  47DA FD 46 12             ld      b,(iy+18)
1826  47DD FD 5E 13             ld      e,(iy+19)
1827  47E0 87                   add     a,a
1828  47E1 CB 11                rl      c
1829  47E3 CB 10                rl      b
1830  47E5 CB 13                rl      e                       ; convert filesize to a random record number
1831  47E7 B7                   or      a                       ; was filesize a multiply of 128 ?
1832  47E8 28 06                jr      z,A47F0
1833  47EA 03                   inc     bc
1834  47EB 78                   ld      a,b
1835  47EC B1                   or      c
1836  47ED 20 01                jr      nz,A47F0
1837  47EF 1C                   inc     e                       ; no, increase random record number
1838  47F0
1839  47F0              ; the following code depends on the fact that CP/M 2.2 only uses the R0 and R1 field
1840  47F0              ; code only works when the random record (filesize) is within 65536 records of the random record (fcb)
1841  47F0
1842  47F0 FD 6E 21     A47F0:  ld      l,(iy+33)
1843  47F3 FD 66 22             ld      h,(iy+34)               ; R1 and R0
1844  47F6 ED 42                sbc     hl,bc
1845  47F8 28 96                jr      z,A4790                 ; exact at end of file, random access write record and quit
1846  47FA FD 7E 23             ld      a,(iy+35)
1847  47FD 9B                   sbc     a,e                     ; before end of file ?
1848  47FE 38 90                jr      c,A4790                 ; yep, random access write record and quit
1849  4800 E5                   push    hl                      ; save number of gap records
1850  4801 CD 90 47             call    A4790                   ; random access write record (gap in filled with garbage)
1851  4804 D1                   pop     de
1852  4805 B7                   or      a
1853  4806 C0                   ret     nz                      ; error, quit
1854  4807
1855  4807              ; now the gap is filled. dirsector buffer is used for the zero filled record
1856  4807              ; neat code should first flush the dirsector buffer, but this is ommited
1857  4807
1858  4807 2A 3D F2             ld      hl,(YF23D)              ; transferaddress
1859  480A E5                   push    hl
1860  480B 2A 51 F3             ld      hl,(YF351)
1861  480E 22 3D F2             ld      (YF23D),hl              ; tempory use dirsector buffer
1862  4811 06 80                ld      b,128
1863  4813 77           A4813:  ld      (hl),a
1864  4814 23                   inc     hl
1865  4815 10 FC                djnz    A4813                   ; create a zero filed random record
1866  4817 3D                   dec     a
1867  4818 32 46 F2             ld      (YF246),a               ; invalid dirsector buffer
1868  481B FD 6E 21             ld      l,(iy+33)
1869  481E FD 66 22             ld      h,(iy+34)
1870  4821 ED 52                sbc     hl,de
1871  4823 4D                   ld      c,l
1872  4824 44                   ld      b,h
1873  4825 EB                   ex      de,hl
1874  4826 16 00                ld      d,000H
1875  4828 FD 7E 23             ld      a,(iy+35)
1876  482B 9A                   sbc     a,d
1877  482C 5F                   ld      e,a                     ; start record of gap
1878  482D E5           A482D:  push    hl
1879  482E 21 01 00             ld      hl,1
1880  4831 CD A3 4C             call    A4CA3                   ; write record
1881  4834 CD 6A 48             call    A486A                   ; increase recordnumber if something was writen
1882  4837 4D                   ld      c,l
1883  4838 44                   ld      b,h
1884  4839 E1                   pop     hl
1885  483A 2B                   dec     hl
1886  483B 7C                   ld      a,h
1887  483C B5                   or      l
1888  483D 20 EE                jr      nz,A482D                ; next record
1889  483F E1                   pop     hl
1890  4840 22 3D F2             ld      (YF23D),hl              ; restore transferaddress
1891  4843 C9                   ret
1892  4844
1893  4844 3A DE F2     A4844:  ld      a,(YF2DE)               ; result recordoperation
1894  4847 FD 75 21             ld      (iy+33),l
1895  484A FD 74 22             ld      (iy+34),h
1896  484D FD 73 23             ld      (iy+35),e
1897  4850 14                   inc     d
1898  4851 15                   dec     d
1899  4852 C8                   ret     z
1900  4853 FD 72 24             ld      (iy+36),d
1901  4856 C9                   ret
1902  4857
1903  4857 21 01 00     A4857:  ld      hl,1                    ; 1 record
1904  485A D5           A485A:  push    de
1905  485B FD E1                pop     iy
1906  485D FD 4E 21             ld      c,(iy+33)               ; R0
1907  4860 FD 46 22             ld      b,(iy+34)               ; R1
1908  4863 FD 5E 23             ld      e,(iy+35)               ; R2
1909  4866 FD 56 24             ld      d,(iy+36)               ; R3
1910  4869 C9                   ret
1911  486A
1912  486A C8           A486A:  ret     z
1913  486B 23                   inc     hl
1914  486C 7C                   ld      a,h
1915  486D B5                   or      l
1916  486E C0                   ret     nz
1917  486F 13                   inc     de
1918  4870 C9                   ret
1919  4871
1920  4871 E1           A4871:  pop     hl
1921  4872 69                   ld      l,c
1922  4873 60                   ld      h,b
1923  4874 3E 01                ld      a,1
1924  4876 32 DE F2             ld      (YF2DE),a               ; error in recordoperation
1925  4879 AF                   xor     a
1926  487A 4F                   ld      c,a
1927  487B 47                   ld      b,a
1928  487C C9                   ret
1929  487D
1930  487D 22 E8 F2     A487D:  ld      (YF2E8),hl              ; number of records requested
1931  4880 ED 43 E4 F2          ld      (YF2E4+0),bc
1932  4884 ED 53 E6 F2          ld      (YF2E4+2),de            ; startrecord
1933  4888 FD 7E 00             ld      a,(iy+0)
1934  488B CD 27 44             call    A4427                   ; validate fcb driveid
1935  488E 38 E1                jr      c,A4871
1936  4890 11 80 00             ld      de,00080H
1937  4893 3A 06 F3             ld      a,(YF306)
1938  4896 B7                   or      a                       ; Random Block ?
1939  4897 20 0F                jr      nz,A48A8
1940  4899 FD 7E 0E             ld      a,(iy+14)
1941  489C FD 56 0F             ld      d,(iy+15)               ; yep, use user set recordsize
1942  489F 5F                   ld      e,a
1943  48A0 B2                   or      d                       ; zero recordsize ?
1944  48A1 20 05                jr      nz,A48A8
1945  48A3 1E 80                ld      e,128
1946  48A5 FD 73 0E             ld      (iy+14),e               ; yep, use 128 bytes default
1947  48A8 14           A48A8:  inc     d
1948  48A9 15                   dec     d
1949  48AA 20 05                jr      nz,A48B1
1950  48AC 7B                   ld      a,e
1951  48AD FE 40                cp      64
1952  48AF 38 04                jr      c,A48B5
1953  48B1 AF           A48B1:  xor     a
1954  48B2 32 E7 F2             ld      (YF2E4+3),a             ; recordsize >64, clear b31-b24 of record (use 24 bit recordnumbers)
1955  48B5 2A 3D F2     A48B5:  ld      hl,(YF23D)
1956  48B8 22 E2 F2             ld      (YF2E2),hl              ; current transferaddress
1957  48BB AF                   xor     a
1958  48BC 32 DE F2             ld      (YF2DE),a               ; no error in recordoperation
1959  48BF 32 DF F2             ld      (YF2DF),a               ; flag do not increase sector
1960  48C2 ED 4B E8 F2          ld      bc,(YF2E8)              ; number of records requested
1961  48C6 CD 16 49             call    A4916                   ; * recordsize
1962  48C9 FD 7E 18             ld      a,(iy+24)
1963  48CC B7                   or      a
1964  48CD F8                   ret     m                       ; DOS device, quit
1965  48CE C5                   push    bc
1966  48CF CD 53 45             call    A4555                   ; get pointer to DPB of current drive
1967  48D2 ED 4B E4 F2          ld      bc,(YF2E4+0)
1968  48D6 CD 16 49             call    A4916                   ; multiply
1969  48D9 ED 43 F4 F2          ld      (YF2F4+0),bc
1970  48DD C5                   push    bc
1971  48DE ED 4B E6 F2          ld      bc,(YF2E4+2)
1972  48E2 CD 1C 49             call    A491C                   ; multiply high word
1973  48E5 ED 43 F6 F2          ld      (YF2F4+2),bc            ; startbyte = startrecord * recordsize
1974  48E9 60                   ld      h,b
1975  48EA 69                   ld      l,c
1976  48EB C1                   pop     bc                      ; BCHL = startbyte
1977  48EC DD 5E 02             ld      e,(ix+2)
1978  48EF DD 56 03             ld      d,(ix+3)
1979  48F2 CD 32 49             call    A4932                   ; / sectorsize
1980  48F5 22 F2 F2             ld      (YF2F2),hl              ; offset in sector of startbyte
1981  48F8 ED 43 EE F2          ld      (YF2EE),bc              ; relative sector of startbyte
1982  48FC DD 7E 06             ld      a,(ix+6)
1983  48FF A1                   and     c                       ; clustermask
1984  4900 32 DD F2             ld      (YF2DD),a               ; current relative sector in cluster (of startbyte)
1985  4903 DD 7E 07             ld      a,(ix+7)                ; clustershift
1986  4906 3D           A4906:  dec     a
1987  4907 28 06                jr      z,A490F
1988  4909 CB 38                srl     b
1989  490B CB 19                rr      c
1990  490D 18 F7                jr      A4906
1991  490F
1992  490F ED 43 EC F2  A490F:  ld      (YF2EC),bc              ; relative cluster of startbyte
1993  4913 C1                   pop     bc
1994  4914 AF                   xor     a
1995  4915 C9                   ret
1996  4916
1997  4916              ;       Subroutine      multiply
1998  4916              ;       Inputs
1999  4916              ;       Outputs         ________________________
2000  4916
2001  4916 CD 7C F2     A4916:  call    XF27C
2002  4919 21 00 00             ld      hl,0
2003  491C
2004  491C              ;       Subroutine      multiply high word
2005  491C              ;       Inputs
2006  491C              ;       Outputs         ________________________
2007  491C
2008  491C 78           A491C:  ld      a,b
2009  491D 06 11                ld      b,011H
2010  491F 18 07                jr      A4928
2011  4921
2012  4921 30 01        A4921:  jr      nc,A4924
2013  4923 19                   add     hl,de
2014  4924 CB 1C        A4924:  rr      h
2015  4926 CB 1D                rr      l
2016  4928 1F           A4928:  rra
2017  4929 CB 19                rr      c
2018  492B 10 F4                djnz    A4921
2019  492D 47                   ld      b,a
2020  492E C9                   ret
2021  492F
2022  492F              ;       Subroutine      divide
2023  492F              ;       Inputs
2024  492F              ;       Outputs         ________________________
2025  492F
2026  492F              DIV16:
2027  492F 21 00 00     A492F:  ld      hl,0
2028  4932
2029  4932              ;       Subroutine      divide
2030  4932              ;       Inputs
2031  4932              ;       Outputs         ________________________
2032  4932
2033  4932 CD 7F F2     A4932:  call    XF27F
2034  4935 78                   ld      a,b
2035  4936 06 10                ld      b,010H
2036  4938 CB 11                rl      c
2037  493A 17                   rla
2038  493B CB 15        A493B:  rl      l
2039  493D CB 14                rl      h
2040  493F 38 0D                jr      c,A494E
2041  4941 ED 52                sbc     hl,de
2042  4943 30 01                jr      nc,A4946
2043  4945 19                   add     hl,de
2044  4946 3F           A4946:  ccf
2045  4947 CB 11        A4947:  rl      c
2046  4949 17                   rla
2047  494A 10 EF                djnz    A493B
2048  494C 47                   ld      b,a
2049  494D C9                   ret
2050  494E
2051  494E B7           A494E:  or      a
2052  494F ED 52                sbc     hl,de
2053  4951 18 F4                jr      A4947
2054  4953
2055  4953              ;       Subroutine      calculate partial sector transfers
2056  4953              ;       Inputs
2057  4953              ;       Outputs         ________________________
2058  4953
2059  4953 60           A4953:  ld      h,b
2060  4954 69                   ld      l,c                     ; bytes to transfer
2061  4955 ED 4B F2 F2          ld      bc,(YF2F2)              ; offset in sector startbyte
2062  4959 78                   ld      a,b
2063  495A B1                   or      c
2064  495B 5F                   ld      e,a
2065  495C 57                   ld      d,a
2066  495D 28 13                jr      z,A4972                 ; at start sector, no partial start
2067  495F DD 5E 02             ld      e,(ix+2)
2068  4962 DD 56 03             ld      d,(ix+3)
2069  4965 EB                   ex      de,hl                   ; sectorsize
2070  4966 ED 42                sbc     hl,bc
2071  4968 EB                   ex      de,hl                   ; bytes left in sector
2072  4969 ED 52                sbc     hl,de                   ; enough ?
2073  496B 30 05                jr      nc,A4972                ; nop, get what you can
2074  496D 19                   add     hl,de
2075  496E EB                   ex      de,hl
2076  496F 21 00 00             ld      hl,0
2077  4972 ED 53 F8 F2  A4972:  ld      (YF2F8),de              ; bytes to transfer from partial sector
2078  4976 4D                   ld      c,l
2079  4977 44                   ld      b,h                     ; bytes left after partial sector transfer
2080  4978 DD 5E 02             ld      e,(ix+2)
2081  497B DD 56 03             ld      d,(ix+3)
2082  497E CD 2F 49             call    A492F                   ; / sectorsize
2083  4981 22 FA F2             ld      (YF2FA),hl              ; partial bytes in endsector
2084  4984 ED 43 FC F2          ld      (YF2FC),bc              ; hole sectors of transfer
2085  4988 C9                   ret
2086  4989
2087  4989              ;       Subroutine      get absolute cluster
2088  4989              ;       Inputs
2089  4989              ;       Outputs         ________________________
2090  4989
2091  4989 CD 82 F2     A4989:  call    XF282
2092  498C FD 6E 1C             ld      l,(iy+28)
2093  498F FD 66 1D             ld      h,(iy+29)               ; current cluster of file
2094  4992 FD 5E 1E             ld      e,(iy+30)
2095  4995 FD 56 1F             ld      d,(iy+31)               ; current relative cluster of file
2096  4998 7D                   ld      a,l
2097  4999 B4                   or      h
2098  499A 28 33                jr      z,A49CF                 ; file has no start cluster,
2099  499C C5                   push    bc
2100  499D 79                   ld      a,c
2101  499E 93                   sub     e
2102  499F 4F                   ld      c,a
2103  49A0 78                   ld      a,b
2104  49A1 9A                   sbc     a,d
2105  49A2 47                   ld      b,a
2106  49A3 30 0B                jr      nc,A49B0                ; requested cluster behind current, search from current cluster
2107  49A5 C1                   pop     bc
2108  49A6 11 00 00             ld      de,0                    ; relative cluster 0
2109  49A9 FD 6E 1A             ld      l,(iy+26)
2110  49AC FD 66 1B             ld      h,(iy+27)               ; start cluster of file
2111  49AF F5                   push    af
2112  49B0 F1           A49B0:  pop     af
2113  49B1 CD 85 F2     A49B1:  call    XF285
2114  49B4 78                   ld      a,b
2115  49B5 B1                   or      c
2116  49B6 C8                   ret     z
2117  49B7 D5                   push    de
2118  49B8 E5                   push    hl
2119  49B9 CD F4 41             call    A41F4                   ; get FAT entry content
2120  49BC D1                   pop     de
2121  49BD 7C                   ld      a,h
2122  49BE FE 0F                cp      00FH
2123  49C0 38 05                jr      c,A49C7
2124  49C2 7D                   ld      a,l
2125  49C3 FE F8                cp      0F8H
2126  49C5 30 05                jr      nc,A49CC                ; end cluster
2127  49C7 D1           A49C7:  pop     de
2128  49C8 13                   inc     de
2129  49C9 0B                   dec     bc
2130  49CA 18 E5                jr      A49B1
2131  49CC
2132  49CC EB           A49CC:  ex      de,hl
2133  49CD D1                   pop     de
2134  49CE C9                   ret
2135  49CF
2136  49CF 03           A49CF:  inc     bc                      ; BC<>0 (means not found)
2137  49D0 1B                   dec     de
2138  49D1 C9                   ret
2139  49D2
2140  49D2              ;       Subroutine      read datasector
2141  49D2              ;       Inputs
2142  49D2              ;       Outputs         ________________________
2143  49D2
2144  49D2 32 E0 F2     A49D2:  ld      (YF2E0),a
2145  49D5 2A EC F2             ld      hl,(YF2EC)              ; relative cluster
2146  49D8 3A DD F2             ld      a,(YF2DD)               ; current relative sector in cluster
2147  49DB CD DB 4E             call    A4EDB                   ; get sectornumber of cluster
2148  49DE EB                   ex      de,hl
2149  49DF 2A 3F F2             ld      hl,(YF23F)
2150  49E2 ED 52                sbc     hl,de                   ; is it currently in the datasector buffer ?
2151  49E4 20 0A                jr      nz,A49F0                ; nope, get it
2152  49E6 3A E1 F2             ld      a,(YF2E1)               ; current driveid
2153  49E9 6F                   ld      l,a
2154  49EA 3A 41 F2             ld      a,(YF241)
2155  49ED BD                   cp      l                       ; same drive as owner datasector buffer ?
2156  49EE 28 2B                jr      z,A4A1B                 ; yep,
2157  49F0 D5           A49F0:  push    de
2158  49F1 DD E5                push    ix
2159  49F3 CD 2D 47             call    A472D                   ; flush datasector buffer
2160  49F6 DD E1                pop     ix
2161  49F8 D1                   pop     de
2162  49F9 3A E0 F2             ld      a,(YF2E0)
2163  49FC B7                   or      a                       ; real or fake read ?
2164  49FD 20 0E                jr      nz,A4A0D                ; fake read
2165  49FF 3D                   dec     a
2166  4A00 32 41 F2             ld      (YF241),a
2167  4A03 2A 4F F3             ld      hl,(YF34F)              ; datasector buffer
2168  4A06 06 01                ld      b,1                     ; 1 sector
2169  4A08 D5                   push    de
2170  4A09 CD C5 46             call    A46C5                   ; read sector with DOS error handling
2171  4A0C D1                   pop     de
2172  4A0D ED 53 3F F2  A4A0D:  ld      (YF23F),de              ; current datasector
2173  4A11 3A E1 F2             ld      a,(YF2E1)               ; current driveid
2174  4A14 32 41 F2             ld      (YF241),a               ; set owner datasector buffer
2175  4A17 DD 22 43 F2          ld      (YF243),ix              ; save DPB pointer
2176  4A1B 3E 01        A4A1B:  ld      a,1
2177  4A1D 32 DF F2             ld      (YF2DF),a               ; flag do increase sector
2178  4A20 2A E2 F2             ld      hl,(YF2E2)
2179  4A23 E5                   push    hl
2180  4A24 ED 4B F8 F2          ld      bc,(YF2F8)
2181  4A28 09                   add     hl,bc
2182  4A29 22 E2 F2             ld      (YF2E2),hl              ; update current transferaddress
2183  4A2C 2A 4F F3             ld      hl,(YF34F)              ; datasector buffer
2184  4A2F ED 5B F2 F2          ld      de,(YF2F2)
2185  4A33 19                   add     hl,de
2186  4A34 D1                   pop     de
2187  4A35 C9                   ret
2188  4A36
2189  4A36              ;       Subroutine      do partical sector read if needed
2190  4A36              ;       Inputs
2191  4A36              ;       Outputs         ________________________
2192  4A36
2193  4A36 CD 88 F2     A4A36:  call    XF288
2194  4A39 2A F8 F2             ld      hl,(YF2F8)
2195  4A3C 7C                   ld      a,h
2196  4A3D B5                   or      l                       ; partial sector read
2197  4A3E C8                   ret     z                       ; nope, quit
2198  4A3F AF                   xor     a                       ; real read
2199  4A40 CD D2 49             call    A49D2                   ; read datasector
2200  4A43 C3 D9 F1             jp      XF1D9                   ; transfer to DOS memory
2201  4A46
2202  4A46              ;       Subroutine      handle partial sector write
2203  4A46              ;       Inputs
2204  4A46              ;       Outputs         ________________________
2205  4A46
2206  4A46 CD 8B F2     A4A46:  call    XF28B
2207  4A49 2A F8 F2             ld      hl,(YF2F8)
2208  4A4C 7C                   ld      a,h
2209  4A4D B5                   or      l                       ; partial start ?
2210  4A4E C8                   ret     z                       ; nop, quit
2211  4A4F 2A EE F2             ld      hl,(YF2EE)
2212  4A52 23                   inc     hl
2213  4A53 22 EE F2             ld      (YF2EE),hl              ; update relative sector of startbyte
2214  4A56 AF                   xor     a
2215  4A57 EB                   ex      de,hl
2216  4A58 2A F0 F2             ld      hl,(YF2F0)
2217  4A5B ED 52                sbc     hl,de                   ; sector behind end of file ?
2218  4A5D 1F                   rra                             ; if yes, fake read
2219  4A5E CD D2 49             call    A49D2                   ; read datasector
2220  4A61 EB                   ex      de,hl
2221  4A62 CD D9 F1             call    XF1D9                   ; transfer from DOS memory
2222  4A65 3E 01                ld      a,1
2223  4A67 32 42 F2             ld      (YF242),a               ; flag datasector changed
2224  4A6A C9                   ret
2225  4A6B
2226  4A6B              ;       Subroutine      last partial sector ?
2227  4A6B              ;       Inputs
2228  4A6B              ;       Outputs         ________________________
2229  4A6B
2230  4A6B 21 00 00     A4A6B:  ld      hl,0
2231  4A6E 22 F2 F2             ld      (YF2F2),hl
2232  4A71 2A FA F2             ld      hl,(YF2FA)
2233  4A74 22 F8 F2             ld      (YF2F8),hl
2234  4A77 7C                   ld      a,h
2235  4A78 B5                   or      l
2236  4A79 37                   scf
2237  4A7A C8                   ret     z
2238  4A7B
2239  4A7B              ;       Subroutine      to next sector (only when partical read was done)
2240  4A7B              ;       Inputs
2241  4A7B              ;       Outputs         ________________________
2242  4A7B
2243  4A7B 3A DF F2     A4A7B:  ld      a,(YF2DF)
2244  4A7E B7                   or      a                       ; flag do not increase
2245  4A7F C8                   ret     z                       ; yep, quit
2246  4A80 3A DD F2             ld      a,(YF2DD)
2247  4A83 DD BE 06             cp      (ix+6)                  ; clustermask
2248  4A86 38 1A                jr      c,A4AA2                 ; still sectors left in this cluster, increase relative sector in cluster
2249  4A88 ED 5B EC F2          ld      de,(YF2EC)              ; current cluster of file
2250  4A8C 21 F7 0F             ld      hl,00FF7H
2251  4A8F ED 52                sbc     hl,de
2252  4A91 D8                   ret     c                       ; is the end cluster, quit
2253  4A92 EB                   ex      de,hl
2254  4A93 CD F4 41             call    A41F4                   ; get FAT entry content
2255  4A96 22 EC F2             ld      (YF2EC),hl              ; new current cluster of file
2256  4A99 2A EA F2             ld      hl,(YF2EA)
2257  4A9C 23                   inc     hl
2258  4A9D 22 EA F2             ld      (YF2EA),hl              ; new current relative cluster of file
2259  4AA0 3E FF                ld      a,0FFH                  ; relative sector in cluster 0
2260  4AA2 3C           A4AA2:  inc     a
2261  4AA3 32 DD F2             ld      (YF2DD),a
2262  4AA6 B7                   or      a
2263  4AA7 C9                   ret
2264  4AA8
2265  4AA8              ; finish CON read
2266  4AA8
2267  4AA8 7E           A4AA8:  ld      a,(hl)
2268  4AA9 ED A0                ldi
2269  4AAB FE 0D                cp      00DH
2270  4AAD 20 02                jr      nz,A4AB1
2271  4AAF 36 0A                ld      (hl),00AH
2272  4AB1 FE 0A        A4AB1:  cp      00AH
2273  4AB3 28 15                jr      z,A4ACA
2274  4AB5 78                   ld      a,b
2275  4AB6 B1                   or      c
2276  4AB7 20 EF                jr      nz,A4AA8
2277  4AB9 22 00 F3     A4AB9:  ld      (YF300),hl
2278  4ABC
2279  4ABC              ; finish read record for dos devices
2280  4ABC
2281  4ABC ED 53 E2 F2  A4ABC:  ld      (YF2E2),de              ; update current transferaddress
2282  4AC0 C2 E2 4B             jp      nz,A4BE2
2283  4AC3 FD CB 18 B6          res     6,(iy+24)
2284  4AC7 C3 E2 4B             jp      A4BE2
2285  4ACA
2286  4ACA CD A8 53     A4ACA:  call    A53A8                   ; console output
2287  4ACD 21 00 00             ld      hl,00000H
2288  4AD0 79                   ld      a,c
2289  4AD1 B0                   or      b
2290  4AD2 20 25                jr      nz,A4AF9
2291  4AD4 3C                   inc     a
2292  4AD5 18 E2                jr      A4AB9
2293  4AD7
2294  4AD7              ;       Subroutine      read record for dos devices
2295  4AD7              ;       Inputs
2296  4AD7              ;       Outputs         ________________________
2297  4AD7
2298  4AD7 ED 5B E2 F2  A4AD7:  ld      de,(YF2E2)              ; current transferaddress
2299  4ADB 3C                   inc     a
2300  4ADC 28 14                jr      z,A4AF2                 ; CON, handle
2301  4ADE 3C                   inc     a
2302  4ADF 20 DB                jr      nz,A4ABC                ; PRN, quit
2303  4AE1
2304  4AE1              ; read record AUX
2305  4AE1
2306  4AE1 CD 6E 54     A4AE1:  call    A546E                   ; auxiliary input
2307  4AE4 12                   ld      (de),a
2308  4AE5 13                   inc     de
2309  4AE6 FE 1A                cp      01AH
2310  4AE8 28 D2                jr      z,A4ABC                 ; CTRL-Z,
2311  4AEA 0B                   dec     bc
2312  4AEB 78                   ld      a,b
2313  4AEC B1                   or      c                       ; all bytes done ?
2314  4AED 20 F2                jr      nz,A4AE1                ; nope, next byte
2315  4AEF 3C                   inc     a
2316  4AF0 18 CA                jr      A4ABC
2317  4AF2
2318  4AF2              ; read record CON
2319  4AF2
2320  4AF2 2A 00 F3     A4AF2:  ld      hl,(YF300)
2321  4AF5 7C                   ld      a,h
2322  4AF6 B5                   or      l
2323  4AF7 20 AF                jr      nz,A4AA8
2324  4AF9
2325  4AF9              ; VERSION 1.1 CHANGE
2326  4AF9              ; CHANGED, BUGFIX
2327  4AF9              ; ld hl,128
2328  4AF9
2329  4AF9 21 7F 00     A4AF9:  ld      hl,127
2330  4AFC 3A D9 F4             ld      a,(YCONBF+0)
2331  4AFF BD                   cp      l
2332  4B00 28 03                jr      z,A4B05
2333  4B02 22 D9 F4             ld      (YCONBF+0),hl
2334  4B05 C5           A4B05:  push    bc
2335  4B06 D5                   push    de
2336  4B07 11 D9 F4             ld      de,YCONBF
2337  4B0A CD E0 50             call    A50E0                   ; BDOS 0A (buffered console input)
2338  4B0D D1                   pop     de
2339  4B0E C1                   pop     bc
2340  4B0F 21 DB F4             ld      hl,YCONBF+2
2341  4B12 7E                   ld      a,(hl)
2342  4B13 FE 1A                cp      01AH
2343  4B15 20 91                jr      nz,A4AA8
2344  4B17 12                   ld      (de),a
2345  4B18 13                   inc     de
2346  4B19 3E 0A                ld      a,00AH                  ; LF
2347  4B1B CD A8 53             call    A53A8                   ; console output
2348  4B1E AF                   xor     a
2349  4B1F 67                   ld      h,a
2350  4B20 6F                   ld      l,a
2351  4B21 18 96                jr      A4AB9
2352  4B23
2353  4B23              ;       Subroutine      read record
2354  4B23              ;       Inputs          DEBC = recordnumber, HL = number of records
2355  4B23              ;       Outputs         DEHL = last record done, BC = number of records done
2356  4B23
2357  4B23 CD 7D 48     A4B23:  call    A487D                   ; initialize record info
2358  4B26 FA D7 4A             jp      m,A4AD7                 ; dos device, special action
2359  4B29 FD 6E 10             ld      l,(iy+16)
2360  4B2C FD 66 11             ld      h,(iy+17)
2361  4B2F ED 5B F4 F2          ld      de,(YF2F4+0)
2362  4B33 B7                   or      a
2363  4B34 ED 52                sbc     hl,de
2364  4B36 E5                   push    hl
2365  4B37 FD 6E 12             ld      l,(iy+18)
2366  4B3A FD 66 13             ld      h,(iy+19)
2367  4B3D ED 5B F6 F2          ld      de,(YF2F4+2)
2368  4B41 ED 52                sbc     hl,de
2369  4B43 E1                   pop     hl
2370  4B44 DA 97 4C             jp      c,A4C97                 ; startbyte behind end of file, quit with nothing done
2371  4B47 20 0D                jr      nz,A4B56                ; startbyte at least 65536 bytes from the end of file, go get it
2372  4B49 7C                   ld      a,h
2373  4B4A B5                   or      l
2374  4B4B CA 97 4C             jp      z,A4C97                 ; startbyte is at end of file, quit with nothing done
2375  4B4E E5                   push    hl
2376  4B4F ED 42                sbc     hl,bc                   ; requested number of bytes past file ?
2377  4B51 E1                   pop     hl
2378  4B52 30 02                jr      nc,A4B56                ; nope, go get it
2379  4B54 44                   ld      b,h
2380  4B55 4D                   ld      c,l                     ; only read number of bytes until the end of file
2381  4B56 CD 8E F2     A4B56:  call    XF28E
2382  4B59 CD 53 49             call    A4953                   ; calculate partial sector transfers
2383  4B5C ED 4B EC F2          ld      bc,(YF2EC)              ; relative cluster
2384  4B60 CD 89 49             call    A4989                   ; get absolute cluster
2385  4B63 78                   ld      a,b
2386  4B64 B1                   or      c                       ; found ?
2387  4B65 C2 97 4C             jp      nz,A4C97                ; nope, quit with nothing done
2388  4B68 22 EC F2             ld      (YF2EC),hl              ; current cluster = cluster of startbyte
2389  4B6B ED 53 EA F2          ld      (YF2EA),de              ; current relative cluster = relative cluster of startbyte
2390  4B6F CD 36 4A             call    A4A36                   ; do partical sector read if needed
2391  4B72 2A FC F2             ld      hl,(YF2FC)
2392  4B75 7C                   ld      a,h
2393  4B76 B5                   or      l
2394  4B77 CA DC 4B             jp      z,A4BDC                 ; not any whole sectors to transfer, to partical end
2395  4B7A CD 7B 4A             call    A4A7B                   ; to next sector (only when partical read was done)
2396  4B7D 38 63                jr      c,A4BE2                 ; there is no next,
2397  4B7F 3E 01                ld      a,1
2398  4B81 32 DF F2             ld      (YF2DF),a               ; flag do increase sector
2399  4B84 3A DD F2             ld      a,(YF2DD)               ; current relative sector in cluster
2400  4B87 ED 4B FC F2          ld      bc,(YF2FC)
2401  4B8B 2A EC F2             ld      hl,(YF2EC)              ; current cluster of file
2402  4B8E C5           A4B8E:  push    bc
2403  4B8F CD 48 4E             call    A4E48                   ; calculate sequential sectors
2404  4B92 C5                   push    bc
2405  4B93 F5                   push    af
2406  4B94 47                   ld      b,a
2407  4B95 CD C5 46             call    A46C5                   ; read sectors with DOS error handling
2408  4B98 F1                   pop     af
2409  4B99 4F                   ld      c,a
2410  4B9A 06 00                ld      b,000H                  ; number of sectors read
2411  4B9C 38 23                jr      c,A4BC1                 ; sectors read does not include the sector in the datasector buffer
2412  4B9E 3A 42 F2             ld      a,(YF242)
2413  4BA1 B7                   or      a                       ; datasector buffer changed ?
2414  4BA2 28 1D                jr      z,A4BC1                 ; nope, then no need to transfer the datasector buffer
2415  4BA4 C5                   push    bc
2416  4BA5 DD 4E 02             ld      c,(ix+2)
2417  4BA8 DD 46 03             ld      b,(ix+3)                ; sectorsize
2418  4BAB C5                   push    bc
2419  4BAC E5                   push    hl
2420  4BAD 2A 3F F2             ld      hl,(YF23F)              ; sectornumber of datasector buffer
2421  4BB0 ED 52                sbc     hl,de
2422  4BB2 EB                   ex      de,hl
2423  4BB3 CD 16 49             call    A4916                   ; multiply
2424  4BB6 E1                   pop     hl
2425  4BB7 09                   add     hl,bc
2426  4BB8 C1                   pop     bc
2427  4BB9 EB                   ex      de,hl
2428  4BBA 2A 4F F3             ld      hl,(YF34F)              ; datasector buffer
2429  4BBD CD D9 F1             call    XF1D9                   ; transfer to DOS memory
2430  4BC0 C1                   pop     bc
2431  4BC1 D1           A4BC1:  pop     de
2432  4BC2 E1                   pop     hl
2433  4BC3 B7                   or      a
2434  4BC4 ED 42                sbc     hl,bc                   ; done all whole sectors ?
2435  4BC6 28 14                jr      z,A4BDC                 ; yep, go partial end
2436  4BC8 4D                   ld      c,l
2437  4BC9 44                   ld      b,h
2438  4BCA 21 F7 0F             ld      hl,00FF7H
2439  4BCD ED 52                sbc     hl,de                   ; end cluster ?
2440  4BCF 38 11                jr      c,A4BE2                 ; yep, finish without partial end
2441  4BD1 2A EA F2             ld      hl,(YF2EA)
2442  4BD4 23                   inc     hl
2443  4BD5 22 EA F2             ld      (YF2EA),hl              ; increase current relarive cluster
2444  4BD8 AF                   xor     a                       ; current relative sector in cluster = first sector
2445  4BD9 EB                   ex      de,hl
2446  4BDA 18 B2                jr      A4B8E                   ; again
2447  4BDC
2448  4BDC CD 6B 4A     A4BDC:  call    A4A6B                   ; last partial sector ?
2449  4BDF D4 36 4A             call    nc,A4A36                ; yes, do partical sector read if needed
2450  4BE2 CD 91 F2     A4BE2:  call    XF291
2451  4BE5 2A E2 F2             ld      hl,(YF2E2)              ; current transferaddress (end)
2452  4BE8 ED 5B 3D F2          ld      de,(YF23D)              ; transferaddress (begin)
2453  4BEC B7                   or      a
2454  4BED ED 52                sbc     hl,de
2455  4BEF 4D                   ld      c,l
2456  4BF0 44                   ld      b,h                     ; size of transfer
2457  4BF1 11 80 00             ld      de,00080H
2458  4BF4 3A 06 F3             ld      a,(YF306)
2459  4BF7 B7                   or      a                       ; Random Block
2460  4BF8 20 06                jr      nz,A4C00                ; nope, use 128 bytes recordsize
2461  4BFA FD 5E 0E             ld      e,(iy+14)
2462  4BFD FD 56 0F             ld      d,(iy+15)               ; user recordsize for Random Block
2463  4C00 CD 2F 49     A4C00:  call    A492F                   ; how many records ?
2464  4C03 7C                   ld      a,h
2465  4C04 B5                   or      l                       ; partly records ?
2466  4C05 28 10                jr      z,A4C17                 ; nop,
2467  4C07 03                   inc     bc                      ; records +1
2468  4C08 EB                   ex      de,hl
2469  4C09 ED 52                sbc     hl,de                   ; 'missed' bytes
2470  4C0B ED 5B E2 F2          ld      de,(YF2E2)
2471  4C0F AF           A4C0F:  xor     a
2472  4C10 12                   ld      (de),a
2473  4C11 13                   inc     de
2474  4C12 2B                   dec     hl
2475  4C13 7C                   ld      a,h
2476  4C14 B5                   or      l
2477  4C15 20 F8                jr      nz,A4C0F                ; clear 'missed' bytes
2478  4C17 2A E8 F2     A4C17:  ld      hl,(YF2E8)              ; number of records requested
2479  4C1A ED 42                sbc     hl,bc
2480  4C1C 28 04                jr      z,A4C22                 ; all done,
2481  4C1E 3C                   inc     a
2482  4C1F 32 DE F2             ld      (YF2DE),a               ; error in record operation
2483  4C22 CD 94 F2     A4C22:  call    XF294
2484  4C25 2A EC F2             ld      hl,(YF2EC)
2485  4C28 FD 75 1C             ld      (iy+28),l
2486  4C2B FD 74 1D             ld      (iy+29),h               ; current cluster of file FCB
2487  4C2E 2A EA F2             ld      hl,(YF2EA)
2488  4C31 FD 75 1E             ld      (iy+30),l
2489  4C34 FD 74 1F             ld      (iy+31),h               ; current relative cluster of file FCB
2490  4C37 2A E4 F2     A4C37:  ld      hl,(YF2E4+0)
2491  4C3A ED 5B E6 F2          ld      de,(YF2E4+2)            ; startrecord
2492  4C3E 78                   ld      a,b
2493  4C3F B1                   or      c                       ; done any records ?
2494  4C40 C8                   ret     z                       ; nope, quit
2495  4C41 0B                   dec     bc
2496  4C42 09                   add     hl,bc
2497  4C43 03                   inc     bc
2498  4C44 D0                   ret     nc
2499  4C45 13                   inc     de                      ; return current record
2500  4C46 C9                   ret
2501  4C47
2502  4C47              ;       Subroutine      write record for dos devices
2503  4C47              ;       Inputs
2504  4C47              ;       Outputs         ________________________
2505  4C47
2506  4C47 2A 3D F2     A4C47:  ld      hl,(YF23D)              ; transferaddress
2507  4C4A F6 40                or      040H
2508  4C4C 3C                   inc     a
2509  4C4D 28 24                jr      z,A4C73                 ; CON, handle
2510  4C4F 3C                   inc     a
2511  4C50 28 11                jr      z,A4C63                 ; AUX, handle
2512  4C52 3C                   inc     a
2513  4C53 28 2C        A4C53:  jr      z,A4C81                 ; NUL, handle
2514  4C55
2515  4C55 7E                   ld      a,(hl)
2516  4C56 23                   inc     hl
2517  4C57 FE 1A                cp      01AH
2518  4C59 28 26                jr      z,A4C81
2519  4C5B CD 66 54             call    A5466                   ; printer output
2520  4C5E 0B                   dec     bc
2521  4C5F 78                   ld      a,b
2522  4C60 B1                   or      c
2523  4C61 18 F0                jr      A4C53
2524  4C63
2525  4C63 7E           A4C63:  ld      a,(hl)
2526  4C64 23                   inc     hl
2527  4C65 CD 75 54             call    A5475                   ; auxiliary output
2528  4C68 FE 1A                cp      01AH
2529  4C6A 28 15                jr      z,A4C81
2530  4C6C 0B                   dec     bc
2531  4C6D 78                   ld      a,b
2532  4C6E B1                   or      c
2533  4C6F 20 F2                jr      nz,A4C63
2534  4C71 18 0E                jr      A4C81
2535  4C73
2536  4C73 7E           A4C73:  ld      a,(hl)
2537  4C74 23                   inc     hl
2538  4C75 FE 1A                cp      01AH
2539  4C77 28 08                jr      z,A4C81
2540  4C79 CD A8 53             call    A53A8                   ; console output
2541  4C7C 0B                   dec     bc
2542  4C7D 78                   ld      a,b
2543  4C7E B1                   or      c
2544  4C7F 20 F2                jr      nz,A4C73
2545  4C81 ED 4B E8 F2  A4C81:  ld      bc,(YF2E8)              ; no. of records
2546  4C85 18 B0                jr      A4C37
2547  4C87
2548  4C87 4B           A4C87:  ld      c,e
2549  4C88 42                   ld      b,d                     ; clusters to skip
2550  4C89 CD B1 49             call    A49B1                   ; get next absolute cluster
2551  4C8C 78                   ld      a,b
2552  4C8D B1                   or      c                       ; found ?
2553  4C8E CA 41 4D             jp      z,A4D41                 ; yep,
2554  4C91 CD 12 4F             call    A4F12                   ; allocate cluster chain
2555  4C94 D2 41 4D             jp      nc,A4D41                ; ok, go writing
2556  4C97
2557  4C97 CD 97 F2     A4C97:  call    XF297
2558  4C9A AF                   xor     a
2559  4C9B 4F                   ld      c,a
2560  4C9C 47                   ld      b,a                     ; no records read/write
2561  4C9D 3C                   inc     a
2562  4C9E 32 DE F2             ld      (YF2DE),a               ; error in record operation
2563  4CA1 18 94                jr      A4C37
2564  4CA3
2565  4CA3              ;       Subroutine      write record
2566  4CA3              ;       Inputs          DEBC = recordnumber, HL = number of records
2567  4CA3              ;       Outputs         ________________________
2568  4CA3
2569  4CA3 CD 7D 48     A4CA3:  call    A487D                   ; initialize record info
2570  4CA6 F5                   push    af
2571  4CA7 C5                   push    bc
2572  4CA8 CD 96 54             call    A5496                   ; get time and date (dirformat)
2573  4CAB FD 71 14             ld      (iy+20),c
2574  4CAE FD 70 15             ld      (iy+21),b
2575  4CB1 FD 73 16             ld      (iy+22),e
2576  4CB4 FD 72 17             ld      (iy+23),d
2577  4CB7 C1                   pop     bc
2578  4CB8 F1                   pop     af
2579  4CB9 FA 47 4C             jp      m,A4C47                 ; DOS device, special action
2580  4CBC FD CB 18 B6          res     6,(iy+24)               ; flag FCB changed
2581  4CC0 C5                   push    bc
2582  4CC1 CD 53 49             call    A4953                   ; calculate partical sector transfers
2583  4CC4 C1                   pop     bc
2584  4CC5 2A F4 F2             ld      hl,(YF2F4+0)
2585  4CC8 ED 5B F6 F2          ld      de,(YF2F4+2)            ; startbyte
2586  4CCC 78                   ld      a,b
2587  4CCD B1                   or      c                       ; zero bytes to write (only possible with Random Block) ?
2588  4CCE CA DD 4D             jp      z,A4DDD                 ; yep, filesize adjust action
2589  4CD1 0B                   dec     bc
2590  4CD2 09                   add     hl,bc
2591  4CD3 30 01                jr      nc,A4CD6
2592  4CD5 13                   inc     de                      ; endbyte
2593  4CD6 44           A4CD6:  ld      b,h
2594  4CD7 4D                   ld      c,l
2595  4CD8 EB                   ex      de,hl
2596  4CD9 DD 5E 02             ld      e,(ix+2)
2597  4CDC DD 56 03             ld      d,(ix+3)
2598  4CDF CD 32 49             call    A4932                   ; / sectorsize
2599  4CE2 60                   ld      h,b
2600  4CE3 69                   ld      l,c                     ; relative sector of endbyte
2601  4CE4 DD 46 07             ld      b,(ix+7)                ; clustershift
2602  4CE7 05                   dec     b
2603  4CE8 28 06                jr      z,A4CF0
2604  4CEA CB 3C        A4CEA:  srl     h
2605  4CEC CB 1D                rr      l
2606  4CEE 10 FA                djnz    A4CEA                   ; relative cluster of endbyte
2607  4CF0 E5           A4CF0:  push    hl
2608  4CF1 FD 4E 10             ld      c,(iy+16)
2609  4CF4 FD 46 11             ld      b,(iy+17)
2610  4CF7 FD 6E 12             ld      l,(iy+18)
2611  4CFA FD 66 13             ld      h,(iy+19)               ; filesize
2612  4CFD CD 32 49             call    A4932                   ; / sectorsize
2613  4D00 7C                   ld      a,h
2614  4D01 B5                   or      l                       ; offset in sector
2615  4D02 28 01                jr      z,A4D05
2616  4D04 03                   inc     bc                      ; relative sector
2617  4D05 CD 9A F2     A4D05:  call    XF29A
2618  4D08 ED 43 F0 F2          ld      (YF2F0),bc              ; relative sector behind fileend
2619  4D0C ED 4B EC F2          ld      bc,(YF2EC)              ; relative cluster of startbyte
2620  4D10 CD 89 49             call    A4989                   ; get absolute cluster
2621  4D13 22 EC F2             ld      (YF2EC),hl              ; current cluster = cluster of startbyte
2622  4D16 ED 53 EA F2          ld      (YF2EA),de              ; current relative cluster = relative cluster of startbyte
2623  4D1A E3                   ex      (sp),hl
2624  4D1B B7                   or      a
2625  4D1C ED 52                sbc     hl,de                   ; start and endbyte in same cluster ?
2626  4D1E EB                   ex      de,hl
2627  4D1F E1                   pop     hl
2628  4D20 28 1F                jr      z,A4D41                 ; yep,
2629  4D22 78                   ld      a,b
2630  4D23 B1                   or      c                       ; is cluster of startbyte found ?
2631  4D24 CA 87 4C             jp      z,A4C87                 ; yep, make chain to cluster of endbyte if needed and start writing
2632  4D27 C5                   push    bc
2633  4D28 4B                   ld      c,e
2634  4D29 42                   ld      b,d                     ; clusters to allocate
2635  4D2A CD 12 4F             call    A4F12                   ; allocate cluster chain
2636  4D2D C1                   pop     bc
2637  4D2E DA 97 4C             jp      c,A4C97                 ; failed, quit with nothing done
2638  4D31 ED 5B EA F2          ld      de,(YF2EA)
2639  4D35 13                   inc     de                      ; relative cluster to start
2640  4D36 0B                   dec     bc                      ; clusters to skip
2641  4D37 CD B1 49             call    A49B1                   ; get next absolute cluster
2642  4D3A 22 EC F2             ld      (YF2EC),hl              ; cluster of startbyte
2643  4D3D ED 53 EA F2          ld      (YF2EA),de              ; relative cluster of startbyte
2644  4D41 CD 46 4A     A4D41:  call    A4A46                   ; handle partial sector write
2645  4D44 2A FC F2             ld      hl,(YF2FC)
2646  4D47 7C                   ld      a,h
2647  4D48 B5                   or      l                       ; any complete sectors ?
2648  4D49 28 41                jr      z,A4D8C                 ; nope, goto partial end
2649  4D4B ED 5B EE F2          ld      de,(YF2EE)
2650  4D4F 19                   add     hl,de
2651  4D50 22 EE F2             ld      (YF2EE),hl              ; update relative sector of startbyte
2652  4D53 CD 7B 4A             call    A4A7B                   ; to the next sector (only when partial write was done)
2653  4D56 3E 01                ld      a,1
2654  4D58 32 DF F2             ld      (YF2DF),a               ; flag do increase sector
2655  4D5B 3A DD F2             ld      a,(YF2DD)               ; current relative sector in cluster
2656  4D5E 2A EC F2             ld      hl,(YF2EC)              ; relative cluster
2657  4D61 ED 4B FC F2          ld      bc,(YF2FC)              ; whole sectors
2658  4D65 C5           A4D65:  push    bc
2659  4D66 CD 48 4E             call    A4E48                   ; calculate sequencial sectors
2660  4D69 C5                   push    bc
2661  4D6A F5                   push    af
2662  4D6B 47                   ld      b,a
2663  4D6C 38 05                jr      c,A4D73                 ; sectors writen does not include the sector in the datasector buffer
2664  4D6E 3E FF                ld      a,0FFH
2665  4D70 32 41 F2             ld      (YF241),a               ; invalid datasector buffer
2666  4D73 CD 55 47     A4D73:  call    A4755                   ; write datasectors with DOS error handling
2667  4D76 F1                   pop     af
2668  4D77 D1                   pop     de
2669  4D78 E1                   pop     hl
2670  4D79 4F                   ld      c,a
2671  4D7A AF                   xor     a
2672  4D7B 47                   ld      b,a
2673  4D7C ED 42                sbc     hl,bc                   ; whole sectors left ?
2674  4D7E 28 0C                jr      z,A4D8C                 ; nop, go to partial end
2675  4D80 4D                   ld      c,l
2676  4D81 44                   ld      b,h
2677  4D82 2A EA F2             ld      hl,(YF2EA)
2678  4D85 23                   inc     hl
2679  4D86 22 EA F2             ld      (YF2EA),hl              ; update relative cluster
2680  4D89 EB                   ex      de,hl
2681  4D8A 18 D9                jr      A4D65                   ; again
2682  4D8C
2683  4D8C CD 9D F2     A4D8C:  call    XF29D
2684  4D8F CD 6B 4A             call    A4A6B                   ; last partial sector ?
2685  4D92 D4 46 4A             call    nc,A4A46                ; partial end, handle partial sector write
2686  4D95 2A E2 F2             ld      hl,(YF2E2)              ; current transferaddress
2687  4D98 ED 5B 3D F2          ld      de,(YF23D)              ; transferaddress
2688  4D9C B7                   or      a
2689  4D9D ED 52                sbc     hl,de
2690  4D9F ED 5B F4 F2          ld      de,(YF2F4+0)
2691  4DA3 19                   add     hl,de
2692  4DA4 ED 5B F6 F2          ld      de,(YF2F4+2)
2693  4DA8 30 01                jr      nc,A4DAB
2694  4DAA 13                   inc     de
2695  4DAB 22 F4 F2     A4DAB:  ld      (YF2F4+0),hl
2696  4DAE ED 53 F6 F2          ld      (YF2F4+2),de            ; startbyte = startbyte + transfersize
2697  4DB2 FD 4E 10             ld      c,(iy+16)
2698  4DB5 FD 46 11             ld      b,(iy+17)
2699  4DB8 B7                   or      a
2700  4DB9 ED 42                sbc     hl,bc
2701  4DBB FD 4E 12             ld      c,(iy+18)
2702  4DBE FD 46 13             ld      b,(iy+19)
2703  4DC1 EB                   ex      de,hl
2704  4DC2 ED 42                sbc     hl,bc                   ; has file expanded ?
2705  4DC4 38 10                jr      c,A4DD6                 ; nop,
2706  4DC6 FD E5        A4DC6:  push    iy
2707  4DC8 E1                   pop     hl
2708  4DC9 11 10 00             ld      de,00010H
2709  4DCC 19                   add     hl,de
2710  4DCD EB                   ex      de,hl
2711  4DCE 21 F4 F2             ld      hl,YF2F4                ; filelength = endbyte
2712  4DD1 01 04 00             ld      bc,4
2713  4DD4 ED B0                ldir
2714  4DD6 ED 4B E8 F2  A4DD6:  ld      bc,(YF2E8)              ; no. of records
2715  4DDA C3 22 4C             jp      A4C22
2716  4DDD
2717  4DDD              ; filesize adjust
2718  4DDD
2719  4DDD 7C           A4DDD:  ld      a,h
2720  4DDE B5                   or      l
2721  4DDF B2                   or      d
2722  4DE0 B3                   or      e                       ; startbyte zero ?
2723  4DE1 28 4F                jr      z,A4E32                 ; yep, kill chain and quit
2724  4DE3 01 01 00             ld      bc,1
2725  4DE6 ED 42                sbc     hl,bc
2726  4DE8 EB                   ex      de,hl
2727  4DE9 0B                   dec     bc
2728  4DEA ED 42                sbc     hl,bc
2729  4DEC 42                   ld      b,d
2730  4DED 4B                   ld      c,e                     ; filesize = startbyte-1
2731  4DEE DD 5E 02             ld      e,(ix+2)
2732  4DF1 DD 56 03             ld      d,(ix+3)
2733  4DF4 CD 32 49             call    A4932                   ; / sectorsize
2734  4DF7 DD 7E 07             ld      a,(ix+7)                ; clustershift
2735  4DFA 3D           A4DFA:  dec     a
2736  4DFB 28 06                jr      z,A4E03
2737  4DFD CB 38                srl     b
2738  4DFF CB 19                rr      c
2739  4E01 18 F7                jr      A4DFA
2740  4E03
2741  4E03 CD 89 49     A4E03:  call    A4989                   ; get absolute cluster
2742  4E06 78                   ld      a,b
2743  4E07 B1                   or      c                       ; found ?
2744  4E08 28 1C                jr      z,A4E26                 ; yep, this means chain must be shortend
2745  4E0A CD 12 4F             call    A4F12                   ; allocate cluster chain
2746  4E0D DA 97 4C             jp      c,A4C97                 ; failed, quit with nothing done
2747  4E10 01 00 00     A4E10:  ld      bc,0
2748  4E13 ED 43 E8 F2          ld      (YF2E8),bc              ; number of records = 0
2749  4E17 ED 43 EA F2          ld      (YF2EA),bc              ; current relative cluster = 0
2750  4E1B FD 6E 1A             ld      l,(iy+26)
2751  4E1E FD 66 1B             ld      h,(iy+27)               ; start cluster of file
2752  4E21 22 EC F2             ld      (YF2EC),hl              ; current cluster = start cluster of file
2753  4E24 18 A0                jr      A4DC6
2754  4E26
2755  4E26 01 FF 0F     A4E26:  ld      bc,00FFFH
2756  4E29 CD 9E 4F             call    A4F9E                   ; mark end & release rest chain
2757  4E2C 1B           A4E2C:  dec     de
2758  4E2D
2759  4E2D              ; VERSION 1.1 CHANGE
2760  4E2D              ; CHANGED, BUGFIX
2761  4E2D              ; ld a,0FFH
2762  4E2D
2763  4E2D 3E 01                ld      a,1
2764  4E2F 12                   ld      (de),a                  ; flag FAT buffer changed
2765  4E30 18 DE                jr      A4E10
2766  4E32
2767  4E32 FD 6E 1A     A4E32:  ld      l,(iy+26)
2768  4E35 FD 66 1B             ld      h,(iy+27)
2769  4E38 7C                   ld      a,h
2770  4E39 B5                   or      l                       ; file has start cluster ?
2771  4E3A 28 D4                jr      z,A4E10                 ; nop,
2772  4E3C AF                   xor     a
2773  4E3D FD 77 1A             ld      (iy+26),a
2774  4E40 FD 77 1B             ld      (iy+27),a               ; file has no start cluster (empty file)
2775  4E43 CD 9B 4F             call    A4F9B                   ; release cluster chain
2776  4E46 18 E4                jr      A4E2C                   ; mark FAT buffer changed
2777  4E48
2778  4E48              ;       Subroutine      calculate sequencial sectors
2779  4E48              ;       Inputs
2780  4E48              ;       Outputs         ________________________
2781  4E48
2782  4E48 CD A0 F2     A4E48:  call    XF2A0
2783  4E4B 57                   ld      d,a
2784  4E4C E5                   push    hl
2785  4E4D 04                   inc     b
2786  4E4E 05                   dec     b
2787  4E4F 28 02                jr      z,A4E53
2788  4E51 0E FF                ld      c,0FFH
2789  4E53 59           A4E53:  ld      e,c
2790  4E54 D5                   push    de
2791  4E55 DD 7E 06             ld      a,(ix+6)                ; clustermask
2792  4E58 32 DD F2             ld      (YF2DD),a               ; current relative sector in cluster
2793  4E5B 3C                   inc     a
2794  4E5C 92                   sub     d
2795  4E5D 47                   ld      b,a
2796  4E5E 22 EC F2     A4E5E:  ld      (YF2EC),hl
2797  4E61 E5                   push    hl
2798  4E62 CD F4 41             call    A41F4                   ; get FAT entry content
2799  4E65 D1                   pop     de
2800  4E66 79                   ld      a,c
2801  4E67 90                   sub     b
2802  4E68 4F                   ld      c,a
2803  4E69 28 0D                jr      z,A4E78
2804  4E6B DD 46 06             ld      b,(ix+6)                ; clustermask
2805  4E6E 38 5A                jr      c,A4ECA
2806  4E70 04                   inc     b
2807  4E71 13                   inc     de
2808  4E72 EB                   ex      de,hl
2809  4E73 ED 52                sbc     hl,de
2810  4E75 EB                   ex      de,hl
2811  4E76 28 E6                jr      z,A4E5E
2812  4E78 D1           A4E78:  pop     de
2813  4E79 E3                   ex      (sp),hl
2814  4E7A E5                   push    hl
2815  4E7B D5                   push    de
2816  4E7C 7B                   ld      a,e
2817  4E7D 91                   sub     c
2818  4E7E 5F                   ld      e,a
2819  4E7F 16 00                ld      d,000H
2820  4E81 DD 4E 02             ld      c,(ix+2)
2821  4E84 DD 46 03             ld      b,(ix+3)                ; sectorsize
2822  4E87 CD 16 49             call    A4916                   ; multiply
2823  4E8A F1                   pop     af
2824  4E8B 2A E2 F2             ld      hl,(YF2E2)
2825  4E8E E5                   push    hl
2826  4E8F 09                   add     hl,bc
2827  4E90 22 E2 F2             ld      (YF2E2),hl              ; update current transferaddress
2828  4E93 C1                   pop     bc
2829  4E94 E1                   pop     hl
2830  4E95 C5                   push    bc
2831  4E96 D5                   push    de
2832  4E97 EB                   ex      de,hl
2833  4E98 2A EC F2             ld      hl,(YF2EC)
2834  4E9B ED 52                sbc     hl,de
2835  4E9D ED 4B EA F2          ld      bc,(YF2EA)
2836  4EA1 09                   add     hl,bc
2837  4EA2 22 EA F2             ld      (YF2EA),hl
2838  4EA5 EB                   ex      de,hl
2839  4EA6 CD DB 4E             call    A4EDB                   ; get sectornumber of cluster
2840  4EA9 EB                   ex      de,hl
2841  4EAA C1                   pop     bc
2842  4EAB 3A 41 F2             ld      a,(YF241)
2843  4EAE DD BE 00             cp      (ix+0)                  ; driveid
2844  4EB1 79                   ld      a,c
2845  4EB2 37                   scf
2846  4EB3 20 12                jr      nz,A4EC7
2847  4EB5 2A 3F F2             ld      hl,(YF23F)              ; sectornumber of datasector buffer
2848  4EB8 B7                   or      a
2849  4EB9 ED 52                sbc     hl,de
2850  4EBB 38 0A                jr      c,A4EC7
2851  4EBD 60                   ld      h,b
2852  4EBE 69                   ld      l,c
2853  4EBF 19                   add     hl,de
2854  4EC0 2B                   dec     hl
2855  4EC1 ED 4B 3F F2          ld      bc,(YF23F)              ; sectornumber of datasector buffer
2856  4EC5 ED 42                sbc     hl,bc
2857  4EC7 E1           A4EC7:  pop     hl
2858  4EC8 C1                   pop     bc
2859  4EC9 C9                   ret
2860  4ECA
2861  4ECA 80           A4ECA:  add     a,b
2862  4ECB 32 DD F2             ld      (YF2DD),a               ; current relative sector in cluster
2863  4ECE 0E 00                ld      c,000H
2864  4ED0 18 A6                jr      A4E78
2865  4ED2
2866  4ED2              ;       Subroutine      get decoded characterpair (not needed, uses for secret message)
2867  4ED2              ;       Inputs
2868  4ED2              ;       Outputs         ________________________
2869  4ED2
2870  4ED2 CD FA 41     A4ED2:  call    A41FA
2871  4ED5 7D                   ld      a,l
2872  4ED6 29                   add     hl,hl
2873  4ED7 29                   add     hl,hl                   ; second char in H
2874  4ED8 E6 3F                and     03FH                    ; first char in A
2875  4EDA C9                   ret
2876  4EDB
2877  4EDB              ;       Subroutine      get sectornumber of cluster
2878  4EDB              ;       Inputs          HL = cluster, A = relative sector in cluster
2879  4EDB              ;       Outputs         HL = sectornumber
2880  4EDB
2881  4EDB CD A3 F2     A4EDB:  call    XF2A3
2882  4EDE C5                   push    bc
2883  4EDF DD 46 07             ld      b,(ix+7)                ; clustershift
2884  4EE2 2B                   dec     hl
2885  4EE3 2B                   dec     hl
2886  4EE4 05                   dec     b
2887  4EE5 28 06                jr      z,A4EED
2888  4EE7 CB 25        A4EE7:  sla     l
2889  4EE9 CB 14                rl      h
2890  4EEB 10 FA                djnz    A4EE7
2891  4EED B5           A4EED:  or      l
2892  4EEE 6F                   ld      l,a
2893  4EEF DD 4E 0C             ld      c,(ix+12)
2894  4EF2 DD 46 0D             ld      b,(ix+13)
2895  4EF5 09                   add     hl,bc                   ; + first datasector
2896  4EF6 C1                   pop     bc
2897  4EF7 C9                   ret
2898  4EF8
2899  4EF8              ;       Subroutine      get recordnumber from S2,EX and CR fields
2900  4EF8              ;       Inputs
2901  4EF8              ;       Outputs         ________________________
2902  4EF8
2903  4EF8 D5           A4EF8:  push    de
2904  4EF9 FD E1                pop     iy
2905  4EFB FD 4E 20             ld      c,(iy+32)               ; CR (current record)
2906  4EFE FD 46 0C             ld      b,(iy+12)               ; EX (extent)
2907  4F01 FD 5E 0E             ld      e,(iy+14)               ; S2
2908  4F04 16 00                ld      d,0
2909  4F06 CB 21                sla     c
2910  4F08 CB 3B                srl     e
2911  4F0A CB 18                rr      b
2912  4F0C CB 19                rr      c                       ; debc = recordnumber
2913  4F0E 21 01 00             ld      hl,1                    ; 1 record
2914  4F11 C9                   ret
2915  4F12
2916  4F12              ;       Subroutine      allocate cluster chain
2917  4F12              ;       Inputs
2918  4F12              ;       Outputs         ________________________
2919  4F12
2920  4F12 CD A6 F2     A4F12:  call    XF2A6
2921  4F15 DD 5E 13             ld      e,(ix+19)
2922  4F18 DD 56 14             ld      d,(ix+20)
2923  4F1B EB                   ex      de,hl                   ; pointer to FAT buffer of drive
2924  4F1C 7E                   ld      a,(hl)
2925  4F1D 23                   inc     hl
2926  4F1E 66                   ld      h,(hl)
2927  4F1F 6F                   ld      l,a                     ; pointer to FAT
2928  4F20 E5                   push    hl
2929  4F21 EB                   ex      de,hl
2930  4F22 DD 5E 0E             ld      e,(ix+14)
2931  4F25 DD 56 0F             ld      d,(ix+15)               ; Max cluster
2932  4F28 ED 53 02 F3          ld      (YF302),de              ; store
2933  4F2C E5                   push    hl
2934  4F2D C5           A4F2D:  push    bc                      ; clusters to allocate
2935  4F2E E5                   push    hl                      ; start cluster
2936  4F2F 54                   ld      d,h
2937  4F30 5D                   ld      e,l
2938  4F31 D5           A4F31:  push    de
2939  4F32 EB                   ex      de,hl
2940  4F33 2A 02 F3             ld      hl,(YF302)
2941  4F36 2B                   dec     hl
2942  4F37 B7                   or      a
2943  4F38 ED 52                sbc     hl,de
2944  4F3A EB                   ex      de,hl                   ; last cluster on disk ?
2945  4F3B D1                   pop     de
2946  4F3C 30 10                jr      nc,A4F4E                ; nop, go up
2947  4F3E 7B                   ld      a,e
2948  4F3F B2                   or      d                       ; search below finished ?
2949  4F40 20 14                jr      nz,A4F56                ; nop, go below
2950  4F42 E1                   pop     hl
2951  4F43 E1                   pop     hl
2952  4F44 E1                   pop     hl
2953  4F45 01 FF 0F             ld      bc,00FFFH
2954  4F48 CD 9E 4F             call    A4F9E                   ; mark end & release rest chain
2955  4F4B 37                   scf
2956  4F4C 18 46                jr      A4F94
2957  4F4E
2958  4F4E 23           A4F4E:  inc     hl
2959  4F4F CD 5E 4F             call    A4F5E                   ; try to allocate
2960  4F52 7B                   ld      a,e                     ; nop not free !
2961  4F53 B2                   or      d                       ; search below finished ?
2962  4F54 28 DB                jr      z,A4F31                 ; try again (up)
2963  4F56 1B           A4F56:  dec     de
2964  4F57 EB                   ex      de,hl
2965  4F58 CD 5E 4F             call    A4F5E                   ; try to allocate
2966  4F5B EB                   ex      de,hl                   ; nop not free !
2967  4F5C 18 D3                jr      A4F31                   ; try again
2968  4F5E
2969  4F5E              ;       Subroutine      allocate cluster if free
2970  4F5E              ;       Inputs
2971  4F5E              ;       Outputs         ________________________
2972  4F5E
2973  4F5E E5           A4F5E:  push    hl
2974  4F5F D5                   push    de
2975  4F60 CD F4 41             call    A41F4                   ; cluster free ?
2976  4F63 D1                   pop     de
2977  4F64 E1                   pop     hl
2978  4F65 C0                   ret     nz                      ; nop, no alloc
2979  4F66 C1                   pop     bc
2980  4F67 4D                   ld      c,l
2981  4F68 44                   ld      b,h
2982  4F69 E3                   ex      (sp),hl
2983  4F6A DD 5E 13             ld      e,(ix+19)
2984  4F6D DD 56 14             ld      d,(ix+20)               ; pointer to FAT buffer of drive
2985  4F70 CD 21 42             call    A4221                   ; set FAT entry content
2986  4F73 E1                   pop     hl
2987  4F74 C1                   pop     bc
2988  4F75 0B                   dec     bc
2989  4F76 78                   ld      a,b
2990  4F77 B1                   or      c
2991  4F78 20 B3                jr      nz,A4F2D
2992  4F7A 01 FF 0F             ld      bc,00FFFH               ; chain endmarker
2993  4F7D CD 21 42             call    A4221                   ; set FAT entry content
2994  4F80 1B                   dec     de
2995  4F81 3E 01                ld      a,1
2996  4F83 12                   ld      (de),a                  ; FAT changed
2997  4F84 E1                   pop     hl
2998  4F85 E5                   push    hl
2999  4F86 CD F4 41             call    A41F4                   ; get FAT entry content
3000  4F89 C1                   pop     bc
3001  4F8A 79                   ld      a,c
3002  4F8B B0                   or      b
3003  4F8C 20 06                jr      nz,A4F94
3004  4F8E FD 75 1A             ld      (iy+26),l
3005  4F91 FD 74 1B             ld      (iy+27),h               ; start cluster of file
3006  4F94 EB           A4F94:  ex      de,hl
3007  4F95 C1                   pop     bc
3008  4F96 71                   ld      (hl),c
3009  4F97 23                   inc     hl
3010  4F98 70                   ld      (hl),b
3011  4F99 EB                   ex      de,hl
3012  4F9A C9                   ret
3013  4F9B
3014  4F9B              ;       Subroutine      release cluster chain
3015  4F9B              ;       Inputs
3016  4F9B              ;       Outputs         ________________________
3017  4F9B
3018  4F9B 01 00 00     A4F9B:  ld      bc,0
3019  4F9E
3020  4F9E              ;       Subroutine      set cluster entry and release rest of cluster chain
3021  4F9E              ;       Inputs
3022  4F9E              ;       Outputs         ________________________
3023  4F9E
3024  4F9E CD A9 F2     A4F9E:  call    XF2A9
3025  4FA1 E5                   push    hl
3026  4FA2 CD F4 41             call    A41F4                   ; get FAT entry content
3027  4FA5 E3                   ex      (sp),hl
3028  4FA6 CD 21 42             call    A4221                   ; set FAT entry content
3029  4FA9 E1                   pop     hl
3030  4FAA 7C                   ld      a,h
3031  4FAB B5                   or      l
3032  4FAC C8                   ret     z
3033  4FAD 7C                   ld      a,h
3034  4FAE FE 0F                cp      00FH
3035  4FB0 38 E9                jr      c,A4F9B
3036  4FB2 7D                   ld      a,l
3037  4FB3 FE F8                cp      0F8H
3038  4FB5 38 E4                jr      c,A4F9B                 ; not end of chain, release
3039  4FB7 C9                   ret
3040  4FB8
3041  4FB8              ;       Subroutine      BDOS 11 (search for first)
3042  4FB8              ;       Inputs
3043  4FB8              ;       Outputs         ________________________
3044  4FB8
3045  4FB8 CD A5 42     A4FB8:  call    A42A5                   ; validate FCB, clear S2 and find direntry
3046  4FBB 38 43        A4FBB:  jr      c,A5000                 ; error, quit
3047  4FBD 3A B8 F2             ld      a,(YF2B8)
3048  4FC0 28 02                jr      z,A4FC4                 ; file, save direntry number for search next
3049  4FC2 3E FF                ld      a,0FFH                  ; device, flag search next invalid
3050  4FC4 32 0B F3     A4FC4:  ld      (YF30B),a
3051  4FC7 DD 22 09 F3          ld      (YF309),ix              ; save pointer to DPB
3052  4FCB ED 5B 3D F2          ld      de,(YF23D)              ; transferaddress
3053  4FCF 3A E1 F2             ld      a,(YF2E1)               ; current driveid
3054  4FD2 3C                   inc     a
3055  4FD3 12                   ld      (de),a
3056  4FD4 13                   inc     de
3057  4FD5 7E                   ld      a,(hl)
3058  4FD6 FE 05                cp      005H
3059  4FD8 20 02                jr      nz,A4FDC
3060  4FDA 36 E5                ld      (hl),0E5H
3061  4FDC 01 20 00     A4FDC:  ld      bc,32
3062  4FDF CD D9 F1             call    XF1D9                   ; transfer direntry to DOS memory (?? LDIR is also sufficient)
3063  4FE2 CD 39 44             call    A4439                   ; get max record and extent
3064  4FE5 3A 0C F3             ld      a,(YF30C)
3065  4FE8 B8                   cp      b                       ; orginal FCB EX byte same as max extent ?
3066  4FE9 28 04                jr      z,A4FEF                 ; same, RC = max record
3067  4FEB 30 13                jr      nc,A5000                ; bigger, quit with error
3068  4FED 0E 80                ld      c,080H                  ; smaller, RC = 128 (means extend is full)
3069  4FEF 2A 3D F2     A4FEF:  ld      hl,(YF23D)              ; transferaddress
3070  4FF2 11 0C 00             ld      de,0000CH
3071  4FF5 19                   add     hl,de
3072  4FF6 46                   ld      b,(hl)                  ; MS-DOS fileattribute
3073  4FF7 77                   ld      (hl),a                  ; EX = orginal FCB EX byte (CP/M: requested extent)
3074  4FF8 23                   inc     hl
3075  4FF9 70                   ld      (hl),b                  ; S1 = MS-DOS fileattribute (CP/M: reserved)
3076  4FFA 23                   inc     hl
3077  4FFB 72                   ld      (hl),d                  ; S2 = 0 (CP/M: extent high byte)
3078  4FFC 23                   inc     hl
3079  4FFD 71                   ld      (hl),c                  ; RC = (CP/M: recordcount)
3080  4FFE AF                   xor     a                       ; CP/M direntry 0, no error
3081  4FFF C9                   ret
3082  5000
3083  5000 3E FF        A5000:  ld      a,0FFH
3084  5002 32 0B F3             ld      (YF30B),a               ; search for next invalid
3085  5005 C9                   ret
3086  5006
3087  5006              ;       Subroutine      BDOS 12 (search for next)
3088  5006              ;       Inputs
3089  5006              ;       Outputs         ________________________
3090  5006
3091  5006 CD 0E 44     A5006:  call    A440E                   ; validate FCB drive and filename
3092  5009 38 F5                jr      c,A5000                 ; invalid,
3093  500B 3A 0B F3             ld      a,(YF30B)               ; saved direntrynumber of last search first
3094  500E FE FF                cp      0FFH
3095  5010 28 EE                jr      z,A5000                 ; flag search next invalid, quit with error
3096  5012 32 B8 F2             ld      (YF2B8),a
3097  5015 DD 2A 09 F3          ld      ix,(YF309)              ; saved pointer to DPB
3098  5019 CD BC 42             call    A42BC                   ; find next directoryentry
3099  501C 18 9D                jr      A4FBB                   ; finish
3100  501E
3101  501E              ;       Subroutine      BDOS 23 (compute filesize)
3102  501E              ;       Inputs
3103  501E              ;       Outputs         ________________________
3104  501E
3105  501E CD A5 42     A501E:  call    A42A5                   ; validate FCB, clear S2 and find direntry
3106  5021 3E FF                ld      a,0FFH
3107  5023 D8                   ret     c                       ; error, quit
3108  5024 D5                   push    de
3109  5025 DD E1                pop     ix
3110  5027 FD 7E 1C             ld      a,(iy+28)
3111  502A FD 4E 1D             ld      c,(iy+29)
3112  502D FD 46 1E             ld      b,(iy+30)
3113  5030 FD 5E 1F             ld      e,(iy+31)
3114  5033 87                   add     a,a
3115  5034 CB 11                rl      c
3116  5036 CB 10                rl      b
3117  5038 CB 13                rl      e                       ; convert filesize to random record
3118  503A B7                   or      a                       ; filesize a multiply of 128 ?
3119  503B 28 06                jr      z,A5043
3120  503D 03                   inc     bc
3121  503E 78                   ld      a,b
3122  503F B1                   or      c
3123  5040 20 01                jr      nz,A5043
3124  5042 1C                   inc     e                       ; nope, increase random record
3125  5043 DD 71 21     A5043:  ld      (ix+33),c
3126  5046 DD 70 22             ld      (ix+34),b
3127  5049 DD 73 23             ld      (ix+35),e               ; set R2,R1 and R0
3128  504C AF                   xor     a
3129  504D C9                   ret                             ; quit without error
3130  504E
3131  504E              ;       Subroutine      BDOS 18 (return bitmap of logged-in drives)
3132  504E              ;       Inputs
3133  504E              ;       Outputs         ________________________
3134  504E
3135  504E 3A 47 F3     A504E:  ld      a,(YF347)
3136  5051 47                   ld      b,a
3137  5052 AF                   xor     a
3138  5053 37           A5053:  scf
3139  5054 17                   rla
3140  5055 10 FC                djnz    A5053                   ; all drives all online
3141  5057 C9                   ret
3142  5058
3143  5058              ;       Subroutine      BDOS 1A (set DMA address)
3144  5058              ;       Inputs
3145  5058              ;       Outputs         ________________________
3146  5058
3147  5058 ED 53 3D F2  A5058:  ld      (YF23D),de              ; set transferaddress
3148  505C C9                   ret
3149  505D
3150  505D              ;       Subroutine      BDOS 1B (MSXDOS get allocation)
3151  505D              ;       Inputs
3152  505D              ;       Outputs         ________________________
3153  505D
3154  505D AF           A505D:  xor     a
3155  505E 32 06 F3             ld      (YF306),a               ; no CP/M call
3156  5061 7B                   ld      a,e
3157  5062 CD 27 44             call    A4427                   ; validate fcb driveid
3158  5065 3E FF                ld      a,0FFH
3159  5067 D8                   ret     c                       ; error, quit
3160  5068 CD DB 44             call    A44DB                   ; get latest FAT
3161  506B DD 5E 13             ld      e,(ix+19)
3162  506E DD 56 14             ld      d,(ix+20)
3163  5071 D5                   push    de
3164  5072 FD E1                pop     iy                      ; pointer to FAT buffer of drive
3165  5074 21 02 00             ld      hl,2                    ; start at clusterentry 2
3166  5077 44                   ld      b,h
3167  5078 4C                   ld      c,h                     ; free cluster = 0
3168  5079 DD 5E 0E             ld      e,(ix+14)
3169  507C DD 56 0F             ld      d,(ix+15)
3170  507F 1B                   dec     de                      ; number of clusters on disk
3171  5080 D5                   push    de
3172  5081 D5           A5081:  push    de
3173  5082 E5                   push    hl
3174  5083 CD F4 41             call    A41F4                   ; get FAT entry content
3175  5086 E1                   pop     hl
3176  5087 D1                   pop     de
3177  5088 20 01                jr      nz,A508B
3178  508A 03                   inc     bc                      ; free clusters + 1
3179  508B 23           A508B:  inc     hl
3180  508C 1B                   dec     de
3181  508D 7B                   ld      a,e
3182  508E B2                   or      d
3183  508F 20 F0                jr      nz,A5081                ; next cluster
3184  5091 60                   ld      h,b
3185  5092 69                   ld      l,c                     ; number of free clusters
3186  5093 D1                   pop     de                      ; number of clusters
3187  5094 DD 7E 06             ld      a,(ix+6)
3188  5097 3C                   inc     a                       ; number of sectors per cluster
3189  5098 DD 4E 02             ld      c,(ix+2)
3190  509B DD 46 03             ld      b,(ix+3)                ; sectorsize
3191  509E C9                   ret
3192  509F
3193  509F              ;       Subroutine      BDOS 0D (reset discs)
3194  509F              ;       Inputs
3195  509F              ;       Outputs         ________________________
3196  509F
3197  509F 21 80 00     A509F:  ld      hl,00080H
3198  50A2 22 3D F2             ld      (YF23D),hl              ; default transferaddress
3199  50A5 AF                   xor     a
3200  50A6 32 47 F2             ld      (YF247),a               ; default driveid 0 (A:)
3201  50A9 CD 2D 47             call    A472D                   ; flush datasector buffer
3202  50AC 21 55 F3             ld      hl,YF355
3203  50AF 3A 47 F3             ld      a,(YF347)               ; all drives
3204  50B2 5E           A50B2:  ld      e,(hl)
3205  50B3 23                   inc     hl
3206  50B4 56                   ld      d,(hl)                  ; pointer to DPB
3207  50B5 23                   inc     hl
3208  50B6 E5                   push    hl
3209  50B7 F5                   push    af
3210  50B8 D5                   push    de
3211  50B9 DD E1                pop     ix
3212  50BB CD C4 45             call    A45C4                   ; flush FAT buffer
3213  50BE F1                   pop     af
3214  50BF E1                   pop     hl
3215  50C0 3D                   dec     a
3216  50C1 20 EF                jr      nz,A50B2                ; next drive
3217  50C3 C9                   ret
3218  50C4
3219  50C4              ;       Subroutine      BDOS 25 (return current drive)
3220  50C4              ;       Inputs
3221  50C4              ;       Outputs         ________________________
3222  50C4
3223  50C4 3A 47 F2     A50C4:  ld      a,(YF247)
3224  50C7 C9                   ret
3225  50C8
3226  50C8              ;       Subroutine      BDOS 34 (update random access pointer)
3227  50C8              ;       Inputs
3228  50C8              ;       Outputs         ________________________
3229  50C8
3230  50C8 CD F8 4E     A50C8:  call    A4EF8                   ; get recordnumber from CR,EX and S2 field
3231  50CB FD 75 21             ld      (iy+33),l
3232  50CE FD 74 22             ld      (iy+34),h
3233  50D1 FD 73 23             ld      (iy+35),e
3234  50D4 C9                   ret
3235  50D5
3236  50D5              ;       Subroutine      BDOS 0E (select disc)
3237  50D5              ;       Inputs
3238  50D5              ;       Outputs         ________________________
3239  50D5
3240  50D5 3A 47 F3     A50D5:  ld      a,(YF347)
3241  50D8 BB                   cp      e
3242  50D9 D8                   ret     c
3243  50DA C8                   ret     z
3244  50DB 21 47 F2             ld      hl,YF247
3245  50DE 73                   ld      (hl),e
3246  50DF C9                   ret
3247  50E0
3248  50E0              ;       Subroutine      BDOS 0A (buffered console input)
3249  50E0              ;       Inputs
3250  50E0              ;       Outputs         ________________________
3251  50E0
3252  50E0 D5           A50E0:  push    de
3253  50E1 3A 37 F2             ld      a,(YF237)
3254  50E4 32 38 F2             ld      (YF238),a               ; save current console columnpos to record start of inputline
3255  50E7 AF                   xor     a
3256  50E8 32 39 F2             ld      (YF239),a               ; not in insertmode
3257  50EB 62                   ld      h,d
3258  50EC 6B                   ld      l,e
3259  50ED 47                   ld      b,a
3260  50EE 4E                   ld      c,(hl)                  ; size of buffer
3261  50EF 23                   inc     hl
3262  50F0 57                   ld      d,a
3263  50F1 5E                   ld      e,(hl)                  ; length of line already in buffer
3264  50F2 23                   inc     hl
3265  50F3 DD 21 59 F4          ld      ix,YCONTP
3266  50F7 7B                   ld      a,e
3267  50F8 B9                   cp      c                       ; is lengthbyte valid ?
3268  50F9
3269  50F9              ; VERSION 1.1 CHANGE
3270  50F9              ; CHANGED, BUGFIX
3271  50F9              ; jr nc,A5103
3272  50F9
3273  50F9 30 06                jr      nc,A5101                ; equal, use the line in buffer as basis otherwise use empty line as basis
3274  50FB E5                   push    hl                      ; length smaller than size of buffer
3275  50FC 19                   add     hl,de
3276  50FD 7E                   ld      a,(hl)
3277  50FE E1                   pop     hl
3278  50FF FE 0D                cp      00DH                    ; then line must be terminated by a CR
3279  5101 28 01        A5101:  jr      z,A5104                 ; it is, use the line in buffer as basis
3280  5103 5A           A5103:  ld      e,d                     ; use empty line as basis
3281  5104
3282  5104              ; linputinput headloop, also lineinput CTRL-F
3283  5104
3284  5104 CD AC F2     A5104:  call    XF2AC                   ; hook
3285  5107 CD 4E 54             call    A544E                   ; BDOS 8 (direct input)
3286  510A E5           A510A:  push    hl
3287  510B C5                   push    bc
3288  510C 21 74 53             ld      hl,T5374
3289  510F 01 11 00             ld      bc,NKEYNT               ; number of keyentries
3290  5112 ED B1                cpir
3291  5114 09                   add     hl,bc
3292  5115 09                   add     hl,bc
3293  5116 09                   add     hl,bc
3294  5117 4E                   ld      c,(hl)
3295  5118 23                   inc     hl
3296  5119 66                   ld      h,(hl)
3297  511A 69                   ld      l,c
3298  511B C1                   pop     bc
3299  511C E3                   ex      (sp),hl
3300  511D C9                   ret
3301  511E
3302  511E              ; lineinput CTRL-A, MSX graphic header
3303  511E
3304  511E CD 4E 54     A511E:  call    A544E                   ; BDOS 8 (direct input)
3305  5121 FE 40                cp      040H
3306  5123 38 E5                jr      c,A510A
3307  5125 FE 60                cp      060H
3308  5127 30 E1                jr      nc,A510A
3309  5129 F5                   push    af
3310  512A 78                   ld      a,b
3311  512B 3C                   inc     a
3312  512C B9                   cp      c
3313  512D 30 2F                jr      nc,A515E                ; beep
3314  512F 3E 01                ld      a,1
3315  5131 DD 77 00             ld      (ix+0),a
3316  5134 DD 23                inc     ix
3317  5136 04                   inc     b
3318  5137 CD 5D 53             call    A535D
3319  513A F1                   pop     af
3320  513B
3321  513B
3322  513B              ; lineinput, normal key action
3323  513B
3324  513B F5           A513B:  push    af
3325  513C 78                   ld      a,b
3326  513D B9                   cp      c
3327  513E 30 1E                jr      nc,A515E                ; beep
3328  5140 F1                   pop     af
3329  5141 DD 77 00             ld      (ix+0),a
3330  5144 DD 23                inc     ix
3331  5146 04                   inc     b
3332  5147 CD 5D 53             call    A535D
3333  514A 3A 39 F2             ld      a,(YF239)
3334  514D B7                   or      a                       ; insertmode ?
3335  514E 20 B4                jr      nz,A5104                ; yep,
3336  5150 14                   inc     d
3337  5151 7B                   ld      a,e
3338  5152 BA                   cp      d
3339  5153 38 AF                jr      c,A5104
3340  5155 7E                   ld      a,(hl)
3341  5156 3D                   dec     a
3342  5157 23                   inc     hl
3343  5158 20 AA                jr      nz,A5104
3344  515A 14                   inc     d
3345  515B 23                   inc     hl
3346  515C 18 A6                jr      A5104
3347  515E
3348  515E F1           A515E:  pop     af
3349  515F 3E 07                ld      a,007H                  ; bell
3350  5161 CD A8 53             call    A53A8                   ; console output
3351  5164 18 9E                jr      A5104
3352  5166
3353  5166              ; lineinput UP key, ESC key, CTRL-U (VOID)
3354  5166
3355  5166 D1           A5166:  pop     de
3356  5167 3A 38 F2             ld      a,(YF238)
3357  516A 47                   ld      b,a
3358  516B 3A 37 F2             ld      a,(YF237)
3359  516E 90                   sub     b                       ; length of the inputline
3360  516F 28 06                jr      z,A5177                 ; empty inputline, restart line input
3361  5171 47                   ld      b,a
3362  5172 CD 4F 53     A5172:  call    A534F
3363  5175 10 FB                djnz    A5172
3364  5177 C3 E0 50     A5177:  jp      A50E0                   ; restart lineinput
3365  517A
3366  517A              ; lineinput CTRL-J
3367  517A
3368  517A 78           A517A:  ld      a,b
3369  517B 32 3A F2             ld      (YF23A),a               ; store current linelength (for secret message)
3370  517E CD 83 51             call    A5183                   ; newline
3371  5181 18 81        A5181:  jr      A5104
3372  5183
3373  5183 3E 0D        A5183:  ld      a,00DH
3374  5185 CD A8 53             call    A53A8                   ; console output
3375  5188 3E 0A                ld      a,00AH
3376  518A C3 A8 53             jp      A53A8                   ; console output
3377  518D
3378  518D              ; lineinput CR key
3379  518D
3380  518D D1           A518D:  pop     de
3381  518E CD A8 53     A518E:  call    A53A8                   ; console output
3382  5191 D5                   push    de
3383  5192 13                   inc     de
3384  5193 78                   ld      a,b
3385  5194 12                   ld      (de),a
3386  5195 B9                   cp      c
3387  5196 F5                   push    af
3388  5197 13                   inc     de
3389  5198 48                   ld      c,b
3390  5199 AF                   xor     a
3391  519A 47                   ld      b,a
3392  519B B1                   or      c
3393  519C 28 05                jr      z,A51A3
3394  519E 21 59 F4             ld      hl,YCONTP
3395  51A1 ED B0                ldir
3396  51A3 F1           A51A3:  pop     af
3397  51A4 28 03                jr      z,A51A9
3398  51A6 3E 0D                ld      a,00DH
3399  51A8 12                   ld      (de),a
3400  51A9 D1           A51A9:  pop     de
3401  51AA C9                   ret
3402  51AB
3403  51AB              ; lineinput LEFT key, BS key (BS)
3404  51AB
3405  51AB 3A 3A F2     A51AB:  ld      a,(YF23A)
3406  51AE A0                   and     b
3407  51AF FE 7F                cp      07FH
3408  51B1 CA 44 52             jp      z,A5244                 ; secret programmers message
3409  51B4 04                   inc     b
3410  51B5 05                   dec     b
3411  51B6 28 24                jr      z,A51DC
3412  51B8 05                   dec     b
3413  51B9 DD 2B                dec     ix
3414  51BB CD 4F 53             call    A534F
3415  51BE 04                   inc     b
3416  51BF 05                   dec     b
3417  51C0 28 0C                jr      z,A51CE
3418  51C2 05                   dec     b
3419  51C3 DD 2B                dec     ix
3420  51C5 DD 7E 00             ld      a,(ix+0)
3421  51C8 3D                   dec     a
3422  51C9 28 11                jr      z,A51DC
3423  51CB 04                   inc     b
3424  51CC DD 23                inc     ix
3425  51CE DD 7E 00     A51CE:  ld      a,(ix+0)
3426  51D1 FE 20                cp      020H
3427  51D3 30 07                jr      nc,A51DC
3428  51D5 FE 09                cp      009H
3429  51D7 28 22                jr      z,A51FB
3430  51D9 CD 4F 53             call    A534F
3431  51DC 3A 39 F2     A51DC:  ld      a,(YF239)
3432  51DF B7                   or      a                       ; insertmode ?
3433  51E0 20 9F                jr      nz,A5181                ; yep,
3434  51E2 14                   inc     d
3435  51E3 15                   dec     d
3436  51E4 28 9B                jr      z,A5181
3437  51E6 15                   dec     d
3438  51E7 7A                   ld      a,d
3439  51E8 BB                   cp      e
3440  51E9 30 96                jr      nc,A5181
3441  51EB 2B                   dec     hl
3442  51EC 7A                   ld      a,d
3443  51ED FE 01                cp      001H
3444  51EF 38 90                jr      c,A5181
3445  51F1 2B                   dec     hl
3446  51F2 7E                   ld      a,(hl)
3447  51F3 3D                   dec     a
3448  51F4 23                   inc     hl
3449  51F5 20 8A                jr      nz,A5181
3450  51F7 15                   dec     d
3451  51F8 2B                   dec     hl
3452  51F9 18 86                jr      A5181
3453  51FB
3454  51FB E5           A51FB:  push    hl
3455  51FC C5                   push    bc
3456  51FD 3A 38 F2             ld      a,(YF238)
3457  5200 4F                   ld      c,a                     ; start of the inputline
3458  5201 04                   inc     b
3459  5202 05                   dec     b
3460  5203 28 15                jr      z,A521A
3461  5205 21 59 F4             ld      hl,YCONTP
3462  5208 7E           A5208:  ld      a,(hl)
3463  5209 23                   inc     hl
3464  520A FE 01                cp      001H
3465  520C 28 0A                jr      z,A5218
3466  520E 0C                   inc     c
3467  520F FE 20                cp      020H
3468  5211 30 05                jr      nc,A5218
3469  5213 FE 09                cp      009H
3470  5215 28 13                jr      z,A522A
3471  5217 0C                   inc     c
3472  5218 10 EE        A5218:  djnz    A5208
3473  521A 3A 37 F2     A521A:  ld      a,(YF237)               ; current console columnpos
3474  521D 91                   sub     c
3475  521E 28 06                jr      z,A5226
3476  5220 47                   ld      b,a
3477  5221 CD 4F 53     A5221:  call    A534F
3478  5224 10 FB                djnz    A5221
3479  5226 C1           A5226:  pop     bc
3480  5227 E1                   pop     hl
3481  5228 18 B2                jr      A51DC
3482  522A
3483  522A 79           A522A:  ld      a,c
3484  522B C6 07                add     a,007H
3485  522D E6 F8                and     0F8H
3486  522F 4F                   ld      c,a
3487  5230 18 E6                jr      A5218
3488  5232
3489  5232              ; lineinput INS key (INSERT)
3490  5232
3491  5232 3A 39 F2     A5232:  ld      a,(YF239)
3492  5235 EE 01                xor     001H
3493  5237 18 05                jr      A523E                   ; toggle insertmode
3494  5239
3495  5239              ; unused code
3496  5239
3497  5239 AF                   xor     a
3498  523A 18 02                jr      A523E
3499  523C
3500  523C              ; unused code
3501  523C
3502  523C 3E 01                ld      a,001H
3503  523E
3504  523E 32 39 F2     A523E:  ld      (YF239),a
3505  5241 C3 04 51             jp      A5104
3506  5244
3507  5244              ;       Subroutine      display message of programmer (not needed)
3508  5244              ;       Inputs
3509  5244              ;       Outputs
3510  5244              ;       Remark          activated by:
3511  5244              ;                       input 127 or 255 chars, press CTRL-J, press BS or LEFT
3512  5244
3513  5244 AF           A5244:  xor     a
3514  5245 32 3A F2             ld      (YF23A),a
3515  5248 C5                   push    bc
3516  5249 06 10                ld      b,16
3517  524B 11 7D 54             ld      de,T547D
3518  524E 21 00 00             ld      hl,0
3519  5251 E5           A5251:  push    hl
3520  5252 CD D2 4E             call    A4ED2                   ; get decoded characterpair
3521  5255 C6 20                add     a,020H
3522  5257 CD A8 53             call    A53A8                   ; console output
3523  525A 7C                   ld      a,h
3524  525B C6 20                add     a,020H
3525  525D CD A8 53             call    A53A8                   ; console output
3526  5260 E1                   pop     hl
3527  5261 23                   inc     hl
3528  5262 10 ED                djnz    A5251
3529  5264 C1                   pop     bc
3530  5265
3531  5265              ; lineinput HOME key (NEWLINE)
3532  5265
3533  5265 3E 40        A5265:  ld      a,040H
3534  5267 D1                   pop     de
3535  5268 CD 8E 51             call    A518E
3536  526B CD 83 51             call    A5183                   ; newline
3537  526E 3A 38 F2             ld      a,(YF238)
3538  5271 B7                   or      a                       ; start of the inputline at the begin of a line ?
3539  5272 CA E0 50             jp      z,A50E0                 ; yep, restart lineinput routine
3540  5275 47                   ld      b,a
3541  5276 3E 20                ld      a," "
3542  5278 CD A8 53     A5278:  call    A53A8                   ; console output
3543  527B 10 FB                djnz    A5278
3544  527D C3 E0 50             jp      A50E0                   ; restart lineinput routine
3545  5280
3546  5280              ; lineinput DOWN key (COPYALL)
3547  5280
3548  5280 3E FF        A5280:  ld      a,0FFH
3549  5282 18 31                jr      A52B5
3550  5284
3551  5284              ; lineinput CTRL-L (SKIPUP)
3552  5284
3553  5284 CD E3 52     A5284:  call    A52E3
3554  5287 DA 04 51             jp      c,A5104
3555  528A C5                   push    bc
3556  528B 4F                   ld      c,a
3557  528C 06 00                ld      b,000H
3558  528E 09                   add     hl,bc
3559  528F C1                   pop     bc
3560  5290 82                   add     a,d
3561  5291 57                   ld      d,a
3562  5292 C3 04 51             jp      A5104
3563  5295
3564  5295              ; lineinput SELECT key (COPYUP)
3565  5295
3566  5295 CD E3 52     A5295:  call    A52E3
3567  5298 DA 04 51             jp      c,A5104
3568  529B 18 18                jr      A52B5
3569  529D
3570  529D              ; lineinput DEL key (SKIP1)
3571  529D
3572  529D 7A           A529D:  ld      a,d
3573  529E BB                   cp      e
3574  529F D2 04 51             jp      nc,A5104
3575  52A2 14                   inc     d
3576  52A3 7E                   ld      a,(hl)
3577  52A4 3D                   dec     a
3578  52A5 23                   inc     hl
3579  52A6 C2 04 51             jp      nz,A5104
3580  52A9 14                   inc     d
3581  52AA 23                   inc     hl
3582  52AB C3 04 51             jp      A5104
3583  52AE
3584  52AE              ; lineinput RIGHT key (COPY1)
3585  52AE
3586  52AE 7E           A52AE:  ld      a,(hl)
3587  52AF 3D                   dec     a
3588  52B0 3E 01                ld      a,001H
3589  52B2 20 01                jr      nz,A52B5
3590  52B4 3C                   inc     a
3591  52B5 F5           A52B5:  push    af
3592  52B6 AF                   xor     a
3593  52B7 32 39 F2             ld      (YF239),a               ; insertmode off
3594  52BA 78                   ld      a,b
3595  52BB B9                   cp      c
3596  52BC 30 21                jr      nc,A52DF
3597  52BE 7A                   ld      a,d
3598  52BF BB                   cp      e
3599  52C0 30 1D                jr      nc,A52DF
3600  52C2 7E                   ld      a,(hl)
3601  52C3 FE 01                cp      001H
3602  52C5 20 06                jr      nz,A52CD
3603  52C7 78                   ld      a,b
3604  52C8 3C                   inc     a
3605  52C9 B9                   cp      c
3606  52CA 30 13                jr      nc,A52DF
3607  52CC 7E                   ld      a,(hl)
3608  52CD 23           A52CD:  inc     hl
3609  52CE DD 77 00             ld      (ix+0),a
3610  52D1 DD 23                inc     ix
3611  52D3 CD 5D 53             call    A535D
3612  52D6 04                   inc     b
3613  52D7 14                   inc     d
3614  52D8 F1                   pop     af
3615  52D9 3D                   dec     a
3616  52DA 20 D9                jr      nz,A52B5
3617  52DC C3 04 51             jp      A5104
3618  52DF
3619  52DF F1           A52DF:  pop     af
3620  52E0 C3 04 51             jp      A5104
3621  52E3
3622  52E3 CD 4E 54     A52E3:  call    A544E                   ; BDOS 8 (direct input)
3623  52E6 FE 01                cp      001H
3624  52E8 20 35                jr      nz,A531F
3625  52EA CD 4E 54             call    A544E                   ; BDOS 8 (direct input)
3626  52ED FE 40                cp      040H
3627  52EF 38 2E                jr      c,A531F
3628  52F1 FE 60                cp      060H
3629  52F3 30 2A                jr      nc,A531F
3630  52F5 E5                   push    hl
3631  52F6 D5                   push    de
3632  52F7 C5                   push    bc
3633  52F8 FD 21 00 00          ld      iy,00000H
3634  52FC 37           A52FC:  scf
3635  52FD F5                   push    af
3636  52FE 3E 01                ld      a,001H
3637  5300 CD 1F 53             call    A531F
3638  5303 38 15                jr      c,A531A
3639  5305 4F                   ld      c,a
3640  5306 06 00                ld      b,000H
3641  5308 09                   add     hl,bc
3642  5309 82                   add     a,d
3643  530A 57                   ld      d,a
3644  530B FD E5                push    iy
3645  530D F1                   pop     af
3646  530E 81                   add     a,c
3647  530F F5                   push    af
3648  5310 FD E1                pop     iy
3649  5312 23                   inc     hl
3650  5313 F1                   pop     af
3651  5314 BE                   cp      (hl)
3652  5315 2B                   dec     hl
3653  5316 20 E4                jr      nz,A52FC
3654  5318 FD E5                push    iy
3655  531A F1           A531A:  pop     af
3656  531B C1                   pop     bc
3657  531C D1                   pop     de
3658  531D E1                   pop     hl
3659  531E C9                   ret
3660  531F
3661  531F C5           A531F:  push    bc
3662  5320 F5                   push    af
3663  5321 7B                   ld      a,e
3664  5322 92                   sub     d
3665  5323 38 26                jr      c,A534B
3666  5325 28 24                jr      z,A534B
3667  5327 3D                   dec     a
3668  5328 28 21                jr      z,A534B
3669  532A 4F                   ld      c,a
3670  532B 06 00                ld      b,000H
3671  532D F1                   pop     af
3672  532E E5                   push    hl
3673  532F F5                   push    af
3674  5330 7E                   ld      a,(hl)
3675  5331 3D                   dec     a
3676  5332 20 02                jr      nz,A5336
3677  5334 23                   inc     hl
3678  5335 0D                   dec     c
3679  5336 F1           A5336:  pop     af
3680  5337 0C                   inc     c
3681  5338 0D                   dec     c
3682  5339 20 04                jr      nz,A533F
3683  533B E1                   pop     hl
3684  533C C1                   pop     bc
3685  533D 37                   scf
3686  533E C9                   ret
3687  533F
3688  533F 23           A533F:  inc     hl
3689  5340 ED B1                cpir
3690  5342 E1                   pop     hl
3691  5343 20 07                jr      nz,A534C
3692  5345 7B                   ld      a,e
3693  5346 92                   sub     d
3694  5347 3D                   dec     a
3695  5348 91                   sub     c
3696  5349 C1                   pop     bc
3697  534A C9                   ret
3698  534B
3699  534B F1           A534B:  pop     af
3700  534C C1           A534C:  pop     bc
3701  534D 37                   scf
3702  534E C9                   ret
3703  534F
3704  534F 3E 08        A534F:  ld      a,008H
3705  5351 CD A8 53             call    A53A8                   ; console output
3706  5354 3E 20                ld      a,020H
3707  5356 CD A8 53             call    A53A8                   ; console output
3708  5359 3E 08                ld      a,008H
3709  535B 18 4B                jr      A53A8                   ; console output
3710  535D
3711  535D FE 20        A535D:  cp      020H
3712  535F 30 47                jr      nc,A53A8                ; console output
3713  5361 FE 09                cp      009H
3714  5363 28 43                jr      z,A53A8                 ; console output
3715  5365 FE 01                cp      001H
3716  5367 28 3F                jr      z,A53A8                 ; console output
3717  5369 F5                   push    af
3718  536A 3E 5E                ld      a,"^"
3719  536C CD A8 53             call    A53A8                   ; console output
3720  536F F1                   pop     af
3721  5370 F6 40                or      040H
3722  5372 18 34                jr      A53A8                   ; console output
3723  5374
3724  5374              ; keytable lineinput
3725  5374              ; first table contains all keycodes, code 8 at the end is a fake one for 'other key', because it is already in the table
3726  5374              ; second table contains all serviceroutines, but in reserve order (so last one belongs to the first keycode)
3727  5374
3728  5374 06 7F 08 0D  T5374:  defb    006H,07FH,008H,00DH,00AH,015H,00BH,00CH
3728  5378 0A 15 0B 0C
3729  537C 1B 12 18 1C          defb    01BH,012H,018H,01CH,01DH,01EH,01FH,001H
3729  5380 1D 1E 1F 01
3730  5384 08                   defb    008H
3731  5385
3732  5385 3B 51                defw    A513B
3733  5387 1E 51 80 52          defw    A511E,A5280,A5166,A51AB,A52AE,A5295,A5232,A5166
3733  538B 66 51 AB 51
3733  538F AE 52 95 52
3733  5393 32 52 66 51
3734  5397 84 52 65 52          defw    A5284,A5265,A5166,A517A,A518D,A51AB,A529D,A5104
3734  539B 66 51 7A 51
3734  539F 8D 51 AB 51
3734  53A3 9D 52 04 51
3735  53A7
3736  53A7              NKEYNT  equ     ($-T5374)/3
3737  53A7
3738  53A7
3739  53A7              ;       Subroutine      BDOS 02 (console output)
3740  53A7              ;       Inputs
3741  53A7              ;       Outputs         ________________________
3742  53A7
3743  53A7 7B           A53A7:  ld      a,e
3744  53A8 CD AF F2     A53A8:  call    XF2AF
3745  53AB FE 0B                cp      00BH
3746  53AD 28 39                jr      z,A53E8
3747  53AF FE 0C                cp      00CH
3748  53B1 28 35                jr      z,A53E8
3749  53B3 FE 1C                cp      01CH
3750  53B5 28 1E                jr      z,A53D5
3751  53B7 FE 1D                cp      01DH
3752  53B9 28 35                jr      z,A53F0
3753  53BB FE 0D                cp      00DH
3754  53BD 28 29                jr      z,A53E8
3755  53BF FE 08                cp      008H
3756  53C1 28 2D                jr      z,A53F0
3757  53C3 FE 09                cp      009H
3758  53C5 28 31                jr      z,A53F8
3759  53C7 FE 7F                cp      07FH
3760  53C9 28 25                jr      z,A53F0
3761  53CB FE 20                cp      020H
3762  53CD 38 06                jr      c,A53D5
3763  53CF E5                   push    hl
3764  53D0 21 37 F2             ld      hl,YF237
3765  53D3 34                   inc     (hl)                    ; increase console columnpos
3766  53D4 E1                   pop     hl
3767  53D5 C5           A53D5:  push    bc
3768  53D6 47                   ld      b,a
3769  53D7 CD 8F 40             call    A408F                   ; output to screen
3770  53DA 00                   nop
3771  53DB CD 12 54             call    A5412
3772  53DE 3A 3B F2             ld      a,(YF23B)
3773  53E1 B7                   or      a                       ; console output also to printer ?
3774  53E2 78                   ld      a,b
3775  53E3 C1                   pop     bc
3776  53E4 C8                   ret     z                       ; nope, quit
3777  53E5 C3 9B 40             jp      A409B                   ; output to printer
3778  53E8
3779  53E8 F5           A53E8:  push    af
3780  53E9 AF                   xor     a
3781  53EA 32 37 F2             ld      (YF237),a               ; console columpos
3782  53ED F1                   pop     af
3783  53EE 18 E5                jr      A53D5
3784  53F0
3785  53F0 E5           A53F0:  push    hl
3786  53F1 21 37 F2             ld      hl,YF237
3787  53F4 35                   dec     (hl)                    ; decrease console columnpos
3788  53F5 E1                   pop     hl
3789  53F6 18 DD                jr      A53D5
3790  53F8
3791  53F8 3E 20        A53F8:  ld      a," "
3792  53FA CD A8 53             call    A53A8                   ; console output
3793  53FD 3A 37 F2             ld      a,(YF237)
3794  5400 E6 07                and     007H
3795  5402 20 F4                jr      nz,A53F8                ; to the next console tabposition
3796  5404 C9                   ret
3797  5405
3798  5405 FE 10        A5405:  cp      010H                    ; CTRL-P ?
3799  5407 28 14                jr      z,A541D                 ; yep, handle it
3800  5409 FE 0E                cp      00EH                    ; CTRL-N ?
3801  540B 28 10                jr      z,A541D                 ; yep, handle it
3802  540D FE 03                cp      003H                    ; CTRL-C ?
3803  540F 28 0C                jr      z,A541D                 ; yep, handle it
3804  5411 C9                   ret                             ; nope, quit
3805  5412
3806  5412 CD 34 40     A5412:  call    A4034                   ; check if keyboardinput available
3807  5415 C8                   ret     z                       ; nope, quit
3808  5416 FE 13                cp      013H                    ; CTRL-S ?
3809  5418 20 EB                jr      nz,A5405                ; nope, check other specials
3810  541A CD 78 40             call    A4078                   ; get keyboardinput (the CTRL-S)
3811  541D                                                      ; next wait for other consoleinput
3812  541D CD 78 40     A541D:  call    A4078                   ; get keyboardinput
3813  5420 FE 10                cp      010H
3814  5422 28 0D                jr      z,A5431                 ; CTRL-P, enable printer output
3815  5424 FE 0E                cp      00EH
3816  5426 28 0F                jr      z,A5437                 ; CTRL-N, disable printer output
3817  5428 FE 03                cp      003H                    ; CTRL-C ?
3818  542A C0                   ret     nz                      ; nope, quit
3819  542B 2A 25 F3             ld      hl,(YF325)
3820  542E C3 E8 F1             jp      XF1E8                   ; start abort handler in DOS memory
3821  5431
3822  5431 3E 01        A5431:  ld      a,1
3823  5433 32 3B F2             ld      (YF23B),a
3824  5436 C9                   ret
3825  5437
3826  5437 AF           A5437:  xor     a
3827  5438 32 3B F2             ld      (YF23B),a
3828  543B C9                   ret
3829  543C
3830  543C              ;       Subroutine      BDOS 0B (console status)
3831  543C              ;       Inputs
3832  543C              ;       Outputs         ________________________
3833  543C
3834  543C CD 12 54     A543C:  call    A5412
3835  543F 3E 00                ld      a,000H
3836  5441 C8                   ret     z
3837  5442 F6 FF                or      0FFH
3838  5444 C9                   ret
3839  5445
3840  5445              ;       Subroutine      BDOS 01 (console input)
3841  5445              ;       Inputs
3842  5445              ;       Outputs         ________________________
3843  5445
3844  5445 CD 4E 54     A5445:  call    A544E                   ; BDOS 8 (direct input)
3845  5448 F5                   push    af
3846  5449 CD A8 53             call    A53A8                   ; console output
3847  544C F1                   pop     af
3848  544D C9                   ret
3849  544E
3850  544E              ;       Subroutine      BDOS 08 (direct input)
3851  544E              ;       Inputs
3852  544E              ;       Outputs         ________________________
3853  544E
3854  544E CD 1D 54     A544E:  call    A541D
3855  5451 28 FB                jr      z,A544E
3856  5453 C9                   ret
3857  5454
3858  5454              ;       Subroutine      BDOS 06 (direct console i/o)
3859  5454              ;       Inputs          A=0FFH for console input, A<>0FFH for console output
3860  5454              ;       Outputs         A=input (console input)
3861  5454
3862  5454 7B           A5454:  ld      a,e
3863  5455 FE FF                cp      0FFH                    ; console input ?
3864  5457 C2 8F 40             jp      nz,A408F                ; console output, output to screen and quit
3865  545A CD 34 40             call    A4034                   ; check if keyboardinput available
3866  545D C2 78 40             jp      nz,A4078                ; yep, get keyboardinput and quit
3867  5460 AF                   xor     a
3868  5461 C9                   ret
3869  5462
3870  5462              ;       Subroutine      BDOS 07 (MSXDOS direct input)
3871  5462              ;       Inputs
3872  5462              ;       Outputs         ________________________
3873  5462
3874  5462 C3 78 40     A5462:  jp      A4078                   ; get keyboardinput
3875  5465
3876  5465              ;       Subroutine      BDOS 05 (printer output)
3877  5465              ;       Inputs
3878  5465              ;       Outputs         ________________________
3879  5465
3880  5465 7B           A5465:  ld      a,e
3881  5466 F5           A5466:  push    af
3882  5467 CD 12 54             call    A5412
3883  546A F1                   pop     af
3884  546B C3 9B 40             jp      A409B                   ; output to printer
3885  546E
3886  546E              ;       Subroutine      BDOS 03 (auxiliary input)
3887  546E              ;       Inputs
3888  546E              ;       Outputs         ________________________
3889  546E
3890  546E CD 12 54     A546E:  call    A5412
3891  5471 C3 71 F3             jp      XF371
3892  5474
3893  5474              ;       Subroutine      BDOS 04 (auxiliary output)
3894  5474              ;       Inputs
3895  5474              ;       Outputs         ________________________
3896  5474
3897  5474 7B           A5474:  ld      a,e
3898  5475 F5           A5475:  push    af
3899  5476 CD 12 54             call    A5412
3900  5479 F1                   pop     af
3901  547A C3 74 F3             jp      XF374
3902  547D
3903  547D              ; Programmers message, decoded in FAT entries (not needed)
3904  547D              ; MSXDOS BY T PATERSON J SUZUKI   @
3905  547D
3906  547D ED 8C 93 EF  T547D:  defb    0EDH,08CH,093H,0EFH,00CH,088H,039H,040H
3906  5481 0C 88 39 40
3907  5485 03 70 48 97          defb    003H,070H,048H,097H,0F2H,0FCH,0BAH,080H
3907  5489 F2 FC BA 80
3908  548D 0A CC B5 5E          defb    00AH,0CCH,0B5H,05EH,0AFH,029H,000H,000H
3908  5491 AF 29 00 00
3909  5495
3910  5495              ; unused code
3911  5495
3912  5495 C9                   ret
3913  5496
3914  5496 CD B2 F2     A5496:  call    XF2B2
3915  5499 CD C0 54             call    A54C0                   ; get time and date values
3916  549C 79                   ld      a,c
3917  549D 87                   add     a,a
3918  549E 87                   add     a,a
3919  549F 87                   add     a,a
3920  54A0 CB 10                rl      b
3921  54A2 87                   add     a,a
3922  54A3 CB 10                rl      b
3923  54A5 87                   add     a,a
3924  54A6 CB 10                rl      b
3925  54A8 CB 3A                srl     d
3926  54AA B2                   or      d
3927  54AB 5F                   ld      e,a
3928  54AC 50                   ld      d,b
3929  54AD ED 4B 49 F2          ld      bc,(YF249)
3930  54B1 79                   ld      a,c
3931  54B2 87                   add     a,a
3932  54B3 87                   add     a,a
3933  54B4 87                   add     a,a
3934  54B5 87                   add     a,a
3935  54B6 87                   add     a,a
3936  54B7 CB 10                rl      b
3937  54B9 4F                   ld      c,a
3938  54BA 3A 48 F2             ld      a,(YF248)               ; current day
3939  54BD B1                   or      c
3940  54BE 4F                   ld      c,a
3941  54BF C9                   ret
3942  54C0
3943  54C0 CD 79 41     A54C0:  call    A4179                   ; get date and time
3944  54C3 38 46                jr      c,A550B                 ; from clockchip,
3945  54C5 D5                   push    de
3946  54C6 E5                   push    hl
3947  54C7 ED 5B 4C F2          ld      de,(YF24C)              ; days since 1-1-1980
3948  54CB B7                   or      a
3949  54CC ED 52                sbc     hl,de
3950  54CE E1                   pop     hl
3951  54CF D1                   pop     de
3952  54D0 C8                   ret     z
3953  54D1 22 4C F2             ld      (YF24C),hl
3954  54D4 C5                   push    bc
3955  54D5 D5                   push    de
3956  54D6 4D                   ld      c,l
3957  54D7 44                   ld      b,h
3958  54D8 11 B5 05             ld      de,4*365+1
3959  54DB CD 2F 49             call    A492F                   ; divide
3960  54DE 79                   ld      a,c
3961  54DF 87                   add     a,a
3962  54E0 87                   add     a,a
3963  54E1 87                   add     a,a
3964  54E2 06 00                ld      b,000H
3965  54E4 11 34 55             ld      de,T5534
3966  54E7 CD 15 55             call    A5515
3967  54EA CB 3F                srl     a
3968  54EC 30 04                jr      nc,A54F2
3969  54EE 11 C8 00             ld      de,200
3970  54F1 19                   add     hl,de
3971  54F2 CD 23 55     A54F2:  call    A5523                   ; setup days in februari
3972  54F5 3E 01                ld      a,001H
3973  54F7 11 2B F2             ld      de,YF22B
3974  54FA CD 15 55             call    A5515
3975  54FD 32 49 F2             ld      (YF249),a
3976  5500 2C                   inc     l
3977  5501 7D                   ld      a,l
3978  5502 32 48 F2             ld      (YF248),a               ; current day
3979  5505 CD 88 55     A5505:  call    A5588
3980  5508 D1                   pop     de
3981  5509 C1                   pop     bc
3982  550A C9                   ret
3983  550B
3984  550B C5           A550B:  push    bc
3985  550C D5                   push    de
3986  550D 2A 4A F2             ld      hl,(YF24A)
3987  5510 CD 9D 55             call    A559D                   ; calculate days since 1-1-1980
3988  5513 18 F0                jr      A5505
3989  5515
3990  5515 EB           A5515:  ex      de,hl
3991  5516 4E                   ld      c,(hl)
3992  5517 23                   inc     hl
3993  5518 EB                   ex      de,hl
3994  5519 B7                   or      a
3995  551A ED 42                sbc     hl,bc
3996  551C 38 03                jr      c,A5521
3997  551E 3C                   inc     a
3998  551F 18 F4                jr      A5515
3999  5521
4000  5521 09           A5521:  add     hl,bc
4001  5522 C9                   ret
4002  5523
4003  5523 CD B5 F2     A5523:  call    XF2B5
4004  5526 32 4A F2             ld      (YF24A),a               ; year (offset)
4005  5529 E6 03        A5529:  and     003H
4006  552B 3E 1C                ld      a,28
4007  552D 20 01                jr      nz,A5530
4008  552F 3C                   inc     a
4009  5530 32 2C F2     A5530:  ld      (YF22B+1),a
4010  5533 C9                   ret
4011  5534
4012  5534 C8 A6 C8 A5  T5534:  defb    200,166,200,165,200,165,200,165
4012  5538 C8 A5 C8 A5
4013  553C
4014  553C              ;       Subroutine      BDOS 2A (MSXDOS get date)
4015  553C              ;       Inputs
4016  553C              ;       Outputs         ________________________
4017  553C
4018  553C AF           A553C:  xor     a
4019  553D 32 06 F3             ld      (YF306),a               ; no CP/M call
4020  5540 CD C0 54             call    A54C0                   ; get time and date values
4021  5543 2A 4A F2             ld      hl,(YF24A)
4022  5546 11 BC 07             ld      de,1980
4023  5549 19                   add     hl,de
4024  554A ED 5B 48 F2          ld      de,(YF248)              ; current day and month
4025  554E 3A 4E F2             ld      a,(YF24E)
4026  5551 C9                   ret
4027  5552
4028  5552              ;       Subroutine      BDOS 2B (set date)
4029  5552              ;       Inputs
4030  5552              ;       Outputs         ________________________
4031  5552
4032  5552 01 44 F8     A5552:  ld      bc,-1980
4033  5555 09                   add     hl,bc
4034  5556 30 42                jr      nc,A559A                ; year <1980, error
4035  5558 7C                   ld      a,h
4036  5559 B7                   or      a
4037  555A 20 3E                jr      nz,A559A                ; yearoffset not in 1 byte, error
4038  555C 7D                   ld      a,l
4039  555D FE 78                cp      120
4040  555F 30 39                jr      nc,A559A                ; year >2099, error
4041  5561 CD 29 55             call    A5529                   ; setup febuari days
4042  5564 1C                   inc     e
4043  5565 1D                   dec     e
4044  5566 28 32                jr      z,A559A                 ; day 0, error
4045  5568 7A                   ld      a,d
4046  5569 B7                   or      a
4047  556A 28 2E                jr      z,A559A                 ; month 0, error
4048  556C FE 0D                cp      12+1
4049  556E 30 2A                jr      nc,A559A                ; month >12, error
4050  5570 E5                   push    hl
4051  5571 21 2A F2             ld      hl,YF22B-1
4052  5574 85                   add     a,l
4053  5575 6F                   ld      l,a
4054  5576 30 01                jr      nc,A5579
4055  5578 24                   inc     h
4056  5579 7E           A5579:  ld      a,(hl)                  ; days in month
4057  557A E1                   pop     hl
4058  557B BB                   cp      e
4059  557C 38 1C                jr      c,A559A                 ; invalid day, error
4060  557E ED 53 48 F2          ld      (YF248),de              ; current day and month
4061  5582 CD 9D 55             call    A559D                   ; calculate days since 1-1-1980
4062  5585 CD 15 41             call    A4115                   ; store date (clockchip or otherwise)
4063  5588 ED 4B 4C F2  A5588:  ld      bc,(YF24C)              ; days since 1-1-1980
4064  558C 11 07 00             ld      de,7
4065  558F 03                   inc     bc
4066  5590 03                   inc     bc
4067  5591 CD 2F 49             call    A492F                   ; divide
4068  5594 7D                   ld      a,l
4069  5595 32 4E F2             ld      (YF24E),a
4070  5598 AF                   xor     a
4071  5599 C9                   ret
4072  559A
4073  559A 3E FF        A559A:  ld      a,0FFH
4074  559C C9                   ret
4075  559D
4076  559D 7D           A559D:  ld      a,l                     ; year (offset)
4077  559E CD 23 55             call    A5523                   ; setup days in februari
4078  55A1 4D                   ld      c,l
4079  55A2 CB 39                srl     c
4080  55A4 CB 39                srl     c                       ; /4
4081  55A6 06 00                ld      b,0
4082  55A8 11 B5 05             ld      de,4*365+1
4083  55AB CD 16 49             call    A4916                   ; multiply
4084  55AE 69                   ld      l,c
4085  55AF 60                   ld      h,b
4086  55B0 3A 4A F2             ld      a,(YF24A)               ; year (offset)
4087  55B3 E6 03                and     003H
4088  55B5 87                   add     a,a
4089  55B6 11 34 55             ld      de,T5534
4090  55B9 06 00                ld      b,0
4091  55BB 3C                   inc     a
4092  55BC CD D2 55             call    A55D2
4093  55BF 11 2B F2             ld      de,YF22B
4094  55C2 3A 49 F2             ld      a,(YF249)               ; current month
4095  55C5 CD D2 55             call    A55D2
4096  55C8 3A 48 F2             ld      a,(YF248)               ; current day
4097  55CB 3D                   dec     a
4098  55CC 4F                   ld      c,a
4099  55CD 09                   add     hl,bc
4100  55CE 22 4C F2             ld      (YF24C),hl              ; days since 1-1-1980
4101  55D1 C9                   ret
4102  55D2
4103  55D2 3D           A55D2:  dec     a
4104  55D3 C8                   ret     z
4105  55D4 EB                   ex      de,hl
4106  55D5 4E                   ld      c,(hl)
4107  55D6 23                   inc     hl
4108  55D7 EB                   ex      de,hl
4109  55D8 09                   add     hl,bc
4110  55D9 18 F7                jr      A55D2
4111  55DB
4112  55DB              ;       Subroutine      BDOS 2C (MSXDOS get time)
4113  55DB              ;       Inputs
4114  55DB              ;       Outputs         ________________________
4115  55DB
4116  55DB AF           A55DB:  xor     a
4117  55DC 32 06 F3             ld      (YF306),a               ; no CP/M call
4118  55DF CD C0 54             call    A54C0                   ; get time and date values
4119  55E2 60                   ld      h,b
4120  55E3 69                   ld      l,c
4121  55E4 AF                   xor     a
4122  55E5 C9                   ret
4123  55E6
4124  55E6              ;       Subroutine      BDOS 2D (set time)
4125  55E6              ;       Inputs
4126  55E6              ;       Outputs         ________________________
4127  55E6
4128  55E6 44           A55E6:  ld      b,h
4129  55E7 4D                   ld      c,l
4130  55E8 78                   ld      a,b
4131  55E9 FE 18                cp      24
4132  55EB 30 AD                jr      nc,A559A
4133  55ED 3E 3B                ld      a,59
4134  55EF B9                   cp      c
4135  55F0 38 A8                jr      c,A559A
4136  55F2 BA                   cp      d
4137  55F3 38 A5                jr      c,A559A
4138  55F5 7B                   ld      a,e
4139  55F6 FE 64                cp      100
4140  55F8 30 A0                jr      nc,A559A
4141  55FA CD 30 41             call    A4130                   ; store time (clockchip or otherwise)
4142  55FD AF                   xor     a
4143  55FE C9                   ret
4144  55FF
4145  55FF              ;       Subroutine      BDOS 2E (set verify flag)
4146  55FF              ;       Inputs
4147  55FF              ;       Outputs         ________________________
4148  55FF
4149  55FF 7B           A55FF:  ld      a,e
4150  5600 32 0D F3             ld      (RAWFLG),a
4151  5603 C9                   ret
4152  5604
4153  5604              ;       Subroutine      Validate FCB filename
4154  5604              ;       Inputs          HL = address of FCB+1,DE = destination
4155  5604              ;       Outputs         ________________________
4156  5604              ;       Remark          is copied to 0F1F4H
4157  5604
4158  5604 7E           A5604:  ld      a,(hl)
4159  5605 FE 20                cp      " "
4160  5607 37                   scf
4161  5608 C8                   ret     z                       ; filename that start with a space is illegal, quit
4162  5609 01 02 08             ld      bc,00802H               ; first do the filename, then the fileextension
4163  560C FE E5                cp      0E5H
4164  560E 20 12                jr      nz,A5622                ; not the charcode also used as deleted file marker
4165  5610 3E 05                ld      a,005H
4166  5612 12                   ld      (de),a
4167  5613 23                   inc     hl
4168  5614 13                   inc     de
4169  5615 05                   dec     b                       ; use replacement charcode 005H, otherwise fileentry looks deleted
4170  5616 3E E5                ld      a,0E5H
4171  5618 CD 81 56             call    A5681                   ; is this a double byte 'header' char ?
4172  561B 30 05                jr      nc,A5622                ; nope, no special action
4173  561D 7E                   ld      a,(hl)
4174  561E 12                   ld      (de),a
4175  561F 23                   inc     hl
4176  5620 13                   inc     de
4177  5621 05                   dec     b                       ; yep, copy 'follow' char
4178  5622 7E           A5622:  ld      a,(hl)
4179  5623 CD 81 56             call    A5681                   ; is this a double byte 'header' char ?
4180  5626 30 09                jr      nc,A5631                ; nope, do upcasing and check
4181  5628 12                   ld      (de),a
4182  5629 23                   inc     hl
4183  562A 13                   inc     de                      ; copy 'header' char
4184  562B 05                   dec     b
4185  562C 37                   scf
4186  562D C8                   ret     z                       ; no 'follow' char, quit with error
4187  562E 7E                   ld      a,(hl)
4188  562F 18 36                jr      A5667                   ; copy 'follow' char and continue
4189  5631
4190  5631 3A 0E F3     A5631:  ld      a,(YF30E)
4191  5634 A7                   and     a
4192  5635 7E                   ld      a,(hl)
4193  5636 28 14                jr      z,A564C                 ; japanese have no accent chars,
4194  5638 FE 80                cp      080H
4195  563A 38 10                jr      c,A564C                 ; normal ASCII,
4196  563C FE BA                cp      0BAH
4197  563E 30 0C                jr      nc,A564C
4198  5640 E5                   push    hl                      ; 080H-0B9H accent chars
4199  5641 C5                   push    bc
4200  5642 4F                   ld      c,a
4201  5643 06 00                ld      b,000H
4202  5645 21 16 56             ld      hl,T5696-080H
4203  5648 09                   add     hl,bc
4204  5649 7E                   ld      a,(hl)                  ; get the upcase version of the accent char
4205  564A C1                   pop     bc
4206  564B E1                   pop     hl
4207  564C FE 61        A564C:  cp      "a"
4208  564E 38 06                jr      c,A5656
4209  5650 FE 7B                cp      "z"+1
4210  5652 30 02                jr      nc,A5656
4211  5654 D6 20                sub     020H                    ; lowercase char, make upcase
4212  5656 FE 20        A5656:  cp      020H
4213  5658 D8                   ret     c                       ; control code are illegal, quit with error
4214  5659 E5                   push    hl
4215  565A C5                   push    bc
4216  565B 21 77 56             ld      hl,T5677
4217  565E 01 0A 00             ld      bc,0000AH
4218  5661 ED B1                cpir                            ; one of the illegal chars ?
4219  5663 C1                   pop     bc
4220  5664 E1                   pop     hl
4221  5665 37                   scf
4222  5666 C8                   ret     z                       ; yep, quit with error
4223  5667 12           A5667:  ld      (de),a                  ; copy char
4224  5668 23                   inc     hl
4225  5669 13                   inc     de
4226  566A 10 B6                djnz    A5622                   ; next char
4227  566C 06 03                ld      b,003H
4228  566E 0D                   dec     c
4229  566F 20 B1                jr      nz,A5622                ; now do the fileextension
4230  5671 B7                   or      a                       ; flag no error
4231  5672 7E                   ld      a,(hl)
4232  5673 32 0C F3             ld      (YF30C),a               ; save the FCB EX byte
4233  5676 C9                   ret
4234  5677
4235  5677 2E 22 2F 5B  T5677:  defb    '."/[]:+=;,'
4235  567B 5D 3A 2B 3D
4235  567F 3B 2C
4236  5681
4237  5681              ;       Subroutine      check if double byte header char
4238  5681              ;       Inputs          ________________________
4239  5681              ;       Outputs         ________________________
4240  5681
4241  5681 E5           A5681:  push    hl
4242  5682 21 0F F3             ld      hl,YF30F
4243  5685 BE                   cp      (hl)
4244  5686 3F                   ccf
4245  5687 30 0B                jr      nc,A5694                ; below (F30F), quit (not in range)
4246  5689 23                   inc     hl
4247  568A BE                   cp      (hl)
4248  568B 38 07                jr      c,A5694                 ; below (F310), quit (in range 1)
4249  568D 23                   inc     hl
4250  568E BE                   cp      (hl)
4251  568F 3F                   ccf
4252  5690 30 02                jr      nc,A5694                ; below (F311), quit (not in range)
4253  5692 23                   inc     hl
4254  5693 BE                   cp      (hl)
4255  5694 E1           A5694:  pop     hl
4256  5695 C9                   ret
4257  5696
4258  5696              ;       Table 080H-0B9H accent upcase chars
4259  5696
4260  5696 80 9A 45 41  T5696:  defb    080H,09AH,"E" ,"A" ,08EH,"A" ,08FH,080H
4260  569A 8E 41 8F 80
4261  569E 45 45 45 49          defb    "E" ,"E" ,"E" ,"I" ,"I" ,"I" ,08EH,08FH
4261  56A2 49 49 8E 8F
4262  56A6 90 92 92 4F          defb    090H,092H,092H,"O" ,099H,"O" ,"U" ,"U"
4262  56AA 99 4F 55 55
4263  56AE 59 99 9A 9B          defb    "Y" ,099H,09AH,09BH,09CH,09DH,09EH,09FH
4263  56B2 9C 9D 9E 9F
4264  56B6 41 49 4F 55          defb    "A" ,"I" ,"O" ,"U" ,0A5H,0A5H,0A6H,0A7H
4264  56BA A5 A5 A6 A7
4265  56BE A8 A9 AA AB          defb    0A8H,0A9H,0AAH,0ABH,0ACH,0ADH,0AEH,0AFH
4265  56C2 AC AD AE AF
4266  56C6 B0 B0 B2 B2          defb    0B0H,0B0H,0B2H,0B2H,0B4H,0B4H,0B6H,0B6H
4266  56CA B4 B4 B6 B6
4267  56CE B8 B8                defb    0B8H,0B8H
4268  56D0
4269  56D0              ;       Subroutine      unsupported CP/M BDOS calls
4270  56D0              ;       Inputs
4271  56D0              ;       Outputs         ________________________
4272  56D0
4273  56D0 AF           A56D0:  xor     a
4274  56D1 47                   ld      b,a
4275  56D2 C9                   ret
4276  56D3
4277  56D3              ;       Subroutine      BDOS handler (for DiskBASIC)
4278  56D3              ;       Inputs
4279  56D3              ;       Outputs         ________________________
4280  56D3
4281  56D3 FB           A56D3:  ei
4282  56D4 3E 01                ld      a,1
4283  56D6 32 06 F3             ld      (YF306),a               ; assume CP/M compatible call
4284  56D9 79                   ld      a,c
4285  56DA FE 31                cp      031H                    ; valid BDOS function ?
4286  56DC 30 F2                jr      nc,A56D0                ; nope, unsupported BDOS call
4287  56DE D6 11                sub     011H                    ; Search First BDOS function ?
4288  56E0 20 04                jr      nz,A56E6
4289  56E2 ED 53 07 F3          ld      (YF307),de              ; yep, save address FCB for Search Next
4290  56E6 3D           A56E6:  dec     a                       ; Search Next BDOS function ?
4291  56E7 20 04                jr      nz,A56ED
4292  56E9 ED 5B 07 F3          ld      de,(YF307)              ; yep, get saved address FCB Search First
4293  56ED E5           A56ED:  push    hl
4294  56EE 21 00 57             ld      hl,T5700
4295  56F1 E3                   ex      (sp),hl                 ; after BDOS routine, fill HL in a CP/M compatible manner
4296  56F2 E5                   push    hl
4297  56F3 21 0D 57             ld      hl,T570D
4298  56F6 06 00                ld      b,0
4299  56F8 09                   add     hl,bc
4300  56F9 09                   add     hl,bc
4301  56FA 46                   ld      b,(hl)
4302  56FB 23                   inc     hl
4303  56FC 66                   ld      h,(hl)
4304  56FD 68                   ld      l,b
4305  56FE E3                   ex      (sp),hl
4306  56FF C9                   ret                             ; start BDOS routine
4307  5700
4308  5700 F5           T5700:  push    af
4309  5701 3A 06 F3             ld      a,(YF306)
4310  5704 B7                   or      a                       ; CP/M compatible call
4311  5705 28 04                jr      z,A570B                 ; no, leave HL alone
4312  5707 F1                   pop     af
4313  5708 6F                   ld      l,a
4314  5709 60                   ld      h,b                     ; CP/M compatible HL
4315  570A C9                   ret
4316  570B
4317  570B F1           A570B:  pop     af
4318  570C C9                   ret
4319  570D
4320  570D A7 40 45 54  T570D:  defw    A40A7,A5445,A53A7,A546E,A5474,A5465,A5454,A5462
4320  5711 A7 53 6E 54
4320  5715 74 54 65 54
4320  5719 54 54 62 54
4321  571D 4E 54 C9 F1          defw    A544E,XF1C9,A50E0,A543C,A41EF,A509F,A50D5,A4462
4321  5721 E0 50 3C 54
4321  5725 EF 41 9F 50
4321  5729 D5 50 62 44
4322  572D 6F 45 B8 4F          defw    A456F,A4FB8,A5006,A436C,A4775,A477D,A461D,A4392
4322  5731 06 50 6C 43
4322  5735 75 47 7D 47
4322  5739 1D 46 92 43
4323  573D 4E 50 C4 50          defw    A504E,A50C4,A5058,A505D,A56D0,A56D0,A56D0,A56D0
4323  5741 58 50 5D 50
4323  5745 D0 56 D0 56
4323  5749 D0 56 D0 56
4324  574D D0 56 88 47          defw    A56D0,A4788,A4793,A501E,A50C8,A56D0,A47BE,A47B2
4324  5751 93 47 1E 50
4324  5755 C8 50 D0 56
4324  5759 BE 47 B2 47
4325  575D D1 47 D0 56          defw    A47D1,A56D0,A553C,A5552,A55DB,A55E6,A55FF,A46BA
4325  5761 3C 55 52 55
4325  5765 DB 55 E6 55
4325  5769 FF 55 BA 46
4326  576D 20 47                defw    A4720
4327  576F
4328  576F CD 05 74     A576F:  call    INIHRD                  ; initialize diskhardware
4329  5772 F3                   di
4330  5773 3A 99 FD             ld      a,(DEVICE)		; disksystem initialization status
4331  5776 A7                   and     a
4332  5777 F8                   ret     m			; disksystem initialization canceled, quit
4333  5778 C2 0C 58             jp      nz,A580C                ; disksystem initialization already started by an other disk interface, skip init
4334  577B 21 20 FB             ld      hl,HOKVLD
4335  577E CB 46                bit     0,(hl)                  ; EXTBIO hook valid ?
4336  5780 20 0C                jr      nz,A578E
4337  5782 CB C6                set     0,(hl)
4338  5784 21 CA FF             ld      hl,EXTBIO
4339  5787 06 0F                ld      b,3*5
4340  5789 36 C9        A5789:  ld      (hl),0C9H
4341  578B 23                   inc     hl
4342  578C 10 FB                djnz    A5789                   ; nop, init EXTBIO,DISINT and ENAINT hooks
4343  578E 2A 48 FC     A578E:  ld      hl,(BOTTOM)
4344  5791 11 01 C0             ld      de,0C001H
4345  5794 E7                   rst     020H                    ; at least 16Kb RAM ?
4346  5795 30 0C                jr      nc,A57A3                ; nop, cancel disksystem initiazation
4347  5797 3E 06                ld      a,006H
4348  5799 CD 41 01             call    SNSMAT
4349  579C F3                   di
4350  579D 0F                   rrca                            ; SHIFT key pressed ?
4351  579E 38 09                jr      c,A57A9                 ; nop, cont
4352  57A0 3E 07                ld      a,007H
4353  57A2 DF                   rst     018H                    ; beep
4354  57A3 3E FF        A57A3:  ld      a,0FFH
4355  57A5 32 99 FD             ld      (DEVICE),a              ; disksystem initialization canceled
4356  57A8 C9                   ret
4357  57A9
4358  57A9              ;       Subroutine      Initialize disksystem, first disk interface
4359  57A9
4360  57A9 21 81 F3     A57A9:  ld      hl,0F380H+MYSIZE
4361  57AC 11 C9 F1             ld      de,XF1C9
4362  57AF A7                   and     a
4363  57B0 ED 52                sbc     hl,de                   ; bytes needed for static workarea+workarea driver
4364  57B2 D4 E8 5E             call    nc,A5EE8                ; allocate memory (adjust BASIC areapointers)
4365  57B5 D8                   ret     c                       ; failed, quit
4366  57B6 E5           A57B6:  push    hl
4367  57B7 21 49 FE             ld      hl,XF1C9-0F380H
4368  57BA 01 C9 F1             ld      bc,XF1C9
4369  57BD AF           A57BD:  xor     a
4370  57BE 02                   ld      (bc),a
4371  57BF 03                   inc     bc
4372  57C0 23                   inc     hl
4373  57C1 7D                   ld      a,l
4374  57C2 B4                   or      h
4375  57C3 20 F8                jr      nz,A57BD                ; clear static workarea
4376  57C5 22 AB F6             ld      (AUTLIN),hl             ; biggest sectorsize sofar = 0
4377  57C8 06 14                ld      b,4*2+4*3
4378  57CA 21 21 FB             ld      hl,YFB21
4379  57CD 77           A57CD:  ld      (hl),a
4380  57CE 23                   inc     hl
4381  57CF 10 FC                djnz    A57CD                   ; clear DRVTBL, DRVINT
4382  57D1 21 4F F2             ld      hl,XF24F
4383  57D4 06 69                ld      b,069H
4384  57D6 36 C9        A57D6:  ld      (hl),0C9H
4385  57D8 23                   inc     hl
4386  57D9 10 FB                djnz    A57D6                   ; init disksystem hooks
4387  57DB 3E FF                ld      a,0FFH                  ; MSM: was: 0DBH, replaced IN by RST38h
4388  57DD 21 A8 C9             ld      hl,0C9A8H
4389  57E0 32 65 F3             ld      (XF365+0),a
4390  57E3 22 66 F3             ld      (XF365+1),hl            ; read primairy slotregister entry
4391  57E6 3E 06                ld      a,006H
4392  57E8 CD 41 01             call    SNSMAT
4393  57EB E6 02                and     002H
4394  57ED 32 3F F3             ld      (YF33F),a               ; saved CTRL key status for panthom drive
4395  57F0 3E 07                ld      a,007H
4396  57F2 DF                   rst     018H                    ; beep
4397  57F3 21 07 58             ld      hl,T5807
4398  57F6 11 CB FE             ld      de,H.RUNC
4399  57F9 01 05 00             ld      bc,5
4400  57FC ED B0                ldir
4401  57FE CD 2D 40             call    A402D                   ; get slotid of this disk interface
4402  5801 32 CC FE             ld      (H.RUNC+1),a            ; init RUNC hook, to intialize further when the interpeter is initialized
4403  5804 D1                   pop     de                      ; base disk hardware driver workarea
4404  5805 18 1E                jr      A5825
4405  5807
4406  5807 F7           T5807:  rst     030H
4407  5808 00                   defb    0
4408  5809 97 58                defw    A5897
4409  580B C9                   ret
4410  580C
4411  580C              ;       Subroutine      Initialize disksystem, not the first disk interface
4412  580C
4413  580C 21 21 FB     A580C:  ld      hl,YFB21                ; DRVTBL
4414  580F 06 04                ld      b,4                     ; 4 disk interfaces
4415  5811 AF                   xor     a                       ; number of drives = 0
4416  5812 86           A5812:  add     a,(hl)                  ; update number of drives
4417  5813 DA CC 5E             jp      c,A5ECC                 ; invalid DRVTBL, halt system
4418  5816 23                   inc     hl
4419  5817 23                   inc     hl
4420  5818 10 F8                djnz    A5812
4421  581A FE 08                cp      8                       ; 8 or more drives ?
4422  581C D0                   ret     nc                      ; yep, no more drives!
4423  581D 21 01 00             ld      hl,MYSIZE               ; number of bytes for workarea hardware driver
4424  5820 CD E8 5E             call    A5EE8                   ; allocate memory (adjust BASIC areapointers)
4425  5823 D8                   ret     c                       ; failed, quit
4426  5824 EB                   ex      de,hl
4427  5825
4428  5825 CD CD 5F     A5825:  call    A5FCD                   ; get my SLTWRK entry
4429  5828 73                   ld      (hl),e
4430  5829 23                   inc     hl
4431  582A 72                   ld      (hl),d                  ; save base workarea in SLTWRK
4432  582B 2A AB F6             ld      hl,(AUTLIN)
4433  582E 11 00 02             ld      de,SECLEN
4434  5831 E7                   rst     020H                    ; SECLEN sofar big enough ?
4435  5832 30 04                jr      nc,A5838
4436  5834 ED 53 AB F6          ld      (AUTLIN),de             ; nop, adjust
4437  5838 11 21 FB     A5838:  ld      de,YFB21                ; DRVTBL
4438  583B 01 00 04             ld      bc,00400H               ; 4 disk interfaces, number of drives = 0
4439  583E 1A           A583E:  ld      a,(de)
4440  583F A7                   and     a
4441  5840 28 09                jr      z,A584B                 ; free entry, use it
4442  5842 81                   add     a,c
4443  5843 4F                   ld      c,a                     ; update number of drives
4444  5844 13                   inc     de
4445  5845 13                   inc     de
4446  5846 10 F6                djnz    A583E                   ; next entry
4447  5848 C3 CC 5E             jp      A5ECC                   ; none free, halt system
4448  584B
4449  584B 3A 3F F3     A584B:  ld      a,(YF33F)
4450  584E A7                   and     a
4451  584F 79                   ld      a,c                     ; phantom flag
4452  5850 CD 06 74     A5850:  call    DRIVES                  ; query no. of drives
4453  5853 85                   add     a,l
4454  5854 FE 09                cp      8+1
4455  5856 7D                   ld      a,l                     ; more as 8 drives ?
4456  5857 38 03                jr      c,A585C                 ; nop, ok
4457  5859 3E 08                ld      a,8
4458  585B 91                   sub     c                       ; as much as possible
4459  585C C5           A585C:  push    bc
4460  585D 12                   ld      (de),a                  ; save drives
4461  585E 13                   inc     de
4462  585F CD 2D 40             call    A402D                   ; get slotid of this disk interface
4463  5862 12                   ld      (de),a                  ; save slotid disk interface
4464  5863 C1                   pop     bc                      ; drivenumber
4465  5864 06 00                ld      b,0
4466  5866 21 55 F3             ld      hl,YF355
4467  5869 09                   add     hl,bc
4468  586A 09                   add     hl,bc                   ; DPBTBL
4469  586B E5                   push    hl
4470  586C 1B                   dec     de
4471  586D 1A                   ld      a,(de)
4472  586E F5                   push    af
4473  586F 4F                   ld      c,a                     ; drives
4474  5870 11 15 00             ld      de,21
4475  5873 CD 16 49             call    A4916                   ; * size of DPB
4476  5876 69                   ld      l,c
4477  5877 60                   ld      h,b                     ; number of bytes for the DPBs
4478  5878 CD C8 5E             call    A5EC8                   ; allocate memory (adjust BASIC areapointers, halt when error)
4479  587B EB                   ex      de,hl
4480  587C F1                   pop     af
4481  587D E1                   pop     hl
4482  587E 73           A587E:  ld      (hl),e
4483  587F 23                   inc     hl
4484  5880 72                   ld      (hl),d                  ; save in DPBTBL
4485  5881 23                   inc     hl
4486  5882 E5                   push    hl
4487  5883 21 74 74             ld      hl,DEFDPB
4488  5886 01 15 00             ld      bc,21
4489  5889 ED B0                ldir                            ; initialize DPB
4490  588B E1                   pop     hl
4491  588C 3D                   dec     a
4492  588D 20 EF                jr      nz,A587E                ; next drive
4493  588F CD 09 74             call    INIENV                  ; initialize hardware driver workarea
4494  5892 21 99 FD             ld      hl,DEVICE
4495  5895 34                   inc     (hl)                    ; increase disk interface count
4496  5896 C9                   ret
4497  5897
4498  5897              ;       Subroutine      H.RUNC interceptor
4499  5897              ;       Inputs          -
4500  5897              ;       Outputs         -
4501  5897              ;       Remark          Control is passed to this routine when the BASIC interpreter is initialized
4502  5897              ;                       There are two ways: a BASIC program in ROM is started OR at the start of MSX-BASIC
4503  5897
4504  5897 21 CB FE     A5897:  ld      hl,H.RUNC
4505  589A 06 05                ld      b,5
4506  589C 36 C9        A589C:  ld      (hl),0C9H
4507  589E 23                   inc     hl
4508  589F 10 FB                djnz    A589C                   ; clear RUNC hook
4509  58A1 21 99 FD             ld      hl,DEVICE
4510  58A4 AF                   xor     a
4511  58A5 BE                   cp      (hl)
4512  58A6 77                   ld      (hl),a                  ; clear diskinterface count
4513  58A7 F0                   ret     p                       ; already cleared, return control
4514  58A8 CD 2D 62     A58A8:  call    A622D                   ; hook H.LOPD when H.CLEA is hooked (for register system bottom)
4515  58AB 32 48 F3             ld      (YF348),a               ; master diskrom slotid
4516  58AE 21 97 73             ld      hl,A7397
4517  58B1 11 C9 F1             ld      de,XF1C9
4518  58B4 01 6E 00             ld      bc,0006EH
4519  58B7 ED B0                ldir                            ; initialize some static disksystem variables
4520  58B9 21 34 00             ld      hl,M0034
4521  58BC 11 0F F3             ld      de,YF30F
4522  58BF 01 04 00             ld      bc,4
4523  58C2 ED B0                ldir                            ; initialize double byte header char table
diskrom.asm(4524): warning: Accessing low memory address 0x002B, is it ok?: ld      a,(IDBYT0)
4524  58C4 3A 2B 00             ld      a,(IDBYT0)
4525  58C7 0F                   rrca
4526  58C8 0F                   rrca
4527  58C9 0F                   rrca
4528  58CA 0F                   rrca
4529  58CB E6 07                and     007H
4530  58CD 32 0E F3             ld      (YF30E),a               ; date format
4531  58D0 3E FF                ld      a,0FFH
4532  58D2 32 41 F2             ld      (YF241),a               ; invalid datasector buffer
4533  58D5 32 46 F2             ld      (YF246),a               ; invalid directorysector buffer
4534  58D8 32 4D F2             ld      (YF24C+1),a             ; days since 1-1-1980 is 65280 (0FF00H) (somewhere in the year 2158), this is inpossible, so when no clockchip this is updated!
4535  58DB 3E 0D                ld      a,00DH
4536  58DD 32 5B F5             ld      (YCONBF+130),a          ; ?? end marker con buffer
4537  58E0 3E 07                ld      a,7
4538  58E2 32 45 F3             ld      (YF345),a               ; max number of FCBs is 7
4539  58E5 21 B5 05             ld      hl,1461
4540  58E8 22 3B F3             ld      (YF33B),hl              ; default date when no clockchip is 1-1-1984
4541  58EB 06 08                ld      b,8
4542  58ED 21 68 F3             ld      hl,XF368
4543  58F0 36 C3        A58F0:  ld      (hl),0C3H
4544  58F2 23                   inc     hl
4545  58F3 23                   inc     hl
4546  58F4 23                   inc     hl
4547  58F5 10 F9                djnz    A58F0                   ; initialize jumptable
4548  58F7 2A AB F6             ld      hl,(AUTLIN)
4549  58FA E5                   push    hl                      ; size of the biggest sector
4550  58FB CD C8 5E             call    A5EC8                   ; allocate memory (adjust BASIC areapointers, halt when error)
4551  58FE 22 4D F3             ld      (SECBUF),hl            ; allocate sectorbuffer
4552  5901 E1                   pop     hl                      ; size of the biggest sector
4553  5902 E5                   push    hl
4554  5903 CD C8 5E             call    A5EC8                   ; allocate memory (adjust BASIC areapointers, halt when error)
4555  5906 22 4F F3             ld      (YF34F),hl              ; allocate datasector buffer
4556  5909 E1                   pop     hl                      ; size of the biggest sector
4557  590A CD C8 5E             call    A5EC8                   ; allocate memory (adjust BASIC areapointers, halt when error)
4558  590D 22 51 F3             ld      (YF351),hl              ; allocate dirsector buffer
4559  5910 21 21 FB             ld      hl,YFB21                ; DRVTBL
4560  5913 06 04                ld      b,4                     ; 4 disk interfaces
4561  5915 AF                   xor     a                       ; number of drives = 0
4562  5916 86           A5916:  add     a,(hl)                  ; update number of drives
4563  5917 DA CC 5E             jp      c,A5ECC                 ; invalid DRVTBL, halt system
4564  591A 23                   inc     hl
4565  591B 23                   inc     hl
4566  591C 10 F8                djnz    A5916
4567  591E FE 09                cp      8+1                     ; more as 8 drives ?
4568  5920 D2 CC 5E             jp      nc,A5ECC                ; yep (DRVTBL corrupted ?), halt system
4569  5923 32 47 F3             ld      (YF347),a               ; drives in system
4570  5926 47                   ld      b,a                     ; number of drives
4571  5927 0E 00                ld      c,0                     ; drive 0
4572  5929 21 55 F3             ld      hl,YF355
4573  592C 5E           A592C:  ld      e,(hl)
4574  592D 23                   inc     hl
4575  592E 56                   ld      d,(hl)                  ; DPB of drive
4576  592F 23                   inc     hl
4577  5930 E5                   push    hl
4578  5931 D5                   push    de
4579  5932 DD E1                pop     ix
4580  5934 DD 71 00             ld      (ix+0),c                ; set drivenumber in DPB
4581  5937 0C                   inc     c
4582  5938 C5                   push    bc
4583  5939 DD 4E 02             ld      c,(ix+2)
4584  593C DD 46 03             ld      b,(ix+3)                ; sectorsize
4585  593F DD 5E 10             ld      e,(ix+16)
4586  5942 16 00                ld      d,0                     ; number of sectors per FAT
4587  5944 CD 16 49             call    A4916                   ; * FAT size
4588  5947 03                   inc     bc                      ; and a FAT buffer flag
4589  5948 69                   ld      l,c
4590  5949 60                   ld      h,b                     ; size of the FAT buffer
4591  594A CD C8 5E             call    A5EC8                   ; allocate memory (adjust BASIC areapointers, halt when error)
4592  594D 22 49 F3             ld      (YF349),hl              ; base system bottom sofar
4593  5950 36 FF                ld      (hl),0FFH               ; flag invalid FAT buffer
4594  5952 23                   inc     hl
4595  5953 DD 75 13             ld      (ix+19),l
4596  5956 DD 74 14             ld      (ix+20),h               ; pointer to FAT buffer
4597  5959 C1                   pop     bc
4598  595A E1                   pop     hl
4599  595B 10 CF                djnz    A592C                   ; next drive
4600  595D 21 27 F3             ld      hl,XF327
4601  5960 36 3E                ld      (hl),03EH
4602  5962 23                   inc     hl
4603  5963 36 1A                ld      (hl),01AH
4604  5965 06 08                ld      b,2*5-2
4605  5967 23           A5967:  inc     hl
4606  5968 36 C9                ld      (hl),0C9H
4607  596A 10 FB                djnz    A5967                   ; initialize MSX-serial hooks
4608  596C 21 27 F3             ld      hl,XF327
4609  596F 22 72 F3             ld      (XF371+1),hl
4610  5972 21 2C F3             ld      hl,XF32C
4611  5975 22 75 F3             ld      (XF374+1),hl
4612  5978 21 31 F3             ld      hl,XF331
4613  597B 22 7E F3             ld      (XF37D+1),hl            ; initialize jumptable
4614  597E 21 2F 7D             ld      hl,M7D2F
4615  5981 3A C1 FC             ld      a,(EXPTBL+0)
4616  5984 CD 0C 00             call    RDSLT
4617  5987 F5                   push    af
4618  5988 23                   inc     hl
4619  5989 3A C1 FC             ld      a,(EXPTBL+0)
4620  598C CD 0C 00             call    RDSLT
4621  598F D1                   pop     de
4622  5990 67                   ld      h,a
4623  5991 6A                   ld      l,d                     ; read startup screen address
4624  5992 E5                   push    hl
4625  5993 DD E1                pop     ix
4626  5995 FD 2A C0 FC          ld      iy,(EXPTBL-1+0)
4627  5999                      ;call    CALSLT                  ; initialize BASIC screenmode
4628  5999 3E 0C                LD      A,12  ;MSM: disable calling to BIOS/EXTBIO to set screen mode + cls
4629  599B DF                   RST     18h                      ; clear screen
4630  599C                      ; MSM: skip clockchip check for now
4631  599C 00                   NOP
4632  599D 00                   NOP
4633  599E 00                   NOP
4634  599F                      ;call    A40B8                   ; check for and initialize clockchip
4635  599F CD 6E 5C             call    A5C6E                   ; initialize hooks
4636  59A2 3A C1 FC             ld      a,(EXPTBL+0)
4637  59A5 32 41 F3             ld      (RAMAD0),a
4638  59A8 32 42 F3             ld      (RAMAD1),a              ; assume no ram available for page 0 and 1
4639  59AB CD 98 5F             call    A5F98
4640  59AE 32 43 F3             ld      (RAMAD2),a              ; slotid of current page 2
4641  59B1 CD 95 5F             call    A5F95
4642  59B4 32 44 F3             ld      (RAMAD3),a              ; slotid of current page 3
4643  59B7 0E 00                ld      c,000H
4644  59B9                      ; MSM - disable search of RAM in page 0
4645  59B9                      ; RDVRM/WRVRM destroys page 0 bios in slot 1 and screws up
4646  59B9                      ;call    A5E52                   ; search ram in page 0
4647  59B9                      ;jr      c,A59C1
4648  59B9 00                   nop
4649  59BA 00                   nop
4650  59BB 00                   nop
4651  59BC 3E 01                ld      a, 1
4652  59BE 32 41 F3             ld      (RAMAD0),a              ; found, set ram slotid page 0
4653  59C1 0E 40        A59C1:  ld      c,040H
4654  59C3 CD 52 5E             call    A5E52                   ; search ram in page 1
4655  59C6 38 03                jr      c,A59CB
4656  59C8 32 42 F3             ld      (RAMAD1),a              ; found, set ram slotid page 1
4657  59CB 31 00 C2     A59CB:  ld      sp,0C200H               ; switch to a temporary stack, just above temp startbuffer
4658  59CE 3A DA FE             ld      a,(H.STKE+0)
4659  59D1 FE C9                cp      0C9H                    ; STKE hook set ?
4660  59D3 28 06                jr      z,A59DB                 ; nop, cont
4661  59D5 DD 21 17 7D          ld      ix,M7D17
4662  59D9 18 12                jr      A59ED                   ; skip BASIC extension ROMs and transfer control
4663  59DB
4664  59DB 21 C9 FC     A59DB:  ld      hl,SLTATR
4665  59DE 06 40                ld      b,040H
4666  59E0 7E           A59E0:  ld      a,(hl)
4667  59E1 87                   add     a,a                     ; TEXT extension ?
4668  59E2 38 05                jr      c,A59E9                 ; yep, start it
4669  59E4 23                   inc     hl
4670  59E5 10 F9                djnz    A59E0
4671  59E7 18 0A                jr      A59F3                   ; no TEXT extension ROM found,
4672  59E9
4673  59E9 DD 21 14 7E  A59E9:  ld      ix,M7E14                ; start BASIC program in ROM
4674  59ED CD 16 5C     A59ED:  call    A5C16                   ; initialize diskbasic
4675  59F0 C3 59 01             jp      CALBAS
4676  59F3
4677  59F3 21 3A 5B     A59F3:  ld      hl,A5B3A
4678  59F6 E5                   push    hl                      ; if quit anywhere start diskbasic
4679  59F7 CD E7 5A             call    A5AE7                   ; read bootsector
4680  59FA D8                   ret     c                       ; failed, start diskbasic
4681  59FB CD DB 5A             call    A5ADB                   ; start bootcode with Cx reset (some disk can take control from here)
4682  59FE 2A 48 FC             ld      hl,(BOTTOM)
4683  5A01 11 00 80             ld      de,08000H
4684  5A04 E7                   rst     020H                    ; check if ram on both page 3 and 2
4685  5A05 C0                   ret     nz                      ; nope, start diskbasic
4686  5A06 21 41 F3             ld      hl,RAMAD0
4687  5A09 3A C1 FC             ld      a,(EXPTBL+0)
4688  5A0C BE                   cp      (hl)
4689  5A0D C8                   ret     z                       ; no ram available on page 0, start diskbasic
4690  5A0E 23                   inc     hl
4691  5A0F BE                   cp      (hl)
4692  5A10 C8                   ret     z                       ; no ram available on page 1, start diskbasic
4693  5A11
4694  5A11              ; MSXDOS requirement are met, try starting it
4695  5A11
4696  5A11 AF           A5A11:  XOR     A
4697  5A12 CD 9A 60             CALL    A609A                   ; invalidate FAT buffer drive 0
4698  5A15 2A 49 F3             LD      HL,(YF349)
4699  5A18 22 4B F3             LD      (YF34B),HL              ; bottom MSX-DOS system
4700  5A1B CD E7 5A             CALL    A5AE7                   ; try reading bootsector of drive 0
4701  5A1E DA 3A 5B             JP      C,A5B3A                 ; error, start diskbasic
4702  5A21 32 46 F3             LD      (YF346),A               ; flag bootable disk
4703  5A24 3A 41 F3             LD      A,(RAMAD0)
4704  5A27 26 00                LD      H,00H                   ; page 0
4705  5A29 CD C2 64             CALL    C64C2                   ; calculate slot masks
4706  5A2C 37                   SCF
4707  5A2D F4 A2 64             CALL    P,C64A2                 ; slot is not expanded, change it
4708  5A30 DC AF 64             CALL    C,C64AF                 ; slot is expanded, change it
4709  5A33 AF                   XOR     A
4710  5A34 6F                   LD      L,A
4711  5A35 67                   LD      H,A
4712  5A36 77           J5A36:  LD      (HL),A
4713  5A37 2C                   INC     L
4714  5A38 20 FC                JR      NZ,J5A36                ; clear 0000-00FF
4715  5A3A 01 26 00             LD      BC,L637B                ; size of the XFER routine
4716  5A3D CD AD 5E             CALL    A5EAD                   ; allocate MSXDOS memory (halt when error)
4717  5A40 22 6F F3             LD      (XFER+1),HL
4718  5A43 EB                   EX      DE,HL
4719  5A44 21 7B 63             LD      HL,I637B
4720  5A47 ED B0                LDIR                            ; install XFER routine
4721  5A49 01 19 00             LD      BC,L63A1                ; size of the ENARAM and ENAKRN routine
4722  5A4C CD AD 5E             CALL    A5EAD                   ; allocate MSXDOS memory (halt when error)
4723  5A4F 5D                   LD      E,L
4724  5A50 54                   LD      D,H
4725  5A51 22 69 F3             LD      (XF368+1),HL
4726  5A54 23                   INC     HL
4727  5A55 23                   INC     HL
4728  5A56 22 6C F3             LD      (XF36B+1),HL
4729  5A59 21 A1 63             LD      HL,I63A1
4730  5A5C ED B0                LDIR                            ; install ENAKRN and ENARAM
4731  5A5E 01 9E 01             LD      BC,L63F4                ; size of the slotswitching routines
4732  5A61 CD AD 5E             CALL    A5EAD                   ; allocate MSXDOS memory (halt when error)
4733  5A64 E5                   PUSH    HL
4734  5A65 EB                   EX      DE,HL
4735  5A66 21 BE 63             LD      HL,C63F4
4736  5A69 E5                   PUSH    HL
4737  5A6A ED B0                LDIR                            ; install slot switching routines
4738  5A6C C1                   POP     BC
4739  5A6D D1                   POP     DE
4740  5A6E D5                   PUSH    DE
4741  5A6F 21 2A 01             LD      HL,R0116-C63F4+1
4742  5A72 19                   ADD     HL,DE
4743  5A73 36 3B                LD      (HL),LOW X003B
4744  5A75 23                   INC     HL
4745  5A76 36 00                LD      (HL),HIGH X003B         ; update "store and change secundairy slotregister" routine
4746  5A78 21 BA 63             LD      HL,T63BA
4747  5A7B CD 06 63             CALL    A6306                   ; relocate slot switching routines
4748  5A7E 21 0F 5B             LD      HL,I5B0F
4749  5A81 AF                   XOR     A
4750  5A82 47                   LD      B,A
4751  5A83 57                   LD      D,A
4752  5A84 5E           J5A84:  LD      E,(HL)
4753  5A85 BB                   CP      E
4754  5A86 28 10                JR      Z,J5A98                 ; end of table, continue
4755  5A88 23                   INC     HL
4756  5A89 4E                   LD      C,(HL)
4757  5A8A 23                   INC     HL
4758  5A8B E3                   EX      (SP),HL
4759  5A8C 09                   ADD     HL,BC
4760  5A8D EB                   EX      DE,HL
4761  5A8E 36 C3                LD      (HL),0C3H
4762  5A90 23                   INC     HL
4763  5A91 73                   LD      (HL),E
4764  5A92 23                   INC     HL
4765  5A93 72                   LD      (HL),D
4766  5A94 EB                   EX      DE,HL
4767  5A95 E3                   EX      (SP),HL
4768  5A96 18 EC                JR      J5A84                   ; make jumptable
4769  5A98
4770  5A98 E1           J5A98:  POP     HL
4771  5A99                      ;LD      HL,C655C
4772  5A99 00                   NOP
4773  5A9A 00                   NOP
4774  5A9B 00                   NOP
4775  5A9C                      ;LD      DE,X003B
4776  5A9C 00                   NOP
4777  5A9D 00                   NOP
4778  5A9E 00                   NOP
4779  5A9F                      ;LD      BC,L655C
4780  5A9F 00                   NOP
4781  5AA0 00                   NOP
4782  5AA1 00                   NOP
4783  5AA2                      ;LDIR                            ; install slotswitching helper routines
4784  5AA2 00                   NOP
4785  5AA3 00                   NOP
4786  5AA4                      ;
4787  5AA4 01 45 00             LD      BC,L6336                ; size of the interrupt routine
4788  5AA7 CD AD 5E             CALL    A5EAD                   ; allocate MSXDOS memory (halt when error)
4789  5AAA E5                   PUSH    HL
4790  5AAB EB                   EX      DE,HL
4791  5AAC 21 36 63             LD      HL,I6336
4792  5AAF E5                   PUSH    HL
4793  5AB0 ED B0                LDIR                            ; install interrupt routine
4794  5AB2 C1                   POP     BC
4795  5AB3 D1                   POP     DE
4796  5AB4 D5                   PUSH    DE
4797  5AB5 21 2E 63             LD      HL,T632E
4798  5AB8 CD 06 63             CALL    A6306                   ; relocate interrupt routine
4799  5ABB E1                   POP     HL
4800  5ABC 3E C3                LD      A,0C3H
4801  5ABE 32 38 00             LD      (KEYINT+0),A
4802  5AC1 22 39 00             LD      (KEYINT+1),HL           ; KEYINT
4803  5AC4 11 22 00             LD      DE,R0021-I6336+1
4804  5AC7 19                   ADD     HL,DE
4805  5AC8 ED 5B 4B F3          LD      DE,(YF34B)
4806  5ACC 73                   LD      (HL),E
4807  5ACD 23                   INC     HL
4808  5ACE 72                   LD      (HL),D                  ; start of KEYINT stack
4809  5ACF 01 A0 00             LD      BC,160                  ; size of the KEYINT stack
4810  5AD2 CD AD 5E             CALL    A5EAD                   ; allocate MSXDOS memory (halt when error)
4811  5AD5 3E C3                LD      A,0C3H
4812  5AD7 CD 62 5C             CALL    A5C62                   ; enable XFER, ENAKRN and ENARAM routines
4813  5ADA 37                   SCF
4814  5ADB 21 23 F3     A5ADB:  LD      HL,YF323                ; address diskerror handler pointer
4815  5ADE 11 68 F3             LD      DE,XF368                ; ENAKRN routine
4816  5AE1 3A 40 F3             LD      A,(YF340)               ; coldboot flag
4817  5AE4 C3 1E C0             JP      YC000+01EH              ; start bootloader
4818  5AE7
4819  5AE7              ;       Subroutine      read bootsector of drive 0 and validate
4820  5AE7              ;       Inputs          ________________________
4821  5AE7              ;       Outputs         ________________________
4822  5AE7
4823  5AE7 3A 75 74     A5AE7:  LD      A,(DEFDPB+1)
4824  5AEA 4F                   LD      C,A                     ; default mediadescriptor
4825  5AEB 06 01                LD      B,1                     ; 1 sector
4826  5AED 2A 51 F3             LD      HL,(YF351)              ; use the dir sectorbuffer
4827  5AF0 E5                   PUSH    HL
4828  5AF1 AF                   XOR     A                       ; drive 0, read
4829  5AF2 5F                   LD      E,A
4830  5AF3 57                   LD      D,A                     ; sector 0
4831  5AF4 CD 44 01             CALL    PHYDIO                  ; read sector
4832  5AF7 3E FF                LD      A,0FFH
4833  5AF9 32 46 F2             LD      (YF246),A               ; dirsector buffer is invalid
4834  5AFC E1                   POP     HL
4835  5AFD D8                   RET     C                       ; error, quit
4836  5AFE 7E                   LD      A,(HL)
4837  5AFF 11 00 C0             LD      DE,YC000
4838  5B02 01 00 01             LD      BC,256
4839  5B05 ED B0                LDIR                            ; copy bootloader to C000
4840  5B07 FE EB                CP      0EBH
4841  5B09 C8                   RET     Z                       ; valid bootloader, quit
4842  5B0A FE E9                CP      0E9H
4843  5B0C C8                   RET     Z                       ; valid bootloader, quit
4844  5B0D 37                   SCF
4845  5B0E C9                   RET
4846  5B0F
4847  5B0F 0C 00        I5B0F:  DEFB    LOW RDSLT,C63F4-C63F4
4848  5B11 14 57                DEFB    LOW WRSLT,C6415-C63F4
4849  5B13 30 2E                DEFB    LOW CALLF,C6443-C6415
4850  5B15 1C 12                DEFB    LOW CALSLT,C6455-C6443
4851  5B17 24 47                DEFB    LOW ENASLT,J649C-C6455
4852  5B19 00                   DEFB    0
4853  5B1A
4854  5B1A 00 41 55 54  T5B1A:  defb    0,"AUTOEXECBAS",0
4854  5B1E 4F 45 58 45
4854  5B22 43 42 41 53
4854  5B26 00
4855  5B27              L5B1A   EQU     $-T5B1A
4856  5B27
4857  5B27 52 55 4E 22  T5B27:  defb    'RUN"AUTOEXEC.BAS',0
4857  5B2B 41 55 54 4F
4857  5B2F 45 58 45 43
4857  5B33 2E 42 41 53
4857  5B37 00
4858  5B38              L5B27   EQU     $-T5B27
4859  5B38
4860  5B38 92 5B        T5B38:  defw    A5B92                   ; start DiskBASIC in direct mode
4861  5B3A
4862  5B3A              ;       Subroutine      Start DiskBASIC
4863  5B3A
4864  5B3A CD 60 5C     A5B3A:  call    A5C60                   ; disable XFER,ENARAM,ENAKRN routines
4865  5B3D 21 27 5B             ld      hl,T5B27
4866  5B40 11 68 F5             ld      de,BUF+10
4867  5B43 01 11 00             ld      bc,L5B27
4868  5B46 ED B0                ldir                            ; copy RUN"AUTOEXEC.BAS in BUF
4869  5B48 21 40 F3             ld      hl,YF340
4870  5B4B 7E                   ld      a,(hl)
4871  5B4C A7                   and     a                       ; is this a warm boot ?
4872  5B4D 74                   ld      (hl),h                  ; next boot is a warm boot
4873  5B4E 20 1E                jr      nz,A5B6E                ; yep, no autoexec.bas but a parameter from MSXDOS ?
4874  5B50
4875  5B50              ;       Subroutine      try to start AUTOEXEC.BAS
4876  5B50
4877  5B50 32 46 F3             ld      (YF346),a               ; flag CALL SYSTEM invalid
4878  5B53 21 38 5B             ld      hl,T5B38
4879  5B56 22 23 F3             ld      (YF323),hl              ; setup disk errorhandler
4880  5B59 21 1A 5B             ld      hl,T5B1A
4881  5B5C 11 79 F5             ld      de,BUF+10+L5B27
4882  5B5F 01 25 00             ld      bc,37                   ; a bit odd, should be L5B15
4883  5B62 D5                   push    de
4884  5B63 ED B0                ldir                            ; setup FCB for autoexec.bas
4885  5B65 D1                   pop     de
4886  5B66 CD 62 44             call    A4462                   ; open FCB
4887  5B69 3C                   inc     a
4888  5B6A 28 26                jr      z,A5B92                 ; error, start DiskBASIC in direct mode (with date input)
4889  5B6C 18 32                jr      A5BA0                   ; no error, start DiskBASIC and run AUTOEXEC.BAS
4890  5B6E
diskrom.asm(4891): warning: Accessing low memory address 0x0000, is it ok?: ld      a,(WBOOT)
4891  5B6E 3A 00 00     A5B6E:  ld      a,(WBOOT)
4892  5B71 FE C3                cp      0C3H                    ; MSXDOS active ?
4893  5B73 20 27                jr      nz,A5B9C                ; nope, start DiskBASIC in direct mode
4894  5B75 21 80 00             ld      hl,00080H
4895  5B78 46                   ld      b,(hl)
4896  5B79 04                   inc     b
4897  5B7A 05                   dec     b
4898  5B7B 28 1F                jr      z,A5B9C                 ; no parameter specified (after the BASIC command), start DiskBASIC in direct mode
4899  5B7D 23           A5B7D:  inc     hl
4900  5B7E 7E                   ld      a,(hl)
4901  5B7F FE 20                cp      " "
4902  5B81 20 04                jr      nz,A5B87
4903  5B83 10 F8                djnz    A5B7D                   ; remove spaces in front
4904  5B85 18 15                jr      A5B9C                   ; no parameter specified, just start diskbasic
4905  5B87
4906  5B87 AF           A5B87:  xor     a
4907  5B88 48                   ld      c,b
4908  5B89 47                   ld      b,a
4909  5B8A 11 6C F5             ld      de,BUF+14
4910  5B8D ED B0                ldir                            ; copy file name after the RUN" at BUF+10
4911  5B8F 12                   ld      (de),a                  ; and a end of line marker
4912  5B90 18 0E                jr      A5BA0                   ; start DiskBASIC and run specified basicfile
4913  5B92
4914  5B92              ;       Subroutine      start DiskBASIC in direct mode (cold boot)
4915  5B92
4916  5B92 31 00 C2     A5B92:  ld      sp,0C200H               ; switch to a temporary stack
4917  5B95 3A 38 F3             ld      a,(YF338)
4918  5B98 A7                   and     a
4919  5B99 CC 3F 5D             call    z,A5D3F                 ; no clockchip, ask the date
4920  5B9C
4921  5B9C              ;       Subroutine      start DiskBASIC in direct mode
4922  5B9C
4923  5B9C AF           A5B9C:  xor     a
4924  5B9D 32 6B F5             ld      (BUF+13),a              ; make it a ordinary RUN at BUF+10
4925  5BA0
4926  5BA0              ;       Subroutine      start DiskBASIC
4927  5BA0
4928  5BA0 31 00 C2     A5BA0:  ld      sp,0C200H               ; switch to a temporary stack
4929  5BA3 3A 43 F3             ld      a,(RAMAD2)
4930  5BA6 26 80                ld      h,080H
4931  5BA8 CD 24 00             call    ENASLT                  ; ram on page 2
4932  5BAB 3A C1 FC             ld      a,(EXPTBL+0)
4933  5BAE 26 00                ld      h,000H
4934  5BB0 CD 24 00             call    ENASLT                  ; rom-bios on page 0
4935  5BB3 2A 48 FC             ld      hl,(BOTTOM)
4936  5BB6 AF                   xor     a
4937  5BB7 77                   ld      (hl),a                  ; before the program always a end of line marker
4938  5BB8 23                   inc     hl
4939  5BB9 22 76 F6             ld      (TXTTAB),hl             ; start of basictext space
4940  5BBC 77                   ld      (hl),a
4941  5BBD 23                   inc     hl
4942  5BBE 77                   ld      (hl),a                  ; end of program marker
4943  5BBF 23                   inc     hl
4944  5BC0 22 C2 F6             ld      (VARTAB),hl             ; start of the variablespace
4945  5BC3 21 FF FF             ld      hl,0FFFFH
4946  5BC6 22 1C F4             ld      (CURLIN),hl             ; interpreter in direct mode
4947  5BC9 CD 16 5C             call    A5C16                   ; initialize diskbasic
4948  5BCC ED 7B 74 F6          ld      sp,(STKTOP)
4949  5BD0 3E FF                ld      a,0FFH
4950  5BD2 32 DE F3             ld      (CNSDFG),a              ; enable function keys
4951  5BD5 3E 0C                ld      a,00CH
4952  5BD7 DF                   rst     018H                    ; clear screen
4953  5BD8 DD 21 31 7D          ld      ix,M7D31
4954  5BDC CD 59 01             call    CALBAS                  ; display BASIC startscreen
4955  5BDF CD 86 5F             call    A5F86
4956  5BE2 0D 0A                defb    13,10
4957  5BE4 44 69 73 6B          defb    "Disk BASIC version 1.0",13,10
4957  5BE8 20 42 41 53
4957  5BEC 49 43 20 76
4957  5BF0 65 72 73 69
4957  5BF4 6F 6E 20 31
4957  5BF8 2E 30 0D 0A
4958  5BFC 00                   defb    0
4959  5BFD 21 73 41             ld      hl,M4173
4960  5C00 E5                   push    hl                      ; execute RUN command
4961  5C01 21 67 F5             ld      hl,BUF+10-1
4962  5C04 E5                   push    hl                      ; basicpointer
4963  5C05 21 9E F5             ld      hl,BUF+64
4964  5C08 E5                   push    hl
4965  5C09 36 E1                ld      (hl),0E1H
4966  5C0B 23                   inc     hl
4967  5C0C 36 C9                ld      (hl),0C9H               ; pop the basicpointer when returning
4968  5C0E 3A C1 FC             ld      a,(EXPTBL+0)
4969  5C11 26 40                ld      h,040H
4970  5C13 C3 24 00             jp      ENASLT                  ; enable basic-rom on page 1
4971  5C16
4972  5C16              ;       Subroutine      initialize DiskBASIC environment
4973  5C16              ;       Inputs          ________________________
4974  5C16              ;       Outputs         ________________________
4975  5C16
4976  5C16 21 AE 72     A5C16:  ld      hl,T72AE
4977  5C19 22 23 F3             ld      (YF323),hl              ; setup diskerror handler
4978  5C1C 21 6C 5C             ld      hl,T5C6C
4979  5C1F 22 25 F3             ld      (YF325),hl              ; setup abort handler
4980  5C22 2A 49 F3             ld      hl,(YF349)
4981  5C25 22 4A FC             ld      (HIMEM),hl
4982  5C28 3A 45 F3             ld      a,(YF345)
4983  5C2B 4F                   ld      c,a
4984  5C2C 06 00                ld      b,0                     ; number of FCBs
4985  5C2E 11 25 00             ld      de,37
4986  5C31 CD 16 49             call    A4916                   ; * 37
4987  5C34 CD B8 5E             call    A5EB8                   ; allocate memory (adjust HIMEM, halt when error)
4988  5C37 22 53 F3             ld      (YF353),hl		; Disk BASIC i/o channel FCBs
4989  5C3A 01 19 00             ld      bc,25                   ; size of the BLOAD/BSAVE code
4990  5C3D CD B8 5E             call    A5EB8                   ; allocate memory (adjust HIMEM, halt when error)
4991  5C40 22 78 F3             ld      (XF377+1),hl            ; setup BLOAD jumpentry
4992  5C43 EB                   ex      de,hl
4993  5C44 21 ED 62             ld      hl,T62ED
4994  5C47 ED B0                ldir                            ; copy bsave/bload patch code
4995  5C49 21 F5 FF             ld      hl,0FFF5H
4996  5C4C 19                   add     hl,de
4997  5C4D 22 7B F3             ld      (XF37A+1),hl            ; setup BSAVE jumpentry
4998  5C50 3A 48 F3             ld      a,(YF348)
4999  5C53 11 F9 FF             ld      de,0FFF9H
5000  5C56 19                   add     hl,de
5001  5C57 77                   ld      (hl),a
5002  5C58 11 0E 00             ld      de,0000EH
5003  5C5B 19                   add     hl,de
5004  5C5C 77                   ld      (hl),a
5005  5C5D CD 5F 5F             call    A5F5F                   ; setup i/o channels
5006  5C60                                                      ; disable XFER..
5007  5C60 3E C9        A5C60:  ld      a,0C9H
5008  5C62 32 68 F3     A5C62:  ld      (XF368+0),a
5009  5C65 32 6B F3             ld      (XF36B+0),a
5010  5C68 32 6E F3             ld      (XFER+0),a
5011  5C6B C9                   ret
5012  5C6C
5013  5C6C A7 40        T5C6C:  defw    A40A7                   ; restart basic
5014  5C6E
5015  5C6E              ;       Subroutine      initialize hooks
5016  5C6E              ;       Inputs          ________________________
5017  5C6E              ;       Outputs         ________________________
5018  5C6E
5019  5C6E 21 E8 62     A5C6E:  ld      hl,T62E8
5020  5C71 11 BC FE             ld      de,H.POSD
5021  5C74 01 05 00             ld      bc,5
5022  5C77 ED B0                ldir
5023  5C79 21 96 5C             ld      hl,T5C96
5024  5C7C 5E           A5C7C:  ld      e,(hl)
5025  5C7D 23                   inc     hl
5026  5C7E 56                   ld      d,(hl)
5027  5C7F 23                   inc     hl
5028  5C80 7B                   ld      a,e
5029  5C81 B2                   or      d
5030  5C82 C8                   ret     z
5031  5C83 EB                   ex      de,hl
5032  5C84 36 F7                ld      (hl),0F7H
5033  5C86 23                   inc     hl
5034  5C87 3A 48 F3             ld      a,(YF348)
5035  5C8A 77                   ld      (hl),a
5036  5C8B 23                   inc     hl
5037  5C8C EB                   ex      de,hl
5038  5C8D ED A0                ldi
5039  5C8F ED A0                ldi
5040  5C91 3E C9                ld      a,0C9H
5041  5C93 12                   ld      (de),a
5042  5C94 18 E6                jr      A5C7C
5043  5C96
5044  5C96 EF FD 96 6B  T5C96:  defw    H.DSKO,A6B96
5045  5C9A 17 FE 75 6B          defw    H.DSKI,A6B75
5046  5C9E F9 FD 20 6F          defw    H.NAME,A6F20
5047  5CA2 FE FD 00 6F          defw    H.KILL,A6F00
5048  5CA6 08 FE 7B 70          defw    H.COPY,A707B
5049  5CAA 12 FE 61 70          defw    H.DSKF,A7061
5050  5CAE 21 FE D7 6C          defw    H.LSET,A6CD7
5051  5CB2 26 FE D6 6C          defw    H.RSET,A6CD6
5052  5CB6 2B FE 49 6C          defw    H.FIEL,A6C49
5053  5CBA 30 FE AF 6D          defw    H.MKI,A6DAF
5054  5CBE 35 FE B2 6D          defw    H.MKS,A6DB2
5055  5CC2 3A FE B5 6D          defw    H.MKD,A6DB5
5056  5CC6 3F FE D7 6D          defw    H.CVI,A6DD7
5057  5CCA 44 FE DA 6D          defw    H.CVS,A6DDA
5058  5CCE 49 FE DD 6D          defw    H.CVD,A6DDD
5059  5CD2 4E FE A4 66          defw    H.GETP,A66A4
5060  5CD6 58 FE B3 66          defw    H.NOFO,A66B3
5061  5CDA 5D FE FC 66          defw    H.NULO,A66FC
5062  5CDE 62 FE D0 68          defw    H.NTFL,A68D0
5063  5CE2 71 FE 0E 69          defw    H.BINS,A690E
5064  5CE6 76 FE 39 69          defw    H.BINL,A6939
5065  5CEA 7B FE 88 6E          defw    H.FILE,A6E88
5066  5CEE 80 FE DA 6B          defw    H.DGET,A6BDA
5067  5CF2 85 FE 8E 68          defw    H.FILO,A688E
5068  5CF6 8A FE 19 68          defw    H.INDS,A6819
5069  5CFA 99 FE 0D 70          defw    H.LOC,A700D
5070  5CFE 9E FE 09 70          defw    H.LOF,A7009
5071  5D02 A3 FE 70 6E          defw    H.EOF,A6E70
5072  5D06 AD FE 75 68          defw    H.BAKU,A6875
5073  5D0A B2 FE 23 73          defw    H.PARD,A7323
5074  5D0E B7 FE 7C 73          defw    H.NODE,A737C
5075  5D12 FD FE D3 71          defw    H.ERRP,A71D3
5076  5D16 A7 FF 55 60          defw    H.PHYD,A6055
5077  5D1A AC FF B0 60          defw    H.FORM,A60B0
5078  5D1E 31 F3 D3 56          defw    XF331,A56D3
5079  5D22 00 00                defw    0
5080  5D24
5081  5D24 01 48 2D 01  T5D24:  defb    1,048H,"-",1,041H,"-",1,047H,"):",0
5081  5D28 41 2D 01 47
5081  5D2C 29 3A 00
5082  5D2F 4D 2D 44 2D  T5D2F:  defb    "M-D-Y):",0
5082  5D33 59 29 3A 00
5083  5D37 44 2D 4D 2D  T5D37:  defb    "D-M-Y):",0
5083  5D3B 59 29 3A 00
5084  5D3F
5085  5D3F              ;       Subroutine      Ask for systemdate
5086  5D3F              ;       Inputs          ________________________
5087  5D3F              ;       Outputs         ________________________
5088  5D3F
5089  5D3F ED 73 C0 F5  A5D3F:  ld      (BUF+98),sp
5090  5D43 3E 14                ld      a,20
5091  5D45 32 C2 F5             ld      (BUF+100),a             ; size of lineinput buffer
5092  5D48 CD 86 5F     A5D48:  call    A5F86
5093  5D4B 0D 0A 45 6E          defb    13,10,"Enter date (",0
5093  5D4F 74 65 72 20
5093  5D53 64 61 74 65
5093  5D57 20 28 00
5094  5D5A 00                   nop
5095  5D5B 00                   nop
5096  5D5C 00                   nop
5097  5D5D 00                   nop                             ; room for expansion ??
5098  5D5E 00                   nop                             ; extra 5 bytes
5099  5D5F 3A 0E F3             ld      a,(YF30E)
5100  5D62 FE 01                cp      1
5101  5D64 21 24 5D             ld      hl,T5D24
5102  5D67 38 08                jr      c,A5D71                 ; japanese Y-M-D
5103  5D69 21 2F 5D             ld      hl,T5D2F
5104  5D6C 28 03                jr      z,A5D71                 ; european D-M-Y
5105  5D6E 21 37 5D             ld      hl,T5D37                ; american M-D-Y
5106  5D71 CD 8C 5F     A5D71:  call    A5F8C                   ; print string
5107  5D74 21 4B 5E             ld      hl,T5E4B
5108  5D77 22 25 F3             ld      (YF325),hl              ; setup abort handler
5109  5D7A 11 C2 F5             ld      de,BUF+100
5110  5D7D CD E0 50             call    A50E0                   ; BDOS 0A (buffered console input)
5111  5D80 21 C4 F5             ld      hl,BUF+100+2
5112  5D83 7E                   ld      a,(hl)
5113  5D84 FE 0D                cp      00DH
5114  5D86 C8                   ret     z                       ; empty input, do not set date, quit
5115  5D87 3A 0E F3             ld      a,(YF30E)
5116  5D8A A7                   and     a
5117  5D8B 20 12                jr      nz,A5D9F                ; no japanese
5118  5D8D CD 0D 5E             call    A5E0D                   ; get date year
5119  5D90 CD E9 5D             call    A5DE9                   ; check for seperator and get date number (month)
5120  5D93 51                   ld      d,c
5121  5D94 7E                   ld      a,(hl)
5122  5D95 23                   inc     hl
5123  5D96 B8                   cp      b                       ; check if same seperator as the first one
5124  5D97 20 32                jr      nz,A5DCB                ; nope, error
5125  5D99 CD F8 5D             call    A5DF8                   ; get date number (day)
5126  5D9C 59                   ld      e,c
5127  5D9D 18 1A                jr      A5DB9
5128  5D9F
5129  5D9F CD F8 5D     A5D9F:  call    A5DF8                   ; get date number (day european, month american)
5130  5DA2 51                   ld      d,c
5131  5DA3 CD E9 5D             call    A5DE9                   ; check for seperator and get date number (month european, day american)
5132  5DA6 59                   ld      e,c
5133  5DA7 7E                   ld      a,(hl)
5134  5DA8 23                   inc     hl
5135  5DA9 B8                   cp      b                       ; check if same seperator as the first one
5136  5DAA 20 05                jr      nz,A5DB1                ; nope, error
5137  5DAC CD 0D 5E             call    A5E0D                   ; get date year
5138  5DAF 18 08                jr      A5DB9
5139  5DB1
5140  5DB1 D5           A5DB1:  push    de
5141  5DB2 CD 3C 55             call    A553C                   ; get date
5142  5DB5 E5                   push    hl
5143  5DB6 DD E1                pop     ix
5144  5DB8 D1           A5DB8:  pop     de
5145  5DB9 3A 0E F3     A5DB9:  ld      a,(YF30E)
5146  5DBC FE 02                cp      002H
5147  5DBE 38 03                jr      c,A5DC3                 ; european or japanese, month already in register D
5148  5DC0 7B                   ld      a,e
5149  5DC1 5A                   ld      e,d
5150  5DC2 57                   ld      d,a                     ; month in register D, day in register E
5151  5DC3 DD E5        A5DC3:  push    ix
5152  5DC5 E1                   pop     hl
5153  5DC6 CD 52 55             call    A5552                   ; set date
5154  5DC9 B7                   or      a
5155  5DCA C8                   ret     z                       ; no error, quit
5156  5DCB ED 7B C0 F5  A5DCB:  ld      sp,(BUF+98)
5157  5DCF CD 86 5F             call    A5F86
5158  5DD2 0D 0A 49 6E          defb    13,10,"Invalid date",0
5158  5DD6 76 61 6C 69
5158  5DDA 64 20 64 61
5158  5DDE 74 65 00
5159  5DE1 00                   nop
5160  5DE2 00                   nop
5161  5DE3 00                   nop
5162  5DE4 00                   nop                             ; room for expansion ??
5163  5DE5 00                   nop                             ; extra 5 bytes
5164  5DE6 C3 48 5D             jp      A5D48                   ; try again
5165  5DE9
5166  5DE9 7E           A5DE9:  ld      a,(hl)
5167  5DEA 23                   inc     hl
5168  5DEB 47                   ld      b,a
5169  5DEC FE 2F                cp      "/"
5170  5DEE 28 08                jr      z,A5DF8
5171  5DF0 FE 2E                cp      "."
5172  5DF2 28 04                jr      z,A5DF8
5173  5DF4 FE 2D                cp      "-"
5174  5DF6 20 D3                jr      nz,A5DCB
5175  5DF8
5176  5DF8 CD 41 5E     A5DF8:  call    A5E41                   ; is digit ?
5177  5DFB 38 CE                jr      c,A5DCB                 ; nope, error
5178  5DFD 4F                   ld      c,a                     ; save digit
5179  5DFE CD 41 5E             call    A5E41                   ; is digit ?
5180  5E01 D8                   ret     c                       ; nope, quit
5181  5E02 F5                   push    af
5182  5E03 79                   ld      a,c
5183  5E04 87                   add     a,a
5184  5E05 87                   add     a,a
5185  5E06 81                   add     a,c
5186  5E07 87                   add     a,a
5187  5E08 4F                   ld      c,a                     ; first digit *10
5188  5E09 F1                   pop     af
5189  5E0A 81                   add     a,c
5190  5E0B 4F                   ld      c,a                     ; + second digit
5191  5E0C C9                   ret
5192  5E0D
5193  5E0D CD F8 5D     A5E0D:  call    A5DF8                   ; get date number
5194  5E10 41                   ld      b,c
5195  5E11 CD 41 5E             call    A5E41                   ; is digit (is year more as 2 digit number) ?
5196  5E14 38 16                jr      c,A5E2C                 ; nope, make it a 4 digit number
5197  5E16 2B                   dec     hl
5198  5E17 CD F8 5D             call    A5DF8                   ; get date number
5199  5E1A E5                   push    hl
5200  5E1B C5                   push    bc
5201  5E1C 48                   ld      c,b
5202  5E1D 06 00                ld      b,000H
5203  5E1F D5                   push    de
5204  5E20 11 64 00             ld      de,100
5205  5E23 CD 16 49             call    A4916                   ; * 100
5206  5E26 D1                   pop     de
5207  5E27 E1                   pop     hl
5208  5E28 26 00                ld      h,000H
5209  5E2A 18 0F                jr      A5E3B
5210  5E2C
5211  5E2C E5           A5E2C:  push    hl
5212  5E2D 48                   ld      c,b
5213  5E2E 06 00                ld      b,0
5214  5E30 21 6C 07             ld      hl,1900
5215  5E33 79                   ld      a,c
5216  5E34 FE 50                cp      80
5217  5E36 30 03                jr      nc,A5E3B                ; >= 80 means 19xx
5218  5E38 21 D0 07             ld      hl,2000                 ; >80 means 20xx
5219  5E3B 09           A5E3B:  add     hl,bc
5220  5E3C E5                   push    hl
5221  5E3D DD E1                pop     ix
5222  5E3F E1                   pop     hl
5223  5E40 C9                   ret
5224  5E41
5225  5E41 7E           A5E41:  ld      a,(hl)
5226  5E42 D6 30                sub     030H
5227  5E44 D8                   ret     c
5228  5E45 FE 0A                cp      00AH
5229  5E47 3F                   ccf
5230  5E48 D8                   ret     c
5231  5E49 23                   inc     hl
5232  5E4A C9                   ret
5233  5E4B
5234  5E4B 4D 5E        T5E4B:  defw    A5E4D
5235  5E4D
5236  5E4D ED 7B C0 F5  A5E4D:  ld      sp,(BUF+98)
5237  5E51 C9                   ret
5238  5E52
5239  5E52 21 C1 FC     A5E52:  LD      HL,EXPTBL
5240  5E55 06 04                LD      B,4
5241  5E57 AF                   XOR     A
5242  5E58 E6 03        J5E58:  AND     03H
5243  5E5A B6                   OR      (HL)
5244  5E5B C5           J5E5B:  PUSH    BC
5245  5E5C E5                   PUSH    HL
5246  5E5D 61                   LD      H,C
5247  5E5E 2E 10        J5E5E:  LD      L,10H
5248  5E60 F5           J5E60:  PUSH    AF
5249  5E61 CD 0C 00             CALL    RDSLT
5250  5E64 2F                   CPL
5251  5E65 5F                   LD      E,A
5252  5E66 F1                   POP     AF
5253  5E67 D5                   PUSH    DE
5254  5E68 F5                   PUSH    AF
5255  5E69 CD 14 00             CALL    WRSLT
5256  5E6C F1                   POP     AF
5257  5E6D D1                   POP     DE
5258  5E6E F5                   PUSH    AF
5259  5E6F D5                   PUSH    DE
5260  5E70 CD 0C 00             CALL    RDSLT
5261  5E73 C1                   POP     BC
5262  5E74 47                   LD      B,A
5263  5E75 79                   LD      A,C
5264  5E76 2F                   CPL
5265  5E77 5F                   LD      E,A
5266  5E78 F1                   POP     AF
5267  5E79 F5                   PUSH    AF
5268  5E7A C5                   PUSH    BC
5269  5E7B CD 14 00             CALL    WRSLT
5270  5E7E C1                   POP     BC
5271  5E7F 79                   LD      A,C
5272  5E80 B8                   CP      B
5273  5E81 20 17                JR      NZ,J5E9A
5274  5E83 F1                   POP     AF
5275  5E84 2D                   DEC     L
5276  5E85 20 D9                JR      NZ,J5E60
5277  5E87 24                   INC     H
5278  5E88 24                   INC     H
5279  5E89 24                   INC     H
5280  5E8A 24                   INC     H
5281  5E8B 4F                   LD      C,A
5282  5E8C 7C                   LD      A,H
5283  5E8D FE 40                CP      40H
5284  5E8F 28 05                JR      Z,J5E96
5285  5E91 FE 80                CP      80H
5286  5E93 79                   LD      A,C
5287  5E94 20 C8                JR      NZ,J5E5E
5288  5E96 79           J5E96:  LD      A,C
5289  5E97 E1                   POP     HL
5290  5E98 E1                   POP     HL
5291  5E99 C9                   RET
5292  5E9A
5293  5E9A F1           J5E9A:  POP     AF
5294  5E9B E1                   POP     HL
5295  5E9C C1                   POP     BC
5296  5E9D A7                   AND     A
5297  5E9E F2 A7 5E             JP      P,J5EA7
5298  5EA1 C6 04                ADD     A,4
5299  5EA3 FE 90                CP      90H
5300  5EA5 38 B4                JR      C,J5E5B
5301  5EA7 23           J5EA7:  INC     HL
5302  5EA8 3C                   INC     A
5303  5EA9 10 AD                DJNZ    J5E58
5304  5EAB 37                   SCF
5305  5EAC C9                   RET
5306  5EAD
5307  5EAD              ;       Subroutine      allocate MSXDOS memory (halt when error)
5308  5EAD              ;       Inputs          HL = number of bytes to allocate
5309  5EAD              ;       Outputs
5310  5EAD
5311  5EAD 2A 4B F3     A5EAD:  ld      hl,(YF34B)
5312  5EB0 A7                   and     a
5313  5EB1 ED 42                sbc     hl,bc
5314  5EB3 22 4B F3             ld      (YF34B),hl              ; new top of MSXDOS
5315  5EB6 18 09                jr      A5EC1
5316  5EB8
5317  5EB8              ;       Subroutine      allocate memory (adjust HIMEM, halt when error)
5318  5EB8              ;       Inputs          HL = number of bytes to allocate
5319  5EB8              ;       Outputs
5320  5EB8
5321  5EB8 2A 4A FC     A5EB8:  ld      hl,(HIMEM)
5322  5EBB A7                   and     a
5323  5EBC ED 42                sbc     hl,bc
5324  5EBE 22 4A FC             ld      (HIMEM),hl              ; new top of system
5325  5EC1 38 09        A5EC1:  jr      c,A5ECC                 ; new top below zero, halt system
5326  5EC3 7C                   ld      a,h
5327  5EC4 FE C2                cp      0C2H                    ; new top below 0C200H ?
5328  5EC6 18 03                jr      A5ECB
5329  5EC8
5330  5EC8              ;       Subroutine      allocate memory (adjust BASIC areapointers, halt when error)
5331  5EC8              ;       Inputs          HL = number of bytes to allocate
5332  5EC8              ;       Outputs
5333  5EC8
5334  5EC8 CD E8 5E     A5EC8:  call    A5EE8                   ; allocate memory (adjust BASIC areapointers)
5335  5ECB D0           A5ECB:  ret     nc
5336  5ECC CD 86 5F     A5ECC:  call    A5F86
5337  5ECF 0C                   defb    12
5338  5ED0 4E 6F 20 65  T5ED0:  defb    "No enough memory",0
5338  5ED4 6E 6F 75 67
5338  5ED8 68 20 6D 65
5338  5EDC 6D 6F 72 79
5338  5EE0 00
5339  5EE1 00                   nop
5340  5EE2 00                   nop
5341  5EE3 00                   nop
5342  5EE4 00                   nop                             ; room for expansion ??
5343  5EE5 00                   nop                             ; extra 5 bytes
5344  5EE6 F3                   di
5345  5EE7 76                   halt
5346  5EE8
5347  5EE8              ;       Subroutine      allocate memory (adjust BASIC areapointers)
5348  5EE8              ;       Inputs          HL = number of bytes to allocate
5349  5EE8              ;       Outputs         Cx set if out of memory
5350  5EE8
5351  5EE8 7D           A5EE8:  ld      a,l
5352  5EE9 B4                   or      h                       ; size = 0 ?
5353  5EEA C8                   ret     z                       ; yep, quit
5354  5EEB AF                   xor     a
5355  5EEC 95                   sub     l
5356  5EED 6F                   ld      l,a
5357  5EEE 3E 00                ld      a,0
5358  5EF0 9C                   sbc     a,h
5359  5EF1 67                   ld      h,a
5360  5EF2 4D                   ld      c,l
5361  5EF3 44                   ld      b,h                     ; - size
5362  5EF4 39                   add     hl,sp
5363  5EF5 3F                   ccf
5364  5EF6 D8                   ret     c                       ; stack would become below zero, quit
5365  5EF7 ED 5B 48 FC          ld      de,(BOTTOM)
5366  5EFB ED 52                sbc     hl,de
5367  5EFD D8                   ret     c                       ; stack would become below BOTTOM, quit
5368  5EFE 7C                   ld      a,h
5369  5EFF FE 02                cp      HIGH 512
5370  5F01 D8                   ret     c                       ; less then 512 bytes for stack, quit
5371  5F02 C5                   push    bc
5372  5F03 21 00 00             ld      hl,0
5373  5F06 39                   add     hl,sp
5374  5F07 5D                   ld      e,l
5375  5F08 54                   ld      d,h                     ; top of stack
5376  5F09 09                   add     hl,bc
5377  5F0A E5                   push    hl                      ; new top of stack
5378  5F0B 2A 74 F6             ld      hl,(STKTOP)
5379  5F0E A7                   and     a
5380  5F0F ED 52                sbc     hl,de
5381  5F11 4D                   ld      c,l
5382  5F12 44                   ld      b,h                     ; size of the stack
5383  5F13 03                   inc     bc
5384  5F14 E1                   pop     hl
5385  5F15 F9                   ld      sp,hl                   ; new stack
5386  5F16 EB                   ex      de,hl
5387  5F17 ED B0                ldir                            ; copy stack content to new location
5388  5F19 C1                   pop     bc
5389  5F1A 2A 4A FC             ld      hl,(HIMEM)
5390  5F1D 09                   add     hl,bc
5391  5F1E 22 4A FC             ld      (HIMEM),hl              ; adjust HIMEM
5392  5F21 11 EA FD             ld      de,-(2*256+2*9+2*2)
5393  5F24 19                   add     hl,de
5394  5F25 22 60 F8             ld      (FILTAB),hl             ; 1 user i/o channel + 1 system i/o channel
5395  5F28 EB                   ex      de,hl
5396  5F29 2A 72 F6             ld      hl,(MEMSIZ)
5397  5F2C 09                   add     hl,bc
5398  5F2D 22 72 F6             ld      (MEMSIZ),hl             ; adjust MEMSIZ
5399  5F30 2A 62 F8             ld      hl,(NULBUF)
5400  5F33 09                   add     hl,bc
5401  5F34 22 62 F8             ld      (NULBUF),hl             ; adjust NULBUF
5402  5F37 2A 74 F6             ld      hl,(STKTOP)
5403  5F3A 09                   add     hl,bc                   ; adjust STKTOP
5404  5F3B 22 74 F6     A5F3B:  ld      (STKTOP),hl
5405  5F3E 2B                   dec     hl
5406  5F3F 2B                   dec     hl
5407  5F40 22 B1 F6             ld      (SAVSTK),hl
5408  5F43 6B                   ld      l,e
5409  5F44 62                   ld      h,d
5410  5F45 23                   inc     hl
5411  5F46 23                   inc     hl
5412  5F47 23                   inc     hl
5413  5F48 23                   inc     hl
5414  5F49 3E 02                ld      a,2                     ; 2 i/o channels (1 user, 1 system)
5415  5F4B EB           A5F4B:  ex      de,hl
5416  5F4C 73                   ld      (hl),e
5417  5F4D 23                   inc     hl
5418  5F4E 72                   ld      (hl),d
5419  5F4F 23                   inc     hl
5420  5F50 EB                   ex      de,hl
5421  5F51 01 07 00             ld      bc,7
5422  5F54 70                   ld      (hl),b                  ; i/o channel not open
5423  5F55 09                   add     hl,bc
5424  5F56 70                   ld      (hl),b                  ; clear i/o channel flags
5425  5F57 01 02 01             ld      bc,256+9-7
5426  5F5A 09                   add     hl,bc
5427  5F5B 3D                   dec     a
5428  5F5C 20 ED                jr      nz,A5F4B
5429  5F5E C9                   ret
5430  5F5F
5431  5F5F 3E 01        A5F5F:  ld      a,1
5432  5F61 32 5F F8             ld      (MAXFIL),a
5433  5F64 2A 4A FC             ld      hl,(HIMEM)
5434  5F67 11 EA FD             ld      de,-(2*256+2*9+2*2)
5435  5F6A 19                   add     hl,de
5436  5F6B 22 60 F8             ld      (FILTAB),hl
5437  5F6E 5D                   ld      e,l
5438  5F6F 54                   ld      d,h
5439  5F70 2B                   dec     hl
5440  5F71 2B                   dec     hl
5441  5F72 22 72 F6             ld      (MEMSIZ),hl
5442  5F75 01 C8 00             ld      bc,200
5443  5F78 A7                   and     a
5444  5F79 ED 42                sbc     hl,bc
5445  5F7B E5                   push    hl
5446  5F7C 21 0D 00             ld      hl,2*2+9
5447  5F7F 19                   add     hl,de
5448  5F80 22 62 F8             ld      (NULBUF),hl
5449  5F83 E1                   pop     hl
5450  5F84 18 B5                jr      A5F3B
5451  5F86
5452  5F86 E3           A5F86:  ex      (sp),hl
5453  5F87 CD 8C 5F             call    A5F8C                   ; print string
5454  5F8A E3                   ex      (sp),hl
5455  5F8B C9                   ret
5456  5F8C
5457  5F8C 7E           A5F8C:  ld      a,(hl)
5458  5F8D 23                   inc     hl
5459  5F8E A7                   and     a
5460  5F8F C8                   ret     z
5461  5F90 CD 8F 40             call    A408F                   ; output to screen
5462  5F93 18 F7                jr      A5F8C
5463  5F95
5464  5F95              ;       Subroutine      get slotid of page 3
5465  5F95              ;       Inputs          -
5466  5F95              ;       Outputs         A = slotid
5467  5F95
5468  5F95 06 06        A5F95:  ld      b,6
5469  5F97 21                   defb    021H                    ; LD HL,xxxx (skips next instruction)
5470  5F98
5471  5F98              ;       Subroutine      get slotid of page 2
5472  5F98              ;       Inputs          -
5473  5F98              ;       Outputs         A = slotid
5474  5F98
5475  5F98 06 04        A5F98:  ld      b,4
5476  5F9A CD 65 F3             call    XF365
5477  5F9D C5                   push    bc
5478  5F9E 0F           A5F9E:  rrca
5479  5F9F 10 FD                djnz    A5F9E
5480  5FA1 CD EC 5F             call    A5FEC
5481  5FA4 C1                   pop     bc
5482  5FA5 B6                   or      (hl)
5483  5FA6 4F                   ld      c,a
5484  5FA7 23                   inc     hl
5485  5FA8 23                   inc     hl
5486  5FA9 23                   inc     hl
5487  5FAA 23                   inc     hl
5488  5FAB 7E                   ld      a,(hl)
5489  5FAC 05                   dec     b
5490  5FAD 05                   dec     b
5491  5FAE 0F           A5FAE:  rrca
5492  5FAF 10 FD                djnz    A5FAE
5493  5FB1 18 0B                jr      A5FBE
5494  5FB3
5495  5FB3              ;       Subroutine      get my slotid
5496  5FB3              ;       Inputs          -
5497  5FB3              ;       Outputs         A = slotid
5498  5FB3
5499  5FB3 CD E7 5F     A5FB3:  call    A5FE7
5500  5FB6 B6                   or      (hl)
5501  5FB7 F0                   ret     p                       ; non expanded slot, quit
5502  5FB8 4F                   ld      c,a
5503  5FB9 23                   inc     hl
5504  5FBA 23                   inc     hl
5505  5FBB 23                   inc     hl
5506  5FBC 23                   inc     hl
5507  5FBD 7E                   ld      a,(hl)
5508  5FBE E6 0C        A5FBE:  and     00CH
5509  5FC0 B1                   or      c
5510  5FC1 C9                   ret
5511  5FC2
5512  5FC2              ;       Subroutine      get my disk hardware driver workarea
5513  5FC2              ;       Inputs          -
5514  5FC2              ;       Outputs         HL = IX = pointer to workarea
5515  5FC2              ;       Remark          used by the disk hardware driver
5516  5FC2
5517  5FC2              GETWRK:
5518  5FC2 CD CD 5F     A5FC2:  call    A5FCD                   ; get my SLTWRK entry
5519  5FC5 7E                   ld      a,(hl)
5520  5FC6 23                   inc     hl
5521  5FC7 66                   ld      h,(hl)
5522  5FC8 6F                   ld      l,a                     ; pointer to workarea
5523  5FC9 E5                   push    hl
5524  5FCA DD E1                pop     ix
5525  5FCC C9                   ret
5526  5FCD
5527  5FCD              ;       Subroutine      get my SLTWRK entry
5528  5FCD              ;       Inputs          -
5529  5FCD              ;       Outputs         HL = pointer to SLTWRK entry
5530  5FCD
5531  5FCD CD E7 5F     A5FCD:  call    A5FE7                   ; get my primairy slot
5532  5FD0 87                   add     a,a
5533  5FD1 87                   add     a,a
5534  5FD2 87                   add     a,a
5535  5FD3 37                   scf
5536  5FD4 8F                   adc     a,a                     ; primary slot*4 + 1
5537  5FD5 4F                   ld      c,a
5538  5FD6 7E                   ld      a,(hl)
5539  5FD7 87                   add     a,a
5540  5FD8 9F                   sbc     a,a
5541  5FD9 E6 0C                and     00CH                    ; 0 for non expanded, 0CH for expanded
5542  5FDB 23                   inc     hl
5543  5FDC 23                   inc     hl
5544  5FDD 23                   inc     hl
5545  5FDE 23                   inc     hl
5546  5FDF A6                   and     (hl)
5547  5FE0 B1                   or      c
5548  5FE1 87                   add     a,a                     ; word entries
5549  5FE2 21 09 FD             ld      hl,SLTWRK
5550  5FE5 18 0C                jr      A5FF3
5551  5FE7
5552  5FE7              ;       Subroutine      get my EXPTBL entry
5553  5FE7              ;       Inputs          -
5554  5FE7              ;       Outputs         HL = pointer to SLTWRK entry
5555  5FE7
5556  5FE7 CD 65 F3     A5FE7:  call    XF365
5557  5FEA 0F                   rrca
5558  5FEB 0F                   rrca
5559  5FEC E6 03        A5FEC:  and     003H
5560  5FEE 21 C1 FC             ld      hl,EXPTBL
5561  5FF1 06 00        A5FF1:  ld      b,000H
5562  5FF3 4F           A5FF3:  ld      c,a
5563  5FF4 09                   add     hl,bc
5564  5FF5 C9                   ret
5565  5FF6
5566  5FF6              ;	  Subroutine register interrupt handler
5567  5FF6              ;	     Inputs  HL = interrupt handler
5568  5FF6              ;	     Outputs ________________________
5569  5FF6              ;            Remark  used by the disk hardware driver
5570  5FF6
5571  5FF6              SETINT:
5572  5FF6 3A 9F FD     A5FF6:  ld      a,(H.TIMI+0)
5573  5FF9 FE C9                cp      0C9H
5574  5FFB 28 15                jr      z,A6012                 ; H.TIMI not hooked, skip saving H.TIMI
5575  5FFD E5                   push    hl
5576  5FFE 3A 99 FD             ld      a,(DEVICE)              ; current disk interface number
5577  6001 21 29 FB             ld      hl,YFB29
5578  6004 CD F1 5F             call    A5FF1
5579  6007 09                   add     hl,bc
5580  6008 09                   add     hl,bc                   ; get pointer to DRVINT entry
5581  6009 EB                   ex      de,hl
5582  600A 21 A0 FD             ld      hl,H.TIMI+1
5583  600D 0E 03                ld      c,3
5584  600F ED B0                ldir                            ; save slotid and address (assumes that is hooked by a CALLF!)
5585  6011 E1                   pop     hl
5586  6012 F3           A6012:  di
5587  6013 3E F7                ld      a,0F7H
5588  6015 32 9F FD             ld      (H.TIMI+0),a
5589  6018 22 A1 FD             ld      (H.TIMI+2),hl           ; disk hardware driver interrupt handler
5590  601B 3E C9                ld      a,0C9H
5591  601D 32 A3 FD             ld      (H.TIMI+4),a
5592  6020 CD 2D 40             call    A402D                   ; get slotid of this disk interface
5593  6023 32 A0 FD             ld      (H.TIMI+1),a            ; slotid of this disk interface
5594  6026 C9                   ret
5595  6027
5596  6027              ;       Subroutine      call orginal interrupt handler
5597  6027              ;       Inputs          -
5598  6027              ;       Outputs         -
5599  6027              ;       Remark          used by the disk hardware driver
5600  6027
5601  6027              PRVINT:
5602  6027 F5           A6027:  push    af                      ; store VDP status register
5603  6028 CD 2D 40             call    A402D                   ; get slotid of this disk interface
5604  602B 06 04                ld      b,4
5605  602D 11 29 FB             ld      de,YFB29
5606  6030 21 22 FB             ld      hl,YFB21+1
5607  6033 BE           A6033:  cp      (hl)                    ; is this my DRVTBL entry ?
5608  6034 28 09                jr      z,A603F                 ; yep, get the saved interrupt handler and jump to it
5609  6036 13                   inc     de
5610  6037 13                   inc     de
5611  6038 13                   inc     de
5612  6039 23                   inc     hl
5613  603A 23                   inc     hl
5614  603B 10 F6                djnz    A6033                   ; next DRVTBL and DRVINT entry
5615  603D F1           A603D:  pop     af                      ; restore VDP status register
5616  603E C9                   ret                             ; quit
5617  603F
5618  603F EB           A603F:  ex      de,hl
5619  6040 7E                   ld      a,(hl)
5620  6041 A7                   and     a                       ; disk interface has saved a interrupt handler ?
5621  6042 28 F9                jr      z,A603D                 ; nope, quit
5622  6044 F5                   push    af
5623  6045 FD E1                pop     iy                      ; slotid
5624  6047 23                   inc     hl
5625  6048 4E                   ld      c,(hl)
5626  6049 23                   inc     hl
5627  604A 46                   ld      b,(hl)
5628  604B C5                   push    bc
5629  604C DD E1                pop     ix                      ; address interrupt handler
5630  604E F1                   pop     af                      ; restore VDP status register
5631  604F C3 1C 00             jp      CALSLT                  ; call interrupt handler
5632  6052
5633  6052              ;       Subroutine      read disksector
5634  6052              ;       Inputs          A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferaddress
5635  6052              ;       Outputs         -
5636  6052
5637  6052 A7           A6052:  and     a
5638  6053 38                   defb    038H                    ; JR C,xx (skips next instruction)
5639  6054
5640  6054              ;       Subroutine      write disksector
5641  6054              ;       Inputs          A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferaddress
5642  6054              ;       Outputs         -
5643  6054
5644  6054 37           A6054:  scf
5645  6055
5646  6055              ;       Subroutine      PHYDIO BIOS call (H.PHYD)
5647  6055              ;       Inputs          A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferaddress
5648  6055              ;       Outputs         -
5649  6055
5650  6055 DD E5        A6055:  push    ix
5651  6057 FD E5                push    iy
5652  6059 E5                   push    hl
5653  605A F5                   push    af
5654  605B CD 86 60             call    A6086                   ; get diskdriverparameters
5655  605E 6F                   ld      l,a
5656  605F F1                   pop     af                      ; restore flags (Cx)
5657  6060 7D                   ld      a,l
5658  6061 DD 21 10 40          ld      ix,T4010
5659  6065 18 14                jr      A607B
5660  6067
5661  6067 DD E5        A6067:  push    ix
5662  6069 DD 21 13 40          ld      ix,T4013
5663  606D 18 06                jr      A6075
5664  606F
5665  606F DD E5        A606F:  push    ix
5666  6071 DD 21 16 40          ld      ix,T4016
5667  6075 FD E5        A6075:  push    iy
5668  6077 E5                   push    hl
5669  6078 CD 86 60             call    A6086                   ; get diskdriverparameters
5670  607B E1           A607B:  pop     hl
5671  607C E5                   push    hl
5672  607D CD 1C 00             call    CALSLT
5673  6080 C3 6E 63             jp      A636E
5674  6083
5675  6083              ; Unused code
5676  6083              ; looks like the previous jump is a patch, may be the ei instruction at the end of the patch was forgotten ??
5677  6083              ; patch code does not fit here, 1 byte too less
5678  6083
5679  6083 00                   nop
5680  6084 00                   nop
5681  6085 00                   nop
5682  6086
5683  6086              ;       Subroutine      get diskdriverparameters
5684  6086              ;       Inputs          A=driveid
5685  6086              ;       Outputs         IYH=slotid diskdriver, H=slotid diskdriver, A=local driveid diskdriver
5686  6086
5687  6086 32 3F F3     A6086:  ld      (YF33F),a               ; save driveid (for PROMPT)
5688  6089 21 21 FB             ld      hl,YFB21                ; disk interface table
5689  608C 96           A608C:  sub     (hl)
5690  608D 38 04                jr      c,A6093
5691  608F 23                   inc     hl
5692  6090 23                   inc     hl
5693  6091 18 F9                jr      A608C
5694  6093
5695  6093 86           A6093:  add     a,(hl)                  ; driveid disk interface
5696  6094 23                   inc     hl
5697  6095 66                   ld      h,(hl)                  ; slotid disk interface
5698  6096 E5                   push    hl
5699  6097 FD E1                pop     iy
5700  6099 C9                   ret
5701  609A
5702  609A              ;       Subroutine      mark FAT buffer as invalid
5703  609A              ;       Inputs          A=driveid
5704  609A              ;       Outputs         ________________________
5705  609A
5706  609A 21 55 F3     A609A:  ld      hl,YF355
5707  609D CD F1 5F             call    A5FF1
5708  60A0 09                   add     hl,bc
5709  60A1 5E                   ld      e,(hl)
5710  60A2 23                   inc     hl
5711  60A3 56                   ld      d,(hl)                  ; pointer to DPB
5712  60A4 21 13 00             ld      hl,00013H
5713  60A7 19                   add     hl,de
5714  60A8 5E                   ld      e,(hl)
5715  60A9 23                   inc     hl
5716  60AA 56                   ld      d,(hl)
5717  60AB 1B                   dec     de
5718  60AC EB                   ex      de,hl
5719  60AD 36 FF                ld      (hl),0FFH
5720  60AF C9                   ret
5721  60B0
5722  60B0              ;       Subroutine      FORMAT BIOS call (H.FORM)
5723  60B0              ;       Inputs
5724  60B0              ;       Outputs         ________________________
5725  60B0
5726  60B0 A7           A60B0:  and     a                       ; use free BASIC memory as formatbuffer
5727  60B1
5728  60B1              ;       Subroutine      format disk
5729  60B1              ;       Inputs          Cx reset = use free BASIC memory as formatbuffer, Cx set = use specified buffer, HL = start of buffer, BC = size of buffer
5730  60B1              ;       Outputs         ________________________
5731  60B1
5732  60B1 ED 73 39 F3  A60B1:  ld      (YF339),sp              ; save stackpointer for abort
5733  60B5 D4 D6 62             call    nc,A62D6                ; get formatbuffer in free BASIC memory
5734  60B8 E5                   push    hl
5735  60B9 C5                   push    bc
5736  60BA 3A 47 F3             ld      a,(YF347)
5737  60BD 3D                   dec     a                       ; only 1 diskdrive ?
5738  60BE 28 41                jr      z,A6101                 ; yep, skip drivename input and use driveid 0
5739  60C0 CD 86 5F     A60C0:  call    A5F86
5740  60C3 44 72 69 76          defb    "Drive name? (",0
5740  60C7 65 20 6E 61
5740  60CB 6D 65 3F 20
5740  60CF 28 00
5741  60D1 00                   nop
5742  60D2 00                   nop
5743  60D3 00                   nop
5744  60D4 00                   nop                             ; room for expansion ??
5745  60D5 00                   nop                             ; extra 5 bytes
5746  60D6 3A 47 F3             ld      a,(YF347)
5747  60D9 47                   ld      b,a                     ; number of diskdrives
5748  60DA 3E 41                ld      a,"A"                   ; starts with "A" drive
5749  60DC 18 07                jr      A60E5
5750  60DE
5751  60DE F5           A60DE:  push    af
5752  60DF 3E 2C                ld      a,","
5753  60E1 CD 8F 40             call    A408F                   ; output to screen
5754  60E4 F1                   pop     af
5755  60E5 CD 8F 40     A60E5:  call    A408F                   ; output to screen
5756  60E8 3C                   inc     a
5757  60E9 10 F3                djnz    A60DE                   ; next drive
5758  60EB CD 86 5F             call    A5F86
5759  60EE 29 20 00             defb    ") ",0
5760  60F1 CD 95 61             call    A6195                   ; get fresh consoleinput (CTRL-C aborts)
5761  60F4 CD C6 62             call    A62C6                   ; print input and CR/LF
5762  60F7 E6 DF                and     0DFH                    ; upcase
5763  60F9 D6 41                sub     "A"
5764  60FB 21 47 F3             ld      hl,YF347
5765  60FE BE                   cp      (hl)                    ; driveletter valid ?
5766  60FF 30 BF                jr      nc,A60C0                ; nope, ask again
5767  6101 CD 9A 60     A6101:  call    A609A                   ; mark FAT buffer as invalid
5768  6104 CD 86 60             call    A6086                   ; get diskdriverparameters
5769  6107 FD E5                push    iy
5770  6109 F5                   push    af
5771  610A FD E5                push    iy
5772  610C DD 21 19 40          ld      ix,T4019
5773  6110 CD 1C 00             call    CALSLT                  ; call CHOICE diskdriver
5774  6113 7D                   ld      a,l
5775  6114 B4                   or      h                       ; choice string ?
5776  6115 28 27                jr      z,A613E                 ; nope, skip choice input and use choice 0 (default format)
5777  6117 F1                   pop     af
5778  6118 F5           A6118:  push    af
5779  6119 CD 0C 00             call    RDSLT
5780  611C A7                   and     a
5781  611D 28 07                jr      z,A6126
5782  611F CD 8F 40             call    A408F                   ; output to screen
5783  6122 23                   inc     hl
5784  6123 F1                   pop     af
5785  6124 18 F2                jr      A6118                   ; print choice string
5786  6126
5787  6126 F1           A6126:  pop     af
5788  6127 CD 86 5F             call    A5F86
5789  612A 3F 20 00             defb    "? ",0
5790  612D CD 95 61     A612D:  call    A6195                   ; get fresh consoleinput (CTRL-C aborts)
5791  6130 D6 31                sub     "1"
5792  6132 FE 09                cp      009H                    ; input "1"-"9" ?
5793  6134 30 F7                jr      nc,A612D                ; nope, ask again
5794  6136 C6 31                add     a,"1"
5795  6138 CD C6 62     A6138:  call    A62C6                   ; print input and CR/LF
5796  613B D6 30                sub     "0"                     ; choice 1-9
5797  613D F5                   push    af
5798  613E CD 74 61     A613E:  call    A6174                   ; prompt and get fresh consoleinput (CTRL-C aborts)
5799  6141 F1                   pop     af
5800  6142 D1                   pop     de
5801  6143 FD E1                pop     iy
5802  6145 C1                   pop     bc
5803  6146 E1                   pop     hl
5804  6147 DD 21 1C 40          ld      ix,T401C
5805  614B CD 1C 00             call    CALSLT                  ; call DSKFMT diskdriver
5806  614E 21 E0 61             ld      hl,T61E0
5807  6151 30 0A                jr      nc,A615D                ; no error, print "format complete" and quit
5808  6153 21 48 62             ld      hl,T6248
5809  6156 CD F1 5F             call    A5FF1                   ; get errorstring entry
5810  6159 7E                   ld      a,(hl)
5811  615A 23                   inc     hl
5812  615B 66                   ld      h,(hl)
5813  615C 6F                   ld      l,a                     ; pointer to errorstring
5814  615D CD C9 62     A615D:  call    A62C9                   ; print CR/LF
5815  6160 CD 8C 5F             call    A5F8C                   ; print string
5816  6163 C3 C9 62             jp      A62C9                   ; print CR/LF
5817  6166
5818  6166              ;       Subroutine      get fresh keyboardinput
5819  6166              ;       Inputs
5820  6166              ;       Outputs         ________________________
5821  6166
5822  6166 AF           A6166:  xor     a
5823  6167 32 36 F3             ld      (YF336),a               ; no saved input
5824  616A DD 21 56 01          ld      ix,KILBUF
5825  616E CD AB 40             call    A40AB                   ; KILBUF BIOS call
5826  6171 C3 78 40             jp      A4078                   ; get keyboardinput
5827  6174
5828  6174 CD 86 5F     A6174:  call    A5F86
5829  6177 53 74 72 69          defb    "Strike a key when ready ",0
5829  617B 6B 65 20 61
5829  617F 20 6B 65 79
5829  6183 20 77 68 65
5829  6187 6E 20 72 65
5829  618B 61 64 79 20
5829  618F 00
5830  6190 00                   nop
5831  6191 00                   nop
5832  6192 00                   nop
5833  6193 00                   nop                             ; room for expansion ??
5834  6194 00                   nop                             ; extra 5 bytes
5835  6195 CD 66 61     A6195:  call    A6166                   ; get fresh keyboardinput
5836  6198 FE 03                cp      003H
5837  619A C0                   ret     nz
5838  619B ED 7B 39 F3          ld      sp,(YF339)
5839  619F CD 86 5F             call    A5F86
5840  61A2 0D 0A 41 62          defb    13,10,"Aborted",0
5840  61A6 6F 72 74 65
5840  61AA 64 00
5841  61AC C9                   ret
5842  61AD
5843  61AD 57 72 69 74  T61AD:  defb    "Write protected",0
5843  61B1 65 20 70 72
5843  61B5 6F 74 65 63
5843  61B9 74 65 64 00
5844  61BD 4E 6F 74 20  T61BD:  defb    "Not ready",0
5844  61C1 72 65 61 64
5844  61C5 79 00
5845  61C7 44 69 73 6B  T61C7:  defb    "Disk error",0
5845  61CB 20 65 72 72
5845  61CF 6F 72 00
5846  61D2 42 61 64 20  T61D2:  defb    "Bad parameter",0
5846  61D6 70 61 72 61
5846  61DA 6D 65 74 65
5846  61DE 72 00
5847  61E0 46 6F 72 6D  T61E0:  defb    "Format complete",0
5847  61E4 61 74 20 63
5847  61E8 6F 6D 70 6C
5847  61EC 65 74 65 00
5848  61F0
5849  61F0              ; unused code ??
5850  61F0
5851  61F0 00                   nop
5852  61F1
5853  61F1 11 98 F6     A61F1:  ld      de,TEMPST+30
5854  61F4 2A 78 F6             ld      hl,(TEMPPT)
5855  61F7 22 F8 F7             ld      (DAC+2),hl
5856  61FA 3E 03                ld      a,3
5857  61FC 32 63 F6             ld      (VALTYP),a
5858  61FF CD F3 2E             call    VMOVE                   ; copy stringdescriptor
5859  6202 11 9B F6             ld      de,TEMPST+30+3
5860  6205 E7                   rst     020H
5861  6206 22 78 F6             ld      (TEMPPT),hl
5862  6209 C0                   ret     nz
5863  620A C3 F7 72             jp      A72F7
5864  620D
5865  620D 21 21 FB     A620D:  ld      hl,YFB21
5866  6210 06 04                ld      b,4
5867  6212 23           A6212:  inc     hl
5868  6213 7E                   ld      a,(hl)                  ; slotid of this interface
5869  6214 F5                   push    af
5870  6215 FD E1                pop     iy                      ; IYH = slotid
5871  6217 23                   inc     hl
5872  6218 E5                   push    hl
5873  6219 C5                   push    bc
5874  621A 21 1F 40             ld      hl,T401F
5875  621D E5                   push    hl
5876  621E DD E1                pop     ix                      ; IX = MTOFF
5877  6220 A7                   and     a                       ; entry for interface used ?
5878  6221 C4 0C 00             call    nz,RDSLT                ; yep, read MTOFF entry
5879  6224 A7                   and     a                       ; entry for interface used AND a valid MTOFF entry ?
5880  6225 C4 1C 00             call    nz,CALSLT               ; yep, call MTOFF of interface
5881  6228 C1                   pop     bc
5882  6229 E1                   pop     hl
5883  622A 10 E6                djnz    A6212                   ; next interface
5884  622C C9                   ret
5885  622D
5886  622D 3A D0 FE     A622D:  ld      a,(H.CLEA+0)
5887  6230 FE C9                cp      0C9H
5888  6232 28 11        A6232:  jr      z,A6245
5889  6234 21 F2 72     A6234:  ld      hl,T72F2
5890  6237 11 D5 FE             ld      de,H.LOPD
5891  623A 01 05 00             ld      bc,00005H
5892  623D ED B0                ldir
5893  623F CD 2D 40             call    A402D                   ; get slotid of this disk interface
5894  6242 32 D6 FE             ld      (H.LOPD+1),a
5895  6245 C3 2D 40     A6245:  jp      A402D                   ; get slotid of this disk interface
5896  6248
5897  6248 AD 61        T6248:  defw    T61AD           ; dskfmt error 0
5898  624A BD 61                defw    T61BD           ; dskfmt error 2
5899  624C C7 61                defw    T61C7           ; dskfmt error 4
5900  624E C7 61                defw    T61C7           ; dskfmt error 6
5901  6250 C7 61                defw    T61C7           ; dskfmt error 8
5902  6252 C7 61                defw    T61C7           ; dskfmt error 10
5903  6254 D2 61                defw    T61D2           ; dskfmt error 12
5904  6256 D0 5E                defw    T5ED0           ; dskfmt error 14
5905  6258 C7 61                defw    T61C7           ; dskfmt error 16
5906  625A
5907  625A              PROMPT:
5908  625A 3A 3F F3     L625A:  ld      a,(YF33F)               ; driveid
5909  625D C6 41                add     a,"A"
5910  625F CD 4F F2             call    XF24F                   ; PROMPT hook
5911  6262 F5                   push    af
5912  6263 CD 86 5F             call    A5F86
5913  6266 0D 0A 49 6E          defb    13,10,"Insert diskette for drive ",0
5913  626A 73 65 72 74
5913  626E 20 64 69 73
5913  6272 6B 65 74 74
5913  6276 65 20 66 6F
5913  627A 72 20 64 72
5913  627E 69 76 65 20
5913  6282 00
5914  6283 00                   nop
5915  6284 00                   nop
5916  6285 00                   nop
5917  6286 00                   nop
5918  6287 00                   nop
5919  6288 00                   nop
5920  6289 00                   nop
5921  628A 00                   nop
5922  628B 00                   nop                             ; room for expansion
5923  628C 00                   nop                             ; extra 10 bytes
5924  628D F1                   pop     af
5925  628E CD 8F 40             call    A408F                   ; output to screen
5926  6291 CD 86 5F             call    A5F86
5927  6294 3A 0D 0A 61          defb    ":",13,10,"and strike a key when ready",0
5927  6298 6E 64 20 73
5927  629C 74 72 69 6B
5927  62A0 65 20 61 20
5927  62A4 6B 65 79 20
5927  62A8 77 68 65 6E
5927  62AC 20 72 65 61
5927  62B0 64 79 00
5928  62B3 00                   nop
5929  62B4 00                   nop
5930  62B5 00                   nop
5931  62B6 00                   nop
5932  62B7 00                   nop
5933  62B8 00                   nop
5934  62B9 00                   nop
5935  62BA 00                   nop
5936  62BB 00                   nop                             ; room for expansion
5937  62BC 00                   nop                             ; extra 10 bytes
5938  62BD CD 66 61     A62BD:  call    A6166                   ; get fresh keyboardinput
5939  62C0 FE 03                cp      003H
5940  62C2 28 F9                jr      z,A62BD
5941  62C4 18 03                jr      A62C9                   ; print CR/LF
5942  62C6
5943  62C6 CD 8F 40     A62C6:  call    A408F                   ; output to screen
5944  62C9 F5           A62C9:  push    af
5945  62CA 3E 0D                ld      a,00DH
5946  62CC CD 8F 40             call    A408F                   ; output to screen
5947  62CF 3E 0A                ld      a,00AH
5948  62D1 CD 8F 40             call    A408F                   ; output to screen
5949  62D4 F1           A62D4:  pop     af
5950  62D5 C9                   ret
5951  62D6
5952  62D6 21 00 FF     A62D6:  ld      hl,0FF00H
5953  62D9 39                   add     hl,sp                   ; leave room for the stack
5954  62DA ED 5B C6 F6          ld      de,(STREND)             ; end of used BASIC memory
5955  62DE AF                   xor     a
5956  62DF ED 52                sbc     hl,de
5957  62E1 4D                   ld      c,l
5958  62E2 44                   ld      b,h                     ; size of buffer
5959  62E3 EB                   ex      de,hl                   ; start of buffer
5960  62E4 D0                   ret     nc
5961  62E5 4F                   ld      c,a
5962  62E6 47                   ld      b,a                     ; not enough room, size=0
5963  62E7 C9                   ret
5964  62E8
5965  62E8              ;       Subroutine      first character filespecifier is 000H-039H (H.POSD)
5966  62E8              ;       Inputs
5967  62E8              ;       Outputs         ________________________
5968  62E8
5969  62E8 33           T62E8:  inc     sp
5970  62E9 33                   inc     sp
5971  62EA C3 1D 6F             jp      PARDEV+8                ; skip strong cassette devicecheck
5972  62ED
5973  62ED 7A           T62ED:  ld      a,d
5974  62EE FE 09                cp      9                       ; diskdevice ?
5975  62F0 D2 C9 6E             jp      nc,BLOAD+3              ; nope, resume BLOAD
5976  62F3 F7                   rst     030H
5977  62F4 00                   defb    000H
5978  62F5 A7 6A                defw    A6AA7                   ; call BLOAD for diskdevice
5979  62F7 E5                   push    hl
5980  62F8 C3 F4 6E             jp      BLDFIN                  ; finish BLOAD
5981  62FB
5982  62FB 7A                   ld      a,d
5983  62FC FE 09                cp      9                       ; diskdevice ?
5984  62FE D2 95 6E             jp      nc,BSAVE+3              ; nope, resume BSAVE
5985  6301 F7                   rst     030H
5986  6302 00                   defb    000H
5987  6303 E7 69                defw    A69E7
5988  6305 C9                   ret
5989  6306
5990  6306 D5           A6306:  PUSH    DE                      ; DE = destination, HL = reloctable, BC = source
5991  6307 EB                   EX      DE,HL
5992  6308 A7                   AND     A
5993  6309 ED 42                SBC     HL,BC                   ; delta dest - source
5994  630B E5                   PUSH    HL
5995  630C DD E1                POP     IX                      ; delta in IX
5996  630E EB                   EX      DE,HL
5997  630F D1                   POP     DE
5998  6310 4E           J6310:  LD      C,(HL)                  ; DE = destination, HL = ptr start reloctable, BC = source
5999  6311 23                   INC     HL
6000  6312 46                   LD      B,(HL)                  ; BC holds contents reloctable entry
6001  6313 23                   INC     HL
6002  6314 79                   LD      A,C
6003  6315 A0                   AND     B
6004  6316 3C                   INC     A
6005  6317 C8                   RET     Z                       ; ffffh to signal end of relocation table
6006  6318 D5                   PUSH    DE                      ; DE = destination, HL = ptr to next entry reloctable, BC reloctable entry
6007  6319 EB                   EX      DE,HL
6008  631A 09                   ADD     HL,BC                   ; destination + reloctable entry
6009  631B 23                   INC     HL                      ; +1
6010  631C 4E                   LD      C,(HL)
6011  631D 23                   INC     HL
6012  631E 46                   LD      B,(HL)                  ; BC = current contents of destination memory
6013  631F E5                   PUSH    HL
6014  6320 DD E5                PUSH    IX
6015  6322 E1                   POP     HL                      ; HL = delta
6016  6323 09                   ADD     HL,BC                   ; calculate new value
6017  6324 4D                   LD      C,L
6018  6325 44                   LD      B,H                     ; BC is new value
6019  6326 E1                   POP     HL                      ; HL = ptr to next entry reloctable
6020  6327 70                   LD      (HL),B
6021  6328 2B                   DEC     HL
6022  6329 71                   LD      (HL),C                  ; update contents of destination memory with new value
6023  632A EB                   EX      DE,HL
6024  632B D1                   POP     DE
6025  632C 18 E2                JR      J6310                   ; next entry
6026  632E
6027  632E 0C 00        T632E:  DEFW    R000C-I6336
6028  6330 1E 00                DEFW    R001E+1-I6336
6029  6332 2F 00                DEFW    R002F-I6336
6030  6334 FF FF                DEFW    0FFFFH
6031  6336
6032  6336 DD E5        I6336:  PUSH    IX
6033  6338 FD E5                PUSH    IY
6034  633A E5                   PUSH    HL
6035  633B D5                   PUSH    DE
6036  633C C5                   PUSH    BC
6037  633D F5                   PUSH    AF
6038  633E D9                   EXX
6039  633F 08                   EX      AF,AF'
6040  6340 F5                   PUSH    AF
6041  6341 E5                   PUSH    HL
6042  6342 2A 5F 63     R000C:  LD      HL,(D635E+1)
6043  6345 7D                   LD      A,L
6044  6346 B4                   OR      H
6045  6347 E1                   POP     HL
6046  6348 DD 21 38 00          LD      IX,KEYINT
6047  634C FD 2A C0 FC          LD      IY,(EXPTBL+0-1)
6048  6350 20 23                JR      NZ,J6375
6049  6352 F1                   POP     AF
6050  6353 ED 73 5F 63  R001E:  LD      (D635E+1),SP
6051  6357 31 00 00     R0021:  LD      SP,0
6052  635A CD 1C 00             CALL    CALSLT
6053  635D F3                   DI
6054  635E 31 00 00     D635E:  LD      SP,0
6055  6361 E5                   PUSH    HL
6056  6362 21 00 00             LD      HL,0
6057  6365 22 5F 63     R002F:  LD      (D635E+1),HL
6058  6368 E1                   POP     HL
6059  6369 08           J6369:  EX      AF,AF'
6060  636A D9                   EXX
6061  636B F1                   POP     AF
6062  636C C1                   POP     BC
6063  636D D1                   POP     DE
6064  636E E1           A636E:  POP     HL
6065  636F FD E1                POP     IY
6066  6371 DD E1                POP     IX
6067  6373 FB                   EI
6068  6374 C9                   RET
6069  6375
6070  6375 F1           J6375:  POP     AF
6071  6376 CD 1C 00             CALL    CALSLT
6072  6379 18 EE                JR      J6369
6073  637B
6074  637B              L6336   EQU     $-I6336
6075  637B
6076  637B F5           I637B:  PUSH    AF
6077  637C E5                   PUSH    HL
6078  637D D5                   PUSH    DE
6079  637E C5                   PUSH    BC
6080  637F CD 2D 40             CALL    A402D                   ; get slotid of this disk interface
6081  6382 F5                   PUSH    AF
6082  6383 26 40                LD      H,40H
6083  6385 3A 42 F3             LD      A,(RAMAD1)
6084  6388 CD 24 00             CALL    ENASLT
6085  638B F1                   POP     AF
6086  638C C1                   POP     BC
6087  638D D1                   POP     DE
6088  638E E1                   POP     HL
6089  638F ED B0                LDIR
6090  6391 E5                   PUSH    HL
6091  6392 D5                   PUSH    DE
6092  6393 C5                   PUSH    BC
6093  6394 CD 68 F3             CALL    XF368
6094  6397 26 40                LD      H,40H
6095  6399 CD 24 00             CALL    ENASLT
6096  639C C1                   POP     BC
6097  639D D1                   POP     DE
6098  639E E1                   POP     HL
6099  639F F1                   POP     AF
6100  63A0 C9                   RET
6101  63A1
6102  63A1              L637B   EQU     $-I637B
6103  63A1
6104  63A1 18 06        I63A1:  JR      J63A9
6105  63A3 F5           _63A3:  PUSH    AF
6106  63A4 3A 42 F3             LD      A,(RAMAD1)
6107  63A7 18 04                JR      J63AD
6108  63A9
6109  63A9 F5           J63A9:  PUSH    AF
6110  63AA 3A 48 F3             LD      A,(YF348)
6111  63AD E5           J63AD:  PUSH    HL
6112  63AE D5                   PUSH    DE
6113  63AF C5                   PUSH    BC
6114  63B0 26 40                LD      H,40H
6115  63B2 CD 24 00             CALL    ENASLT
6116  63B5 C1                   POP     BC
6117  63B6 D1                   POP     DE
6118  63B7 E1                   POP     HL
6119  63B8 F1                   POP     AF
6120  63B9 C9                   RET
6121  63BA
6122  63BA              L63A1   EQU     $-I63A1
6123  63BA
6124  63BA 00 00        T63BA:  DEFW    C63F4-C63F4
6125  63BC              ;        DEFW    R0003-C63F4
6126  63BC              ;        DEFW    R0017-C63F4
6127  63BC              ;        DEFW    R001C-C63F4
6128  63BC              ;        DEFW    R0022-C63F4
6129  63BC              ;        DEFW    R0025-C63F4
6130  63BC              ;        DEFW    R0039-C63F4
6131  63BC              ;        DEFW    R003F-C63F4
6132  63BC              ;        DEFW    R0069-C63F4
6133  63BC              ;        DEFW    R006C-C63F4
6134  63BC              ;        DEFW    R007E-C63F4
6135  63BC              ;        DEFW    R0094-C63F4
6136  63BC              ;        DEFW    J649C-C63F4
6137  63BC              ;        DEFW    R00AB-C63F4
6138  63BC              ;        DEFW    R00BC-C63F4
6139  63BC              ;        DEFW    J6404-C63F4
6140  63BC              ;        DEFW    R0013-C63F4
6141  63BC              ;        DEFW    J6425-C63F4
6142  63BC              ;        DEFW    R0034-C63F4
6143  63BC              ;        DEFW    J646C-C63F4
6144  63BC              ;        DEFW    R007B-C63F4
6145  63BC              ;        DEFW    J64A9-C63F4
6146  63BC              ;        DEFW    R00B8-C63F4
6147  63BC              ;        DEFW    J651E-C63F4
6148  63BC              ;        DEFW    R0131-C63F4
6149  63BC              ;        DEFW    J652C-C63F4
6150  63BC              ;        DEFW    R0145-C63F4
6151  63BC              ;        DEFW    C6541-C63F4
6152  63BC FF FF                DEFW    0FFFFH
6153  63BE
6154  63BE
6155  63BE              ;       Subroutine      MSXDOS RDSLT
6156  63BE              ;       Inputs          ________________________
6157  63BE              ;       Outputs         ________________________
6158  63BE              C63F4:
6159  63BE DD 21 06 00          ld ix, 0x0006
6160  63C2 5B                   DB 0x5b ; .LIL
6161  63C3 FF                   rst 38h
6162  63C4 C9                   ret
6163  63C5 00 00 00...          DS 06415h - $
6164  6415              ;C63F4:  CALL    C64C2                   ; calculate slot masks
6165  6415              ;R0003:  JP      M,J6404                 ; slot is expanded,
6166  6415              ;        RST     38h                     ; MSM: replaced IN A by RST38h
6167  6415              ;        DB      0a8h
6168  6415              ;        ;IN      A,(0A8H)
6169  6415              ;        LD      D,A
6170  6415              ;        AND     C
6171  6415              ;        OR      B
6172  6415              ;        CALL    RDPRIM
6173  6415              ;        LD      A,E
6174  6415              ;        RET
6175  6415
6176  6415              ;J6404:  CALL    C6511                   ; page 0 and same primary slot of helper routines ?
6177  6415              ;R0013:  JP      Z,J651E                 ; yep, use workaround code RDSLT in page 3
6178  6415              ;        PUSH    HL
6179  6415              ;R0017:  CALL    C64E7
6180  6415              ;        EX      (SP),HL
6181  6415              ;        PUSH    BC
6182  6415              ;R001C:  CALL    C63F4                   ; MSXDOS RDSLT
6183  6415              ;        JR      J6436
6184  6415
6185  6415              ;       Subroutine      MSXDOS WRSLT
6186  6415              ;       Inputs          ________________________
6187  6415              ;       Outputs         ________________________
6188  6415              C6415:
6189  6415 DD 21 08 00          ld ix, 0x0008
6190  6419 5B                   DB 0x5b ; .LIL
6191  641A FF                   rst 38h
6192  641B C9                   ret
6193  641C 00 00 00...          DS 06443h - $
6194  6443
6195  6443              ;C6415:  PUSH    DE
6196  6443              ;R0022:  CALL    C64C2                   ; calculate slot masks
6197  6443              ;R0025:  JP      M,J6425                 ; slot is expanded,
6198  6443              ;        POP     DE
6199  6443              ;        RST     38h                     ; MSM: replaced IN A by RST38h
6200  6443              ;        DB      0a8h
6201  6443              ;        ;IN      A,(0A8H)
6202  6443              ;        LD      D,A
6203  6443              ;        AND     C
6204  6443              ;        OR      B
6205  6443              ;        JP      WRPRIM
6206  6443
6207  6443              ;J6425:  CALL    C6511                   ; page 0 and same primary slot of helper routines ?
6208  6443              ;R0034:  JP      Z,J6524                 ; yep, use workaround code WRSLT in page 3
6209  6443              ;        EX      (SP),HL
6210  6443              ;        PUSH    HL
6211  6443              ;R0039:  CALL    C64E7
6212  6443              ;        POP     DE
6213  6443              ;        EX      (SP),HL
6214  6443              ;        PUSH    BC
6215  6443              ;R003F:  CALL    C6415                   ; MSXDOS WRSLT
6216  6443              ;J6436:  POP     BC
6217  6443              ;        EX      (SP),HL
6218  6443              ;        PUSH    AF
6219  6443              ;        LD      A,B
6220  6443              ;        AND     3FH
6221  6443              ;        OR      C
6222  6443              ;        CALL    X0046                   ; restore secundairy slotregister
6223  6443              ;        POP     AF
6224  6443              ;        POP     HL
6225  6443              ;        RET
6226  6443
6227  6443              ;       Subroutine      MSXDOS CALLF
6228  6443              ;       Inputs          ________________________
6229  6443              ;       Outputs         ________________________
6230  6443
6231  6443 E3           C6443:  EX      (SP),HL
6232  6444 F5                   PUSH    AF
6233  6445 D5                   PUSH    DE
6234  6446 7E                   LD      A,(HL)
6235  6447 F5                   PUSH    AF
6236  6448 FD E1                POP     IY
6237  644A 23                   INC     HL
6238  644B 5E                   LD      E,(HL)
6239  644C 23                   INC     HL
6240  644D 56                   LD      D,(HL)
6241  644E 23                   INC     HL
6242  644F D5                   PUSH    DE
6243  6450 DD E1                POP     IX
6244  6452 D1                   POP     DE
6245  6453 F1                   POP     AF
6246  6454 E3                   EX      (SP),HL
6247  6455
6248  6455              ;       Subroutine      MSXDOS CALSLT
6249  6455              ;       Inputs          ________________________
6250  6455              ;       Outputs         ________________________
6251  6455
6252  6455              C6455:
6253  6455                      ; now slotid is in IY and address is in IX
6254  6455                      ; first save IX
6255  6455 5B                   DB 0x5b ; .LIL
6256  6456 DF                   rst 18h
6257  6457                      ;  electron os calslt
6258  6457 DD 21 0A 00          ld ix, 0x000a
6259  645B 5B                   DB 0x5b ; .LIL
6260  645C FF                   rst 38h
6261  645D C9                   ret
6262  645E 00 00 00...          DS 0649ch-$
6263  649C              ;C6455:  EXX
6264  649C              ;        EX      AF,AF'
6265  649C              ;        PUSH    IY
6266  649C              ;        POP     AF
6267  649C              ;        PUSH    IX
6268  649C              ;        POP     HL
6269  649C              ;R0069:  CALL    C64C2                   ; calculate slot masks
6270  649C              ;R006C:  JP      M,J646C                 ; slot is expanded,
6271  649C              ;        RST     38h                     ; MSM: replaced IN A by RST38h
6272  649C              ;        DB      0a8h
6273  649C              ;        ;IN      A,(0A8H)
6274  649C              ;        PUSH    AF
6275  649C              ;        AND     C
6276  649C              ;        OR      B
6277  649C              ;        EXX
6278  649C              ;        JP      CLPRIM
6279  649C
6280  649C              ;J646C:  CALL    C6511                   ; page 0 and same primary slot of helper routines ?
6281  649C              ;R007B:  JP      Z,J652C                 ; yep,use workaround code CALSLT in page 3
6282  649C              ;R007E:  CALL    C64E7
6283  649C              ;        PUSH    AF
6284  649C              ;        POP     IY
6285  649C              ;        PUSH    HL
6286  649C              ;        PUSH    BC
6287  649C              ;        LD      C,A
6288  649C              ;        LD      B,00H
6289  649C              ;        LD      A,L
6290  649C              ;        AND     H
6291  649C              ;        OR      D
6292  649C              ;        LD      HL,SLTTBL
6293  649C              ;        ADD     HL,BC
6294  649C              ;        LD      (HL),A                  ; update secundairy slotregister copy in SLTTBL
6295  649C              ;        PUSH    HL
6296  649C              ;        EX      AF,AF'
6297  649C              ;        EXX
6298  649C              ;R0094:  CALL    C6455                   ; MSXDOS CALSLT
6299  649C              ;        EXX
6300  649C              ;        EX      AF,AF'
6301  649C              ;        POP     HL
6302  649C              ;        POP     BC
6303  649C              ;        POP     DE
6304  649C              ;        LD      A,B
6305  649C              ;        AND     3FH
6306  649C              ;        OR      C
6307  649C              ;        DI
6308  649C              ;        CALL    X004B                   ; restore secundairy slotregister
6309  649C              ;        LD      (HL),E
6310  649C              ;        EX      AF,AF'
6311  649C              ;        EXX
6312  649C              ;        RET
6313  649C
6314  649C              ;       Subroutine      MSXDOS ENASLT
6315  649C              ;       Inputs          ________________________
6316  649C              ;       Outputs         ________________________
6317  649C
6318  649C              J649C:
6319  649C 18 04            JR C64A2
6320  649E 00 00 00 00      DS 064a2h-$
6321  64A2              C64A2:
6322  64A2 DD 21 0C 00      ld ix, 0x000c
6323  64A6 5B               DB 0x5b ; .LIL
6324  64A7 FF               rst 38h
6325  64A8 C9               ret
6326  64A9
6327  64A9 00 00 00...      DS 064AFh-$
6328  64AF              C64AF:   ; do not support expanded slots
6329  64AF C9               ret
6330  64B0 00 00 00...      DS 064C2h-$
6331  64C2              ;J649C:  CALL    C64C2                   ; calculate slot masks
6332  64C2              ;R00AB:  JP      M,J64A9                 ; slot is expanded,
6333  64C2              ;C64A2:  RST     38h                     ; MSM: replaced IN A by RST38h
6334  64C2              ;        DB      0a8h
6335  64C2              ;        ;IN      A,(0A8H)
6336  64C2              ;        AND     C
6337  64C2              ;        OR      B
6338  64C2              ;        RST     28h     ; MSM: replace out (a8h),a by RST28
6339  64C2              ;        DB      0a8h
6340  64C2              ;        ;OUT     (0A8H),A
6341  64C2              ;        RET
6342  64C2
6343  64C2              ;J64A9:  CALL    C6511                   ; page 0 and same primary slot of helper routines ?
6344  64C2              ;R00B8:  JP      Z,C6541                 ; yep, use workaround code ENASLT in page 3
6345  64C2              ;C64AF:  PUSH    HL
6346  64C2              ;R00BC:  CALL    C64E7
6347  64C2              ;        LD      C,A
6348  64C2              ;        LD      B,00H
6349  64C2              ;        LD      A,L
6350  64C2              ;        AND     H
6351  64C2              ;        OR      D
6352  64C2              ;        LD      HL,SLTTBL
6353  64C2              ;        ADD     HL,BC
6354  64C2              ;        LD      (HL),A                  ; update secundairy slotregister copy in SLTTBL
6355  64C2              ;        POP     HL
6356  64C2              ;        LD      A,C
6357  64C2              ;        JR      J649C                   ; MSXDOS ENASLT
6358  64C2
6359  64C2              ;       Subroutine      calculate slot masks
6360  64C2              ;       Inputs          A = slotid, HL = address
6361  64C2              ;       Outputs         ________________________
6362  64C2
6363  64C2 F3           C64C2:  DI
6364  64C3 F5                   PUSH    AF
6365  64C4 7C                   LD      A,H
6366  64C5 07                   RLCA
6367  64C6 07                   RLCA
6368  64C7 E6 03                AND     03H
6369  64C9 5F                   LD      E,A
6370  64CA 1C                   INC     E
6371  64CB 3E C0                LD      A,0C0H
6372  64CD 07           J64CD:  RLCA
6373  64CE 07                   RLCA
6374  64CF 1D                   DEC     E
6375  64D0 20 FB                JR      NZ,J64CD
6376  64D2 5F                   LD      E,A
6377  64D3 2F                   CPL
6378  64D4 4F                   LD      C,A
6379  64D5 F1                   POP     AF
6380  64D6 F5                   PUSH    AF
6381  64D7 E6 03                AND     03H
6382  64D9 47                   LD      B,A
6383  64DA 04                   INC     B
6384  64DB 3E AB                LD      A,0ABH
6385  64DD C6 55        J64DD:  ADD     A,55H
6386  64DF 10 FC                DJNZ    J64DD
6387  64E1 57                   LD      D,A
6388  64E2 A3                   AND     E
6389  64E3 47                   LD      B,A
6390  64E4 F1                   POP     AF
6391  64E5 A7                   AND     A
6392  64E6 C9                   RET
6393  64E7
6394  64E7              ;       Subroutine      __________________________
6395  64E7              ;       Inputs          ________________________
6396  64E7              ;       Outputs         ________________________
6397  64E7
6398  64E7              ;C64E7:  PUSH    AF
6399  64E7              ;        LD      A,D
6400  64E7              ;        AND     0C0H
6401  64E7              ;        LD      C,A
6402  64E7              ;        POP     AF
6403  64E7              ;        PUSH    AF
6404  64E7              ;        LD      D,A
6405  64E7              ;        RST     38h                     ; MSM: replaced IN A by RST38h
6406  64E7              ;        DB      0a8h
6407  64E7              ;        ;IN      A,(0A8H)
6408  64E7              ;        LD      B,A
6409  64E7              ;        AND     3FH
6410  64E7              ;        OR      C
6411  64E7              ;        PUSH    AF
6412  64E7              ;        LD      A,D
6413  64E7              ;        RRCA
6414  64E7              ;        RRCA
6415  64E7              ;        AND     03H
6416  64E7              ;        LD      D,A
6417  64E7              ;        INC     D
6418  64E7              ;        LD      A,0ABH
6419  64E7              ;J64FF:  ADD     A,55H
6420  64E7              ;        DEC     D
6421  64E7              ;        JR      NZ,J64FF
6422  64E7              ;        AND     E
6423  64E7              ;        LD      D,A
6424  64E7              ;        LD      A,E
6425  64E7              ;        CPL
6426  64E7              ;        LD      H,A
6427  64E7              ;        POP     AF
6428  64E7              ;R0116:  CALL    C655C                   ; store and change secundairy slotregister
6429  64E7              ;        POP     AF
6430  64E7              ;        AND     03H
6431  64E7              ;        RET
6432  64E7              R0116: ; MSM
6433  64E7 00 00 00...          DS 0655Ch-$
6434  655C
6435  655C              ;       Subroutine      __________________________
6436  655C              ;       Inputs          ________________________
6437  655C              ;       Outputs         ________________________
6438  655C
6439  655C              ;C6511:  LD      C,A                     ; store slotid
6440  655C              ;        LD      A,E
6441  655C              ;        CP      03H                     ; page 0 ?
6442  655C              ;        LD      A,C                     ; restore slotid
6443  655C              ;        RET     NZ                      ; not page 0, quit
6444  655C              ;        LD      A,(RAMAD0)
6445  655C              ;        AND     E                       ; get primairy slot from slotid helper routines
6446  655C              ;        CP      B                       ; same as requested ?
6447  655C              ;        LD      A,C                     ; restore slotid
6448  655C              ;        RET
6449  655C
6450  655C              ;       Subroutine      workaround code RDSLT
6451  655C              ;       Inputs          ________________________
6452  655C              ;       Outputs         ________________________
6453  655C
6454  655C              ;J651E:  CALL    C6549                   ; switch page 0 (same primairy slot)
6455  655C              ;        LD      E,(HL)                  ; read byte from slot
6456  655C              ;        JR      C6529
6457  655C
6458  655C              ;       Subroutine      workaround code WRSLT
6459  655C              ;       Inputs          ________________________
6460  655C              ;       Outputs         ________________________
6461  655C
6462  655C              ;J6524:  POP     DE
6463  655C              ;R0131:  CALL    C6549                   ; switch page 0 (same primairy slot)
6464  655C              ;        LD      (HL),E                  ; write byte to slot
6465  655C
6466  655C              ;       Subroutine      __________________________
6467  655C              ;       Inputs          ________________________
6468  655C              ;       Outputs         ________________________
6469  655C
6470  655C              ;C6529:  LD      A,B                     ; stored secundairy slotregister
6471  655C              ;        JR      J6557                   ; restore secundairy slotregister and quit
6472  655C
6473  655C              ;       Subroutine      workaround code CALSLT
6474  655C              ;       Inputs          ________________________
6475  655C              ;       Outputs         ________________________
6476  655C
6477  655C              ;J652C:  CALL    C6541                   ; switch page 0 (same primairy slot)
6478  655C              ;        PUSH    HL
6479  655C              ;        PUSH    BC
6480  655C              ;        EX      AF,AF'
6481  655C              ;        EXX
6482  655C              ;        CALL    CLPRM1                  ; call routine in slot
6483  655C              ;        EXX
6484  655C              ;        EX      AF,AF'
6485  655C              ;        POP     BC
6486  655C              ;R0145:  CALL    C6529
6487  655C              ;        POP     HL
6488  655C              ;        LD      (HL),B                  ; update secundairy slotregister copy in SLTTBL
6489  655C              ;        EX      AF,AF'
6490  655C              ;        EXX
6491  655C              ;        RET
6492  655C
6493  655C              ;       Subroutine      workaround code ENASLT
6494  655C              ;       Inputs          ________________________
6495  655C              ;       Outputs         ________________________
6496  655C
6497  655C              ;C6541:  CALL    C6549                   ; switch page 0 (same primairy slot)
6498  655C              ;        LD      HL,SLTTBL
6499  655C              ;        LD      (HL),D                  ; update secundairy slotregister copy in SLTTBL (BUG, assumes primairy slot 0!)
6500  655C              ;        RET
6501  655C
6502  655C              ;       Subroutine      switch page 0 (same primairy slot)
6503  655C              ;       Inputs          A = slotid
6504  655C              ;       Outputs         ________________________
6505  655C
6506  655C              ;C6549:  RRCA
6507  655C              ;        RRCA
6508  655C              ;        AND     03H
6509  655C              ;        LD      D,A                     ; get secundiary slot from slotid
6510  655C              ;        LD      A,(YFFFF)
6511  655C              ;        CPL
6512  655C              ;        LD      B,A                     ; store current secundairy slot register
6513  655C              ;        AND     0FCH
6514  655C              ;        OR      D
6515  655C              ;        LD      D,A                     ; new secundairy slot register, page 0 switched
6516  655C              ;J6557:  LD      (YFFFF),A
6517  655C              ;        LD      A,E
6518  655C              ;        RET
6519  655C
6520  655C              L63F4   EQU     $-C63F4
6521  655C
6522  655C              C655C: ; MSM
6523  655C
6524  655C              ;       Subroutine      store and change secundairy slotregister (helper routine at 003BH)
6525  655C              ;       Inputs          ________________________
6526  655C              ;       Outputs         ________________________
6527  655C
6528  655C              ;C655C:  RST     28h     ; MSM: replace out (a8h),a by RST28
6529  655C              ;        DB      0a8h
6530  655C              ;        ;OUT     (0A8H),A                ; make secundairy slotregister accessable (switch page 3)
6531  655C              ;        LD      A,(YFFFF)
6532  655C              ;        CPL
6533  655C              ;        LD      L,A                     ; store current secundairy slotregister
6534  655C              ;        AND     H
6535  655C              ;        OR      D
6536  655C              ;        JR      J656F                   ; change secundairy slotregister, restore primairy slotregister and quit
6537  655C
6538  655C              ;       Subroutine      restore secundairy slotregister (helper routine at 0046H)
6539  655C              ;       Inputs          ________________________
6540  655C              ;       Outputs         ________________________
6541  655C
6542  655C              ;_6567:  RST     28h     ; MSM: replace out (a8h),a by RST28
6543  655C              ;        DB      0a8h
6544  655C              ;        ;OUT     (0A8H),A                ; make secundairy slotregister accessable (switch page 3)
6545  655C              ;        LD      A,L
6546  655C              ;        JR      J656F                   ; change secundairy slotregister, restore primairy slotregister and quit
6547  655C
6548  655C              ;       Subroutine      restore secundairy slotregister (helper routine at 004BH)
6549  655C              ;       Inputs          ________________________
6550  655C              ;       Outputs         ________________________
6551  655C
6552  655C              ;_656C:  RST     28h     ; MSM: replace out (a8h),a by RST28
6553  655C              ;        DB      0a8h
6554  655C              ;        ;OUT     (0A8H),A                ; make secundairy slotregister accessable (switch page 3)
6555  655C              ;        LD      A,E
6556  655C              ;J656F:  LD      (YFFFF),A
6557  655C              ;        LD      A,B
6558  655C              ;        RST     28h     ; MSM: replace out (a8h),a by RST28
6559  655C              ;        DB      0a8h
6560  655C              ;        ;OUT     (0A8H),A
6561  655C              ;        RET
6562  655C
6563  655C              L655C   EQU     $-C655C
6564  655C
6565  655C 00 00 00...          DS 06576h-$
6566  6576 3A 4E FE     A6576:  ld      a,(H.GETP+0)
6567  6579 FE C9                cp      0C9H
6568  657B 37                   scf
6569  657C C8                   ret     z
6570  657D E5                   push    hl
6571  657E CD 2D 40             call    A402D                   ; get slotid of this disk interface
6572  6581 21 48 F3             ld      hl,YF348
6573  6584 BE                   cp      (hl)                    ; is this the master diskrom ?
6574  6585 20 26                jr      nz,A65AD                ; nope, only try the disk interface OEM statements
6575  6587 21 B1 65             ld      hl,T65B1
6576  658A 11 89 FD     A658A:  ld      de,PROCNM
6577  658D 1A           A658D:  ld      a,(de)
6578  658E BE                   cp      (hl)
6579  658F 13                   inc     de
6580  6590 23                   inc     hl
6581  6591 20 10                jr      nz,A65A3
6582  6593 A7                   and     a
6583  6594 20 F7                jr      nz,A658D
6584  6596 7E                   ld      a,(hl)
6585  6597 23                   inc     hl
6586  6598 66                   ld      h,(hl)
6587  6599 6F                   ld      l,a
6588  659A E3                   ex      (sp),hl
6589  659B CD DA 72             call    A72DA                   ;
6590  659E 37                   scf
6591  659F 3F                   ccf
6592  65A0 C9                   ret
6593  65A1
6594  65A1 23           A65A1:  inc     hl
6595  65A2 7E                   ld      a,(hl)
6596  65A3 A7           A65A3:  and     a
6597  65A4 20 FB                jr      nz,A65A1
6598  65A6 23                   inc     hl
6599  65A7 23                   inc     hl
6600  65A8 23                   inc     hl
6601  65A9 7E                   ld      a,(hl)
6602  65AA A7                   and     a
6603  65AB 20 DD                jr      nz,A658A
6604  65AD E1           A65AD:  pop     hl
6605  65AE C3 60 74             jp      OEMSTA
6606  65B1
6607  65B1 53 59 53 54  T65B1:  defb    "SYSTEM",0
6607  65B5 45 4D 00
6608  65B8 C4 65                defw    A65C4
6609  65BA 46 4F 52 4D          defb    "FORMAT",0
6609  65BE 41 54 00
6610  65C1 DC 65                defw    A65DC
6611  65C3 00                   defb    0
6612  65C4
6613  65C4 C0           A65C4:  ret     nz
6614  65C5 3A 46 F3             ld      a,(YF346)
6615  65C8 A7                   and     a
6616  65C9 CA 15 73             jp      z,A7315
6617  65CC DD 21 1C 6C          ld      ix,CLSALL
6618  65D0 CD 1E 73             call    A731E                   ; close all i/o channels
6619  65D3 CD D2 00             call    TOTEXT
6620  65D6 CD CC 00             call    ERAFNK
6621  65D9 C3 11 5A             jp      A5A11                   ; start MSXDOS
6622  65DC
6623  65DC E5           A65DC:  push    hl
6624  65DD CC B1 60             call    z,A60B1
6625  65E0 E1                   pop     hl
6626  65E1 A7                   and     a
6627  65E2 C9                   ret
6628  65E3
6629  65E3 7A           A65E3:  ld      a,d
6630  65E4 3D           A65E4:  dec     a
6631  65E5 F0                   ret     p
6632  65E6 3A 47 F2             ld      a,(YF247)
6633  65E9 C9                   ret
6634  65EA
6635  65EA E5           A65EA:  push    hl
6636  65EB D5                   push    de
6637  65EC C5                   push    bc
6638  65ED CD E3 65             call    A65E3                   ; convert to driveid
6639  65F0 4F                   ld      c,a
6640  65F1 2A 60 F8             ld      hl,(FILTAB)             ; I/O channel pointer table
6641  65F4 3A 5F F8             ld      a,(MAXFIL)              ; number of I/O channels
6642  65F7 F5           A65F7:  push    af
6643  65F8 5E                   ld      e,(hl)
6644  65F9 23                   inc     hl
6645  65FA 56                   ld      d,(hl)
6646  65FB 23                   inc     hl
6647  65FC E5                   push    hl
6648  65FD EB                   ex      de,hl                   ; pointer to I/O channel
6649  65FE 7E                   ld      a,(hl)
6650  65FF A7                   and     a                       ; channel in use ?
6651  6600 28 2C                jr      z,A662E                 ; nope, check next
6652  6602 23                   inc     hl
6653  6603 23                   inc     hl
6654  6604 23                   inc     hl
6655  6605 23                   inc     hl
6656  6606 7E                   ld      a,(hl)
6657  6607 FE 09                cp      9                       ; channel in use by a disk device ?
6658  6609 30 23                jr      nc,A662E                ; nope, check next
6659  660B 2B                   dec     hl
6660  660C 2B                   dec     hl
6661  660D 56                   ld      d,(hl)
6662  660E 2B                   dec     hl
6663  660F 5E                   ld      e,(hl)                  ; pointer to FCB
6664  6610 1A                   ld      a,(de)                  ; DR byte of FCB
6665  6611 CD E4 65             call    A65E4                   ; convert to driveid
6666  6614 B9                   cp      c                       ; same as the requested one ?
6667  6615 20 17                jr      nz,A662E                ; nope, check next
6668  6617 13                   inc     de
6669  6618 EB                   ex      de,hl
6670  6619 11 66 F8             ld      de,FILNAM
6671  661C 06 0B                ld      b,11
6672  661E 1A           A661E:  ld      a,(de)
6673  661F FE 3F                cp      "?"
6674  6621 28 03                jr      z,A6626                 ; wildcard, treat as equal
6675  6623 BE                   cp      (hl)
6676  6624 20 08                jr      nz,A662E                ; filename not equal, check next
6677  6626 13           A6626:  inc     de
6678  6627 23                   inc     hl
6679  6628 10 F4                djnz    A661E                   ; next char
6680  662A E1                   pop     hl
6681  662B E1                   pop     hl
6682  662C 18 72                jr      A66A0                   ; quit with Zx set (file open)
6683  662E
6684  662E E1           A662E:  pop     hl
6685  662F F1                   pop     af
6686  6630 3D                   dec     a
6687  6631 F2 F7 65             jp      p,A65F7                 ; next channel
6688  6634 18 6A                jr      A66A0                   ; quit with Zx reset (file not open)
6689  6636
6690  6636 E5           A6636:  push    hl
6691  6637 D5                   push    de
6692  6638 C5                   push    bc
6693  6639 7A                   ld      a,d
6694  663A 32 68 F5             ld      (BUF+10),a
6695  663D CD 57 66             call    A6657                   ; copy FILNAM to FCB
6696  6640 CD 45 66             call    A6645                   ; search file
6697  6643 18 5B                jr      A66A0
6698  6645
6699  6645 21 B2 F5     A6645:  ld      hl,BUF+84
6700  6648 22 3D F2             ld      (YF23D),hl              ; transferaddress in BUF
6701  664B 11 68 F5             ld      de,BUF+10
6702  664E AF                   xor     a
6703  664F 32 74 F5             ld      (BUF+10+12),a           ; clear EX byte of FCB
6704  6652 CD B8 4F             call    A4FB8                   ; search for first
6705  6655 3C                   inc     a
6706  6656 C9                   ret
6707  6657
6708  6657 11 69 F5     A6657:  ld      de,BUF+10+1
6709  665A 21 66 F8     A665A:  ld      hl,FILNAM
6710  665D 01 0B 00             ld      bc,11
6711  6660 ED B0                ldir
6712  6662 C9                   ret
6713  6663
6714  6663              ;       Subroutine      take control from caller (move parameters on stack)
6715  6663              ;       Inputs          IX = returnaddress replacement, IYH = number of bytes to move
6716  6663              ;       Outputs         ________________________
6717  6663
6718  6663              ;       This is what the stack looks like at entry:
6719  6663              ;
6720  6663              ;       prim    exp
6721  6663              ;       +0      +0      returnaddress A6663 caller
6722  6663              ;       +2      +2      callf BIOS registers
6723  6663              ;       +6      +14     returnaddress CALLF caller
6724  6663              ;       +8      +16     returnaddress hook caller
6725  6663
6726  6663
6727  6663 FB           A6663:  ei
6728  6664 E5                   push    hl
6729  6665 D5                   push    de
6730  6666 C5                   push    bc
6731  6667 F5                   push    af
6732  6668 3A 48 F3             ld      a,(YF348)
6733  666B 87                   add     a,a
6734  666C 21 10 00             ld      hl,16
6735  666F 30 02                jr      nc,A6673
6736  6671 2E 18                ld      l,16+8
6737  6673 39           A6673:  add     hl,sp
6738  6674 DD E5                push    ix
6739  6676 C1                   pop     bc
6740  6677 71                   ld      (hl),c
6741  6678 23                   inc     hl
6742  6679 70                   ld      (hl),b
6743  667A 21 0A 00             ld      hl,10
6744  667D 39                   add     hl,sp
6745  667E EB                   ex      de,hl
6746  667F 18 0C                jr      A668D
6747  6681
6748  6681 FD E5        A6681:  push    iy
6749  6683 C1                   pop     bc
6750  6684 4E           A6684:  ld      c,(hl)
6751  6685 1A                   ld      a,(de)
6752  6686 77                   ld      (hl),a
6753  6687 79                   ld      a,c
6754  6688 12                   ld      (de),a
6755  6689 23                   inc     hl
6756  668A 13                   inc     de
6757  668B 10 F7                djnz    A6684
6758  668D 3A 48 F3     A668D:  ld      a,(YF348)
6759  6690 87                   add     a,a
6760  6691 21 12 00             ld      hl,18
6761  6694 30 02                jr      nc,A6698
6762  6696 2E 1A                ld      l,18+8
6763  6698 39           A6698:  add     hl,sp
6764  6699 7B                   ld      a,e
6765  669A 95                   sub     l
6766  669B 7A                   ld      a,d
6767  669C 9C                   sbc     a,h
6768  669D 38 E2                jr      c,A6681
6769  669F F1           A669F:  pop     af
6770  66A0 C1           A66A0:  pop     bc
6771  66A1 D1                   pop     de
6772  66A2 E1                   pop     hl
6773  66A3 C9                   ret
6774  66A4
6775  66A4              ;       Subroutine      get pointer to i/o channel (H.GETP)
6776  66A4              ;       Inputs
6777  66A4              ;       Outputs         ________________________
6778  66A4
6779  66A4 DD 21 8B F3  A66A4:  ld      ix,RETRTN
6780  66A8 FD 21 00 02          ld      iy,00200H
6781  66AC CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
6782  66AF E1                   pop     hl
6783  66B0 7E                   ld      a,(hl)
6784  66B1 A7                   and     a			; Zx set if i/o channel is not open
6785  66B2 C9                   ret
6786  66B3
6787  66B3              ;       Subroutine      OPEN statement expander (H.NOFO)
6788  66B3              ;       Inputs
6789  66B3              ;       Outputs         ________________________
6790  66B3
6791  66B3 FB           A66B3:  ei
6792  66B4 01 00 01             ld      bc,256
6793  66B7 ED 43 3D F3          ld      (YF33D),bc              ; default recordsize 256
6794  66BB CD DA 72             call    A72DA                   ; at end of statement ?
6795  66BE 7B                   ld      a,e
6796  66BF C8                   ret     z                       ; yes, quit
6797  66C0 F5                   push    af
6798  66C1 E5                   push    hl
6799  66C2 3A 48 F3             ld      a,(YF348)
6800  66C5 87                   add     a,a
6801  66C6 21 0C 00             ld      hl,12
6802  66C9 30 02                jr      nc,A66CD
6803  66CB 2E 14                ld      l,12+8
6804  66CD 39           A66CD:  add     hl,sp
6805  66CE 7E                   ld      a,(hl)
6806  66CF FE 04                cp      4                       ; random mode ?
6807  66D1 C2 18 73             jp      nz,A7318                ; nope, syntax error
6808  66D4 23                   inc     hl
6809  66D5 7E                   ld      a,(hl)
6810  66D6 FE 09                cp      9                       ; disk device ?
6811  66D8 D2 18 73             jp      nc,A7318                ; nope, syntax error
6812  66DB E1                   pop     hl
6813  66DC CD D0 72             call    A72D0
6814  66DF FF                   defb    0FFH
6815  66E0 CD D0 72             call    A72D0
6816  66E3 92                   defb    092H
6817  66E4 CD D0 72             call    A72D0
6818  66E7 EF                   defb    0EFH                    ; check for LEN=
6819  66E8 DD 21 56 47          ld      ix,INTID2
6820  66EC CD 1E 73             call    A731E                   ; evaluate word operand and check for 0-32767 range
6821  66EF 1B                   dec     de
6822  66F0 14                   inc     d
6823  66F1 15                   dec     d                       ; should be 1-256
6824  66F2 C2 15 73             jp      nz,A7315                ; nope,
6825  66F5 13                   inc     de
6826  66F6 ED 53 3D F3          ld      (YF33D),de              ; recordsize
6827  66FA F1                   pop     af
6828  66FB C9                   ret
6829  66FC
6830  66FC              ;       Subroutine      open i/o channel (H.NULO)
6831  66FC              ;       Inputs          HL = i/o channel pointer
6832  66FC              ;       Outputs         ________________________
6833  66FC
6834  66FC FB           A66FC:  ei
6835  66FD D0                   ret     nc                      ; not for a disk device, return control
6836  66FE DD 21 8B F3          ld      ix,RETRTN
6837  6702 FD 21 00 04          ld      iy,00400H
6838  6706 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
6839  6709 CD A9 6F             call    A6FA9                   ; validate filename
6840  670C CD EA 65             call    A65EA                   ; is file already open in one of the I/O channels ?
6841  670F CA 09 73             jp      z,A7309                 ; yep, file already open error
6842  6712 22 64 F8             ld      (PTRFIL),hl             ; interpreter input/output device = i/o channel pointer
6843  6715 7B                   ld      a,e
6844  6716 FE 04                cp      4			; file mode = random i/o ?
6845  6718 28 07                jr      z,A6721                 ; yep, recordsize already set
6846  671A 01 01 00             ld      bc,1
6847  671D ED 43 3D F3          ld      (YF33D),bc              ; all others use recordsize 1
6848  6721 F1           A6721:  pop     af
6849  6722 F5                   push    af                      ; I/O channel number
6850  6723 E5                   push    hl
6851  6724 D5                   push    de
6852  6725 21 45 F3             ld      hl,YF345
6853  6728 BE                   cp      (hl)                    ; do I have a FCB for this i/o channel ?
6854  6729 D2 0C 73             jp      nc,A730C                ; nope, bad file number error
6855  672C 01 25 00             ld      bc,37
6856  672F 5F                   ld      e,a
6857  6730 50                   ld      d,b
6858  6731 2A 53 F3             ld      hl,(YF353)              ; base of the Disk BASIC i/o channel FCBs
6859  6734 CD 1C 49             call    A491C                   ; base + 37 * channelnumber
6860  6737 AF                   xor     a
6861  6738 21 0C 00             ld      hl,12
6862  673B 09                   add     hl,bc
6863  673C 77                   ld      (hl),a                  ; reset EX byte of FCB
6864  673D D1                   pop     de
6865  673E E1                   pop     hl
6866  673F 23                   inc     hl
6867  6740 71                   ld      (hl),c
6868  6741 23                   inc     hl
6869  6742 70                   ld      (hl),b                  ; pointer to FCB
6870  6743 23                   inc     hl
6871  6744 77                   ld      (hl),a                  ; no backup char
6872  6745 23                   inc     hl
6873  6746 72                   ld      (hl),d                  ; devicenumber
6874  6747 23                   inc     hl
6875  6748 23                   inc     hl
6876  6749 77                   ld      (hl),a                  ; current bufferoffset = 0
6877  674A CD 36 66             call    A6636                   ; search file
6878  674D C5                   push    bc
6879  674E D5                   push    de
6880  674F 7A                   ld      a,d
6881  6750 02                   ld      (bc),a                  ; devicenumber
6882  6751 59                   ld      e,c
6883  6752 50                   ld      d,b
6884  6753 13                   inc     de
6885  6754 CD 5A 66             call    A665A                   ; copy FILNAM to FCB
6886  6757 D1                   pop     de
6887  6758 C1                   pop     bc
6888  6759 7B                   ld      a,e
6889  675A 20 1C                jr      nz,A6778                ; file exists,
6890  675C E6 86                and     086H                    ; file not exists and not binsav, random or output mode ?
6891  675E CA 12 73             jp      z,A7312                 ; yep, file not found error
6892  6761 D5           A6761:  push    de
6893  6762 C5                   push    bc
6894  6763 59                   ld      e,c
6895  6764 50                   ld      d,b
6896  6765 CD 1D 46             call    A461D                   ; create file
6897  6768 A7                   and     a
6898  6769 C2 AB 71             jp      nz,A71AB                ; failed, error
6899  676C E1                   pop     hl
6900  676D CD FE 67             call    A67FE                   ; setup FCB fields
6901  6770 D1                   pop     de
6902  6771 2A 64 F8             ld      hl,(PTRFIL)		; i/o channel pointer
6903  6774 73                   ld      (hl),e                  ; filemode, I/O channel open
6904  6775 F1           A6775:  pop     af
6905  6776 E1                   pop     hl
6906  6777 C9                   ret
6907  6778
6908  6778 FE 08        A6778:  cp      8
6909  677A 28 45                jr      z,A67C1                 ; append mode,
6910  677C FE 02                cp      2
6911  677E 28 E1                jr      z,A6761                 ; output mode, create file (overwrites!)
6912  6780 FE 80                cp      080H
6913  6782 28 DD                jr      z,A6761                 ; binsav mode, create file (overwrites!)
6914  6784 D5                   push    de
6915  6785 C5                   push    bc
6916  6786 59                   ld      e,c
6917  6787 50                   ld      d,b
6918  6788 CD 62 44             call    A4462                   ; open fcb
6919  678B E1                   pop     hl
6920  678C CD FE 67             call    A67FE                   ; setup FCB fields
6921  678F D1                   pop     de
6922  6790 2A 64 F8             ld      hl,(PTRFIL)		; i/o channel pointer
6923  6793 73                   ld      (hl),e                  ; filemode, I/O channel open
6924  6794 7B                   ld      a,e
6925  6795 FE 04                cp      4                       ; random mode ?
6926  6797 28 DC                jr      z,A6775                 ; yep, quit
6927  6799 E5                   push    hl
6928  679A 21 AE FC             ld      hl,FLBMEM
6929  679D AF                   xor     a
6930  679E BE                   cp      (hl)                    ; in raw mode ?
6931  679F 77                   ld      (hl),a
6932  67A0 E1                   pop     hl
6933  67A1 20 D2                jr      nz,A6775                ; yep, quit
6934  67A3 01 06 00             ld      bc,6
6935  67A6 09                   add     hl,bc
6936  67A7 E5                   push    hl
6937  67A8 36 FF                ld      (hl),0FFH               ; position 255, so next get char fills buffer
6938  67AA 2A 64 F8             ld      hl,(PTRFIL)		; i/o channel pointer
6939  67AD CD 2A 68             call    A682A                   ; get char from I/O channel
6940  67B0 E1                   pop     hl
6941  67B1 2B                   dec     hl
6942  67B2 2B                   dec     hl
6943  67B3 2B                   dec     hl
6944  67B4 77                   ld      (hl),a
6945  67B5 FE FF                cp      0FFH
6946  67B7 20 BC                jr      nz,A6775                ; yep, quit
6947  67B9 23                   inc     hl
6948  67BA 23                   inc     hl
6949  67BB 23                   inc     hl
6950  67BC 23                   inc     hl
6951  67BD 36 80                ld      (hl),080H
6952  67BF 18 B4        A67BF:  jr      A6775                   ; quit
6953  67C1
6954  67C1 C5           A67C1:  push    bc
6955  67C2 59                   ld      e,c
6956  67C3 50                   ld      d,b
6957  67C4 CD 62 44             call    A4462                   ; open fcb
6958  67C7 E1                   pop     hl
6959  67C8 E5                   push    hl
6960  67C9 CD FE 67             call    A67FE                   ; setup FCB fields
6961  67CC 2A 64 F8             ld      hl,(PTRFIL)		; i/o channel pointer
6962  67CF 36 01                ld      (hl),1                  ; first in sequential input mode
6963  67D1 01 06 00             ld      bc,6
6964  67D4 09                   add     hl,bc
6965  67D5 36 FF                ld      (hl),0FFH               ; position 255, so next get char fills buffer
6966  67D7 2A 64 F8             ld      hl,(PTRFIL)		; i/o channel pointer
6967  67DA E5           A67DA:  push    hl
6968  67DB CD 2A 68             call    A682A                   ; get char from I/O channel
6969  67DE E1                   pop     hl
6970  67DF 30 F9                jr      nc,A67DA                ; not at the end of file, continue
6971  67E1 36 02                ld      (hl),2                  ; continue in sequential output mode
6972  67E3 E1                   pop     hl
6973  67E4 01 21 00             ld      bc,00021H
6974  67E7 09                   add     hl,bc                   ; to the Rx field
6975  67E8 0E 04                ld      c,004H
6976  67EA E5                   push    hl
6977  67EB 37                   scf
6978  67EC 7E           A67EC:  ld      a,(hl)
6979  67ED 98                   sbc     a,b
6980  67EE 77                   ld      (hl),a
6981  67EF 23                   inc     hl
6982  67F0 0D                   dec     c
6983  67F1 20 F9                jr      nz,A67EC                ; decrease by 1
6984  67F3 E1                   pop     hl
6985  67F4 0C                   inc     c
6986  67F5 30 02                jr      nc,A67F9                ; Make Rx a multiply of 256
6987  67F7 0E 04                ld      c,004H                  ; Rx = 0
6988  67F9 CD 13 68     A67F9:  call    A6813
6989  67FC 18 C1                jr      A67BF                   ; quit
6990  67FE
6991  67FE 01 0C 00     A67FE:  ld      bc,12
6992  6801 09                   add     hl,bc
6993  6802 70                   ld      (hl),b                  ; clear EX byte
6994  6803 23                   inc     hl
6995  6804 70                   ld      (hl),b                  ; clear S1 byte
6996  6805 23                   inc     hl
6997  6806 ED 4B 3D F3          ld      bc,(YF33D)
6998  680A 71                   ld      (hl),c
6999  680B 23                   inc     hl
7000  680C 70                   ld      (hl),b                  ; user recordsize = recordsize
7001  680D 01 11 00             ld      bc,17
7002  6810 09                   add     hl,bc
7003  6811 0E 05                ld      c,5
7004  6813 70           A6813:  ld      (hl),b
7005  6814 23                   inc     hl
7006  6815 0D                   dec     c
7007  6816 20 FB                jr      nz,A6813                ; clear CR byte and Rx bytes
7008  6818 C9                   ret
7009  6819
7010  6819              ;       Subroutine      input from i/o channel (H.INDS)
7011  6819              ;       Inputs
7012  6819              ;       Outputs         ________________________
7013  6819
7014  6819 DD 21 8B F3  A6819:  ld      ix,RETRTN
7015  681D FD 21 00 06          ld      iy,00600H
7016  6821 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
7017  6824 CD 2A 68             call    A682A                   ; get char from I/O channel
7018  6827 C3 A0 66             jp      A66A0                   ; quit
7019  682A
7020  682A E5           A682A:  push    hl
7021  682B 7E                   ld      a,(hl)
7022  682C FE 01                cp      1                       ; input mode ?
7023  682E C2 99 71             jp      nz,A7199                ; nope, bad file mode error
7024  6831 5D                   ld      e,l
7025  6832 54                   ld      d,h
7026  6833 23                   inc     hl
7027  6834 23                   inc     hl
7028  6835 23                   inc     hl
7029  6836 7E                   ld      a,(hl)
7030  6837 A7                   and     a                       ; backup char ?
7031  6838 20 2C                jr      nz,A6866                ; yep, use that
7032  683A 23                   inc     hl
7033  683B 23                   inc     hl
7034  683C 23                   inc     hl
7035  683D 34                   inc     (hl)                    ; update counter
7036  683E 7E                   ld      a,(hl)
7037  683F 23                   inc     hl
7038  6840 23                   inc     hl
7039  6841 23                   inc     hl                      ; to the buffer
7040  6842 20 1D                jr      nz,A6861                ; still characters left, use them
7041  6844 E5                   push    hl
7042  6845 22 3D F2             ld      (YF23D),hl              ; transferaddress is I/O channel buffer
7043  6848 EB                   ex      de,hl
7044  6849 23                   inc     hl
7045  684A 5E                   ld      e,(hl)
7046  684B 23                   inc     hl
7047  684C 56                   ld      d,(hl)                  ; pointer to FCB
7048  684D 21 00 01             ld      hl,256
7049  6850 CD B2 47             call    A47B2                   ; random block read
7050  6853 5D                   ld      e,l
7051  6854 54                   ld      d,h
7052  6855 25                   dec     h
7053  6856 7D                   ld      a,l
7054  6857 B4                   or      h                       ; have read 256 records ?
7055  6858 E1                   pop     hl
7056  6859 28 06                jr      z,A6861                 ; yep, then not at end of file
7057  685B E5                   push    hl
7058  685C 19                   add     hl,de
7059  685D 36 1A                ld      (hl),01AH               ; put a CTRL-Z at the end
7060  685F E1                   pop     hl
7061  6860 AF                   xor     a
7062  6861 4F           A6861:  ld      c,a
7063  6862 06 00                ld      b,0
7064  6864 09                   add     hl,bc
7065  6865 7E                   ld      a,(hl)                  ; get char
7066  6866 47           A6866:  ld      b,a
7067  6867 D6 1A                sub     01AH
7068  6869 D6 01                sub     001H
7069  686B 78                   ld      a,b
7070  686C E1                   pop     hl
7071  686D 23                   inc     hl
7072  686E 23                   inc     hl
7073  686F 23                   inc     hl
7074  6870 36 00                ld      (hl),0                  ; no backup char
7075  6872 D0                   ret     nc                      ; no CTRL-Z, quit
7076  6873 77                   ld      (hl),a                  ; CTRL-Z as backup char, so it is always read again
7077  6874 C9                   ret
7078  6875
7079  6875              ;       Subroutine      putback for diskdevices (H.BAKU)
7080  6875              ;       Inputs
7081  6875              ;       Outputs         ________________________
7082  6875
7083  6875 FB           A6875:  ei
7084  6876 E5                   push    hl
7085  6877 3A 48 F3             ld      a,(YF348)
7086  687A 87                   add     a,a
7087  687B 21 08 00             ld      hl,8
7088  687E 30 02                jr      nc,A6882
7089  6880 2E 10                ld      l,8+8
7090  6882 39           A6882:  add     hl,sp
7091  6883 36 41                ld      (hl),LOW NOSKCR
7092  6885 23                   inc     hl
7093  6886 36 6E                ld      (hl),HIGH NOSKCR        ; resume character putback
7094  6888 E1                   pop     hl
7095  6889 23                   inc     hl
7096  688A 23                   inc     hl
7097  688B 23                   inc     hl
7098  688C 71                   ld      (hl),c
7099  688D C9                   ret
7100  688E
7101  688E              ;       Subroutine      output to i/o channel (H.FILO)
7102  688E              ;       Inputs
7103  688E              ;       Outputs         ________________________
7104  688E
7105  688E DD 21 8B F3  A688E:  ld      ix,RETRTN
7106  6892 FD 21 00 08          ld      iy,00800H
7107  6896 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
7108  6899 7E                   ld      a,(hl)
7109  689A FE 02                cp      2                       ; output mode ?
7110  689C C2 99 71             jp      nz,A7199                ; nope, bad file mode error
7111  689F F1                   pop     af
7112  68A0 F5                   push    af
7113  68A1 CD A7 68             call    A68A7                   ; write char to I/O channel
7114  68A4 C3 9F 66             jp      A669F                   ; quit
7115  68A7
7116  68A7 E5           A68A7:  push    hl
7117  68A8 01 06 00             ld      bc,6
7118  68AB 09                   add     hl,bc
7119  68AC 4E                   ld      c,(hl)                  ; position
7120  68AD 34                   inc     (hl)                    ; update
7121  68AE 23                   inc     hl
7122  68AF 23                   inc     hl
7123  68B0 23                   inc     hl                      ; to buffer
7124  68B1 09                   add     hl,bc
7125  68B2 77                   ld      (hl),a                  ; put char in buffer
7126  68B3 E1                   pop     hl
7127  68B4 C0                   ret     nz                      ; buffer not full, quit
7128  68B5 E5           A68B5:  push    hl
7129  68B6 23                   inc     hl
7130  68B7 5E                   ld      e,(hl)
7131  68B8 23                   inc     hl
7132  68B9 56                   ld      d,(hl)                  ; pointer to FCB
7133  68BA 01 04 00             ld      bc,4
7134  68BD 09                   add     hl,bc
7135  68BE 7E                   ld      a,(hl)                  ; position
7136  68BF 23                   inc     hl
7137  68C0 23                   inc     hl
7138  68C1 23                   inc     hl
7139  68C2 22 3D F2             ld      (YF23D),hl              ; transferaddress
7140  68C5 A7                   and     a
7141  68C6 6F                   ld      l,a
7142  68C7 60                   ld      h,b
7143  68C8 20 01                jr      nz,A68CB                ; not a complete buffer, only the used part
7144  68CA 24                   inc     h                       ; 256
7145  68CB CD 8F 71     A68CB:  call    A718F                   ; random block write
7146  68CE E1                   pop     hl
7147  68CF C9                   ret
7148  68D0
7149  68D0              ;       Subroutine      close i/o channel for diskdevices (H.NTFL)
7150  68D0              ;       Inputs
7151  68D0              ;       Outputs         ________________________
7152  68D0
7153  68D0 DD 21 8B F3  A68D0:  ld      ix,RETRTN
7154  68D4 FD 21 00 04          ld      iy,00400H
7155  68D8 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
7156  68DB E1                   pop     hl
7157  68DC 7E                   ld      a,(hl)
7158  68DD D6 02                sub     2                       ; output mode ?
7159  68DF 20 13                jr      nz,A68F4                ; nope,
7160  68E1 E5                   push    hl
7161  68E2 21 AE FC             ld      hl,FLBMEM
7162  68E5 BE                   cp      (hl)                    ; raw mode ?
7163  68E6 77                   ld      (hl),a
7164  68E7 E1                   pop     hl
7165  68E8 20 0A                jr      nz,A68F4                ; yep, skip CTRL-Z
7166  68EA 36 04                ld      (hl),4                  ; switch to random mode
7167  68EC 3E 1A                ld      a,01AH                  ; CTRL-Z
7168  68EE CD A7 68             call    A68A7                   ; write char to I/O channel
7169  68F1 C4 B5 68             call    nz,A68B5                ; buffer not empty, write remaining I/O channel buffer
7170  68F4 E5           A68F4:  push    hl
7171  68F5 23                   inc     hl
7172  68F6 5E                   ld      e,(hl)
7173  68F7 23                   inc     hl
7174  68F8 56                   ld      d,(hl)                  ; pointer to FCB
7175  68F9 CD 6F 45             call    A456F                   ; close fcb
7176  68FC E1                   pop     hl
7177  68FD E5                   push    hl
7178  68FE 11 07 00             ld      de,7
7179  6901 19                   add     hl,de
7180  6902 72                   ld      (hl),d                  ; clear i/o channel flags
7181  6903 6A                   ld      l,d
7182  6904 62                   ld      h,d
7183  6905 22 64 F8             ld      (PTRFIL),hl             ; interpreter input/output device = keyboard/screen
7184  6908 E1                   pop     hl
7185  6909 34                   inc     (hl)
7186  690A 35                   dec     (hl)
7187  690B 72                   ld      (hl),d
7188  690C E1                   pop     hl
7189  690D C9                   ret
7190  690E
7191  690E              ;       Subroutine      Binary Save  (H.BINS)
7192  690E              ;       Inputs
7193  690E              ;       Outputs         ________________________
7194  690E
7195  690E CD 80 73     A690E:  call    A7380                   ; take control from caller
7196  6911 E5                   push    hl
7197  6912 DD 21 F7 54          ld      ix,SCCPTR
7198  6916 CD 1E 73             call    A731E                   ; convert linepointers to linenumbers
7199  6919 3E FF                ld      a,0FFH
7200  691B CD C7 69             call    A69C7                   ; write byte to FCB (binairy basicfile id)
7201  691E 2A 76 F6             ld      hl,(TXTTAB)
7202  6921 22 3D F2             ld      (YF23D),hl              ; transferaddress
7203  6924 EB                   ex      de,hl
7204  6925 2A C2 F6             ld      hl,(VARTAB)
7205  6928 A7                   and     a
7206  6929 ED 52                sbc     hl,de			; size of BASIC program
7207  692B CD 8B 71             call    A718B			; random block write to FCB 0
7208  692E 32 7C F8             ld      (NLONLY),a              ; not loading basic program, close i/o channels when requested
7209  6931 E1                   pop     hl
7210  6932 DD 21 24 6B          ld      ix,CLSFIL
7211  6936 C3 1E 73             jp      A731E                   ; close i/o channel
7212  6939
7213  6939              ;       Subroutine      Binary Load  (H.BINL)
7214  6939              ;       Inputs
7215  6939              ;       Outputs         ________________________
7216  6939
7217  6939 DD 21 9A 73  A6939:  ld      ix,M739A                ; quit loading & start (headloop/executing)
7218  693D FD 21 00 02          ld      iy,00200H
7219  6941 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
7220  6944 F1                   pop     af			; MERGE statement ?
7221  6945 CA 99 71             jp      z,A7199			; yep, bad file mode error
7222  6948 DD 21 1C 6C          ld      ix,CLSALL
7223  694C CD 1E 73             call    A731E                   ; close all i/o channels
7224  694F 2A 53 F3             ld      hl,(YF353)		; FCB for i/o channel 0
7225  6952 E5                   push    hl
7226  6953 CD FE 67             call    A67FE                   ; setup FCB fields
7227  6956 E1                   pop     hl
7228  6957 E5                   push    hl
7229  6958 01 13 00             ld      bc,16+3
7230  695B 09                   add     hl,bc
7231  695C 7E                   ld      a,(hl)
7232  695D A7                   and     a			; file size >= 167772156 bytes ?
7233  695E C2 FD 72             jp      nz,A72FD		; yep, out of memory error
7234  6961 2B                   dec     hl
7235  6962 B6                   or      (hl)			; file size >= 65536 bytes ?
7236  6963 C2 FD 72             jp      nz,A72FD		; yep, out of memory error
7237  6966 2B                   dec     hl
7238  6967 56                   ld      d,(hl)
7239  6968 2B                   dec     hl
7240  6969 5E                   ld      e,(hl)			; file size
7241  696A 2A 76 F6             ld      hl,(TXTTAB)
7242  696D 19                   add     hl,de			; does in fit in BASIC program area ?
7243  696E DA FD 72             jp      c,A72FD			; nope, out of memory error
7244  6971 01 93 00             ld      bc,00093H
7245  6974 09                   add     hl,bc			; does it leave room for stack space ?
7246  6975 DA FD 72             jp      c,A72FD			; nope, out of memory error
7247  6978 ED 72                sbc     hl,sp			; does it fit in memory ?
7248  697A D2 FD 72             jp      nc,A72FD		; nope, out of memory error
7249  697D EB                   ex      de,hl
7250  697E E3                   ex      (sp),hl
7251  697F EB                   ex      de,hl			; save file size, get FCB for i/o channel 0
7252  6980 CD D0 69             call    A69D0                   ; read byte from FCB
7253  6983 2A 76 F6             ld      hl,(TXTTAB)
7254  6986 22 3D F2             ld      (YF23D),hl              ; transferaddresss
7255  6989 E1                   pop     hl
7256  698A 2B                   dec     hl			; file size -1
7257  698B CD B2 47             call    A47B2                   ; random block read
7258  698E ED 5B 76 F6          ld      de,(TXTTAB)
7259  6992 19                   add     hl,de
7260  6993 22 C2 F6             ld      (VARTAB),hl		; setup start of BASIC variable area
7261  6996 DD 21 53 42          ld      ix,LINKER
7262  699A CD 1E 73             call    A731E                   ; recalculate linepointers
7263  699D 3A 66 F8             ld      a,(FILNAM+0)
7264  69A0 A7                   and     a			; RUN after LOAD ?
7265  69A1 C0                   ret     nz			; nope, quit
7266  69A2 32 7C F8             ld      (NLONLY),a              ; not loading basic program, close i/o channels when requested
7267  69A5 21 B9 69             ld      hl,T69B9
7268  69A8 11 68 F5             ld      de,BUF+10
7269  69AB 01 05 00             ld      bc,5
7270  69AE D5                   push    de
7271  69AF ED B0                ldir
7272  69B1 E1                   pop     hl                      ; basicpointer
7273  69B2 DD 21 01 46          ld      ix,NEWSTT
7274  69B6 C3 1E 73             jp      A731E                   ; continue in the execution loop
7275  69B9
7276  69B9 3A 92 00 00  T69B9:  defb    ":",092H,0,0,0          ; :RUN
7276  69BD 00
7277  69BE
7278  69BE E5           A69BE:  push    hl
7279  69BF 7D                   ld      a,l
7280  69C0 CD CB 69             call    A69CB                   ; write byte to FCB
7281  69C3 E1                   pop     hl
7282  69C4 7C                   ld      a,h
7283  69C5 18 04                jr      A69CB                   ; write byte to FCB
7284  69C7
7285  69C7 ED 5B 53 F3  A69C7:  ld      de,(YF353)		; FCB for i/o channel 0
7286  69CB 01 BE 47     A69CB:  ld      bc,A47BE                ; random block write
7287  69CE 18 03                jr      A69D3
7288  69D0
7289  69D0 01 B2 47     A69D0:  ld      bc,A47B2                ; random block read
7290  69D3 F5           A69D3:  push    af
7291  69D4 21 01 00             ld      hl,1
7292  69D7 39                   add     hl,sp
7293  69D8 22 3D F2             ld      (YF23D),hl              ; transferaddress
7294  69DB D5                   push    de
7295  69DC CD E2 69             call    A69E2
7296  69DF D1                   pop     de
7297  69E0 F1                   pop     af
7298  69E1 C9                   ret
7299  69E2
7300  69E2 21 01 00     A69E2:  ld      hl,00001H
7301  69E5 C5                   push    bc
7302  69E6 C9                   ret
7303  69E7
7304  69E7              ;       Subroutine      BSAVE for diskdevices
7305  69E7              ;       Inputs
7306  69E7              ;       Outputs         ________________________
7307  69E7
7308  69E7 D5           A69E7:  push    de
7309  69E8 CD 6A 6B             call    A6B6A
7310  69EB ED 53 BF FC          ld      (SAVENT),de
7311  69EF D5                   push    de
7312  69F0 CD 6A 6B             call    A6B6A
7313  69F3 ED 53 7D F8          ld      (SAVEND),de
7314  69F7 E3                   ex      (sp),hl
7315  69F8 EB                   ex      de,hl
7316  69F9 E7                   rst     020H
7317  69FA DA 15 73             jp      c,A7315
7318  69FD EB                   ex      de,hl
7319  69FE E3                   ex      (sp),hl
7320  69FF CD DA 72             call    A72DA                   ; at end of statement ?
7321  6A02 37                   scf
7322  6A03 28 16                jr      z,A6A1B                 ; yep,
7323  6A05 CD D0 72             call    A72D0
7324  6A08 2C                   defb    ","                     ; check for ","
7325  6A09 FE 53                cp      "S"
7326  6A0B 20 06                jr      nz,A6A13
7327  6A0D CD DB 72             call    A72DB                   ; get basic character
7328  6A10 A7                   and     a
7329  6A11 18 08                jr      A6A1B
7330  6A13
7331  6A13 CD 6E 6B     A6A13:  call    A6B6E
7332  6A16 ED 53 BF FC          ld      (SAVENT),de
7333  6A1A 37                   scf
7334  6A1B C1           A6A1B:  pop     bc
7335  6A1C 30 05                jr      nc,A6A23
7336  6A1E 04                   inc     b
7337  6A1F 05                   dec     b
7338  6A20 F2 15 73             jp      p,A7315
7339  6A23 D1           A6A23:  pop     de
7340  6A24 E5                   push    hl
7341  6A25 C5                   push    bc
7342  6A26 F5                   push    af
7343  6A27 AF                   xor     a                       ; i/o channel 0
7344  6A28 1E 02                ld      e,2                     ; output mode
7345  6A2A DD 21 FA 6A          ld      ix,OPNFIL
7346  6A2E CD 1E 73             call    A731E                   ; open i/o channel
7347  6A31 3E FE                ld      a,0FEH
7348  6A33 CD C7 69             call    A69C7                   ; write byte to FCB (bsave file id)
7349  6A36 F1                   pop     af
7350  6A37 E1                   pop     hl
7351  6A38 E5                   push    hl
7352  6A39 F5                   push    af
7353  6A3A CD BE 69             call    A69BE                   ; write word to FCB
7354  6A3D 2A 7D F8             ld      hl,(SAVEND)
7355  6A40 CD BE 69             call    A69BE                   ; write word to FCB
7356  6A43 2A BF FC             ld      hl,(SAVENT)
7357  6A46 CD BE 69             call    A69BE                   ; write word to FCB
7358  6A49 F1                   pop     af
7359  6A4A C1                   pop     bc
7360  6A4B F5                   push    af
7361  6A4C ED 43 3D F2          ld      (YF23D),bc              ; transferaddress
7362  6A50 2A 7D F8             ld      hl,(SAVEND)
7363  6A53 A7                   and     a
7364  6A54 ED 42                sbc     hl,bc
7365  6A56 23                   inc     hl
7366  6A57 F1                   pop     af
7367  6A58 30 13                jr      nc,A6A6D
7368  6A5A CD 8B 71             call    A718B			; random block write to FCB 0
7369  6A5D 3E FF        A6A5D:  ld      a,0FFH
7370  6A5F 32 AE FC             ld      (FLBMEM),a              ; raw mode
7371  6A62 AF                   xor     a
7372  6A63 DD 21 24 6B          ld      ix,CLSFIL
7373  6A67 CD 1E 73             call    A731E                   ; close i/o channel
7374  6A6A C3 F8 6E             jp      A6EF8
7375  6A6D
7376  6A6D CD 65 71     A6A6D:  call    A7165
7377  6A70 E5           A6A70:  push    hl
7378  6A71 ED 5B BF FC          ld      de,(SAVENT)
7379  6A75 E7                   rst     020H
7380  6A76 F5                   push    af
7381  6A77 4D                   ld      c,l
7382  6A78 44                   ld      b,h
7383  6A79 2A 7D F8             ld      hl,(SAVEND)
7384  6A7C E5                   push    hl
7385  6A7D 09                   add     hl,bc
7386  6A7E 22 7D F8             ld      (SAVEND),hl
7387  6A81 E1                   pop     hl
7388  6A82 ED 5B 3D F2          ld      de,(YF23D)              ; transferaddress
7389  6A86 CD 59 00             call    LDIRMV
7390  6A89 F1                   pop     af
7391  6A8A 30 12                jr      nc,A6A9E
7392  6A8C E1                   pop     hl
7393  6A8D E5                   push    hl
7394  6A8E CD 8B 71             call    A718B			; random block write to FCB 0
7395  6A91 2A BF FC             ld      hl,(SAVENT)
7396  6A94 D1                   pop     de
7397  6A95 A7                   and     a
7398  6A96 ED 52                sbc     hl,de
7399  6A98 22 BF FC             ld      (SAVENT),hl
7400  6A9B EB                   ex      de,hl
7401  6A9C 18 D2                jr      A6A70
7402  6A9E
7403  6A9E E1           A6A9E:  pop     hl
7404  6A9F 2A BF FC             ld      hl,(SAVENT)
7405  6AA2 CD 8B 71             call    A718B			; random block write to FCB 0
7406  6AA5 18 B6                jr      A6A5D
7407  6AA7
7408  6AA7              ;       Subroutine      BLOAD for diskdevices
7409  6AA7              ;       Inputs
7410  6AA7              ;       Outputs         ________________________
7411  6AA7
7412  6AA7 D5           A6AA7:  push    de
7413  6AA8 AF                   xor     a
7414  6AA9 32 BE FC             ld      (RUNBNF),a              ; assume no autostart, no vram
7415  6AAC 4F                   ld      c,a
7416  6AAD 47                   ld      b,a                     ; assume offset 0
7417  6AAE CD DA 72             call    A72DA                   ; at end of statement ?
7418  6AB1 28 1D                jr      z,A6AD0                 ; yep,
7419  6AB3 CD D0 72             call    A72D0
7420  6AB6 2C                   defb    ","                     ; check for ","
7421  6AB7 FE 52                cp      "R"                     ; autorun specified ?
7422  6AB9 28 04                jr      z,A6ABF                 ; yep, set autorun
7423  6ABB FE 53                cp      "S"                     ; vram specified ?
7424  6ABD 20 0C                jr      nz,A6ACB                ; nope, then it must be a offset
7425  6ABF 32 BE FC     A6ABF:  ld      (RUNBNF),a
7426  6AC2 CD DB 72             call    A72DB                   ; get basic character
7427  6AC5 28 09                jr      z,A6AD0                 ; end of statement, skip offset
7428  6AC7 CD D0 72             call    A72D0
7429  6ACA 2C                   defb    ","                     ; check for ","
7430  6ACB CD 6E 6B     A6ACB:  call    A6B6E
7431  6ACE 42                   ld      b,d
7432  6ACF 4B                   ld      c,e                     ; offset
7433  6AD0 D1           A6AD0:  pop     de
7434  6AD1 E5                   push    hl
7435  6AD2 C5                   push    bc
7436  6AD3 3E FF                ld      a,0FFH
7437  6AD5 32 AE FC             ld      (FLBMEM),a              ; raw mode
7438  6AD8 AF                   xor     a                       ; i/o channel 0
7439  6AD9 1E 01                ld      e,1                     ; input mode
7440  6ADB DD 21 FA 6A          ld      ix,OPNFIL
7441  6ADF CD 1E 73             call    A731E                   ; open i/o channel
7442  6AE2 ED 5B 53 F3          ld      de,(YF353)		; FCB for i/o channel 0
7443  6AE6 CD D0 69             call    A69D0                   ; read byte from FCB
7444  6AE9 FE FE                cp      0FEH
7445  6AEB C2 99 71             jp      nz,A7199		; nope, bad file mode error
7446  6AEE C1                   pop     bc
7447  6AEF CD 5C 6B             call    A6B5C                   ; read word from FCB and add offset
7448  6AF2 E5                   push    hl
7449  6AF3 CD 5C 6B             call    A6B5C                   ; read word from FCB and add offset
7450  6AF6 E5                   push    hl
7451  6AF7 CD 5C 6B             call    A6B5C                   ; read word from FCB and add offset
7452  6AFA 22 BF FC             ld      (SAVENT),hl
7453  6AFD E1                   pop     hl
7454  6AFE C1                   pop     bc
7455  6AFF A7                   and     a
7456  6B00 ED 42                sbc     hl,bc                   ; end address - start address
7457  6B02 23                   inc     hl
7458  6B03 ED 43 3D F2          ld      (YF23D),bc              ; transferaddress
7459  6B07 3A BE FC             ld      a,(RUNBNF)
7460  6B0A FE 53                cp      "S"                     ; vram load ?
7461  6B0C 28 0C                jr      z,A6B1A                 ; yep,
7462  6B0E CD B2 47             call    A47B2                   ; random block read
7463  6B11 DD 21 FF 4A  A6B11:  ld      ix,FINPRT
7464  6B15 CD 1E 73             call    A731E                   ; output back to screen
7465  6B18 E1                   pop     hl
7466  6B19 C9                   ret
7467  6B1A
7468  6B1A CD 65 71     A6B1A:  call    A7165
7469  6B1D E5           A6B1D:  push    hl
7470  6B1E ED 5B BF FC          ld      de,(SAVENT)
7471  6B22 E7                   rst     020H
7472  6B23 F5                   push    af
7473  6B24 ED 5B 53 F3          ld      de,(YF353)		; FCB for i/o channel 0
7474  6B28 CD B2 47             call    A47B2                   ; random block read
7475  6B2B F1                   pop     af
7476  6B2C C1                   pop     bc
7477  6B2D C5                   push    bc
7478  6B2E F5                   push    af
7479  6B2F 2A 7D F8             ld      hl,(SAVEND)
7480  6B32 E5                   push    hl
7481  6B33 09                   add     hl,bc
7482  6B34 22 7D F8             ld      (SAVEND),hl
7483  6B37 D1                   pop     de
7484  6B38 2A 3D F2             ld      hl,(YF23D)              ; transferaddress
7485  6B3B F1                   pop     af
7486  6B3C 30 10                jr      nc,A6B4E
7487  6B3E CD 5C 00             call    LDIRVM
7488  6B41 2A BF FC             ld      hl,(SAVENT)
7489  6B44 D1                   pop     de
7490  6B45 A7                   and     a
7491  6B46 ED 52                sbc     hl,de
7492  6B48 22 BF FC             ld      (SAVENT),hl
7493  6B4B EB                   ex      de,hl
7494  6B4C 18 CF                jr      A6B1D
7495  6B4E
7496  6B4E C1           A6B4E:  pop     bc
7497  6B4F ED 4B BF FC          ld      bc,(SAVENT)
7498  6B53 CD 5C 00             call    LDIRVM
7499  6B56 AF                   xor     a
7500  6B57 32 BE FC             ld      (RUNBNF),a
7501  6B5A 18 B5                jr      A6B11
7502  6B5C
7503  6B5C C5           A6B5C:  push    bc
7504  6B5D CD D0 69             call    A69D0                   ; read byte from FCB
7505  6B60 F5                   push    af
7506  6B61 CD D0 69             call    A69D0                   ; read byte from FCB
7507  6B64 67                   ld      h,a
7508  6B65 F1                   pop     af
7509  6B66 6F                   ld      l,a
7510  6B67 C1                   pop     bc
7511  6B68 09                   add     hl,bc
7512  6B69 C9                   ret
7513  6B6A
7514  6B6A CD D0 72     A6B6A:  call    A72D0
7515  6B6D 2C                   defb    ","                     ; check for ","
7516  6B6E DD 21 0B 6F  A6B6E:  ld      ix,M6F0B
7517  6B72 C3 1E 73             jp      A731E                   ; evaluate address operand (BLOAD/SAVE)
7518  6B75
7519  6B75              ;       Subroutine      DSKI$ function (H.DSKI)
7520  6B75              ;       Inputs
7521  6B75              ;       Outputs         ________________________
7522  6B75
7523  6B75 CD 80 73     A6B75:  call    A7380                   ; take control from caller
7524  6B78 CD DB 72             call    A72DB                   ; get basic character
7525  6B7B CD D0 72             call    A72D0
7526  6B7E 28                   defb    "("                     ; check for "("
7527  6B7F CD C5 6B             call    A6BC5
7528  6B82 CD D0 72             call    A72D0
7529  6B85 29                   defb    ")"                     ; check for ")"
7530  6B86 E5                   push    hl
7531  6B87 21 D6 3F             ld      hl,NULSTR
7532  6B8A 22 F8 F7             ld      (DAC+2),hl
7533  6B8D E1                   pop     hl
7534  6B8E 3E 03                ld      a,3
7535  6B90 32 63 F6             ld      (VALTYP),a
7536  6B93 A7                   and     a
7537  6B94 18 0B                jr      A6BA1
7538  6B96
7539  6B96              ;       Subroutine      DSKO statement (H.DSKO)
7540  6B96              ;       Inputs
7541  6B96              ;       Outputs
7542  6B96
7543  6B96 CD 80 73     A6B96:  call    A7380                   ; take control from caller
7544  6B99 CD C5 6B             call    A6BC5
7545  6B9C CD DA 72             call    A72DA                   ; at end of statement ?
7546  6B9F C0                   ret     nz                      ; nope, quit
7547  6BA0 37                   scf
7548  6BA1 F5           A6BA1:  push    af
7549  6BA2 E5                   push    hl
7550  6BA3 D5                   push    de
7551  6BA4 59                   ld      e,c
7552  6BA5 CD 5D 50             call    A505D
7553  6BA8 3C                   inc     a
7554  6BA9 CA 9C 71             jp      z,A719C
7555  6BAC D1                   pop     de
7556  6BAD E1                   pop     hl
7557  6BAE F1                   pop     af
7558  6BAF E5                   push    hl
7559  6BB0 3E FF                ld      a,0FFH
7560  6BB2 32 46 F2             ld      (YF246),a               ; invalid dirsector buffer
7561  6BB5 DD 7E 00             ld      a,(ix+0)                ; driveid
7562  6BB8 06 01                ld      b,001H
7563  6BBA DD 4E 01             ld      c,(ix+1)                ; mediadescriptor
7564  6BBD 2A 51 F3             ld      hl,(YF351)              ; temporary use dirsector buffer
7565  6BC0 CD 44 01             call    PHYDIO
7566  6BC3 E1                   pop     hl
7567  6BC4 C9                   ret
7568  6BC5
7569  6BC5 DD 21 1C 52  A6BC5:  ld      ix,GETBYT
7570  6BC9 CD 1E 73             call    A731E                   ; evaluate byte operand
7571  6BCC D5                   push    de
7572  6BCD CD D0 72             call    A72D0
7573  6BD0 2C                   defb    ","                     ; check for ","
7574  6BD1 DD 21 2F 54          ld      ix,GETUIN
7575  6BD5 CD 1E 73             call    A731E                   ; evaluate address operand
7576  6BD8 C1                   pop     bc
7577  6BD9 C9                   ret
7578  6BDA
7579  6BDA              ;       Subroutine      GET/PUT statement (H.DGET)
7580  6BDA              ;       Inputs
7581  6BDA              ;       Outputs         ________________________
7582  6BDA
7583  6BDA DD 21 8B F3  A6BDA:  ld      ix,RETRTN
7584  6BDE FD 21 00 04          ld      iy,00400H
7585  6BE2 CD 63 66             call    A6663                   ; take control from caller (move parameters on stack)
7586  6BE5 7E                   ld      a,(hl)
7587  6BE6 FE 04                cp      4                       ; random mode ?
7588  6BE8 C2 99 71             jp      nz,A7199                ; nope, bad file mode error
7589  6BEB 23                   inc     hl
7590  6BEC 5E                   ld      e,(hl)
7591  6BED 23                   inc     hl
7592  6BEE 56                   ld      d,(hl)                  ; pointer to FCB
7593  6BEF 01 07 00             ld      bc,9-2
7594  6BF2 09                   add     hl,bc			; i/o channel buffer
7595  6BF3 E3                   ex      (sp),hl
7596  6BF4 CD DA 72             call    A72DA                   ; at end of statement ?
7597  6BF7 28 30                jr      z,A6C29                 ; yep,
7598  6BF9 D5                   push    de
7599  6BFA CD D0 72             call    A72D0
7600  6BFD 2C                   defb    ","                     ; check for ","
7601  6BFE DD 21 64 4C          ld      ix,FRMEVL
7602  6C02 CD 1E 73             call    A731E                   ; evaluate expression
7603  6C05 E5                   push    hl
7604  6C06 CD FB 6D             call    A6DFB
7605  6C09 79                   ld      a,c
7606  6C0A B0                   or      b
7607  6C0B B5                   or      l
7608  6C0C B4                   or      h
7609  6C0D CA 15 73             jp      z,A7315
7610  6C10 79                   ld      a,c
7611  6C11 B0                   or      b
7612  6C12 0B                   dec     bc
7613  6C13 20 01                jr      nz,A6C16
7614  6C15 2B                   dec     hl
7615  6C16 EB           A6C16:  ex      de,hl
7616  6C17 E1                   pop     hl
7617  6C18 E3                   ex      (sp),hl
7618  6C19 E5                   push    hl
7619  6C1A D5                   push    de
7620  6C1B 11 21 00             ld      de,00021H
7621  6C1E 19                   add     hl,de
7622  6C1F D1                   pop     de
7623  6C20 71                   ld      (hl),c
7624  6C21 23                   inc     hl
7625  6C22 70                   ld      (hl),b
7626  6C23 23                   inc     hl
7627  6C24 73                   ld      (hl),e
7628  6C25 23                   inc     hl
7629  6C26 72                   ld      (hl),d
7630  6C27 D1                   pop     de
7631  6C28 E1                   pop     hl
7632  6C29 E3           A6C29:  ex      (sp),hl
7633  6C2A 22 3D F2             ld      (YF23D),hl              ; transferaddress
7634  6C2D E1                   pop     hl
7635  6C2E F1                   pop     af
7636  6C2F E5                   push    hl
7637  6C30 A7                   and     a
7638  6C31 21 03 73             ld      hl,A7303
7639  6C34 01 B2 47             ld      bc,A47B2                ; random block read
7640  6C37 28 06                jr      z,A6C3F
7641  6C39 21 A8 71             ld      hl,A71A8
7642  6C3C 01 BE 47             ld      bc,A47BE                ; random block write
7643  6C3F E5           A6C3F:  push    hl
7644  6C40 CD E2 69             call    A69E2
7645  6C43 A7                   and     a
7646  6C44 C0                   ret     nz
7647  6C45 E1                   pop     hl
7648  6C46 C3 F8 6E             jp      A6EF8
7649  6C49
7650  6C49              ;       Subroutine      FIELD statement (H.FIEL)
7651  6C49              ;       Inputs
7652  6C49              ;       Outputs         ________________________
7653  6C49
7654  6C49 CD 80 73     A6C49:  call    A7380                   ; take control from caller
7655  6C4C FE 23                cp      "#"
7656  6C4E CC DB 72             call    z,A72DB                 ; get basic character
7657  6C51 DD 21 1C 52          ld      ix,GETBYT
7658  6C55 CD 1E 73             call    A731E                   ; evaluate byte operand
7659  6C58 CA 18 73             jp      z,A7318			; zero, syntax error
7660  6C5B E5                   push    hl
7661  6C5C DD 21 6D 6A          ld      ix,FILIDX
7662  6C60 CD 1E 73             call    A731E                   ; get i/o channel pointer
7663  6C63 5D                   ld      e,l
7664  6C64 54                   ld      d,h
7665  6C65 CA 00 73             jp      z,A7300
7666  6C68 DA 15 73             jp      c,A7315
7667  6C6B 7E                   ld      a,(hl)
7668  6C6C FE 04                cp      4			; random i/o mode ?
7669  6C6E C2 99 71             jp      nz,A7199		; nope, bad file mode error
7670  6C71 23                   inc     hl
7671  6C72 7E                   ld      a,(hl)
7672  6C73 23                   inc     hl
7673  6C74 66                   ld      h,(hl)
7674  6C75 6F                   ld      l,a
7675  6C76 01 0E 00             ld      bc,0000EH
7676  6C79 09                   add     hl,bc
7677  6C7A 4E                   ld      c,(hl)
7678  6C7B 23                   inc     hl
7679  6C7C 46                   ld      b,(hl)
7680  6C7D ED 43 68 F5          ld      (BUF+10),bc
7681  6C81 21 00 00             ld      hl,00000H
7682  6C84 22 6A F5             ld      (BUF+12),hl
7683  6C87 01 09 00             ld      bc,00009H
7684  6C8A E1                   pop     hl
7685  6C8B EB           A6C8B:  ex      de,hl
7686  6C8C 09                   add     hl,bc
7687  6C8D EB                   ex      de,hl
7688  6C8E 7E                   ld      a,(hl)
7689  6C8F FE 2C                cp      ","
7690  6C91 C0                   ret     nz
7691  6C92 D5                   push    de
7692  6C93 DD 21 1B 52          ld      ix,GTBYTC
7693  6C97 CD 1E 73             call    A731E                   ; skip basic char and evaluate byte operand
7694  6C9A F5                   push    af
7695  6C9B CD D0 72             call    A72D0
7696  6C9E 41                   defb    "A"
7697  6C9F CD D0 72             call    A72D0
7698  6CA2 53                   defb    "S"                     ; check for "AS"
7699  6CA3 DD 21 A4 5E          ld      ix,PTRGET
7700  6CA7 CD 1E 73             call    A731E                   ; get address of variable
7701  6CAA DD 21 97 55          ld      ix,GETYPR
7702  6CAE CD 1E 73             call    A731E                   ; GETYPR
7703  6CB1 C2 FA 72             jp      nz,A72FA
7704  6CB4 F1                   pop     af
7705  6CB5 E3                   ex      (sp),hl
7706  6CB6 D5                   push    de
7707  6CB7 E5                   push    hl
7708  6CB8 2A 6A F5             ld      hl,(BUF+12)
7709  6CBB 4F                   ld      c,a
7710  6CBC 06 00                ld      b,000H
7711  6CBE 09                   add     hl,bc
7712  6CBF 22 6A F5             ld      (BUF+12),hl
7713  6CC2 EB                   ex      de,hl
7714  6CC3 2A 68 F5             ld      hl,(BUF+10)
7715  6CC6 E7                   rst     020H
7716  6CC7 DA 06 73             jp      c,A7306
7717  6CCA D1                   pop     de
7718  6CCB E1                   pop     hl
7719  6CCC 71                   ld      (hl),c
7720  6CCD 23                   inc     hl
7721  6CCE 73                   ld      (hl),e
7722  6CCF 23                   inc     hl
7723  6CD0 72                   ld      (hl),d
7724  6CD1 06 00                ld      b,000H
7725  6CD3 E1                   pop     hl
7726  6CD4 18 B5                jr      A6C8B
7727  6CD6
7728  6CD6              ;       Subroutine      RSET statement (H.RSET)
7729  6CD6              ;       Inputs
7730  6CD6              ;       Outputs         ________________________
7731  6CD6
7732  6CD6 F6           A6CD6:  defb    0F6H
7733  6CD7
7734  6CD7              ;       Subroutine      LSET statement (H.LSET)
7735  6CD7              ;       Inputs
7736  6CD7              ;       Outputs         ________________________
7737  6CD7
7738  6CD7 37           A6CD7:  scf
7739  6CD8 CD 80 73             call    A7380                   ; take control from caller
7740  6CDB F5                   push    af
7741  6CDC DD 21 A4 5E          ld      ix,PTRGET
7742  6CE0 CD 1E 73             call    A731E                   ; get address of variable
7743  6CE3 DD 21 97 55          ld      ix,GETYPR
7744  6CE7 CD 1E 73             call    A731E                   ; GETYPR
7745  6CEA C2 FA 72             jp      nz,A72FA
7746  6CED D5                   push    de
7747  6CEE DD 21 5F 4C          ld      ix,FRMEQL
7748  6CF2 CD 1E 73             call    A731E                   ; evaluate =expression
7749  6CF5 C1                   pop     bc
7750  6CF6 E3                   ex      (sp),hl
7751  6CF7 E5                   push    hl
7752  6CF8 C5                   push    bc
7753  6CF9 DD 21 D0 67          ld      ix,FRESTR
7754  6CFD CD 1E 73             call    A731E                   ; free temporary string
7755  6D00 46                   ld      b,(hl)
7756  6D01 E3                   ex      (sp),hl
7757  6D02 7E                   ld      a,(hl)
7758  6D03 4F                   ld      c,a
7759  6D04 C5                   push    bc
7760  6D05 E5                   push    hl
7761  6D06 F5                   push    af
7762  6D07 23                   inc     hl
7763  6D08 5E                   ld      e,(hl)
7764  6D09 23                   inc     hl
7765  6D0A 56                   ld      d,(hl)
7766  6D0B B7                   or      a
7767  6D0C 28 5C                jr      z,A6D6A
7768  6D0E 2A 62 F8             ld      hl,(NULBUF)
7769  6D11 2B                   dec     hl
7770  6D12 E7                   rst     020H
7771  6D13 38 33                jr      c,A6D48
7772  6D15 2A C2 F6             ld      hl,(VARTAB)
7773  6D18 E7                   rst     020H
7774  6D19 38 2D                jr      c,A6D48
7775  6D1B 59                   ld      e,c
7776  6D1C 16 00                ld      d,000H
7777  6D1E 2A 74 F6             ld      hl,(STKTOP)
7778  6D21 19                   add     hl,de
7779  6D22 EB                   ex      de,hl
7780  6D23 2A 9B F6             ld      hl,(FRETOP)
7781  6D26 E7                   rst     020H
7782  6D27 38 54                jr      c,A6D7D
7783  6D29 F1                   pop     af
7784  6D2A 79           A6D2A:  ld      a,c
7785  6D2B DD 21 8E 66          ld      ix,GETSPA
7786  6D2F CD 1E 73             call    A731E                   ; allocate stringspace
7787  6D32 E1                   pop     hl
7788  6D33 C1                   pop     bc
7789  6D34 E3                   ex      (sp),hl
7790  6D35 D5                   push    de
7791  6D36 C5                   push    bc
7792  6D37 DD 21 D0 67          ld      ix,FRESTR
7793  6D3B CD 1E 73             call    A731E                   ; free temporary string
7794  6D3E C1                   pop     bc
7795  6D3F D1                   pop     de
7796  6D40 E3                   ex      (sp),hl
7797  6D41 C5                   push    bc
7798  6D42 E5                   push    hl
7799  6D43 23                   inc     hl
7800  6D44 F5                   push    af
7801  6D45 73                   ld      (hl),e
7802  6D46 23                   inc     hl
7803  6D47 72                   ld      (hl),d
7804  6D48 F1           A6D48:  pop     af
7805  6D49 E1                   pop     hl
7806  6D4A 23                   inc     hl
7807  6D4B 5E                   ld      e,(hl)
7808  6D4C 23                   inc     hl
7809  6D4D 56                   ld      d,(hl)
7810  6D4E C1                   pop     bc
7811  6D4F E1                   pop     hl
7812  6D50 23                   inc     hl
7813  6D51 7E                   ld      a,(hl)
7814  6D52 23                   inc     hl
7815  6D53 66                   ld      h,(hl)
7816  6D54 6F                   ld      l,a
7817  6D55 79                   ld      a,c
7818  6D56 B8                   cp      b
7819  6D57 30 01                jr      nc,A6D5A
7820  6D59 47                   ld      b,a
7821  6D5A 90           A6D5A:  sub     b
7822  6D5B 4F                   ld      c,a
7823  6D5C F1                   pop     af
7824  6D5D D4 74 6D             call    nc,A6D74
7825  6D60 04                   inc     b
7826  6D61 05           A6D61:  dec     b
7827  6D62 28 0B                jr      z,A6D6F
7828  6D64 7E                   ld      a,(hl)
7829  6D65 12                   ld      (de),a
7830  6D66 23                   inc     hl
7831  6D67 13                   inc     de
7832  6D68 18 F7                jr      A6D61
7833  6D6A
7834  6D6A C1           A6D6A:  pop     bc
7835  6D6B C1                   pop     bc
7836  6D6C C1                   pop     bc
7837  6D6D C1                   pop     bc
7838  6D6E C1                   pop     bc
7839  6D6F DC 74 6D     A6D6F:  call    c,A6D74
7840  6D72 E1                   pop     hl
7841  6D73 C9                   ret
7842  6D74
7843  6D74 3E 20        A6D74:  ld      a,020H
7844  6D76 0C                   inc     c
7845  6D77 0D           A6D77:  dec     c
7846  6D78 C8                   ret     z
7847  6D79 12                   ld      (de),a
7848  6D7A 13                   inc     de
7849  6D7B 18 FA                jr      A6D77
7850  6D7D
7851  6D7D F1           A6D7D:  pop     af
7852  6D7E E1                   pop     hl
7853  6D7F C1                   pop     bc
7854  6D80 E3                   ex      (sp),hl
7855  6D81 EB                   ex      de,hl
7856  6D82 20 25                jr      nz,A6DA9
7857  6D84 C5                   push    bc
7858  6D85 78                   ld      a,b
7859  6D86 DD 21 27 66          ld      ix,STRINI
7860  6D8A CD 1E 73             call    A731E                   ; allocate temporary string
7861  6D8D 11 98 F6             ld      de,TEMPST+30
7862  6D90 2A 78 F6             ld      hl,(TEMPPT)
7863  6D93 22 F8 F7             ld      (DAC+2),hl
7864  6D96 3E 03                ld      a,3
7865  6D98 32 63 F6             ld      (VALTYP),a
7866  6D9B CD F3 2E             call    VMOVE                   ; copy stringdescriptor
7867  6D9E 11 9B F6             ld      de,TEMPST+30+3
7868  6DA1 E7                   rst     020H
7869  6DA2 22 78 F6             ld      (TEMPPT),hl
7870  6DA5 CA F7 72             jp      z,A72F7
7871  6DA8 C1                   pop     bc
7872  6DA9 E3           A6DA9:  ex      (sp),hl
7873  6DAA C5                   push    bc
7874  6DAB E5                   push    hl
7875  6DAC C3 2A 6D             jp      A6D2A
7876  6DAF
7877  6DAF              ;       Subroutine      MKI$ function (H.MKI$)
7878  6DAF              ;       Inputs
7879  6DAF              ;       Outputs         ________________________
7880  6DAF
7881  6DAF 3E 02        A6DAF:  ld      a,2
7882  6DB1 01                   defb    001H
7883  6DB2
7884  6DB2              ;       Subroutine      MKS$ function (H.MKS$)
7885  6DB2              ;       Inputs
7886  6DB2              ;       Outputs         ________________________
7887  6DB2
7888  6DB2 3E 04        A6DB2:  ld      a,4
7889  6DB4 01                   defb    001H
7890  6DB5
7891  6DB5              ;       Subroutine      MKD$ function (H.MKD$)
7892  6DB5              ;       Inputs
7893  6DB5              ;       Outputs         ________________________
7894  6DB5
7895  6DB5 3E 08        A6DB5:  ld      a,8
7896  6DB7 CD 80 73             call    A7380                   ; take control from caller
7897  6DBA F5                   push    af
7898  6DBB DD 21 7A 51          ld      ix,DOCNVF
7899  6DBF CD 1E 73             call    A731E                   ; convert DAC
7900  6DC2 F1                   pop     af
7901  6DC3 DD 21 27 66          ld      ix,STRINI
7902  6DC7 CD 1E 73             call    A731E                   ; allocate temporary string
7903  6DCA 2A 99 F6             ld      hl,(DSCTMP+1)
7904  6DCD CD 10 2F             call    VMOVMF                  ; copy variable content from DAC
7905  6DD0 C3 F1 61             jp      A61F1
7906  6DD3
7907  6DD3              ; Unused code, patched code ??
7908  6DD3
7909  6DD3 00                   nop
7910  6DD4 00                   nop
7911  6DD5 00                   nop
7912  6DD6 00                   nop
7913  6DD7
7914  6DD7              ;       Subroutine      CVI function (H.CVI)
7915  6DD7              ;       Inputs
7916  6DD7              ;       Outputs         ________________________
7917  6DD7
7918  6DD7 3E 01        A6DD7:  ld      a,2-1
7919  6DD9 01                   defb    001H
7920  6DDA
7921  6DDA              ;       Subroutine      CVS function (H.CVS)
7922  6DDA              ;       Inputs
7923  6DDA              ;       Outputs         ________________________
7924  6DDA
7925  6DDA 3E 03        A6DDA:  ld      a,4-1
7926  6DDC 01                   defb    001H
7927  6DDD
7928  6DDD              ;       Subroutine      CVD function (H.CVD)
7929  6DDD              ;       Inputs
7930  6DDD              ;       Outputs         ________________________
7931  6DDD
7932  6DDD 3E 07        A6DDD:  ld      a,8-1
7933  6DDF CD 80 73             call    A7380                   ; take control from caller
7934  6DE2 F5                   push    af
7935  6DE3 DD 21 D0 67          ld      ix,FRESTR
7936  6DE7 CD 1E 73             call    A731E                   ; free temporary string
7937  6DEA F1                   pop     af
7938  6DEB BE                   cp      (hl)
7939  6DEC D2 15 73             jp      nc,A7315
7940  6DEF 3C                   inc     a
7941  6DF0 23                   inc     hl
7942  6DF1 4E                   ld      c,(hl)
7943  6DF2 23                   inc     hl
7944  6DF3 66                   ld      h,(hl)
7945  6DF4 69                   ld      l,c
7946  6DF5 32 63 F6             ld      (VALTYP),a
7947  6DF8 C3 08 2F             jp      VMOVFM                  ; copy variable content to DAC
7948  6DFB
7949  6DFB DD 21 97 55  A6DFB:  ld      ix,GETYPR
7950  6DFF CD 1E 73             call    A731E                   ; GETYPR
7951  6E02 ED 4B F8 F7          ld      bc,(DAC+2)
7952  6E06 21 00 00             ld      hl,0
7953  6E09 F8                   ret     m
7954  6E0A CA FA 72             jp      z,A72FA
7955  6E0D 21 F6 F7             ld      hl,DAC
7956  6E10 11 FC F5             ld      de,BUF+158
7957  6E13 01 08 00             ld      bc,8
7958  6E16 ED B0                ldir
7959  6E18 21 68 6E             ld      hl,T6E68
7960  6E1B 11 47 F8             ld      de,ARG
7961  6E1E 0E 08                ld      c,8
7962  6E20 ED B0                ldir
7963  6E22 CD 9F 28             call    DECDIV                  ; dbl divide
7964  6E25 A7                   and     a                       ; double real flag
7965  6E26 CD D1 30             call    INT                     ; dbl to integer
7966  6E29 DD 21 32 54          ld      ix,M5432
7967  6E2D CD 1E 73             call    A731E                   ; convert address to integer
7968  6E30 D5                   push    de
7969  6E31 EB                   ex      de,hl
7970  6E32 DD 21 FF 46          ld      ix,FLTLIN
7971  6E36 CD 1E 73             call    A731E                   ; convert integer to sgn in DAC
7972  6E39 CD 42 30             call    CONDS                   ; convert DAC from sgn to dbl
7973  6E3C 01 45 65             ld      bc,06545H
7974  6E3F 11 53 60             ld      de,06053H
7975  6E42 CD 5C 32             call    SGNMUL                  ; sgn multiply
7976  6E45 21 F6 F7             ld      hl,DAC
7977  6E48 11 47 F8             ld      de,ARG
7978  6E4B 01 08 00             ld      bc,8
7979  6E4E ED B0                ldir
7980  6E50 21 FC F5             ld      hl,BUF+158
7981  6E53 11 F6 F7             ld      de,DAC
7982  6E56 0E 08                ld      c,8
7983  6E58 ED B0                ldir
7984  6E5A CD 8C 26             call    DECSUB                  ; dbl subtract
7985  6E5D DD 21 32 54          ld      ix,M5432
7986  6E61 CD 1E 73             call    A731E                   ; convert address to integer
7987  6E64 4B                   ld      c,e
7988  6E65 42                   ld      b,d
7989  6E66 E1                   pop     hl
7990  6E67 C9                   ret
7991  6E68
7992  6E68 45 65 53 60  T6E68:  defb    045H,065H,053H,060H,000H,000H,000H,000H
7992  6E6C 00 00 00 00
7993  6E70
7994  6E70              ;       Subroutine       (H.EOF)
7995  6E70              ;       Inputs
7996  6E70              ;       Outputs         ________________________
7997  6E70
7998  6E70 CD 80 73     A6E70:  call    A7380                   ; take control from caller
7999  6E73 E5                   push    hl
8000  6E74 CD 2A 68             call    A682A                   ; get char from I/O channel
8001  6E77 21 00 00             ld      hl,0
8002  6E7A 30 01                jr      nc,A6E7D
8003  6E7C 2B                   dec     hl
8004  6E7D F5           A6E7D:  push    af
8005  6E7E CD 99 2F             call    MAKINT                  ; integer to DAC
8006  6E81 F1                   pop     af
8007  6E82 E1                   pop     hl
8008  6E83 23                   inc     hl
8009  6E84 23                   inc     hl
8010  6E85 23                   inc     hl
8011  6E86 77                   ld      (hl),a
8012  6E87 C9                   ret
8013  6E88
8014  6E88              ;       Subroutine      FILES/LFILES statement (H.FILE)
8015  6E88              ;       Inputs
8016  6E88              ;       Outputs         ________________________
8017  6E88
8018  6E88 CD 80 73     A6E88:  call    A7380                   ; take control from caller
8019  6E8B 16 00                ld      d,000H
8020  6E8D 28 06                jr      z,A6E95
8021  6E8F CD 80 6F             call    A6F80
8022  6E92 E5                   push    hl
8023  6E93 18 04                jr      A6E99
8024  6E95
8025  6E95 E5           A6E95:  push    hl
8026  6E96 CD FE 6F             call    A6FFE
8027  6E99 CD 63 6F     A6E99:  call    A6F63
8028  6E9C 3A 16 F4             ld      a,(PRTFLG)
8029  6E9F A7                   and     a                       ; output to printer ?
8030  6EA0 F5                   push    af
8031  6EA1 CD 45 66             call    A6645                   ; search file
8032  6EA4 CA 12 73             jp      z,A7312			; not found, file not found error
8033  6EA7 DD 21 23 73          ld      ix,CRDONZ
8034  6EAB CD 1E 73             call    A731E                   ; newline to OUTDO if not at start of line
8035  6EAE 21 B3 F5     A6EAE:  ld      hl,BUF+85
8036  6EB1 06 0B                ld      b,11
8037  6EB3 7E           A6EB3:  ld      a,(hl)
8038  6EB4 23                   inc     hl
8039  6EB5 DF                   rst     018H
8040  6EB6 78                   ld      a,b
8041  6EB7 FE 04                cp      004H
8042  6EB9 20 08                jr      nz,A6EC3
8043  6EBB 7E                   ld      a,(hl)
8044  6EBC FE 20                cp      " "
8045  6EBE 28 02                jr      z,A6EC2
8046  6EC0 3E 2E                ld      a,"."
8047  6EC2 DF           A6EC2:  rst     018H
8048  6EC3 10 EE        A6EC3:  djnz    A6EB3
8049  6EC5 CD BD 00             call    CKCNTC
8050  6EC8 F1                   pop     af                      ; output to printer ?
8051  6EC9 F5                   push    af
8052  6ECA 3A B0 F3             ld      a,(LINLEN)
8053  6ECD 47                   ld      b,a                     ; screenwidth
8054  6ECE 3A 61 F6             ld      a,(TTYPOS)              ; screenpos
8055  6ED1 28 05                jr      z,A6ED8                 ; nope, use screen
8056  6ED3 06 50                ld      b,80                    ; printerwidth
8057  6ED5 3A 15 F4             ld      a,(LPTPOS)              ; printerpos
8058  6ED8 A7           A6ED8:  and     a                       ; at start of line ?
8059  6ED9 28 0F                jr      z,A6EEA                 ; yep, no newline
8060  6EDB C6 0C                add     a,00CH
8061  6EDD B8                   cp      b
8062  6EDE 30 03                jr      nc,A6EE3
8063  6EE0 3E 20                ld      a," "
8064  6EE2 DF                   rst     018H
8065  6EE3 DD 21 28 73  A6EE3:  ld      ix,CRDO
8066  6EE7 D4 1E 73             call    nc,A731E                ; yep, newline to OUTDO
8067  6EEA 11 68 F5     A6EEA:  ld      de,BUF+10
8068  6EED AF                   xor     a
8069  6EEE 32 74 F5             ld      (BUF+22),a
8070  6EF1 CD 06 50             call    A5006                   ; search for next
8071  6EF4 3C                   inc     a
8072  6EF5 20 B7                jr      nz,A6EAE
8073  6EF7 F1                   pop     af
8074  6EF8 E1           A6EF8:  pop     hl
8075  6EF9 DD 21 FF 4A          ld      ix,FINPRT
8076  6EFD C3 1E 73             jp      A731E                   ; output back to screen and quit
8077  6F00
8078  6F00              ;       Subroutine      KILL statement (H.KILL)
8079  6F00              ;       Inputs
8080  6F00              ;       Outputs         ________________________
8081  6F00
8082  6F00 CD 80 73     A6F00:  call    A7380                   ; take control from caller
8083  6F03 CD 96 6F             call    A6F96
8084  6F06 CD DA 72             call    A72DA                   ; at end of statement ?
8085  6F09 C0                   ret     nz                      ; nope, quit
8086  6F0A CD EA 65             call    A65EA                   ; is file already open in one of the I/O channels ?
8087  6F0D CA A2 71             jp      z,A71A2
8088  6F10 CD 63 6F             call    A6F63
8089  6F13 E5                   push    hl
8090  6F14 11 68 F5             ld      de,BUF+10
8091  6F17 CD 6C 43             call    A436C                   ; delete file
8092  6F1A A7                   and     a			; error ?
8093  6F1B C2 12 73             jp      nz,A7312		; yep, file not found error
8094  6F1E E1                   pop     hl
8095  6F1F C9                   ret
8096  6F20
8097  6F20              ;       Subroutine      NAME statement (H.NAME)
8098  6F20              ;       Inputs
8099  6F20              ;       Outputs         ________________________
8100  6F20
8101  6F20 CD 80 73     A6F20:  call    A7380                   ; take control from caller
8102  6F23 CD 96 6F             call    A6F96
8103  6F26 CD EA 65             call    A65EA                   ; is file already open in one of the I/O channels ?
8104  6F29 CA A2 71             jp      z,A71A2
8105  6F2C CD 63 6F             call    A6F63
8106  6F2F E5                   push    hl
8107  6F30 CD 45 66             call    A6645                   ; search file
8108  6F33 CA 12 73             jp      z,A7312			; not found, file not found error
8109  6F36 E1                   pop     hl
8110  6F37 CD D0 72             call    A72D0
8111  6F3A 41                   defb    "A"
8112  6F3B CD D0 72             call    A72D0
8113  6F3E 53                   defb    "S"                     ; check for "AS"
8114  6F3F CD 96 6F             call    A6F96
8115  6F42 7A                   ld      a,d
8116  6F43 32 78 F5             ld      (BUF+26),a
8117  6F46 E5                   push    hl
8118  6F47 2A 68 F5             ld      hl,(BUF+10)
8119  6F4A A7                   and     a
8120  6F4B 28 04                jr      z,A6F51
8121  6F4D BD                   cp      l
8122  6F4E C2 B7 71             jp      nz,A71B7
8123  6F51 11 79 F5     A6F51:  ld      de,BUF+27
8124  6F54 CD 5A 66             call    A665A
8125  6F57 11 68 F5             ld      de,BUF+10
8126  6F5A CD 92 43             call    A4392                   ; rename file
8127  6F5D A7                   and     a
8128  6F5E C2 A5 71             jp      nz,A71A5
8129  6F61 E1                   pop     hl
8130  6F62 C9                   ret
8131  6F63
8132  6F63 CD E3 65     A6F63:  call    A65E3
8133  6F66 3C                   inc     a
8134  6F67 32 68 F5             ld      (BUF+10),a
8135  6F6A E5                   push    hl
8136  6F6B D5                   push    de
8137  6F6C CD 57 66             call    A6657
8138  6F6F D1                   pop     de
8139  6F70 E1                   pop     hl
8140  6F71 C9                   ret
8141  6F72
8142  6F72 DD 21 0E 6A  A6F72:  ld      ix,FILEVL
8143  6F76 CD 1E 73             call    A731E                   ; evaluate filespecification
8144  6F79 7A                   ld      a,d
8145  6F7A FE 09                cp      009H
8146  6F7C D8                   ret     c
8147  6F7D C3 9C 71             jp      A719C
8148  6F80 CD 72 6F     A6F80:  call    A6F72
8149  6F83 E5                   push    hl
8150  6F84 21 66 F8             ld      hl,FILNAM
8151  6F87 06 0B                ld      b,00BH
8152  6F89 7E           A6F89:  ld      a,(hl)
8153  6F8A 23                   inc     hl
8154  6F8B FE 20                cp      " "
8155  6F8D 20 0B                jr      nz,A6F9A
8156  6F8F 10 F8                djnz    A6F89
8157  6F91 CD FE 6F             call    A6FFE
8158  6F94 18 04                jr      A6F9A
8159  6F96
8160  6F96 CD 72 6F     A6F96:  call    A6F72
8161  6F99 E5                   push    hl
8162  6F9A 21 66 F8     A6F9A:  ld      hl,FILNAM
8163  6F9D 06 08                ld      b,008H
8164  6F9F CD F5 6F             call    A6FF5
8165  6FA2 06 03                ld      b,003H
8166  6FA4 CD F5 6F             call    A6FF5
8167  6FA7 E1                   pop     hl
8168  6FA8 F6                   defb    0F6H
8169  6FA9 37           A6FA9:  scf
8170  6FAA D5                   push    de
8171  6FAB E5                   push    hl
8172  6FAC 11 66 F8             ld      de,FILNAM
8173  6FAF D5                   push    de
8174  6FB0 06 0B                ld      b,11
8175  6FB2 C5           A6FB2:  push    bc
8176  6FB3 1A                   ld      a,(de)
8177  6FB4 21 CC 6F             ld      hl,T6FCC
8178  6FB7 01 0D 00             ld      bc,0000DH
8179  6FBA 38 01                jr      c,A6FBD
8180  6FBC 0B                   dec     bc
8181  6FBD ED B1        A6FBD:  cpir
8182  6FBF 28 31                jr      z,A6FF2
8183  6FC1 C1                   pop     bc
8184  6FC2 13                   inc     de
8185  6FC3 10 ED                djnz    A6FB2
8186  6FC5 E1                   pop     hl
8187  6FC6 CD D9 6F             call    A6FD9
8188  6FC9 E1                   pop     hl
8189  6FCA D1                   pop     de
8190  6FCB C9                   ret
8191  6FCC
8192  6FCC 2E 22 2F 5C  T6FCC:  defb    '."/\[]:+=;,*?'
8192  6FD0 5B 5D 3A 2B
8192  6FD4 3D 3B 2C 2A
8192  6FD8 3F
8193  6FD9
8194  6FD9 3E 20        A6FD9:  ld      a," "
8195  6FDB BE                   cp      (hl)
8196  6FDC 28 14                jr      z,A6FF2
8197  6FDE 06 07                ld      b,007H
8198  6FE0 CD E5 6F             call    A6FE5
8199  6FE3 06 03                ld      b,003H
8200  6FE5 23           A6FE5:  inc     hl
8201  6FE6 BE                   cp      (hl)
8202  6FE7 28 03                jr      z,A6FEC
8203  6FE9 10 FA                djnz    A6FE5
8204  6FEB C9                   ret
8205  6FEC
8206  6FEC 05           A6FEC:  dec     b
8207  6FED C8                   ret     z
8208  6FEE 23                   inc     hl
8209  6FEF BE                   cp      (hl)
8210  6FF0 28 FA                jr      z,A6FEC
8211  6FF2 C3 0F 73     A6FF2:  jp      A730F
8212  6FF5
8213  6FF5 7E           A6FF5:  ld      a,(hl)
8214  6FF6 FE 2A                cp      "*"
8215  6FF8 28 09                jr      z,A7003
8216  6FFA 23                   inc     hl
8217  6FFB 10 F8                djnz    A6FF5
8218  6FFD C9                   ret
8219  6FFE
8220  6FFE 21 66 F8     A6FFE:  ld      hl,FILNAM
8221  7001 06 0B                ld      b,00BH
8222  7003 36 3F        A7003:  ld      (hl),"?"
8223  7005 23                   inc     hl
8224  7006 10 FB                djnz    A7003
8225  7008 C9                   ret
8226  7009
8227  7009              ;       Subroutine       (H.LOF)
8228  7009              ;       Inputs
8229  7009              ;       Outputs         ________________________
8230  7009
8231  7009 01 10 00     A7009:  ld      bc,00010H
8232  700C 11                   defb    011H
8233  700D
8234  700D              ;       Subroutine       (H.LOC)
8235  700D              ;       Inputs
8236  700D              ;       Outputs         ________________________
8237  700D
8238  700D 01 21 00     A700D:  ld      bc,00021H
8239  7010 CD 80 73             call    A7380                   ; take control from caller
8240  7013 C5                   push    bc
8241  7014 DD 21 1F 52          ld      ix,CONINT
8242  7018 CD 1E 73             call    A731E                   ; convert to byte
8243  701B DD 21 6D 6A          ld      ix,FILIDX
8244  701F CD 1E 73             call    A731E                   ; get i/o channel pointer
8245  7022 DA 15 73             jp      c,A7315
8246  7025 CA 00 73             jp      z,A7300
8247  7028 C1                   pop     bc
8248  7029 23                   inc     hl
8249  702A 5E                   ld      e,(hl)
8250  702B 23                   inc     hl
8251  702C 56                   ld      d,(hl)
8252  702D EB                   ex      de,hl
8253  702E 09                   add     hl,bc
8254  702F 4E                   ld      c,(hl)
8255  7030 23                   inc     hl
8256  7031 46                   ld      b,(hl)
8257  7032 23                   inc     hl
8258  7033 5E                   ld      e,(hl)
8259  7034 23                   inc     hl
8260  7035 56                   ld      d,(hl)
8261  7036 EB                   ex      de,hl
8262  7037 C5                   push    bc
8263  7038 DD 21 FF 46          ld      ix,FLTLIN
8264  703C CD 1E 73             call    A731E                   ; convert integer to sgn in DAC
8265  703F 01 45 65             ld      bc,06545H
8266  7042 11 53 60             ld      de,06053H
8267  7045 CD 5C 32             call    SGNMUL                  ; sgn multiply
8268  7048 21 F6 F7             ld      hl,DAC
8269  704B 11 47 F8             ld      de,ARG
8270  704E 01 08 00             ld      bc,8
8271  7051 ED B0                ldir
8272  7053 E1                   pop     hl
8273  7054 DD 21 FF 46          ld      ix,FLTLIN
8274  7058 CD 1E 73             call    A731E                   ; convert integer to sgn in DAC
8275  705B CD 42 30             call    CONDS                   ; convert DAC from sgn to dbl
8276  705E C3 9A 26             jp      DECADD                  ; dbl add
8277  7061
8278  7061              ;       Subroutine      DSKF function (H.DSKF)
8279  7061              ;       Inputs
8280  7061              ;       Outputs         ________________________
8281  7061
8282  7061 CD 80 73     A7061:  call    A7380                   ; take control from caller
8283  7064 DD 21 1F 52          ld      ix,CONINT
8284  7068 CD 1E 73             call    A731E                   ; convert to byte
8285  706B 21 47 F3             ld      hl,YF347
8286  706E BE                   cp      (hl)
8287  706F 28 03                jr      z,A7074
8288  7071 D2 9C 71             jp      nc,A719C
8289  7074 5F           A7074:  ld      e,a
8290  7075 CD 5D 50             call    A505D
8291  7078 C3 99 2F             jp      MAKINT                  ; integer to DAC
8292  707B
8293  707B              ;       Subroutine      COPY statement (H.COPY)
8294  707B              ;       Inputs
8295  707B              ;       Outputs         ________________________
8296  707B
8297  707B CD 80 73     A707B:  call    A7380                   ; take control from caller
8298  707E CD 80 6F             call    A6F80
8299  7081 CD EA 65             call    A65EA                   ; is file already open in one of the I/O channels ?
8300  7084 CA A2 71             jp      z,A71A2
8301  7087 CD 63 6F             call    A6F63
8302  708A E5                   push    hl
8303  708B 3A 47 F2             ld      a,(YF247)
8304  708E 3C                   inc     a
8305  708F 32 8D F5             ld      (BUF+47),a
8306  7092 21 69 F5             ld      hl,BUF+11
8307  7095 11 8E F5             ld      de,BUF+48
8308  7098 01 24 00             ld      bc,00024H
8309  709B ED B0                ldir
8310  709D E1                   pop     hl
8311  709E CD DA 72             call    A72DA                   ; at end of statement ?
8312  70A1 28 20                jr      z,A70C3                 ; yep,
8313  70A3 CD D0 72             call    A72D0
8314  70A6 D9                   defb    0D9H                    ; check for TO token
8315  70A7 CD 80 6F             call    A6F80
8316  70AA CD EA 65             call    A65EA                   ; is file already open in one of the I/O channels ?
8317  70AD CA A2 71             jp      z,A71A2
8318  70B0 CD E3 65             call    A65E3
8319  70B3 3C                   inc     a
8320  70B4 32 8D F5             ld      (BUF+47),a
8321  70B7 E5                   push    hl
8322  70B8 11 8E F5             ld      de,BUF+48
8323  70BB CD 5A 66             call    A665A
8324  70BE E1                   pop     hl
8325  70BF CD DA 72             call    A72DA                   ; at end of statement ?
8326  70C2 C0                   ret     nz                      ; nope, quit
8327  70C3 E5           A70C3:  push    hl
8328  70C4 CD 45 66             call    A6645                   ; search file
8329  70C7 CA 12 73             jp      z,A7312			; not found, file not found error
8330  70CA CD BD 00     A70CA:  call    CKCNTC
8331  70CD 01 8D F5             ld      bc,BUF+47
8332  70D0 11 D7 F5             ld      de,BUF+121
8333  70D3 21 B2 F5             ld      hl,BUF+84
8334  70D6 3E 0C                ld      a,00CH
8335  70D8 F5           A70D8:  push    af
8336  70D9 0A                   ld      a,(bc)
8337  70DA FE 3F                cp      "?"
8338  70DC 20 01                jr      nz,A70DF
8339  70DE 7E                   ld      a,(hl)
8340  70DF 12           A70DF:  ld      (de),a
8341  70E0 03                   inc     bc
8342  70E1 13                   inc     de
8343  70E2 23                   inc     hl
8344  70E3 F1                   pop     af
8345  70E4 3D                   dec     a
8346  70E5 20 F1                jr      nz,A70D8
8347  70E7 21 B2 F5             ld      hl,BUF+84
8348  70EA 11 D7 F5             ld      de,BUF+121
8349  70ED 06 0C                ld      b,00CH
8350  70EF 1A           A70EF:  ld      a,(de)
8351  70F0 BE                   cp      (hl)
8352  70F1 20 07                jr      nz,A70FA
8353  70F3 23                   inc     hl
8354  70F4 13                   inc     de
8355  70F5 10 F8                djnz    A70EF
8356  70F7 C3 15 73             jp      A7315
8357  70FA
8358  70FA CD 6C 71     A70FA:  call    A716C
8359  70FD E5                   push    hl
8360  70FE AF                   xor     a
8361  70FF 32 BE F5             ld      (BUF+96),a
8362  7102 11 B2 F5             ld      de,BUF+84
8363  7105 CD 62 44             call    A4462                   ; open fcb
8364  7108 11 D7 F5             ld      de,BUF+121
8365  710B CD 1D 46             call    A461D                   ; create file
8366  710E A7                   and     a
8367  710F C2 AB 71             jp      nz,A71AB
8368  7112 6F                   ld      l,a
8369  7113 67                   ld      h,a
8370  7114 22 D3 F5             ld      (BUF+117),hl
8371  7117 22 D5 F5             ld      (BUF+119),hl
8372  711A 22 F8 F5             ld      (BUF+154),hl
8373  711D 22 FA F5             ld      (BUF+156),hl
8374  7120 23                   inc     hl
8375  7121 22 C0 F5             ld      (BUF+98),hl
8376  7124 22 E5 F5             ld      (BUF+135),hl
8377  7127 E1                   pop     hl
8378  7128 E5           A7128:  push    hl
8379  7129 11 B2 F5             ld      de,BUF+84
8380  712C CD B2 47             call    A47B2                   ; random block read
8381  712F 7D                   ld      a,l
8382  7130 B4                   or      h
8383  7131 28 09                jr      z,A713C
8384  7133 11 D7 F5             ld      de,BUF+121
8385  7136 CD 8F 71             call    A718F                   ; random block write
8386  7139 E1                   pop     hl
8387  713A 18 EC                jr      A7128
8388  713C
8389  713C E1           A713C:  pop     hl
8390  713D 2A C6 F5             ld      hl,(BUF+104)
8391  7140 22 EB F5             ld      (BUF+141),hl
8392  7143 2A C8 F5             ld      hl,(BUF+106)
8393  7146 22 ED F5             ld      (BUF+143),hl
8394  7149 11 D7 F5             ld      de,BUF+121
8395  714C CD 6F 45             call    A456F                   ; close fcb
8396  714F 21 B2 F5             ld      hl,BUF+84
8397  7152 22 3D F2             ld      (YF23D),hl              ; transferaddress
8398  7155 11 68 F5             ld      de,BUF+10
8399  7158 AF                   xor     a
8400  7159 32 74 F5             ld      (BUF+22),a
8401  715C CD 06 50             call    A5006                   ; search for next
8402  715F 3C                   inc     a
8403  7160 C2 CA 70             jp      nz,A70CA
8404  7163 E1                   pop     hl
8405  7164 C9                   ret
8406  7165
8407  7165 22 BF FC     A7165:  ld      (SAVENT),hl
8408  7168 ED 43 7D F8          ld      (SAVEND),bc
8409  716C 21 00 FE     A716C:  ld      hl,0FE00H
8410  716F 39                   add     hl,sp
8411  7170 30 0D                jr      nc,A717F
8412  7172 ED 5B C6 F6          ld      de,(STREND)
8413  7176 A7                   and     a
8414  7177 ED 52                sbc     hl,de
8415  7179 38 04                jr      c,A717F
8416  717B 7C                   ld      a,h
8417  717C A7                   and     a
8418  717D 20 07                jr      nz,A7186
8419  717F ED 5B 62 F8  A717F:  ld      de,(NULBUF)
8420  7183 21 00 01             ld      hl,256
8421  7186 ED 53 3D F2  A7186:  ld      (YF23D),de              ; transferaddress
8422  718A C9                   ret
8423  718B
8424  718B ED 5B 53 F3  A718B:  ld      de,(YF353)		; FCB for i/o channel 0
8425  718F CD BE 47     A718F:  call    A47BE                   ; random block write
8426  7192 A7                   and     a
8427  7193 C8                   ret     z
8428  7194 18 12                jr      A71A8
8429  7196
8430  7196 1E 3C        A7196:  ld      e,03CH
8431  7198 01                   defb    001H
8432  7199 1E 3D        A7199:  ld      e,03DH
8433  719B 01                   defb    001H
8434  719C 1E 3E        A719C:  ld      e,03EH
8435  719E 01                   defb    001H
8436  719F 1E 3F                ld      e,03FH
8437  71A1 01                   defb    001H
8438  71A2 1E 40        A71A2:  ld      e,040H
8439  71A4 01                   defb    001H
8440  71A5 1E 41        A71A5:  ld      e,041H
8441  71A7 01                   defb    001H
8442  71A8 1E 42        A71A8:  ld      e,042H
8443  71AA 01                   defb    001H
8444  71AB 1E 43        A71AB:  ld      e,043H
8445  71AD 01                   defb    001H
8446  71AE 1E 44        A71AE:  ld      e,044H
8447  71B0 01                   defb    001H
8448  71B1 1E 45        A71B1:  ld      e,045H
8449  71B3 01                   defb    001H
8450  71B4 1E 46        A71B4:  ld      e,046H
8451  71B6 01                   defb    001H
8452  71B7 1E 47        A71B7:  ld      e,047H
8453  71B9 01 00 00             ld      bc,00000H
8454  71BC AF                   xor     a
8455  71BD 32 7C F8             ld      (NLONLY),a              ; not loading basic program, close i/o channels when requested
8456  71C0 32 AE FC             ld      (FLBMEM),a              ; ascii mode
8457  71C3 D5                   push    de
8458  71C4 DD 21 24 6B          ld      ix,CLSFIL
8459  71C8 CD 1E 73             call    A731E                   ; close i/o channel
8460  71CB D1                   pop     de
8461  71CC DD 21 6F 40          ld      ix,ERROR                ; BASIC error
8462  71D0 C3 1E 73             jp      A731E
8463  71D3
8464  71D3              ;       Subroutine      expand errormessages (H.ERRP)
8465  71D3              ;       Inputs
8466  71D3              ;       Outputs         ________________________
8467  71D3
8468  71D3 7B           A71D3:  ld      a,e
8469  71D4 FE 3C                cp      03CH                    ; normal BASIC error ?
8470  71D6 D8                   ret     c                       ; yep, quit
8471  71D7 FE 48                cp      048H                    ; DiskBASIC error ?
8472  71D9 D0                   ret     nc                      ; nope, quit
8473  71DA D6 3B                sub     03BH
8474  71DC 47                   ld      b,a                     ; 1 based offset
8475  71DD 21 F5 71             ld      hl,T71F5
8476  71E0 7E           A71E0:  ld      a,(hl)
8477  71E1 A7                   and     a
8478  71E2 23                   inc     hl
8479  71E3 20 FB                jr      nz,A71E0
8480  71E5 10 F9                djnz    A71E0                   ; next errormessage
8481  71E7 2B                   dec     hl                      ; include trailing zero
8482  71E8 11 04 F6             ld      de,BUF+166
8483  71EB D5                   push    de
8484  71EC 01 16 00             ld      bc,22
8485  71EF ED B0                ldir                            ; copy errormessage to temporary place
8486  71F1 1E 01                ld      e,1                     ; erroroffset 1
8487  71F3 E1                   pop     hl
8488  71F4 C9                   ret
8489  71F5
8490  71F5 00           T71F5:  defb    0
8491  71F6 42 61 64 20          defb    "Bad FAT",0
8491  71FA 46 41 54 00
8492  71FE 42 61 64 20          defb    "Bad file mode",0
8492  7202 66 69 6C 65
8492  7206 20 6D 6F 64
8492  720A 65 00
8493  720C 42 61 64 20          defb    "Bad drive name",0
8493  7210 64 72 69 76
8493  7214 65 20 6E 61
8493  7218 6D 65 00
8494  721B 42 61 64 20          defb    "Bad sector number",0
8494  721F 73 65 63 74
8494  7223 6F 72 20 6E
8494  7227 75 6D 62 65
8494  722B 72 00
8495  722D 46 69 6C 65          defb    "File still open",0
8495  7231 20 73 74 69
8495  7235 6C 6C 20 6F
8495  7239 70 65 6E 00
8496  723D 46 69 6C 65          defb    "File already exists",0
8496  7241 20 61 6C 72
8496  7245 65 61 64 79
8496  7249 20 65 78 69
8496  724D 73 74 73 00
8497  7251 44 69 73 6B          defb    "Disk full",0
8497  7255 20 66 75 6C
8497  7259 6C 00
8498  725B 54 6F 6F 20          defb    "Too many files",0
8498  725F 6D 61 6E 79
8498  7263 20 66 69 6C
8498  7267 65 73 00
8499  726A 44 69 73 6B          defb    "Disk write protected",0
8499  726E 20 77 72 69
8499  7272 74 65 20 70
8499  7276 72 6F 74 65
8499  727A 63 74 65 64
8499  727E 00
8500  727F 44 69 73 6B          defb    "Disk I/O error",0
8500  7283 20 49 2F 4F
8500  7287 20 65 72 72
8500  728B 6F 72 00
8501  728E 44 69 73 6B          defb    "Disk offline",0
8501  7292 20 6F 66 66
8501  7296 6C 69 6E 65
8501  729A 00
8502  729B 52 65 6E 61          defb    "Rename across disk",0
8502  729F 6D 65 20 61
8502  72A3 63 72 6F 73
8502  72A7 73 20 64 69
8502  72AB 73 6B 00
8503  72AE
8504  72AE
8505  72AE B0 72        T72AE:  defw    A72B0                   ; pointer to the default diskerror handler for DiskBASIC
8506  72B0
8507  72B0              ;       Subroutine      diskerror handler for DiskBASIC
8508  72B0              ;       Inputs          ________________________
8509  72B0              ;       Outputs         ________________________
8510  72B0
8511  72B0 CB 79        A72B0:  bit     7,c                     ; FAT error ?
8512  72B2 C2 96 71             jp      nz,A7196                ; yep, bad fat error
8513  72B5 CB 81                res     0,c
8514  72B7 06 00                ld      b,0
8515  72B9 21 C2 72             ld      hl,T72C2
8516  72BC 09                   add     hl,bc
8517  72BD 7E           A72BD:  ld      a,(hl)
8518  72BE 23                   inc     hl
8519  72BF 66                   ld      h,(hl)
8520  72C0 6F                   ld      l,a
8521  72C1 E9                   jp      (hl)
8522  72C2
8523  72C2 AE 71        T72C2:  defw    A71AE                   ; Write Protect error, disk write protect error
8524  72C4 B4 71                defw    A71B4                   ; Not Ready error, disk offline error
8525  72C6 B1 71                defw    A71B1                   ; Data/CRC error, disk i/o error
8526  72C8 B1 71                defw    A71B1                   ; Seek error, disk i/o error
8527  72CA B1 71                defw    A71B1                   ; Record not found error, disk i/o error
8528  72CC B1 71                defw    A71B1                   ; Write fault error, disk i/o error
8529  72CE B1 71                defw    A71B1                   ; Other error, disk i/o error
8530  72D0
8531  72D0              ;       Subroutine      check for BASIC character
8532  72D0              ;       Inputs          HL = BASIC pointer
8533  72D0              ;       Outputs         ________________________
8534  72D0
8535  72D0 CD DA 72     A72D0:  call    A72DA
8536  72D3 E3                   ex      (sp),hl
8537  72D4 BE                   cp      (hl)
8538  72D5 20 41                jr      nz,A7318		; syntax error
8539  72D7 23                   inc     hl
8540  72D8 E3                   ex      (sp),hl
8541  72D9 23                   inc     hl
8542  72DA 2B           A72DA:  dec     hl
8543  72DB DD 21 66 46  A72DB:  ld      ix,CHRGTR
8544  72DF 18 3D                jr      A731E                   ; continue in CHRGTR
8545  72E1
8546  72E1              ; unused code, patched ??
8547  72E1
8548  72E1 00                   nop
8549  72E2 00                   nop
8550  72E3 00                   nop
8551  72E4
8552  72E4 3E C9        A72E4:  ld      a,0C9H
8553  72E6 32 D5 FE     A72E6:  ld      (H.LOPD+0),a
8554  72E9 ED 5B 4A FC          ld      de,(HIMEM)
8555  72ED ED 53 49 F3          ld      (YF349),de
8556  72F1 C9                   ret
8557  72F2
8558  72F2 F7           T72F2:  rst     030H
8559  72F3 00                   defb    000H
8560  72F4 E4 72                defw    A72E4
8561  72F6 C9                   ret
8562  72F7
8563  72F7 1E 10        A72F7:  ld      e,010H
8564  72F9 01                   defb    001H
8565  72FA
8566  72FA 1E 0D        A72FA:  ld      e,00DH
8567  72FC 01                   defb    001H
8568  72FD
8569  72FD 1E 07        A72FD:  ld      e,007H
8570  72FF 01                   defb    001H
8571  7300
8572  7300 1E 3B        A7300:  ld      e,03BH
8573  7302 01                   defb    001H
8574  7303
8575  7303 1E 37        A7303:  ld      e,037H
8576  7305 01                   defb    001H
8577  7306
8578  7306 1E 32        A7306:  ld      e,032H
8579  7308 01                   defb    001H
8580  7309
8581  7309 1E 36        A7309:  ld      e,036H
8582  730B 01                   defb    001H
8583  730C
8584  730C 1E 34        A730C:  ld      e,034H
8585  730E 01                   defb    001H
8586  730F
8587  730F 1E 38        A730F:  ld      e,038H
8588  7311 01                   defb    001H
8589  7312
8590  7312 1E 35        A7312:  ld      e,035H
8591  7314 01                   defb    001H
8592  7315
8593  7315 1E 05        A7315:  ld      e,005H
8594  7317 01                   defb    001H
8595  7318
8596  7318 1E 02        A7318:  ld      e,002H
8597  731A DD 21 6F 40          ld      ix,ERROR                ; BASIC error
8598  731E CD 59 01     A731E:  call    CALBAS
8599  7321 FB                   ei
8600  7322 C9                   ret
8601  7323
8602  7323              ;       Subroutine      devicename parser (H.PARD)
8603  7323              ;       Inputs
8604  7323              ;       Outputs         ________________________
8605  7323
8606  7323 FB           A7323:  ei
8607  7324 E5                   push    hl
8608  7325 D5                   push    de
8609  7326 3A 48 F3             ld      a,(YF348)
8610  7329 87                   add     a,a
8611  732A 21 10 00             ld      hl,16
8612  732D 30 02                jr      nc,A7331
8613  732F 2E 18                ld      l,16+8
8614  7331 39           A7331:  add     hl,sp
8615  7332 5E                   ld      e,(hl)
8616  7333 23                   inc     hl
8617  7334 56                   ld      d,(hl)
8618  7335 E5                   push    hl
8619  7336 21 95 6E             ld      hl,BSAVE+3
8620  7339 E7                   rst     020H                    ; called from BSAVE ?
8621  733A E1                   pop     hl
8622  733B 28 0D                jr      z,A734A                 ; yep, adjust returnaddress for DiskBASIC BSAVE
8623  733D E5                   push    hl
8624  733E 21 C9 6E             ld      hl,BLOAD+3
8625  7341 E7                   rst     020H                    ; called from BLOAD ?
8626  7342 E1                   pop     hl
8627  7343 20 0B                jr      nz,A7350                ; nope, do not adjust returnaddress
8628  7345 11 77 F3             ld      de,XF377
8629  7348 18 03                jr      A734D                   ; yep, adjust returnaddress for DiskBASIC BLOAD
8630  734A
8631  734A 11 7A F3     A734A:  ld      de,XF37A
8632  734D 72           A734D:  ld      (hl),d
8633  734E 2B                   dec     hl
8634  734F 73                   ld      (hl),e
8635  7350 D1           A7350:  pop     de
8636  7351 E1                   pop     hl
8637  7352 7B                   ld      a,e
8638  7353 FE 02                cp      2                       ; filespecification length <2 ?
8639  7355 D8                   ret     c                       ; yep, no device specified
8640  7356 7E                   ld      a,(hl)
8641  7357 FE 3A                cp      ":"                     ; first character a ":" ?
8642  7359 28 B4                jr      z,A730F                 ; yep,
8643  735B 23                   inc     hl
8644  735C 7E                   ld      a,(hl)
8645  735D FE 3A                cp      ":"                     ; second character a ":" ?
8646  735F 2B                   dec     hl
8647  7360 C0                   ret     nz                      ; nope, no diskdevice specifier
8648  7361 CD 80 73             call    A7380                   ; take control from caller
8649  7364 7E                   ld      a,(hl)
8650  7365 E6 DF                and     0DFH                    ; upcase
8651  7367 D6 40                sub     040H                    ; to drivenumber/deviceid for disk (1...)
8652  7369 E5                   push    hl
8653  736A 21 47 F3             ld      hl,YF347
8654  736D BE                   cp      (hl)                    ; valid drive ?
8655  736E E1                   pop     hl
8656  736F 28 03                jr      z,A7374
8657  7371 D2 9C 71             jp      nc,A719C                ; nope,
8658  7374 23           A7374:  inc     hl
8659  7375 23                   inc     hl
8660  7376 1D                   dec     e
8661  7377 1D                   dec     e
8662  7378 D5                   push    de
8663  7379 1C                   inc     e                       ; flag Zx reset
8664  737A D1                   pop     de
8665  737B C9                   ret
8666  737C
8667  737C              ;       Subroutine      no device specified (H.NODE)
8668  737C              ;       Inputs
8669  737C              ;       Outputs         ________________________
8670  737C
8671  737C FB           A737C:  ei
8672  737D 3E 00                ld      a,0                     ; deviceid for default drive
8673  737F C9                   ret
8674  7380
8675  7380              ;       Subroutine      take control from caller
8676  7380              ;       Inputs
8677  7380              ;       Outputs         ________________________
8678  7380
8679  7380              ;       This is what the stack looks like at entry:
8680  7380              ;
8681  7380              ;       prim    exp
8682  7380              ;       +0      +0      returnaddress A7380 caller
8683  7380              ;       +2      +2      callf BIOS registers
8684  7380              ;       +6      +14     returnaddress CALLF caller
8685  7380              ;       +8      +16     returnaddress hook caller
8686  7380
8687  7380 FB           A7380:  ei
8688  7381 E5                   push    hl
8689  7382 F5                   push    af
8690  7383 3A 48 F3             ld      a,(YF348)
8691  7386 87                   add     a,a
8692  7387 21 0C 00             ld      hl,12
8693  738A 30 02                jr      nc,A738E
8694  738C 2E 14                ld      l,12+8
8695  738E 39           A738E:  add     hl,sp
8696  738F 36 8B                ld      (hl),LOW RETRTN
8697  7391 23                   inc     hl
8698  7392 36 F3                ld      (hl),HIGH RETRTN
8699  7394 F1                   pop     af
8700  7395 E1                   pop     hl
8701  7396 C9                   ret
8702  7397
8703  7397              ;       Subroutine      BDOS 09 (output string)
8704  7397              ;       Inputs          DE = address of string
8705  7397              ;       Outputs         ________________________
8706  7397              ;       Remark          is copied to 0F1C9H
8707  7397
8708  7397 CD 6B F3     A7397:  call    XF36B                   ; enable ram on page 1
8709  739A 1A                   ld      a,(de)
8710  739B CD 68 F3             call    XF368                   ; enable master diskrom
8711  739E 13                   inc     de
8712  739F FE 24                cp      '$'
8713  73A1 C8                   ret     z                       ; end of string, quit
8714  73A2 CD A8 53             call    A53A8                   ; console output
8715  73A5 18 F0                jr      A7397                   ; next
8716  73A7
8717  73A7              ;       Subroutine      XFER (transfer)
8718  73A7              ;       Inputs          HL = source address, DE = destition address, BC = size
8719  73A7              ;       Outputs         ________________________
8720  73A7              ;       Remark          is copied to 0F1D9H
8721  73A7
8722  73A7                      ;call    XF36B                   ; enable ram on page 1
8723  73A7 00                   nop
8724  73A8 00                   nop
8725  73A9 00                   nop
8726  73AA ED B0                ldir                            ; transfer
8727  73AC                      ;call    XF368                   ; enable master diskrom
8728  73AC 00                   nop
8729  73AD 00                   nop
8730  73AE 00                   nop
8731  73AF C9                   ret
8732  73B0
8733  73B0              ;       Subroutine      Warm Boot
8734  73B0              ;       Inputs          ________________________
8735  73B0              ;       Outputs         ________________________
8736  73B0              ;       Remark          is copied to 0F1E2H
8737  73B0
8738  73B0 CD 6B F3             call    XF36B                   ; enable ram on page 1
8739  73B3 C3 00 00             jp      0                       ; WBOOT
8740  73B6
8741  73B6              ;       Subroutine      start handler in DOS memory
8742  73B6              ;       Inputs          HL = address of pointer
8743  73B6              ;       Outputs         ________________________
8744  73B6              ;       Remark          is copied to 0F1E8H
8745  73B6
8746  73B6 11 DE F1             ld      de,XF1D9+5
8747  73B9 D5                   push    de                      ; on return, enable master diskrom
8748  73BA 5E                   ld      e,(hl)
8749  73BB 23                   inc     hl
8750  73BC 56                   ld      d,(hl)                  ; get pointer
8751  73BD EB                   ex      de,hl
8752  73BE CD 6B F3             call    XF36B                   ; enable ram on page 1
8753  73C1 E9                   jp      (hl)                    ; start it
8754  73C2
8755  73C2              ;       Subroutine      validate FCB filename
8756  73C2              ;       Inputs          HL = address of pointer
8757  73C2              ;       Outputs         ________________________
8758  73C2              ;       Remark          is copied to 0F1F4H
8759  73C2
8760  73C2 C3 04 56             jp      A5604
8761  73C5
8762  73C5              ;       Data            table with reserved filenames (devicenames)
8763  73C5              ;       Remark          is copied to 0F1F7H
8764  73C5
8765  73C5 50 52 4E 20          defb    "PRN "
8766  73C9 4C 53 54 20          defb    "LST "
8767  73CD 4E 55 4C 20          defb    "NUL "
8768  73D1 41 55 58 20          defb    "AUX "
8769  73D5 43 4F 4E 20          defb    "CON "
8770  73D9
8771  73D9              ;       Data            fake direntry for devices
8772  73D9              ;       Remark          is copied to 0F20BH
8773  73D9
8774  73D9 20 20 20 20          defb    "           "
8774  73DD 20 20 20 20
8774  73E1 20 20 20
8775  73E4 80                   defb    10000000b
8776  73E5 00 00 00...          defs    10
8777  73EF 00 00                defw    0
8778  73F1 00 00                defw    0
8779  73F3 00 00                defw    0
8780  73F5 00 00 00 00          defw    0,0
8781  73F9
8782  73F9 1F 1C 1F 1E          defb    31,28,31,30,31,30,31,31,30,31,30,31
8782  73FD 1F 1E 1F 1F
8782  7401 1E 1F 1E 1F
8783  7405
8784  7405              ; DRIVER section starts here
8785  7405
8786  7405              DSKDRV:
8787  7405
8788  7405                      INCLUDE driver.asm
# file opened: driver.asm
   1+ 7405              ; A template driver section
   2+ 7405              ; (C) 1992-2005 by Ultrasoft
   3+ 7405              ;
   4+ 7405              ; By:	Arjen Zeilemaker
   5+ 7405              ;
   6+ 7405              ; Version:		0.90
   7+ 7405
   8+ 7405
   9+ 7405
  10+ 7405
  11+ 7405              ; symbols which can be used from the kernel
  12+ 7405
  13+ 7405              ; GETSLT	get my slotid
  14+ 7405              ; DIV16		divide
  15+ 7405              ; GETWRK	get my workarea
  16+ 7405              ; SETINT	install my interrupt handler
  17+ 7405              ; PRVINT	call orginal interrupt handler
  18+ 7405              ; PROMPT	prompt for phantom drive
  19+ 7405              ; RAWFLG	verify flag
  20+ 7405              ; $SECBUF	temporary sectorbuffer
  21+ 7405              ; XFER		transfer to TPA
  22+ 7405              ; DISINT	inform interrupts are being disabled
  23+ 7405              ; ENAINT	inform interrupts are being enabled
  24+ 7405              ; PROCNM	CALL statement name
  25+ 7405
  26+ 7405              ; symbols which must be defined by the driver
  27+ 7405
  28+ 7405              ; INIHRD	initialize diskdriver hardware
  29+ 7405              ; DRIVES	how many drives are connected
  30+ 7405              ; INIENV	initialize diskdriver workarea
  31+ 7405              ; DSKIO		diskdriver sector i/o
  32+ 7405              ; DSKCHG	diskdriver diskchange status
  33+ 7405              ; GETDPB	build Drive Parameter Block
  34+ 7405              ; CHOICE	get format choice string
  35+ 7405              ; DSKFMT	format disk
  36+ 7405              ; MTOFF		stop diskmotor
  37+ 7405              ; OEMSTA	diskdriver special call statements
  38+ 7405
  39+ 7405              ; MYSIZE	size of diskdriver workarea
  40+ 7405              ; SECLEN	size of biggest sector supported by the diskdriver
  41+ 7405              ; DEFDPB	pointer to a default Drive Parameter Block
  42+ 7405
  43+ 7405
  44+ 7405              ; errorcodes used by DSKIO, DSKCHG and GETDPB
  45+ 7405              ;
  46+ 7405              ; 0	write protect error
  47+ 7405              ; 2	not ready error
  48+ 7405              ; 4	data (crc) error
  49+ 7405              ; 6	seek error
  50+ 7405              ; 8	record not found error
  51+ 7405              ; 10	write fault error
  52+ 7405              ; 12	other error
  53+ 7405              ;
  54+ 7405              ; DOS2 only errorcodes
  55+ 7405              ;
  56+ 7405              ; 14    ?
  57+ 7405              ; 16    ?
  58+ 7405              ; 20    not a DOS disk
  59+ 7405              ; 22    incompatible disk
  60+ 7405              ; 24    disk not formated
  61+ 7405              ; 26    disk changed
  62+ 7405
  63+ 7405              ; errorcodes used by DSKFMT
  64+ 7405              ;
  65+ 7405              ; 0	write protect error
  66+ 7405              ; 2	not ready error
  67+ 7405              ; 4	data (crc) error
  68+ 7405              ; 6	seek error
  69+ 7405              ; 8	record not found error
  70+ 7405              ; 10	write fault error
  71+ 7405              ; 12	bad parameter
  72+ 7405              ; 14	insufficient memory
  73+ 7405              ; 16	other error
  74+ 7405
  75+ 7405
  76+ 7405
  77+ 7405              MYSIZE		equ	1		; Size of environment
  78+ 7405              SECLEN		equ	512		; Size of biggest sector
  79+ 7405
  80+ 7405              ; INIHRD
  81+ 7405              ;
  82+ 7405              ; Input:	None
  83+ 7405              ; Output:	None
  84+ 7405              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
  85+ 7405
  86+ 7405              INIHRD:
  87+ 7405 C9               ret
  88+ 7406
  89+ 7406              ; DRIVES
  90+ 7406              ;
  91+ 7406              ; Input: 	F	Zx set if to return physical drives
  92+ 7406              ;			Zx reset if to return at least 2 drives, if only one
  93+ 7406              ;			  physical drive it becomes a phantom drive
  94+ 7406              ; Output:	L	number of drives
  95+ 7406              ; Changed:	F,HL,IX,IY may be affected
  96+ 7406              ;
  97+ 7406              ; Remark:	DOS1 does not handle L=0 correctly
  98+ 7406
  99+ 7406              DRIVES:
 100+ 7406 2E 01            ld	l,1
 101+ 7408 C9               ret
 102+ 7409
 103+ 7409              ; INIENV
 104+ 7409              ;
 105+ 7409              ; Input: 	None
 106+ 7409              ; Output:	None
 107+ 7409              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 108+ 7409              INIENV:
 109+ 7409 C9               RET
 110+ 740A              ;
 111+ 740A              ; DSKIO
 112+ 740A              ;
 113+ 740A              ; Input: 	A	Drivenumber
 114+ 740A              ;		F	Cx reset for read
 115+ 740A              ;			Cx set for write
 116+ 740A              ; 		B	number of sectors
 117+ 740A              ; 		C	Media descriptor
 118+ 740A              ;		DE	logical sectornumber
 119+ 740A              ; 		HL	transferaddress
 120+ 740A              ; Output:	F	Cx set for error
 121+ 740A              ;			Cx reset for ok
 122+ 740A              ;		A	if error, errorcode
 123+ 740A              ;		B	if error, remaining sectors
 124+ 740A              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 125+ 740A
 126+ 740A              DSKIO:
 127+ 740A DD 21 00 00      ld ix,00000h ; eos_machine_read_write_disk
 128+ 740E 5B               DB 0x5b ; .LIL
 129+ 740F FF               RST 38h ; returns error code in A or 0 when okay
 130+ 7410 C9               ret
 131+ 7411
 132+ 7411              ; DSKCHG
 133+ 7411              ;
 134+ 7411              ; Input: 	A	Drivenumber
 135+ 7411              ; 		B	0
 136+ 7411              ; 		C	Media descriptor
 137+ 7411              ; 		HL	pointer to DPB
 138+ 7411              ; Output:	F	Cx set for error
 139+ 7411              ;			Cx reset for ok
 140+ 7411              ;		A	if error, errorcode
 141+ 7411              ;		B	if no error, disk change status
 142+ 7411              ;			01 disk unchanged
 143+ 7411              ;			00 unknown
 144+ 7411              ;			FF disk changed
 145+ 7411              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 146+ 7411              ; Remark:	DOS1 kernel expects the DPB updated when disk change status is unknown or changed
 147+ 7411              ;		DOS2 kernel does not care if the DPB is updated or not
 148+ 7411
 149+ 7411              DSKCHG:
 150+ 7411 B7               or	a
 151+ 7412 06 01            ld	b,1
 152+ 7414 C9               ret
 153+ 7415
 154+ 7415              ; GETDPB
 155+ 7415              ;
 156+ 7415              ; Input: 	A	Drivenumber
 157+ 7415              ; 		B	first byte of FAT
 158+ 7415              ; 		C	Media descriptor
 159+ 7415              ; 		HL	pointer to DPB
 160+ 7415              ; Output:	[HL+1]
 161+ 7415              ;		..
 162+ 7415              ;		[HL+18]	updated
 163+ 7415              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 164+ 7415
 165+ 7415              GETDPB:
 166+ 7415 EB               EX	DE,HL
 167+ 7416 13               INC	DE
 168+ 7417 78               LD	A,B
 169+ 7418 D6 F8            SUB	0F8H			; mediadescriptor 0F8H-0FFH ?
 170+ 741A D8               RET	C			; nope, quit with error
 171+ 741B FE 04            CP	4			; mediadescriptor 0F8H-0FBH ?
 172+ 741D 30 14            JR	NC,DPBERROR		; nope, quit with WRITE FAULT error
 173+ 741F 07               RLCA
 174+ 7420 4F               LD	C,A
 175+ 7421 06 00            LD	B,0
 176+ 7423 6F               LD	L,A
 177+ 7424 60               LD	H,B
 178+ 7425 29               ADD	HL,HL
 179+ 7426 29               ADD	HL,HL
 180+ 7427 29               ADD	HL,HL
 181+ 7428 09               ADD	HL,BC
 182+ 7429 01 63 74         LD	BC,DPBTABLE
 183+ 742C 09               ADD	HL,BC
 184+ 742D 01 12 00         LD	BC,18
 185+ 7430 ED B0            LDIR
 186+ 7432 C9               RET
 187+ 7433              DPBERROR:
 188+ 7433 3E 0A            LD	A,10
 189+ 7435 37               SCF
 190+ 7436 C9               RET
 191+ 7437
 192+ 7437
 193+ 7437              ; CHOICE
 194+ 7437              ;
 195+ 7437              ; Input: 	None
 196+ 7437              ; Output:	HL	pointer to choice string, 0 if no choice
 197+ 7437              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 198+ 7437
 199+ 7437              CHOICE:
 200+ 7437 21 3B 74         ld	hl,ChoiceStr
 201+ 743A C9               ret
 202+ 743B
 203+ 743B 0D 0A        ChoiceStr:	db	13,10
 204+ 743D 31 20 2D 20                  db	"1 - Choice A",13,10
 204+ 7441 43 68 6F 69
 204+ 7445 63 65 20 41
 204+ 7449 0D 0A
 205+ 744B 32 20 2D 20                  db	"2 - Choice B",13,10
 205+ 744F 43 68 6F 69
 205+ 7453 63 65 20 42
 205+ 7457 0D 0A
 206+ 7459 0D 0A                        db	13,10
 207+ 745B 00                           db	0
 208+ 745C
 209+ 745C              ; DSKFMT
 210+ 745C              ;
 211+ 745C              ; Input: 	A	choicecode (1-9)
 212+ 745C              ;		D	drivenumber
 213+ 745C              ;		HL	begin of workarea
 214+ 745C              ;		BC	length of workarea
 215+ 745C              ; Output:	F	Cx set for error
 216+ 745C              ;			Cx reset for ok
 217+ 745C              ;		A	if error, errorcode
 218+ 745C              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 219+ 745C
 220+ 745C              DSKFMT:
 221+ 745C 3E 10            ld	a,16
 222+ 745E 37               scf
 223+ 745F C9               ret
 224+ 7460
 225+ 7460              ; OEMSTATEMENT
 226+ 7460              ;
 227+ 7460              ; Input:	HL	basicpointer
 228+ 7460              ; Output:	F	Cx set if statement not recognized
 229+ 7460              ;			Cx reset if statement is recognized
 230+ 7460              ;		HL	basicpointer,	updated if recognized
 231+ 7460              ;					unchanged if not recognized
 232+ 7460              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 233+ 7460
 234+ 7460              OEMSTA:
 235+ 7460 37               scf
 236+ 7461 C9               ret
 237+ 7462
 238+ 7462              ; MTOFF
 239+ 7462              ;
 240+ 7462              ; Input:	None
 241+ 7462              ; Output:	None
 242+ 7462              ; Changed:	AF,BC,DE,HL,IX,IY may be affected
 243+ 7462
 244+ 7462              MTOFF:
 245+ 7462 C9               ret
 246+ 7463
 247+ 7463
 248+ 7463              DPBTABLE:
 249+ 7463 F8                   DEFB	0F8h		; Media F8
 250+ 7464 00 02                DEFW	512		; 80 Tracks
 251+ 7466 0F                   DEFB	0Fh		; 9 sectors
 252+ 7467 04                   DEFB	04h		; 1 side
 253+ 7468 01                   DEFB	01h		; 3.5" 360 Kb
 254+ 7469 02                   DEFB	02h
 255+ 746A 01 00                DEFW	1
 256+ 746C 02                   DEFB	2
 257+ 746D 70                   DEFB	112
 258+ 746E 0C 00                DEFW	12
 259+ 7470 63 01                DEFW	355
 260+ 7472 02                   DEFB	2
 261+ 7473 05 00                DEFW	5
 262+ 7475
 263+ 7475              DEFDPB  EQU     $-1
 264+ 7475
 265+ 7475 F9                   DEFB	0F9h		; Media F9
 266+ 7476 00 02                DEFW	512		; 80 Tracks
 267+ 7478 0F                   DEFB	0Fh		; 9 sectors
 268+ 7479 04                   DEFB	04h		; 2 sides
 269+ 747A 01                   DEFB	01h		; 3.5" 720 Kb
 270+ 747B 02                   DEFB	02h
 271+ 747C 01 00                DEFW	1
 272+ 747E 02                   DEFB	2
 273+ 747F 70                   DEFB	112
 274+ 7480 0E 00                DEFW	14
 275+ 7482 CA 02                DEFW	714
 276+ 7484 03                   DEFB	3
 277+ 7485 07 00                DEFW	7
 278+ 7487
 279+ 7487 FA                   DEFB	0FAh		; Media FA
 280+ 7488 00 02                DEFW	512		; 80 Tracks
 281+ 748A 0F                   DEFB	0Fh		; 8 sectors
 282+ 748B 04                   DEFB	04h		; 1 side
 283+ 748C 01                   DEFB	01h		; 3.5" 320 Kb
 284+ 748D 02                   DEFB	02h
 285+ 748E 01 00                DEFW	1
 286+ 7490 02                   DEFB	2
 287+ 7491 70                   DEFB	112
 288+ 7492 0A 00                DEFW	10
 289+ 7494 3C 01                DEFW	316
 290+ 7496 01                   DEFB	1
 291+ 7497 03 00                DEFW	3
 292+ 7499
 293+ 7499 FB                   DEFB	0FBh		; Media FB
 294+ 749A 00 02                DEFW	512		; 80 Tracks
 295+ 749C 0F                   DEFB	0Fh		; 8 sectors
 296+ 749D 04                   DEFB	04h		; 2 sides
 297+ 749E 01                   DEFB	01h		; 3.5" 640 Kb
 298+ 749F 02                   DEFB	02h
 299+ 74A0 01 00                DEFW	1
 300+ 74A2 02                   DEFB	2
 301+ 74A3 70                   DEFB	112
 302+ 74A4 0C 00                DEFW	12
 303+ 74A6 7B 02                DEFW	635
 304+ 74A8 02                   DEFB	2
 305+ 74A9 05 00                DEFW	5
# file closed: driver.asm
8789  74AB
8790  74AB 00 00 00...          DEFS    08000H-$,0
8791  8000              ENDADR:
8792  8000
8793  8000                      end
# file closed: diskrom.asm
