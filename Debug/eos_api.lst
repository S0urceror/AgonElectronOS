Zilog eZ80 Macro Assembler Version 4.3 (19073001)04-Jul-23     22:12:44     page:   1


PC     Object              I  Line    Source 
                           B     0    	INCLUDE "ez80f92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
       00000080            B    11    TMR0_CTL:	.equ  %80
       00000081            B    12    TMR0_DR_L:	.equ  %81
       00000081            B    13    TMR0_RR_L:	.equ  %81
       00000082            B    14    TMR0_DR_H:	.equ  %82
       00000082            B    15    TMR0_RR_H:	.equ  %82
       00000083            B    16    TMR1_CTL:	.equ  %83
       00000084            B    17    TMR1_DR_L:	.equ  %84
       00000084            B    18    TMR1_RR_L:	.equ  %84
       00000085            B    19    TMR1_DR_H:	.equ  %85
       00000085            B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
       0000009A            B    51    PB_DR:		.equ %9A
       0000009B            B    52    PB_DDR:		.equ %9B
       0000009C            B    53    PB_ALT1:	.equ %9C
       0000009D            B    54    PB_ALT2:	.equ %9D
       0000009E            B    55    PC_DR:		.equ %9E
       0000009F            B    56    PC_DDR:		.equ %9F
       000000A0            B    57    PC_ALT1:	.equ %A0
       000000A1            B    58    PC_ALT2:	.equ %A1
       000000A2            B    59    PD_DR:		.equ %A2
       000000A3            B    60    PD_DDR:		.equ %A3
       000000A4            B    61    PD_ALT1:	.equ %A4
       000000A5            B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A     2    	.ASSUME ADL=1
                           A     3    
                           A     4    	;DEFINE .STARTUP, SPACE = ROM
                           A     5        SEGMENT CODE ;.STARTUP
                           A     6    
                           A     7    	XDEF	electron_os_api
                           A     8    	XDEF	electron_os_inout
                           A     9    	XDEF	_machine_vblank_handler
                           A    10    
                           A    11    	XREF	_machine_read_write_disk
                           A    12        XREF 	_machine_warm_boot
                           A    13    	XREF	_machine_vsync_address
                           A    14    	XREF	_machine_vsync
                           A    15    	;
                           A    16    	XREF	SLOT_REGISTER
                           A    17    	XREF	call_address_ix
                           A    18    	XREF    _prev_mbase
                           A    19    	XREF	_callSM
                           A    20    	;
                           A    21    	XREF	uart0_send_fifo_add
                           A    22    	XREF	uart0_recv_fifo_get
                           A    23    
       0000F3FC            A    24    JUMPER EQU 0f3fch ;Work area of the data record
                           A    25    
                           A    26    ; API's in low 64kb so 16-bit range
                           A    27    ; call API specified by IX
000000                     A    28    electron_os_api:
000000 F5                  A    29    	push af
000001 C5                  A    30        push bc
                           A    31    	; let ix point to address in jumptable
000002 01 15 00 00         A    32        ld bc, jumptable
000006 DD09                A    33        add ix,bc
                           A    34    	; read contens of jumptable
000008 DD4E00              A    35    	ld c, (ix+0)
00000B DD4601              A    36    	ld b, (ix+1)
                           A    37    	; put in ix
00000E C5                  A    38    	push bc
00000F DDE1                A    39    	pop ix
                           A    40    	; restore bc+af
000011 C1                  A    41        pop bc
000012 F1                  A    42    	pop af
                           A    43    	; jump to address specified in jumptable
000013 DDE9                A    44        jp (ix)
                           A    45    
000015                     A    46    jumptable:
000015 2700                A    47        DW eos_machine_read_write_disk				
000017 3A00                A    48        DW eos_machine_reload_warmboot_images		
                           A    49        ;
000019 4700                A    50        DW eos_msx_machine_slotregister				
00001B 5300                A    51        DW eos_msx_machine_rdslt					
00001D 6F00                A    52        DW eos_msx_machine_wrslt					
00001F 8700                A    53        DW eos_msx_machine_calslt					
000021 DE00                A    54        DW eos_msx_machine_enaslt					
000023 DF00                A    55    	DW eos_msx_machine_setvblankaddress			
000025 E400                A    56    	DW eos_msx_machine_getvdpstatus				
                           A    57    
                           A    58    ; read/write a sector from/to the disk
                           A    59    ; 
000027                     A    60    eos_machine_read_write_disk:
                           A    61    	; push all registers to the stack to pass t
000027 E5                  A    62    	push hl
000028 D5                  A    63    	push de
000029 C5                  A    64    	push bc
00002A F5                  A    65    	push af
00002B ED6E                A    66    	ld a, mb
00002D F5                  A    67    	push af
00002E CD 00 00 00         A    68    	call _machine_read_write_disk ; HL contains
000032 E5                  A    69    	push hl
000033 F1                  A    70    	pop af
                           A    71    	; restore the other registers
000034 E1                  A    72    	pop hl ; old mb contents is not modified
000035 E1                  A    73    	pop hl ; old af contents can be thrown away
000036 C1                  A    74    	pop bc
000037 D1                  A    75    	pop de
000038 E1                  A    76    	pop hl
000039 C9                  A    77        ret
                           A    78    
00003A                     A    79    eos_machine_reload_warmboot_images:
00003A E5                  A    80    	push hl
00003B D5                  A    81    	push de
00003C C5                  A    82    	push bc
00003D F5                  A    83    	push af
00003E CD 00 00 00         A    84    	call _machine_warm_boot
000042 F1                  A    85    	pop af
000043 C1                  A    86    	pop bc
000044 D1                  A    87    	pop de
000045 E1                  A    88    	pop hl
000046 C9                  A    89        ret
                           A    90    	
000047                     A    91    eos_msx_machine_slotregister:
000047 38 05               A    92    	jr c, _slotregister_write
000049                     A    93    _slotregister_read:
000049 3A 00 00 00         A    94    	ld a, (SLOT_REGISTER)
00004D C9                  A    95    	ret
00004E                     A    96    _slotregister_write:
00004E 32 00 00 00         A    97    	ld (SLOT_REGISTER),a
000052 C9                  A    98    	ret
                           A    99    
                           A   100    ; IN  - A  slot (ExxxSSPP)
                           A   101    ;       HL address to read in 16-bit space
                           A   102    ; OUT - result in A
000053                     A   103    eos_msx_machine_rdslt:
                           A   104    	; assumptions
                           A   105    	; we have no expanded slots
                           A   106    	; we only do primary slots
                           A   107    	; ROM, slot 0, in 0x50000-0x5ffff , other s
000053 A7                  A   108    	and a
000054 28 16               A   109    	jr z, _rdslt_rom
000056 DDE5                A   110    	push ix
000058 E5                  A   111    	push hl
                           A   112    	; add start ram slot
000059 C605                A   113    	add a, 5
                           A   114    	; push hl to stack which gives:
                           A   115    	; SP   - L
                           A   116    	; SP+1 - H
                           A   117    	; SP+2 - U
00005B E5                  A   118    	push hl
00005C DD210000 00         A   119    	ld ix, 0
000061 DD39                A   120    	add ix, sp
                           A   121    	; modify hl on stack to point to right slot
000063 DD7702              A   122    	ld (ix+2),a
000066 E1                  A   123    	pop hl
000067 7E                  A   124    	ld a, (hl)
000068 E1                  A   125    	pop hl
000069 DDE1                A   126    	pop ix
00006B C9                  A   127    	ret
00006C                     A   128    _rdslt_rom
00006C 3EAA                A   129    	ld a, 0aah
00006E C9                  A   130    	ret
00006F                     A   131    eos_msx_machine_wrslt:
00006F A7                  A   132    	and a
000070 C8                  A   133    	ret z ; do not attempt to write ROM section
000071 DDE5                A   134    	push ix
000073 E5                  A   135    	push hl
                           A   136    	; add start ram slot
000074 C605                A   137    	add a, 5
                           A   138    	; push hl to stack which gives:
                           A   139    	; SP   - L
                           A   140    	; SP+1 - H
                           A   141    	; SP+2 - U
000076 E5                  A   142    	push hl
000077 DD210000 00         A   143    	ld ix, 0
00007C DD39                A   144    	add ix, sp
                           A   145    	; modify hl on stack to point to right slot
00007E DD7702              A   146    	ld (ix+2),a
000081 E1                  A   147    	pop hl
000082 73                  A   148    	ld (hl),e
000083 E1                  A   149    	pop hl
000084 DDE1                A   150    	pop ix
000086 C9                  A   151    	ret
                           A   152    
                           A   153    ;Function : Executes inter-slot call.
                           A   154    ;Input    : IY - High byte with slot ID, see RD
                           A   155    ;           IX - The address that will be calle
                           A   156    ;Remark   : Variables can never be given in alt
000087                     A   157    eos_msx_machine_calslt:
000087 F5                  A   158    	push af
000088 DDE1                A   159    	pop ix
                           A   160    	; store mb
00008A ED6E                A   161    	ld a, mb
00008C 32 00 00 00         A   162    	ld (_prev_mbase),a
                           A   163    	; store registers we are going to change
000090 DDE5                A   164    	push ix ; was AF
000092 D5                  A   165    	push de
                           A   166    	;
000093 FD7C                A   167    	ld a, iyh
000095 C605                A   168    	add a,5
000097 ED6D                A   169    	ld mb, a
000099 ED39B5              A   170    	out0 (RAM_ADDR_U), a ; remap internal ram t
                           A   171    	;
                           A   172    	; push de to stack which gives:
                           A   173    	; SP   - E
                           A   174    	; SP+1 - D
                           A   175    	; SP+2 - U
00009C D5                  A   176    	push de
00009D FD210000 00         A   177    	ld iy, 0
0000A2 FD39                A   178    	add iy, sp
                           A   179    	; modify DE on stack to point to JUMPER add
                           A   180    	; A contains slot/mb
0000A4 FD7702              A   181    	ld (iy+2),a
0000A7 3EF3                A   182    	ld a, HIGH JUMPER
0000A9 FD7701              A   183    	ld (iy+1),a
0000AC 3EFC                A   184    	ld a, LOW JUMPER
0000AE FD7700              A   185    	ld (iy+0),a
                           A   186    	; get it back
0000B1 D1                  A   187    	pop de
                           A   188    	; change JUMPER address to call address
0000B2 DD21 00 00 00       A   189    	ld ix, call_address_ix
0000B7 3ECD                A   190    	ld a, 0cdh	 ; CALL
0000B9 12                  A   191    	ld (de),a
0000BA 13                  A   192    	inc de
0000BB DD7E00              A   193    	ld a, (ix+0) ; LOW IX
0000BE 12                  A   194    	ld (de),a
0000BF 13                  A   195    	inc de
0000C0 DD7E01              A   196    	ld a, (ix+1) ; HIGH IX
0000C3 12                  A   197    	ld (de),a
0000C4 13                  A   198    	inc de
0000C5 3E49                A   199    	ld a, 049h   ; LIS
0000C7 12                  A   200    	ld (de),a
0000C8 13                  A   201    	inc de
0000C9 3EC9                A   202    	ld a, 0c9h   ; RET
0000CB 12                  A   203    	ld (de),a
                           A   204    	;
0000CC D1                  A   205    	pop de
0000CD F1                  A   206    	pop af
                           A   207    	;
0000CE 49CDFCF3            A   208    	call.is JUMPER ; JUMPER routine
                           A   209    	;
                           A   210    	; restore mb
0000D2 F5                  A   211    	push af
0000D3 3A 00 00 00         A   212    	ld a, (_prev_mbase)
0000D7 ED6D                A   213    	ld mb, a
0000D9 ED39B5              A   214    	out0 (RAM_ADDR_U), a ; remap internal ram t
0000DC F1                  A   215    	pop af
0000DD C9                  A   216    	ret
                           A   217    
0000DE                     A   218    eos_msx_machine_enaslt:
                           A   219    	; we don't do anything yet...
                           A   220    
                           A   221    	; we could check calling stack
                           A   222    	; scrub the stack
                           A   223    	; switch MB
                           A   224    	; jump to return address in selected slot i
0000DE C9                  A   225    	ret
                           A   226    
0000DF                     A   227    eos_msx_machine_setvblankaddress:
0000DF 22 00 00 00         A   228    	ld (_machine_vsync_address),hl
0000E3 C9                  A   229    	ret
                           A   230    
0000E4                     A   231    eos_msx_machine_getvdpstatus:
0000E4 3A 00 00 00         A   232    	ld a, (_machine_vsync)
0000E8 F5                  A   233    	push af
0000E9 AF                  A   234    	xor a
0000EA 32 00 00 00         A   235    	ld (_machine_vsync),a
0000EE F1                  A   236    	pop af
0000EF C9                  A   237    	ret
                           A   238    	
0000F0                     A   239    _machine_vblank_handler:
0000F0 F3                  A   240    	DI
0000F1 F5                  A   241    	push af
0000F2 D5                  A   242    	push de
0000F3 E5                  A   243    	push hl
0000F4 FDE5                A   244    	push iy
                           A   245    	;
0000F6 2A 00 00 00         A   246    	ld hl,(_machine_vsync_address)
0000FA 7D                  A   247    	ld a, l
0000FB B4                  A   248    	or h
0000FC 28 33               A   249    	jr z, _no_address	
                           A   250    	; set vsync status
0000FE 3E80                A   251    	ld a, 080h
000100 32 00 00 00         A   252    	ld (_machine_vsync), a
                           A   253    	; push de to stack which gives:
                           A   254    	; SP   - E
                           A   255    	; SP+1 - D
                           A   256    	; SP+2 - U
000104 D5                  A   257    	push de
000105 FD210000 00         A   258    	ld iy, 0
00010A FD39                A   259    	add iy, sp
                           A   260    	; modify DE on stack to point to JUMPER add
00010C ED6E                A   261    	ld a, mb
00010E FD7702              A   262    	ld (iy+2),a
000111 3EF3                A   263    	ld a, HIGH JUMPER
000113 FD7701              A   264    	ld (iy+1),a
000116 3EFC                A   265    	ld a, LOW JUMPER
000118 FD7700              A   266    	ld (iy+0),a
                           A   267    	; get it back
00011B D1                  A   268    	pop de
                           A   269    	; change JUMPER address to call address
00011C 3ECD                A   270    	ld a, 0cdh	 ; CALL
00011E 12                  A   271    	ld (de),a
00011F 13                  A   272    	inc de
000120 7D                  A   273    	ld a, l
000121 12                  A   274    	ld (de),a
000122 13                  A   275    	inc de
000123 7C                  A   276    	ld a, h
000124 12                  A   277    	ld (de),a
000125 13                  A   278    	inc de
000126 3E49                A   279    	ld a, 049h   ; LIS
000128 12                  A   280    	ld (de),a
000129 13                  A   281    	inc de
00012A 3EC9                A   282    	ld a, 0c9h   ; RET
00012C 12                  A   283    	ld (de),a
                           A   284    	;
00012D 49CDFCF3            A   285    	call.is JUMPER ; JUMPER routine	
                           A   286    	;
000131                     A   287    _no_address:
000131 FDE1                A   288    	pop iy
000133 E1                  A   289    	pop hl
000134 D1                  A   290    	pop de
000135 F1                  A   291    	pop af
000136 FB                  A   292    	EI	
000137 5BED4D              A   293    	RETI.L
                           A   294    
                           A   295    ; IN/OUT to port specified in IYl
                           A   296    ; OUT value in IYh
                           A   297    ; Cy = write, No Cy = read
00013A                     A   298    electron_os_inout:
00013A F5                  A   299    	push af
00013B FD7D                A   300    	ld a, iyl
00013D FEA8                A   301    	cp 0a8h
00013F 28 33               A   302    	jr z, _electron_os_inout_slotregister
000141 FEFF                A   303    	cp 0ffh ; if port number is ffh then it is 
000143 20 02               A   304    	jr nz, _electron_os_inout_next_1
000145 FD69                A   305    	ld iyl, c
000147                     A   306    _electron_os_inout_next_1:	
000147 F1                  A   307    	pop af
000148 F5                  A   308    	push af
                           A   309    	; send command to HAL
000149 3E80                A   310    	ld a, 080h ; 0b10000000 ; send
00014B 38 02               A   311    	jr c, _electron_os_inout_next_2
00014D F601                A   312    	or 001h ; 0b00000001 ; recv
00014F                     A   313    _electron_os_inout_next_2:
                           A   314    	; send command 0x80 (out) or 0x81 (in)
00014F CD 00 00 00         A   315    	call uart0_send_fifo_add
                           A   316    	; send port number
000153 FD7D                A   317    	ld a, iyl
000155 CD 00 00 00         A   318    	call uart0_send_fifo_add
000159 F1                  A   319    	pop af
00015A 30 07               A   320    	jr nc, _electron_os_inout_recv_1
                           A   321    	; send last byte, value
00015C FD7C                A   322    	ld a, iyh
00015E CD 00 00 00         A   323    	call uart0_send_fifo_add
000162 C9                  A   324    	ret
000163                     A   325    _electron_os_inout_recv_1:
                           A   326    	; wait for result
000163 CD 00 00 00         A   327    	call uart0_recv_fifo_get
000167 38 FA               A   328    	jr c, _electron_os_inout_recv_1
000169 FE81                A   329    	cp 081h ; 0b10000001
                           A   330    	; skip responses we do not expect
00016B 20 F6               A   331    	jr nz, _electron_os_inout_recv_1
00016D                     A   332    _electron_os_inout_recv_2:
                           A   333    	; wait for result
00016D CD 00 00 00         A   334    	call uart0_recv_fifo_get
000171 38 FA               A   335    	jr c, _electron_os_inout_recv_2
                           A   336    	; value returned in A
000173 C9                  A   337    	ret
000174                     A   338    _electron_os_inout_slotregister:
000174 F1                  A   339    	pop af
000175 C3 47 00 00         A   340    	jp eos_msx_machine_slotregister


Errors: 0
Warnings: 0
Lines Assembled: 520
