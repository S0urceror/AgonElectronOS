Zilog eZ80 Macro Assembler Version 4.3 (19073001)25-Jun-23     10:17:32     page:   1


PC     Object              I  Line    Source 
                           B     0    	INCLUDE "ez80f92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
       00000080            B    11    TMR0_CTL:	.equ  %80
       00000081            B    12    TMR0_DR_L:	.equ  %81
       00000081            B    13    TMR0_RR_L:	.equ  %81
       00000082            B    14    TMR0_DR_H:	.equ  %82
       00000082            B    15    TMR0_RR_H:	.equ  %82
       00000083            B    16    TMR1_CTL:	.equ  %83
       00000084            B    17    TMR1_DR_L:	.equ  %84
       00000084            B    18    TMR1_RR_L:	.equ  %84
       00000085            B    19    TMR1_DR_H:	.equ  %85
       00000085            B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
       0000009A            B    51    PB_DR:		.equ %9A
       0000009B            B    52    PB_DDR:		.equ %9B
       0000009C            B    53    PB_ALT1:	.equ %9C
       0000009D            B    54    PB_ALT2:	.equ %9D
       0000009E            B    55    PC_DR:		.equ %9E
       0000009F            B    56    PC_DDR:		.equ %9F
       000000A0            B    57    PC_ALT1:	.equ %A0
       000000A1            B    58    PC_ALT2:	.equ %A1
       000000A2            B    59    PD_DR:		.equ %A2
       000000A3            B    60    PD_DDR:		.equ %A3
       000000A4            B    61    PD_ALT1:	.equ %A4
       000000A5            B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A     2    	.ASSUME ADL=1
                           A     3    
                           A     4    	;DEFINE .STARTUP, SPACE = ROM
                           A     5        SEGMENT CODE ;.STARTUP
                           A     6    
                           A     7    	XDEF	electron_os_api
                           A     8    
                           A     9    	XREF	_machine_read_write_disk
                           A    10        XREF 	_machine_warm_boot
                           A    11    	;
                           A    12    	XREF	SLOT_REGISTER
                           A    13    	XREF	call_address_ix
                           A    14    	XREF    _prev_mbase
                           A    15    	XREF	_callSM
                           A    16    
       0000F3FC            A    17    JUMPER EQU 0f3fch ;Work area of the data record
                           A    18    
                           A    19    ; API's in low 64kb so 16-bit range
                           A    20    ; call API specified by IX
000000                     A    21    electron_os_api:
000000 F5                  A    22    	push af
000001 C5                  A    23        push bc
                           A    24    	; let ix point to address in jumptable
000002 01 15 00 00         A    25        ld bc, jumptable
000006 DD09                A    26        add ix,bc
                           A    27    	; read contens of jumptable
000008 DD4E00              A    28    	ld c, (ix+0)
00000B DD4601              A    29    	ld b, (ix+1)
                           A    30    	; put in ix
00000E C5                  A    31    	push bc
00000F DDE1                A    32    	pop ix
                           A    33    	; restore bc+af
000011 C1                  A    34        pop bc
000012 F1                  A    35    	pop af
                           A    36    	; jump to address specified in jumptable
000013 DDE9                A    37        jp (ix)
                           A    38    
000015                     A    39    jumptable:
000015 2300                A    40        DW eos_machine_read_write_disk				
000017 3600                A    41        DW eos_machine_reload_warmboot_images		
                           A    42        ;
000019 4300                A    43        DW eos_msx_machine_slotregister				
00001B 4F00                A    44        DW eos_msx_machine_rdslt					
00001D 6700                A    45        DW eos_msx_machine_wrslt					
00001F 7B00                A    46        DW eos_msx_machine_calslt					
000021 D200                A    47        DW eos_msx_machine_enaslt					
                           A    48    
                           A    49    ; read/write a sector from/to the disk
                           A    50    ; 
000023                     A    51    eos_machine_read_write_disk:
                           A    52    	; push all registers to the stack to pass t
000023 E5                  A    53    	push hl
000024 D5                  A    54    	push de
000025 C5                  A    55    	push bc
000026 F5                  A    56    	push af
000027 ED6E                A    57    	ld a, mb
000029 F5                  A    58    	push af
00002A CD 00 00 00         A    59    	call _machine_read_write_disk ; HL contains
00002E E5                  A    60    	push hl
00002F F1                  A    61    	pop af
                           A    62    	; restore the other registers
000030 E1                  A    63    	pop hl ; old mb contents is not modified
000031 E1                  A    64    	pop hl ; old af contents can be thrown away
000032 C1                  A    65    	pop bc
000033 D1                  A    66    	pop de
000034 E1                  A    67    	pop hl
000035 C9                  A    68        ret
                           A    69    
000036                     A    70    eos_machine_reload_warmboot_images:
000036 E5                  A    71    	push hl
000037 D5                  A    72    	push de
000038 C5                  A    73    	push bc
000039 F5                  A    74    	push af
00003A CD 00 00 00         A    75    	call _machine_warm_boot
00003E F1                  A    76    	pop af
00003F C1                  A    77    	pop bc
000040 D1                  A    78    	pop de
000041 E1                  A    79    	pop hl
000042 C9                  A    80        ret
                           A    81    	
000043                     A    82    eos_msx_machine_slotregister:
000043 38 05               A    83    	jr c, _slotregister_write
000045                     A    84    _slotregister_read:
000045 3A 00 00 00         A    85    	ld a, (SLOT_REGISTER)
000049 C9                  A    86    	ret
00004A                     A    87    _slotregister_write:
00004A 32 00 00 00         A    88    	ld (SLOT_REGISTER),a
00004E C9                  A    89    	ret
                           A    90    
                           A    91    ; IN  - A  slot (ExxxSSPP)
                           A    92    ;       HL address to read in 16-bit space
                           A    93    ; OUT - result in A
00004F                     A    94    eos_msx_machine_rdslt:
                           A    95    	; assumptions
                           A    96    	; we have no expanded slots
                           A    97    	; we only do primary slots
                           A    98    	; ROM, slot 0, in 0x50000-0x5ffff , other s
00004F A7                  A    99    	and a
000050 28 12               A   100    	jr z, _rdslt_rom
000052 E5                  A   101    	push hl
                           A   102    	; add start ram slot
000053 C605                A   103    	add a, 5
                           A   104    	; push hl to stack which gives:
                           A   105    	; SP   - L
                           A   106    	; SP+1 - H
                           A   107    	; SP+2 - U
000055 E5                  A   108    	push hl
000056 DD210000 00         A   109    	ld ix, 0
00005B DD39                A   110    	add ix, sp
                           A   111    	; modify hl on stack to point to right slot
00005D DD7702              A   112    	ld (ix+2),a
000060 E1                  A   113    	pop hl
000061 7E                  A   114    	ld a, (hl)
000062 E1                  A   115    	pop hl
000063 C9                  A   116    	ret
000064                     A   117    _rdslt_rom
000064 3EAA                A   118    	ld a, 0aah
000066 C9                  A   119    	ret
000067                     A   120    eos_msx_machine_wrslt:
000067 A7                  A   121    	and a
000068 C8                  A   122    	ret z ; do not attempt to write ROM section
000069 E5                  A   123    	push hl
                           A   124    	; add start ram slot
00006A C605                A   125    	add a, 5
                           A   126    	; push hl to stack which gives:
                           A   127    	; SP   - L
                           A   128    	; SP+1 - H
                           A   129    	; SP+2 - U
00006C E5                  A   130    	push hl
00006D DD210000 00         A   131    	ld ix, 0
000072 DD39                A   132    	add ix, sp
                           A   133    	; modify hl on stack to point to right slot
000074 DD7702              A   134    	ld (ix+2),a
000077 E1                  A   135    	pop hl
000078 73                  A   136    	ld (hl),e
000079 E1                  A   137    	pop hl
00007A C9                  A   138    	ret
00007B                     A   139    eos_msx_machine_calslt:
00007B F5                  A   140    	push af
00007C DDE1                A   141    	pop ix
                           A   142    	; store mb
00007E ED6E                A   143    	ld a, mb
000080 32 00 00 00         A   144    	ld (_prev_mbase),a
                           A   145    	; store registers we are going to change
000084 DDE5                A   146    	push ix ; was AF
000086 D5                  A   147    	push de
                           A   148    	;
000087 FD7C                A   149    	ld a, iyh
000089 C605                A   150    	add a,5
00008B ED6D                A   151    	ld mb, a
00008D ED39B5              A   152    	out0 (RAM_ADDR_U), a ; remap internal ram t
                           A   153    	;
                           A   154    	; push de to stack which gives:
                           A   155    	; SP   - E
                           A   156    	; SP+1 - D
                           A   157    	; SP+2 - U
000090 D5                  A   158    	push de
000091 FD210000 00         A   159    	ld iy, 0
000096 FD39                A   160    	add iy, sp
                           A   161    	; modify DE on stack to point to JUMPER add
                           A   162    	; A contains slot/mb
000098 FD7702              A   163    	ld (iy+2),a
00009B 3EF3                A   164    	ld a, HIGH JUMPER
00009D FD7701              A   165    	ld (iy+1),a
0000A0 3EFC                A   166    	ld a, LOW JUMPER
0000A2 FD7700              A   167    	ld (iy+0),a
                           A   168    	; get it back
0000A5 D1                  A   169    	pop de
                           A   170    	; change JUMPER address to call address
0000A6 DD21 00 00 00       A   171    	ld ix, call_address_ix
0000AB 3ECD                A   172    	ld a, 0cdh	 ; CALL
0000AD 12                  A   173    	ld (de),a
0000AE 13                  A   174    	inc de
0000AF DD7E00              A   175    	ld a, (ix+0) ; LOW IX
0000B2 12                  A   176    	ld (de),a
0000B3 13                  A   177    	inc de
0000B4 DD7E01              A   178    	ld a, (ix+1) ; HIGH IX
0000B7 12                  A   179    	ld (de),a
0000B8 13                  A   180    	inc de
0000B9 3E49                A   181    	ld a, 049h   ; LIS
0000BB 12                  A   182    	ld (de),a
0000BC 13                  A   183    	inc de
0000BD 3EC9                A   184    	ld a, 0c9h   ; RET
0000BF 12                  A   185    	ld (de),a
                           A   186    	;
0000C0 D1                  A   187    	pop de
0000C1 F1                  A   188    	pop af
                           A   189    	;
0000C2 49CDFCF3            A   190    	call.is JUMPER ; JUMPER routine
                           A   191    	;
                           A   192    	; restore mb
0000C6 F5                  A   193    	push af
0000C7 3A 00 00 00         A   194    	ld a, (_prev_mbase)
0000CB ED6D                A   195    	ld mb, a
0000CD ED39B5              A   196    	out0 (RAM_ADDR_U), a ; remap internal ram t
0000D0 F1                  A   197    	pop af
0000D1 C9                  A   198    	ret
0000D2                     A   199    eos_msx_machine_enaslt:
                           A   200    	; we don't do anything yet...
                           A   201    
                           A   202    	; we could check calling stack
                           A   203    	; scrub the stack
                           A   204    	; switch MB
                           A   205    	; jump to return address in selected slot i
0000D2 C9                  A   206    	ret
                           A   207    


Errors: 0
Warnings: 0
Lines Assembled: 387
