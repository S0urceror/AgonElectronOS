Zilog eZ80 Macro Assembler Version 4.3 (19073001)02-Jul-23     10:06:48     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:			AGON Electron OS - UART0 in
                           A     3    ; Author:			Mario Smit (S0urceror)
                           A     4    ;
                           A     5    
                           B     0        INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B   102    
       00000083            B   103    TMR1_CTL		EQU	83h
       00000084            B   104    TMR1_DR_L               EQU     84h
       00000084            B   105    TMR1_RR_L               EQU     84h
       00000085            B   106    TMR1_DR_H               EQU     85h
       00000085            B   107    TMR1_RR_H               EQU     85h
                           B   108    
                           B   109    ; UART constants
       00000040            B   110    UART0_SEND_BUFFER_SIZE  EQU     64
       00000040            B   111    UART0_RECV_BUFFER_SIZE  EQU     64
       00000002            B   112    UART_IER_TRANSMITINT    EQU     00000010b
                           B     0    	INCLUDE "eZ80F92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
                           B    11    TMR0_CTL:	.equ  %80
                           B    12    TMR0_DR_L:	.equ  %81
                           B    13    TMR0_RR_L:	.equ  %81
                           B    14    TMR0_DR_H:	.equ  %82
                           B    15    TMR0_RR_H:	.equ  %82
                           B    16    TMR1_CTL:	.equ  %83
                           B    17    TMR1_DR_L:	.equ  %84
                           B    18    TMR1_RR_L:	.equ  %84
                           B    19    TMR1_DR_H:	.equ  %85
                           B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
                           B    51    PB_DR:		.equ %9A
                           B    52    PB_DDR:		.equ %9B
                           B    53    PB_ALT1:	.equ %9C
                           B    54    PB_ALT2:	.equ %9D
                           B    55    PC_DR:		.equ %9E
                           B    56    PC_DDR:		.equ %9F
                           B    57    PC_ALT1:	.equ %A0
                           B    58    PC_ALT2:	.equ %A1
                           B    59    PD_DR:		.equ %A2
                           B    60    PD_DDR:		.equ %A3
                           B    61    PD_ALT1:	.equ %A4
                           B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A     8    
                           A     9        .ASSUME	ADL = 1
                           A    10        
                           A    11        DEFINE .STARTUP, SPACE = ROM
                           A    12        SEGMENT .STARTUP
                           A    13    
                           A    14        XDEF    _init_uart
                           A    15        XDEF    _getch
                           A    16        XDEF    _putch
                           A    17        XDEF	_uart0_handler
                           A    18        XDEF    uart0_recv_fifo_get
                           A    19        XDEF    uart0_send_fifo_add
                           A    20        XDEF    uart0_recv_fifo_nrchars
                           A    21    
                           A    22        XDEF    _uart0_init_fifo
                           A    23        XREF    _uart0_send_head
                           A    24        XREF    _uart0_send_tail
                           A    25        XREF    _uart0_send_buffer
                           A    26        XREF    _uart0_recv_head
                           A    27        XREF    _uart0_recv_tail
                           A    28        XREF    _uart0_recv_buffer
                           A    29    
       000000FF            A    30    PORTD_DRVAL_DEF       EQU    0ffh			;Th
       000000FF            A    31    PORTD_DDRVAL_DEF      EQU    0ffh			;Th
       000000FF            A    32    PORTD_ALT0VAL_DEF     EQU    0ffh			;Th
       00000000            A    33    PORTD_ALT1VAL_DEF     EQU    000h			;Th
       00000000            A    34    PORTD_ALT2VAL_DEF     EQU    000h			;Th
                           A    35    
                           A    36    
                           A    37    ; baudrate divisors
                           A    38    ; 18432000 / 16*1152000 = 1
       00000001            A    39    BRD0_LOW                .equ    001h
       00000000            A    40    BRD0_HIGH               .equ    000h
                           A    41    ; baudrate divisors
                           A    42    ; 18432000 / 16*115200 = 10
       0000000A            A    43    BRD1_LOW                .equ    00ah
       00000000            A    44    BRD1_HIGH               .equ    000h
                           A    45    
                           A    46    ; interrupt driven sends or immediate sending?	
       00000000            A    47    UART0_SEND_INTERRUPTS EQU    0
                           A    48    
000000                     A    49    _init_uart
000000                     A    50    UART0_INIT:
                           A    51        ; all pins to GPIO mode 2, high impedance i
000000 3EFF                A    52        ld a, PORTD_DRVAL_DEF
000002 ED39A2              A    53        out0 (PD_DR),a
000005 3EFF                A    54        ld a, PORTD_DDRVAL_DEF
000007 ED39A3              A    55        out0 (PD_DDR),a
00000A 3E00                A    56        ld a, PORTD_ALT1VAL_DEF
00000C ED39A4              A    57        out0 (PD_ALT1),a
00000F 3E00                A    58        ld a, PORTD_ALT2VAL_DEF
000011 ED39A5              A    59        out0 (PD_ALT2),a
                           A    60    
                           A    61        ; initialize for correct operation
                           A    62        ; pin 0,1,2 and 3 to alternate function
000014 ED38A3              A    63        in0 a,(PD_DDR)
000017 F60F                A    64        or  00001111b   ; set pin 0,1,2,3 (RX,TX,CT
000019 ED39A3              A    65        out0 (PD_DDR), a
00001C ED38A4              A    66        in0 a,(PD_ALT1)
00001F E6F0                A    67        and 11110000b   ; reset pin 0,1,2,3 (RX,TX,
000021 ED39A4              A    68        out0 (PD_ALT1), a
000024 ED38A5              A    69        in0 a,(PD_ALT2)
000027 F60F                A    70        or  00001111b   ; set pin 0,1,2,3 (RX,TX,CT
000029 ED39A5              A    71        out0 (PD_ALT2), a
                           A    72        ; set baudrate (1152000) as a division of t
00002C ED38C3              A    73        in0 a,(UART0_LCTL)
00002F F680                A    74        or 10000000b ; set UART_LCTL_DLAB
000031 ED39C3              A    75        out0 (UART0_LCTL),a
000034 3E01                A    76        ld a, BRD0_LOW ;// Load divisor low
000036 ED39C0              A    77        out0 (UART0_BRG_L),a
000039 3E00                A    78        ld a, BRD0_HIGH ;// Load divisor high
00003B ED39C1              A    79        out0 (UART0_BRG_H),a
00003E ED38C3              A    80        in0 a,(UART0_LCTL)
000041 E67F                A    81        and 01111111b ; reset UART_LCTL_DLAB
000043 ED39C3              A    82        out0 (UART0_LCTL),a
                           A    83        ;
000046 3E02                A    84        ld a, 00000010b  ; multidrop, loopback, DTR
000048 ED39C4              A    85        out0 (UART0_MCTL),a
                           A    86        ;
00004B 3E07                A    87        ld a, 00000111b	 ; Turn on and clear HW FIF
00004D ED39C2              A    88        out0 (UART0_FCTL),a
                           A    89        ;
000050 ED38C3              A    90        in0 a, (UART0_LCTL)
000053 F603                A    91        or  00000011b    ; 8 databits, 1 stopbit
000055 E6F7                A    92        and 11110111b    ; no parity
000057 ED39C3              A    93        out0 (UART0_LCTL),a
                           A    94        ;
00005A 3E01                A    95        ld a, 00000001b  ; receive interrupt enable
00005C ED39C1              A    96        out0 (UART0_IER),a
                           A    97    
00005F                     A    98    UART1_INIT:
                           A    99        ; all pins to GPIO mode 2, high impedance i
00005F 3EFF                A   100        ld a, PORTD_DRVAL_DEF
000061 ED399E              A   101        out0 (PC_DR),a
000064 3EFF                A   102        ld a, PORTD_DDRVAL_DEF
000066 ED399F              A   103        out0 (PC_DDR),a
000069 3E00                A   104        ld a, PORTD_ALT1VAL_DEF
00006B ED39A0              A   105        out0 (PC_ALT1),a
00006E 3E00                A   106        ld a, PORTD_ALT2VAL_DEF
000070 ED39A1              A   107        out0 (PC_ALT2),a
                           A   108    
                           A   109        ; initialize for correct operation
                           A   110        ; pin 0,1,2 and 3 to alternate function
000073 ED389F              A   111        in0 a,(PC_DDR)
000076 F60F                A   112        or  00001111b   ; set pin 0,1,2,3
000078 ED399F              A   113        out0 (PC_DDR), a
00007B ED38A0              A   114        in0 a,(PC_ALT1)
00007E E6F0                A   115        and 11110000b   ; reset pin 0,1,2,3
000080 ED39A0              A   116        out0 (PC_ALT1), a
000083 ED38A1              A   117        in0 a,(PC_ALT2)
000086 F60F                A   118        or  00001111b   ; set pin 0,1,2,3
000088 ED39A1              A   119        out0 (PC_ALT2), a
                           A   120        ; set baudrate (1152000) as a division of t
00008B ED38D3              A   121        in0 a,(UART1_LCTL)
00008E F680                A   122        or 10000000b ; set UART_LCTL_DLAB
000090 ED39D3              A   123        out0 (UART1_LCTL),a
000093 3E0A                A   124        ld a, BRD1_LOW ;// Load divisor low
000095 ED39D0              A   125        out0 (UART1_BRG_L),a
000098 3E00                A   126        ld a, BRD1_HIGH ;// Load divisor high
00009A ED39D1              A   127        out0 (UART1_BRG_H),a
00009D ED38D3              A   128        in0 a,(UART1_LCTL)
0000A0 E67F                A   129        and 01111111b ; reset UART_LCTL_DLAB
0000A2 ED39D3              A   130        out0 (UART1_LCTL),a
                           A   131        ;
0000A5 3E00                A   132        ld a, 00000000b  ; multidrop, loopback, RTS
0000A7 ED39D4              A   133        out0 (UART1_MCTL),a
                           A   134        ;
0000AA 3E07                A   135        ld a, 00000111b	 ; HW fifo cleared and enab
0000AC ED39D2              A   136        out0 (UART1_FCTL),a
                           A   137        ;
0000AF ED38D3              A   138        in0 a, (UART1_LCTL)
0000B2 F603                A   139        or  00000011b    ; 8 databits, 1 stopbit
0000B4 E6F7                A   140        and 11110111b    ; no parity
0000B6 ED39D3              A   141        out0 (UART1_LCTL),a
                           A   142        ;
0000B9 3E01                A   143        ld a, 00000001b  ; receive interrupt enable
0000BB ED39D1              A   144        out0 (UART1_IER),a
                           A   145    
0000BE C9                  A   146        RET
                           A   147    
                           A   148    ;
                           A   149    ; The C wrappers
                           A   150    ;
                           A   151    
                           A   152    ; INT putch(INT ch);
                           A   153    ;
                           A   154    ; Write a character out to the UART
                           A   155    ; Parameters:
                           A   156    ; - ch: The character to write (least significa
                           A   157    ; Returns:
                           A   158    ; - The character written
                           A   159    ;
0000BF                     A   160    _putch:
0000BF DDE5                A   161        push ix
0000C1 DD210000 00         A   162        ld ix,0
0000C6 DD39                A   163        add	ix,sp
0000C8 DD7E06              A   164        ld a, (ix+6) ; low byte of 3rd 3 byte eleme
0000CB CD 07 01 00         A   165        call uart0_send_fifo_add
0000CF 21000000            A   166        ld hl,0
0000D3 6F                  A   167        ld l,a
0000D4 DDE1                A   168        pop ix
0000D6 C9                  A   169        ret
                           A   170    
                           A   171    ; INT getch(VOID);
                           A   172    ;
                           A   173    ; Read a character out to the UART
                           A   174    ; Returns:
                           A   175    ; - The character read, 0 when no char availabl
                           A   176    ;
0000D7                     A   177    _getch:
0000D7 CD 69 01 00         A   178        call uart0_recv_fifo_get
0000DB 21000000            A   179        ld hl,0
0000DF D8                  A   180        ret c
0000E0 6F                  A   181        ld l,a
0000E1 C9                  A   182        ret
                           A   183    
0000E2                     A   184    _uart0_init_fifo:
0000E2 E5                  A   185        push hl
0000E3 D5                  A   186        push de
0000E4 11 00 00 00         A   187        ld de, _uart0_send_buffer
0000E8 21 00 00 00         A   188        ld hl, _uart0_send_head
0000EC ED1F                A   189        ld (hl),de
0000EE 21 00 00 00         A   190        ld hl, _uart0_send_tail
0000F2 ED1F                A   191        ld (hl),de 
0000F4 11 00 00 00         A   192        ld de, _uart0_recv_buffer
0000F8 21 00 00 00         A   193        ld hl, _uart0_recv_head
0000FC ED1F                A   194        ld (hl),de
0000FE 21 00 00 00         A   195        ld hl, _uart0_recv_tail
000102 ED1F                A   196        ld (hl),de     
000104 D1                  A   197        pop de
000105 E1                  A   198        pop hl
000106 C9                  A   199        ret
                           A   200    
                           A   201    	IF UART0_SEND_INTERRUPTS
                           A   202    
                           A   203    ; Write a character to the SEND buffer
                           A   204    ; Parameters:
                           A   205    ; - A: The character to write (least significan
                           A   206    ; Returns:
                           A   207    ; - A: The character written
                           A   208    uart0_send_fifo_add:
                           A   209        push hl
                           A   210        push de
                           A   211        push af ; character to write
                           A   212        ; store and increment head ptr
                           A   213        ld hl, (_uart0_send_head)
                           A   214        ld (hl),a
                           A   215        inc hl
                           A   216        ld (_uart0_send_head),hl
                           A   217        ; wrap around?
                           A   218        and a ; clear carry flag
                           A   219        ld de, _uart0_send_buffer
                           A   220        sbc hl,de
                           A   221        ld a, l
                           A   222        cp UART0_SEND_BUFFER_SIZE
                           A   223        jr nz, _uart0_send_interrupt
                           A   224        ; reset to start of buffer
                           A   225        ld (_uart0_send_head),de
                           A   226    _uart0_send_interrupt:
                           A   227        ; trigger send interrupt
                           A   228        in0 a, (UART0_IER)
                           A   229        or UART_IER_TRANSMITINT
                           A   230        out0 (UART0_IER),a
                           A   231        ; restore registers modified
                           A   232        pop af ; character written
                           A   233        pop de
                           A   234        pop hl
                           A   235        ret
                           A   236    
                           A   237    	ELSE
                           A   238    
                           A   239    ; Write a character to the SEND buffer
                           A   240    ; Parameters:
                           A   241    ; - A: The character to write (least significan
                           A   242    ; Returns:
                           A   243    ; - A: The character written
000107                     A   244    uart0_send_fifo_add:
000107 F5                  A   245        push af
000108                     A   246    _uart0_send_wait    
                           A   247        ; check if host is ready to receive, otherw
000108 ED38C6              A   248        in0 a, (UART0_MSR)
00010B CB67                A   249        bit 4,a ; check inverted CTS bit, 1 = CTS, 
00010D 28 F9               A   250        jr z, _uart0_send_wait
                           A   251        ;
00010F F1                  A   252        pop af
000110 ED39C0              A   253        out0 (UART0_THR),a
000113 C9                  A   254        RET
                           A   255    	
                           A   256    	ENDIF
                           A   257    ; Write a received character to the RECV buffer
                           A   258    ; Parameters:
                           A   259    ; - A: The character to write (least significan
                           A   260    ; Returns:
                           A   261    ; - A: The character written
000114                     A   262    uart0_recv_fifo_add:
000114 E5                  A   263        push hl
000115 D5                  A   264        push de
000116 F5                  A   265        push af ; character to write
                           A   266        ; store and increment head ptr
000117 2A 00 00 00         A   267        ld hl, (_uart0_recv_head)
00011B 77                  A   268        ld (hl),a
00011C 23                  A   269        inc hl
00011D 22 00 00 00         A   270        ld (_uart0_recv_head),hl
                           A   271        ; wrap around?
000121 A7                  A   272        and a ; clear carry flag
000122 11 00 00 00         A   273        ld de, _uart0_recv_buffer
000126 ED52                A   274        sbc hl,de
000128 7D                  A   275        ld a, l
000129 FE40                A   276        cp UART0_RECV_BUFFER_SIZE
00012B 20 05               A   277        jr nz, _uart0_recv_done
                           A   278        ; reset to start of buffer
00012D ED53 00 00 00       A   279        ld (_uart0_recv_head),de
000132                     A   280    _uart0_recv_done:
                           A   281        ; restore registers modified
000132 F1                  A   282        pop af ; character written
000133 D1                  A   283        pop de
000134 E1                  A   284        pop hl
000135 C9                  A   285        ret
                           A   286    
                           A   287    ; Get a character from the SEND fifo
                           A   288    ; Returns:
                           A   289    ; A - character in buffer
                           A   290    ; F - carry when nothing in there
000136                     A   291    uart0_send_fifo_get:
000136 E5                  A   292        push hl
000137 D5                  A   293        push de
                           A   294        ; first check if we have anything to return
000138 A7                  A   295        and a ; clear carry flag
000139 2A 00 00 00         A   296        ld hl, (_uart0_send_head)
00013D ED5B 00 00 00       A   297        ld de, (_uart0_send_tail)
000142 ED52                A   298        sbc hl,de
000144 28 1F               A   299        jr z, _uart0_send_empty
                           A   300        ; retrieve character and increment tail ptr
000146 1A                  A   301        ld a,(de)
000147 13                  A   302        inc de
000148 ED53 00 00 00       A   303        ld (_uart0_send_tail),de
00014D EB                  A   304        ex hl,de
00014E F5                  A   305        push af ; store
                           A   306        ; wrap around?
00014F A7                  A   307        and a ; clear carry flag
000150 11 00 00 00         A   308        ld de, _uart0_send_buffer
000154 ED52                A   309        sbc hl,de
000156 7D                  A   310        ld a, l
000157 FE40                A   311        cp UART0_SEND_BUFFER_SIZE
000159 20 05               A   312        jr nz, _uart0_send_read
                           A   313        ; reset to start of buffer
00015B ED53 00 00 00       A   314        ld (_uart0_send_tail),de
000160                     A   315    _uart0_send_read:  
000160 F1                  A   316        pop af ; restore
000161 A7                  A   317        and a ; clear carry
000162 D1                  A   318        pop de
000163 E1                  A   319        pop hl
000164 C9                  A   320        ret    
000165                     A   321    _uart0_send_empty:    
000165 37                  A   322        scf ; set carry
000166 D1                  A   323        pop de
000167 E1                  A   324        pop hl
000168 C9                  A   325        ret    
                           A   326    
                           A   327    ; Get a character from the RECV fifo
                           A   328    ; Returns:
                           A   329    ; A - character in buffer
                           A   330    ; F - carry when nothing in there
000169                     A   331    uart0_recv_fifo_get:
000169 E5                  A   332        push hl
00016A D5                  A   333        push de
                           A   334        ; first check if we have anything to return
00016B A7                  A   335        and a ; clear carry flag
00016C 2A 00 00 00         A   336        ld hl, (_uart0_recv_head)
000170 ED5B 00 00 00       A   337        ld de, (_uart0_recv_tail)
000175 ED52                A   338        sbc hl,de
000177 28 1F               A   339        jr z, _uart0_recv_empty
                           A   340        ; retrieve character and increment tail ptr
000179 1A                  A   341        ld a,(de)
00017A 13                  A   342        inc de
00017B ED53 00 00 00       A   343        ld (_uart0_recv_tail),de
000180 EB                  A   344        ex hl,de
000181 F5                  A   345        push af ; store
                           A   346        ; wrap around?
000182 A7                  A   347        and a ; clear carry flag
000183 11 00 00 00         A   348        ld de, _uart0_recv_buffer
000187 ED52                A   349        sbc hl,de
000189 7D                  A   350        ld a, l
00018A FE40                A   351        cp UART0_RECV_BUFFER_SIZE
00018C 20 05               A   352        jr nz, _uart0_recv_read
                           A   353        ; reset to start of buffer
00018E ED53 00 00 00       A   354        ld (_uart0_recv_tail),de
000193                     A   355    _uart0_recv_read:  
000193 F1                  A   356        pop af ; restore
000194 A7                  A   357        and a ; clear carry
000195 D1                  A   358        pop de
000196 E1                  A   359        pop hl
000197 C9                  A   360        ret    
000198                     A   361    _uart0_recv_empty:    
000198 37                  A   362        scf ; set carry
000199 D1                  A   363        pop de
00019A E1                  A   364        pop hl
00019B C9                  A   365        ret        
                           A   366    
00019C                     A   367    uart0_recv_fifo_nrchars:
00019C E5                  A   368        push hl
00019D D5                  A   369        push de
                           A   370        ; first check if we have anything to return
00019E A7                  A   371        and a ; clear carry flag
00019F 2A 00 00 00         A   372        ld hl, (_uart0_recv_head)
0001A3 ED5B 00 00 00       A   373        ld de, (_uart0_recv_tail)
0001A8 ED52                A   374        sbc hl,de
0001AA 7D                  A   375        ld a, l
0001AB D1                  A   376        pop de
0001AC E1                  A   377        pop hl
0001AD C9                  A   378        ret
                           A   379    
                           A   380    ; UART0 interrupt handler
                           A   381    ;
0001AE                     A   382    _uart0_handler:		
0001AE F3                  A   383        DI
0001AF F5                  A   384        PUSH	AF
0001B0 C5                  A   385        PUSH    BC
0001B1 D5                  A   386        PUSH    DE
0001B2 E5                  A   387        PUSH    HL
                           A   388        ; check UART interrupt flags
0001B3 ED38C2              A   389        in0		a, (UART0_IIR)
0001B6 E60E                A   390        and		00001110b ; mask interrupt level
                           A   391        ;
0001B8                     A   392    _uart0_check_trigger_level:
                           A   393        ; check trigger-level interrupt
                           A   394        ; =============================
0001B8 FE04                A   395        cp		00000100b ; 0x04
0001BA 20 17               A   396        jr		nz, _uart0_handler_next ; no, skip 
                           A   397        ;
                           A   398        ; one or more characters have arrived, fifo
0001BC                     A   399    _uart0_hw_fifo_next: 
                           A   400        ; while characters in fifo => process
0001BC ED38C5              A   401        in0 a, (UART0_LSR)
0001BF CB47                A   402        bit 0,a ; check receive data ready, 1 = cha
0001C1 28 2E               A   403        jr		z,_uart0_handler_done
0001C3 ED38C0              A   404        in0 a,(UART0_RBR)
0001C6 01000000            A   405        ld BC,0
0001CA 4F                  A   406        ld c, a
0001CB C5                  A   407        push BC
0001CC CD 14 01 00         A   408        CALL	uart0_recv_fifo_add
0001D0 C1                  A   409        POP BC
0001D1 18 E9               A   410        jr		_uart0_hw_fifo_next
0001D3                     A   411    _uart0_handler_next:
                           A   412        ; check transmit interrupt
                           A   413        ; ========================
0001D3 FE02                A   414        cp      00000010b ; 0x02
0001D5 20 1A               A   415        jr      nz, _uart0_handler_done ; no, skip 
0001D7                     A   416    _uart0_handler_cts:
                           A   417        ; check if host is ready to receive, otherw
0001D7 ED38C6              A   418        in0 a, (UART0_MSR)
0001DA CB67                A   419        bit 4,a ; check inverted CTS bit, 1 = CTS, 
0001DC 28 F9               A   420        jr z, _uart0_handler_cts
                           A   421        ;
0001DE CD 36 01 00         A   422        call uart0_send_fifo_get
0001E2 38 05               A   423        jr c, _uart0_handler_transmit_done
                           A   424        ; write byte
0001E4 ED39C0              A   425        out0 (UART0_THR),a
0001E7 18 EE               A   426        jr _uart0_handler_cts
0001E9                     A   427    _uart0_handler_transmit_done:
                           A   428        ; reset interrupt when empty
0001E9 ED38C1              A   429        in0 a,(UART0_IER)
0001EC E6FD                A   430        and 11111101b ; transmit interrupt
0001EE ED39C1              A   431        out0 (UART0_IER),a    
0001F1                     A   432    _uart0_handler_done:
0001F1 E1                  A   433        POP     HL
0001F2 D1                  A   434        POP     DE
0001F3 C1                  A   435        POP     BC
0001F4 F1                  A   436        POP		AF
0001F5 FB                  A   437        EI
0001F6 5BED4D              A   438        RETI.L	


Errors: 0
Warnings: 0
Lines Assembled: 730
