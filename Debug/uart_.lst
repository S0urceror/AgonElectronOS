Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     22:46:08     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:			AGON Electron OS - UART0 in
                           A     3    ; Author:			Mario Smit (S0urceror)
                           A     4    ;
                           A     5    
                           B     0        INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B   102    
       00000083            B   103    TMR1_CTL		EQU	83h
       00000084            B   104    TMR1_DR_L               EQU     84h
       00000084            B   105    TMR1_RR_L               EQU     84h
       00000085            B   106    TMR1_DR_H               EQU     85h
       00000085            B   107    TMR1_RR_H               EQU     85h
                           B   108    
                           B   109    ; UART constants
       00000050            B   110    UART0_SEND_BUFFER_SIZE  EQU     80
       00000050            B   111    UART0_RECV_BUFFER_SIZE  EQU     80
       00000002            B   112    UART_IER_TRANSMITINT    EQU     00000010b
                           B     0    	INCLUDE "eZ80F92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
                           B    11    TMR0_CTL:	.equ  %80
                           B    12    TMR0_DR_L:	.equ  %81
                           B    13    TMR0_RR_L:	.equ  %81
                           B    14    TMR0_DR_H:	.equ  %82
                           B    15    TMR0_RR_H:	.equ  %82
                           B    16    TMR1_CTL:	.equ  %83
                           B    17    TMR1_DR_L:	.equ  %84
                           B    18    TMR1_RR_L:	.equ  %84
                           B    19    TMR1_DR_H:	.equ  %85
                           B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
                           B    51    PB_DR:		.equ %9A
                           B    52    PB_DDR:		.equ %9B
                           B    53    PB_ALT1:	.equ %9C
                           B    54    PB_ALT2:	.equ %9D
                           B    55    PC_DR:		.equ %9E
                           B    56    PC_DDR:		.equ %9F
                           B    57    PC_ALT1:	.equ %A0
                           B    58    PC_ALT2:	.equ %A1
                           B    59    PD_DR:		.equ %A2
                           B    60    PD_DDR:		.equ %A3
                           B    61    PD_ALT1:	.equ %A4
                           B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A     8    
                           A     9        .ASSUME	ADL = 1
                           A    10        
                           A    11        DEFINE .STARTUP, SPACE = ROM
                           A    12        SEGMENT .STARTUP
                           A    13    
                           A    14        XDEF    _init_uart
                           A    15        XDEF    _getch
                           A    16        XDEF    _putch
                           A    17        XDEF	_uart0_handler
                           A    18        XDEF    uart0_recv_fifo_get
                           A    19        XDEF    uart0_send_fifo_add
                           A    20        XDEF    uart0_recv_fifo_nrchars
                           A    21    
                           A    22        XDEF    _uart0_init_fifo
                           A    23        XREF    _uart0_send_head
                           A    24        XREF    _uart0_send_tail
                           A    25        XREF    _uart0_send_buffer
                           A    26        XREF    _uart0_recv_head
                           A    27        XREF    _uart0_recv_tail
                           A    28        XREF    _uart0_recv_buffer
                           A    29    
       000000FF            A    30    PORTD_DRVAL_DEF       EQU    0ffh			;Th
       000000FF            A    31    PORTD_DDRVAL_DEF      EQU    0ffh			;Th
       000000FF            A    32    PORTD_ALT0VAL_DEF     EQU    0ffh			;Th
       00000000            A    33    PORTD_ALT1VAL_DEF     EQU    000h			;Th
       00000000            A    34    PORTD_ALT2VAL_DEF     EQU    000h			;Th
                           A    35    
                           A    36    
                           A    37    ; baudrate divisors
                           A    38    ; 18432000 / 16*1152000 = 1
       00000001            A    39    BRD0_LOW                .equ    001h
       00000000            A    40    BRD0_HIGH               .equ    000h
                           A    41    ; baudrate divisors
                           A    42    ; 18432000 / 16*115200 = 10
       0000000A            A    43    BRD1_LOW                .equ    00ah
       00000000            A    44    BRD1_HIGH               .equ    000h
                           A    45    
000000                     A    46    _init_uart
000000                     A    47    UART0_INIT:
                           A    48        ; all pins to GPIO mode 2, high impedance i
000000 3EFF                A    49        ld a, PORTD_DRVAL_DEF
000002 ED39A2              A    50        out0 (PD_DR),a
000005 3EFF                A    51        ld a, PORTD_DDRVAL_DEF
000007 ED39A3              A    52        out0 (PD_DDR),a
00000A 3E00                A    53        ld a, PORTD_ALT1VAL_DEF
00000C ED39A4              A    54        out0 (PD_ALT1),a
00000F 3E00                A    55        ld a, PORTD_ALT2VAL_DEF
000011 ED39A5              A    56        out0 (PD_ALT2),a
                           A    57    
                           A    58        ; initialize for correct operation
                           A    59        ; pin 0,1,2 and 3 to alternate function
000014 ED38A3              A    60        in0 a,(PD_DDR)
000017 F60F                A    61        or  00001111b   ; set pin 0,1,2,3 (RX,TX,CT
000019 ED39A3              A    62        out0 (PD_DDR), a
00001C ED38A4              A    63        in0 a,(PD_ALT1)
00001F E6F0                A    64        and 11110000b   ; reset pin 0,1,2,3 (RX,TX,
000021 ED39A4              A    65        out0 (PD_ALT1), a
000024 ED38A5              A    66        in0 a,(PD_ALT2)
000027 F60F                A    67        or  00001111b   ; set pin 0,1,2,3 (RX,TX,CT
000029 ED39A5              A    68        out0 (PD_ALT2), a
                           A    69        ; set baudrate (1152000) as a division of t
00002C ED38C3              A    70        in0 a,(UART0_LCTL)
00002F F680                A    71        or 10000000b ; set UART_LCTL_DLAB
000031 ED39C3              A    72        out0 (UART0_LCTL),a
000034 3E01                A    73        ld a, BRD0_LOW ;// Load divisor low
000036 ED39C0              A    74        out0 (UART0_BRG_L),a
000039 3E00                A    75        ld a, BRD0_HIGH ;// Load divisor high
00003B ED39C1              A    76        out0 (UART0_BRG_H),a
00003E ED38C3              A    77        in0 a,(UART0_LCTL)
000041 E67F                A    78        and 01111111b ; reset UART_LCTL_DLAB
000043 ED39C3              A    79        out0 (UART0_LCTL),a
                           A    80        ;
000046 3E02                A    81        ld a, 00000010b  ; multidrop, loopback, DTR
000048 ED39C4              A    82        out0 (UART0_MCTL),a
                           A    83        ;
00004B 3E07                A    84        ld a, 00000111b	 ; Turn on and clear HW FIF
00004D ED39C2              A    85        out0 (UART0_FCTL),a
                           A    86        ;
000050 ED38C3              A    87        in0 a, (UART0_LCTL)
000053 F603                A    88        or  00000011b    ; 8 databits, 1 stopbit
000055 E6F7                A    89        and 11110111b    ; no parity
000057 ED39C3              A    90        out0 (UART0_LCTL),a
                           A    91        ;
00005A 3E01                A    92        ld a, 00000001b  ; receive interrupt enable
00005C ED39C1              A    93        out0 (UART0_IER),a
                           A    94    
00005F                     A    95    UART1_INIT:
                           A    96        ; all pins to GPIO mode 2, high impedance i
00005F 3EFF                A    97        ld a, PORTD_DRVAL_DEF
000061 ED399E              A    98        out0 (PC_DR),a
000064 3EFF                A    99        ld a, PORTD_DDRVAL_DEF
000066 ED399F              A   100        out0 (PC_DDR),a
000069 3E00                A   101        ld a, PORTD_ALT1VAL_DEF
00006B ED39A0              A   102        out0 (PC_ALT1),a
00006E 3E00                A   103        ld a, PORTD_ALT2VAL_DEF
000070 ED39A1              A   104        out0 (PC_ALT2),a
                           A   105    
                           A   106        ; initialize for correct operation
                           A   107        ; pin 0,1,2 and 3 to alternate function
000073 ED389F              A   108        in0 a,(PC_DDR)
000076 F60F                A   109        or  00001111b   ; set pin 0,1,2,3
000078 ED399F              A   110        out0 (PC_DDR), a
00007B ED38A0              A   111        in0 a,(PC_ALT1)
00007E E6F0                A   112        and 11110000b   ; reset pin 0,1,2,3
000080 ED39A0              A   113        out0 (PC_ALT1), a
000083 ED38A1              A   114        in0 a,(PC_ALT2)
000086 F60F                A   115        or  00001111b   ; set pin 0,1,2,3
000088 ED39A1              A   116        out0 (PC_ALT2), a
                           A   117        ; set baudrate (1152000) as a division of t
00008B ED38D3              A   118        in0 a,(UART1_LCTL)
00008E F680                A   119        or 10000000b ; set UART_LCTL_DLAB
000090 ED39D3              A   120        out0 (UART1_LCTL),a
000093 3E0A                A   121        ld a, BRD1_LOW ;// Load divisor low
000095 ED39D0              A   122        out0 (UART1_BRG_L),a
000098 3E00                A   123        ld a, BRD1_HIGH ;// Load divisor high
00009A ED39D1              A   124        out0 (UART1_BRG_H),a
00009D ED38D3              A   125        in0 a,(UART1_LCTL)
0000A0 E67F                A   126        and 01111111b ; reset UART_LCTL_DLAB
0000A2 ED39D3              A   127        out0 (UART1_LCTL),a
                           A   128        ;
0000A5 3E00                A   129        ld a, 00000000b  ; multidrop, loopback, RTS
0000A7 ED39D4              A   130        out0 (UART1_MCTL),a
                           A   131        ;
0000AA 3E07                A   132        ld a, 00000111b	 ; HW fifo cleared and enab
0000AC ED39D2              A   133        out0 (UART1_FCTL),a
                           A   134        ;
0000AF ED38D3              A   135        in0 a, (UART1_LCTL)
0000B2 F603                A   136        or  00000011b    ; 8 databits, 1 stopbit
0000B4 E6F7                A   137        and 11110111b    ; no parity
0000B6 ED39D3              A   138        out0 (UART1_LCTL),a
                           A   139        ;
0000B9 3E01                A   140        ld a, 00000001b  ; receive interrupt enable
0000BB ED39D1              A   141        out0 (UART1_IER),a
                           A   142    
0000BE C9                  A   143        RET
                           A   144    
                           A   145    ;
                           A   146    ; The C wrappers
                           A   147    ;
                           A   148    
                           A   149    ; INT putch(INT ch);
                           A   150    ;
                           A   151    ; Write a character out to the UART
                           A   152    ; Parameters:
                           A   153    ; - ch: The character to write (least significa
                           A   154    ; Returns:
                           A   155    ; - The character written
                           A   156    ;
0000BF                     A   157    _putch:
0000BF DDE5                A   158        push ix
0000C1 DD210000 00         A   159        ld ix,0
0000C6 DD39                A   160        add	ix,sp
0000C8 DD7E06              A   161        ld a, (ix+6) ; low byte of 3rd 3 byte eleme
0000CB CD 07 01 00         A   162        call uart0_send_fifo_add
0000CF 21000000            A   163        ld hl,0
0000D3 6F                  A   164        ld l,a
0000D4 DDE1                A   165        pop ix
0000D6 C9                  A   166        ret
                           A   167    
                           A   168    ; INT getch(VOID);
                           A   169    ;
                           A   170    ; Read a character out to the UART
                           A   171    ; Returns:
                           A   172    ; - The character read, 0 when no char availabl
                           A   173    ;
0000D7                     A   174    _getch:
0000D7 CD 86 01 00         A   175        call uart0_recv_fifo_get
0000DB 21000000            A   176        ld hl,0
0000DF D8                  A   177        ret c
0000E0 6F                  A   178        ld l,a
0000E1 C9                  A   179        ret
                           A   180    
0000E2                     A   181    _uart0_init_fifo:
0000E2 E5                  A   182        push hl
0000E3 D5                  A   183        push de
0000E4 11 00 00 00         A   184        ld de, _uart0_send_buffer
0000E8 21 00 00 00         A   185        ld hl, _uart0_send_head
0000EC ED1F                A   186        ld (hl),de
0000EE 21 00 00 00         A   187        ld hl, _uart0_send_tail
0000F2 ED1F                A   188        ld (hl),de 
0000F4 11 00 00 00         A   189        ld de, _uart0_recv_buffer
0000F8 21 00 00 00         A   190        ld hl, _uart0_recv_head
0000FC ED1F                A   191        ld (hl),de
0000FE 21 00 00 00         A   192        ld hl, _uart0_recv_tail
000102 ED1F                A   193        ld (hl),de     
000104 D1                  A   194        pop de
000105 E1                  A   195        pop hl
000106 C9                  A   196        ret
                           A   197    
                           A   198    ; Write a character to the SEND buffer
                           A   199    ; Parameters:
                           A   200    ; - A: The character to write (least significan
                           A   201    ; Returns:
                           A   202    ; - A: The character written
000107                     A   203    uart0_send_fifo_add:
000107 E5                  A   204        push hl
000108 D5                  A   205        push de
000109 F5                  A   206        push af ; character to write
                           A   207        ; store and increment head ptr
00010A 2A 00 00 00         A   208        ld hl, (_uart0_send_head)
00010E 77                  A   209        ld (hl),a
00010F 23                  A   210        inc hl
000110 22 00 00 00         A   211        ld (_uart0_send_head),hl
                           A   212        ; wrap around?
000114 A7                  A   213        and a ; clear carry flag
000115 11 00 00 00         A   214        ld de, _uart0_send_buffer
000119 ED52                A   215        sbc hl,de
00011B 7D                  A   216        ld a, l
00011C FE4F                A   217        cp UART0_SEND_BUFFER_SIZE-1
00011E 20 05               A   218        jr nz, _uart0_send_interrupt
                           A   219        ; reset to start of buffer
000120 ED53 00 00 00       A   220        ld (_uart0_send_head),de
000125                     A   221    _uart0_send_interrupt:
                           A   222        ; trigger send interrupt
000125 ED38C1              A   223        in0 a, (UART0_IER)
000128 F602                A   224        or UART_IER_TRANSMITINT
00012A ED39C1              A   225        out0 (UART0_IER),a
                           A   226        ; restore registers modified
00012D F1                  A   227        pop af ; character written
00012E D1                  A   228        pop de
00012F E1                  A   229        pop hl
000130 C9                  A   230        ret
                           A   231    
                           A   232    ; Write a received character to the RECV buffer
                           A   233    ; Parameters:
                           A   234    ; - A: The character to write (least significan
                           A   235    ; Returns:
                           A   236    ; - A: The character written
000131                     A   237    uart0_recv_fifo_add:
000131 E5                  A   238        push hl
000132 D5                  A   239        push de
000133 F5                  A   240        push af ; character to write
                           A   241        ; store and increment head ptr
000134 2A 00 00 00         A   242        ld hl, (_uart0_recv_head)
000138 77                  A   243        ld (hl),a
000139 23                  A   244        inc hl
00013A 22 00 00 00         A   245        ld (_uart0_recv_head),hl
                           A   246        ; wrap around?
00013E A7                  A   247        and a ; clear carry flag
00013F 11 00 00 00         A   248        ld de, _uart0_recv_buffer
000143 ED52                A   249        sbc hl,de
000145 7D                  A   250        ld a, l
000146 FE4F                A   251        cp UART0_RECV_BUFFER_SIZE-1
000148 20 05               A   252        jr nz, _uart0_recv_done
                           A   253        ; reset to start of buffer
00014A ED53 00 00 00       A   254        ld (_uart0_recv_head),de
00014F                     A   255    _uart0_recv_done:
                           A   256        ; restore registers modified
00014F F1                  A   257        pop af ; character written
000150 D1                  A   258        pop de
000151 E1                  A   259        pop hl
000152 C9                  A   260        ret
                           A   261    
                           A   262    ; Get a character from the SEND fifo
                           A   263    ; Returns:
                           A   264    ; A - character in buffer
                           A   265    ; F - carry when nothing in there
000153                     A   266    uart0_send_fifo_get:
000153 E5                  A   267        push hl
000154 D5                  A   268        push de
                           A   269        ; first check if we have anything to return
000155 A7                  A   270        and a ; clear carry flag
000156 2A 00 00 00         A   271        ld hl, (_uart0_send_head)
00015A ED5B 00 00 00       A   272        ld de, (_uart0_send_tail)
00015F ED52                A   273        sbc hl,de
000161 28 1F               A   274        jr z, _uart0_send_empty
                           A   275        ; retrieve character and increment tail ptr
000163 1A                  A   276        ld a,(de)
000164 13                  A   277        inc de
000165 ED53 00 00 00       A   278        ld (_uart0_send_tail),de
00016A EB                  A   279        ex hl,de
00016B F5                  A   280        push af ; store
                           A   281        ; wrap around?
00016C A7                  A   282        and a ; clear carry flag
00016D 11 00 00 00         A   283        ld de, _uart0_send_buffer
000171 ED52                A   284        sbc hl,de
000173 7D                  A   285        ld a, l
000174 FE4F                A   286        cp UART0_SEND_BUFFER_SIZE-1
000176 20 05               A   287        jr nz, _uart0_send_read
                           A   288        ; reset to start of buffer
000178 ED53 00 00 00       A   289        ld (_uart0_send_tail),de
00017D                     A   290    _uart0_send_read:  
00017D F1                  A   291        pop af ; restore
00017E A7                  A   292        and a ; clear carry
00017F D1                  A   293        pop de
000180 E1                  A   294        pop hl
000181 C9                  A   295        ret    
000182                     A   296    _uart0_send_empty:    
000182 37                  A   297        scf ; set carry
000183 D1                  A   298        pop de
000184 E1                  A   299        pop hl
000185 C9                  A   300        ret    
                           A   301    
                           A   302    ; Get a character from the RECV fifo
                           A   303    ; Returns:
                           A   304    ; A - character in buffer
                           A   305    ; F - carry when nothing in there
000186                     A   306    uart0_recv_fifo_get:
000186 E5                  A   307        push hl
000187 D5                  A   308        push de
                           A   309        ; first check if we have anything to return
000188 A7                  A   310        and a ; clear carry flag
000189 2A 00 00 00         A   311        ld hl, (_uart0_recv_head)
00018D ED5B 00 00 00       A   312        ld de, (_uart0_recv_tail)
000192 ED52                A   313        sbc hl,de
000194 28 1F               A   314        jr z, _uart0_recv_empty
                           A   315        ; retrieve character and increment tail ptr
000196 1A                  A   316        ld a,(de)
000197 13                  A   317        inc de
000198 ED53 00 00 00       A   318        ld (_uart0_recv_tail),de
00019D EB                  A   319        ex hl,de
00019E F5                  A   320        push af ; store
                           A   321        ; wrap around?
00019F A7                  A   322        and a ; clear carry flag
0001A0 11 00 00 00         A   323        ld de, _uart0_recv_buffer
0001A4 ED52                A   324        sbc hl,de
0001A6 7D                  A   325        ld a, l
0001A7 FE4F                A   326        cp UART0_RECV_BUFFER_SIZE-1
0001A9 20 05               A   327        jr nz, _uart0_recv_read
                           A   328        ; reset to start of buffer
0001AB ED53 00 00 00       A   329        ld (_uart0_recv_tail),de
0001B0                     A   330    _uart0_recv_read:  
0001B0 F1                  A   331        pop af ; restore
0001B1 A7                  A   332        and a ; clear carry
0001B2 D1                  A   333        pop de
0001B3 E1                  A   334        pop hl
0001B4 C9                  A   335        ret    
0001B5                     A   336    _uart0_recv_empty:    
0001B5 37                  A   337        scf ; set carry
0001B6 D1                  A   338        pop de
0001B7 E1                  A   339        pop hl
0001B8 C9                  A   340        ret        
                           A   341    
0001B9                     A   342    uart0_recv_fifo_nrchars:
0001B9 E5                  A   343        push hl
0001BA D5                  A   344        push de
                           A   345        ; first check if we have anything to return
0001BB A7                  A   346        and a ; clear carry flag
0001BC 2A 00 00 00         A   347        ld hl, (_uart0_recv_head)
0001C0 ED5B 00 00 00       A   348        ld de, (_uart0_recv_tail)
0001C5 ED52                A   349        sbc hl,de
0001C7 7D                  A   350        ld a, l
0001C8 D1                  A   351        pop de
0001C9 E1                  A   352        pop hl
0001CA C9                  A   353        ret
                           A   354    
                           A   355    ; UART0 interrupt handler
                           A   356    ;
0001CB                     A   357    _uart0_handler:		
0001CB F3                  A   358        DI
0001CC F5                  A   359        PUSH	AF
0001CD C5                  A   360        PUSH    BC
0001CE D5                  A   361        PUSH    DE
0001CF E5                  A   362        PUSH    HL
                           A   363        ; check UART interrupt flags
0001D0 ED38C2              A   364        in0		a, (UART0_IIR)
0001D3 E60E                A   365        and		00001110b ; mask interrupt level
                           A   366        ;
0001D5                     A   367    _uart0_check_trigger_level:
                           A   368        ; check trigger-level interrupt
                           A   369        ; =============================
0001D5 FE04                A   370        cp		00000100b ; 0x04
0001D7 20 17               A   371        jr		nz, _uart0_handler_next ; no, skip 
                           A   372        ;
                           A   373        ; one or more characters have arrived, fifo
0001D9                     A   374    _uart0_hw_fifo_next: 
                           A   375        ; while characters in fifo => process
0001D9 ED38C5              A   376        in0 a, (UART0_LSR)
0001DC CB47                A   377        bit 0,a ; check receive data ready, 1 = cha
0001DE 28 2E               A   378        jr		z,_uart0_handler_done
0001E0 ED38C0              A   379        in0 a,(UART0_RBR)
0001E3 01000000            A   380        ld BC,0
0001E7 4F                  A   381        ld c, a
0001E8 C5                  A   382        push BC
0001E9 CD 31 01 00         A   383        CALL	uart0_recv_fifo_add
0001ED C1                  A   384        POP BC
0001EE 18 E9               A   385        jr		_uart0_hw_fifo_next
0001F0                     A   386    _uart0_handler_next:
                           A   387        ; check transmit interrupt
                           A   388        ; ========================
0001F0 FE02                A   389        cp      00000010b ; 0x02
0001F2 20 1A               A   390        jr      nz, _uart0_handler_done ; no, skip 
0001F4                     A   391    _uart0_handler_cts:
                           A   392        ; check if host is ready to receive, otherw
0001F4 ED38C6              A   393        in0 a, (UART0_MSR)
0001F7 CB67                A   394        bit 4,a ; check inverted CTS bit, 1 = CTS, 
0001F9 28 F9               A   395        jr z, _uart0_handler_cts
                           A   396        ;
0001FB CD 53 01 00         A   397        call uart0_send_fifo_get
0001FF 38 05               A   398        jr c, _uart0_handler_transmit_done
                           A   399        ; write byte
000201 ED39C0              A   400        out0 (UART0_THR),a
000204 18 EE               A   401        jr _uart0_handler_cts
000206                     A   402    _uart0_handler_transmit_done:
                           A   403        ; reset interrupt when empty
000206 ED38C1              A   404        in0 a,(UART0_IER)
000209 E6FD                A   405        and 11111101b ; transmit interrupt
00020B ED39C1              A   406        out0 (UART0_IER),a    
00020E                     A   407    _uart0_handler_done:
00020E E1                  A   408        POP     HL
00020F D1                  A   409        POP     DE
000210 C1                  A   410        POP     BC
000211 F1                  A   411        POP		AF
000212 FB                  A   412        EI
000213 5BED4D              A   413        RETI.L	


Errors: 0
Warnings: 0
Lines Assembled: 705
