Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     07:37:03     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src\sd.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    ;    1	/*
                           A    94    ;    2	 * Title:			AGON Electron OS - 
                           A    95    ;    3	 * Author:			RJH
                           A    96    ;    4	 * Modified by:		Dean Belfield
                           A    97    ;    5	 */
                           A    98    ;    6	
                           A    99    ;    7	#include <eZ80.h>
                           A   100    ;    8	#include <defines.h>
                           A   101    ;    9	
                           A   102    ;   10	#include <stdio.h>
                           A   103    ;   11	#include <String.h>
                           A   104    ;   12	
                           A   105    ;   13	#include "spi.h"
                           A   106    ;   14	#include "sd.h"
                           A   107    ;   15	#include "timer.h"
                           A   108    ;   16	
                           A   109    ;   17	void SD_command(BYTE cmd, DWORD arg, BY
000000                     A   110    _SD_command:
                           A   111    .DEFINE "_SD_command"
                           A   112    
                           A   113    .VALUE _SD_command
                           A   114    
                           A   115    .CLASS 2
                           A   116    
                           A   117    .TYPE 65
                           A   118    
                           A   119    .ENDEF
                           A   120    
                           A   121    .BEGFUNC "SD_command",17,"_SD_command"
                           A   122    
                           A   123    .LINE 17
                           A   124    
                           A   125    .DEFINE "cmd"
                           A   126    
                           A   127    .CLASS 65
                           A   128    
                           A   129    .VALUE 6
                           A   130    
                           A   131    .TYPE 12
                           A   132    
                           A   133    .ENDEF
                           A   134    
                           A   135    .DEFINE "arg"
                           A   136    
                           A   137    .CLASS 65
                           A   138    
                           A   139    .VALUE 9
                           A   140    
                           A   141    .TYPE 15
                           A   142    
                           A   143    .ENDEF
                           A   144    
                           A   145    .DEFINE "crc"
                           A   146    
                           A   147    .CLASS 65
                           A   148    
                           A   149    .VALUE 15
                           A   150    
                           A   151    .TYPE 12
                           A   152    
                           A   153    .ENDEF
                           A   154    
000000 DDE5                A   155    	PUSH	IX
000002 DD210000 00         A   156    	LD	IX,0
000007 DD39                A   157    	ADD	IX,SP
                           A   158    ;   18	    spi_transfer(cmd|0x40);
                           A   159    .LINE 18
                           A   160    
000009 DD7E06              A   161    	LD	A,(IX+%6)
00000C CBF7                A   162    	SET	%6,A
00000E 4F                  A   163    	LD	C,A
00000F 0600                A   164    	LD	B,%0
000011 C5                  A   165    	PUSH	BC
000012 CD 00 00 00         A   166    	CALL	_spi_transfer
000016 C1                  A   167    	POP	BC
                           A   168    ;   19	    spi_transfer((BYTE)(arg >> 24));
                           A   169    .LINE 19
                           A   170    
000017 DD7E0C              A   171    	LD	A,(IX+%C)
00001A B7ED62              A   172    	UEXT	HL
00001D 6F                  A   173    	LD	L,A
00001E E5C1                A   174    	LD	BC,HL
000020 0600                A   175    	LD	B,%0
000022 C5                  A   176    	PUSH	BC
000023 CD 00 00 00         A   177    	CALL	_spi_transfer
000027 C1                  A   178    	POP	BC
                           A   179    ;   20	    spi_transfer((BYTE)(arg >> 16));
                           A   180    .LINE 20
                           A   181    
000028 B7ED62              A   182    	UEXT	HL
00002B E5                  A   183    	PUSH	HL
00002C DD070A              A   184    	LD	BC,(IX+%A)
00002F C5                  A   185    	PUSH	BC
000030 33                  A   186    	INC	SP
000031 C1                  A   187    	POP	BC
000032 33                  A   188    	INC	SP
000033 33                  A   189    	INC	SP
000034 0600                A   190    	LD	B,%0
000036 C5                  A   191    	PUSH	BC
000037 CD 00 00 00         A   192    	CALL	_spi_transfer
00003B C1                  A   193    	POP	BC
                           A   194    ;   21	    spi_transfer((BYTE)(arg >> 8));
                           A   195    .LINE 21
                           A   196    
00003C DD070A              A   197    	LD	BC,(IX+%A)
00003F 0600                A   198    	LD	B,%0
000041 C5                  A   199    	PUSH	BC
000042 CD 00 00 00         A   200    	CALL	_spi_transfer
000046 C1                  A   201    	POP	BC
                           A   202    ;   22	    spi_transfer((BYTE)(arg));
                           A   203    .LINE 22
                           A   204    
000047 DD4E09              A   205    	LD	C,(IX+%9)
00004A 0600                A   206    	LD	B,%0
00004C C5                  A   207    	PUSH	BC
00004D CD 00 00 00         A   208    	CALL	_spi_transfer
000051 C1                  A   209    	POP	BC
                           A   210    ;   23	    spi_transfer(crc|0x01);
                           A   211    .LINE 23
                           A   212    
000052 DD7E0F              A   213    	LD	A,(IX+%F)
000055 CBC7                A   214    	SET	%0,A
000057 4F                  A   215    	LD	C,A
000058 0600                A   216    	LD	B,%0
00005A C5                  A   217    	PUSH	BC
00005B CD 00 00 00         A   218    	CALL	_spi_transfer
00005F C1                  A   219    	POP	BC
                           A   220    ;   24	}
                           A   221    .LINE 24
                           A   222    
000060 DDF9                A   223    	LD	SP,IX
000062 DDE1                A   224    	POP	IX
000064 C9                  A   225    	RET	
                           A   226    
                           A   227    
                           A   228    ;**************************** _SD_command *****
                           A   229    ;Name                         Addr/Register   S
                           A   230    ;_spi_transfer                       IMPORT  --
                           A   231    ;crc                                  IX+15    
                           A   232    ;arg                                   IX+9    
                           A   233    ;cmd                                   IX+6    
                           A   234    
                           A   235    
                           A   236    ; Stack Frame Size: 18 (bytes)
                           A   237    ;       Spill Code: 0 (instruction)
                           A   238    
                           A   239    
                           A   240    .ENDFUNC "SD_command",24,"_SD_command"
                           A   241    ;   25	
                           A   242    ;   26	BYTE SD_readRes1() {
000065                     A   243    _SD_readRes1:
                           A   244    .DEFINE "_SD_readRes1"
                           A   245    
                           A   246    .VALUE _SD_readRes1
                           A   247    
                           A   248    .CLASS 2
                           A   249    
                           A   250    .TYPE 76
                           A   251    
                           A   252    .ENDEF
                           A   253    
                           A   254    .BEGFUNC "SD_readRes1",26,"_SD_readRes1"
                           A   255    
                           A   256    .LINE 26
                           A   257    
                           A   258    .DEFINE "i"
                           A   259    
                           A   260    .CLASS 65
                           A   261    
                           A   262    .VALUE -1
                           A   263    
                           A   264    .TYPE 12
                           A   265    
                           A   266    .ENDEF
                           A   267    
                           A   268    .DEFINE "res1"
                           A   269    
                           A   270    .CLASS 65
                           A   271    
                           A   272    .VALUE -2
                           A   273    
                           A   274    .TYPE 12
                           A   275    
                           A   276    .ENDEF
                           A   277    
000065 DDE5                A   278    	PUSH	IX
000067 DD210000 00         A   279    	LD	IX,0
00006C DD39                A   280    	ADD	IX,SP
00006E 3B                  A   281    	DEC	SP
00006F 3B                  A   282    	DEC	SP
                           A   283    ;   27	    BYTE i = 0, res1;
                           A   284    .LINE 27
                           A   285    
000070 DD36FF00            A   286    	LD	(IX+%FFFFFFFF),%0
                           A   287    ;   28	
                           A   288    ;   29	    // keep polling until actual data r
                           A   289    ;   30	    while((res1 = spi_transfer(0xFF)) =
                           A   290    .LINE 30
                           A   291    
000074 18 0A               A   292    	JR	L_3
000076                     A   293    L_4:
                           A   294    ;   31	        i++;
                           A   295    .LINE 31
                           A   296    
000076 DD34FF              A   297    	INC	(IX+%FFFFFFFF)
                           A   298    ;   32	        // if no data received for 8 by
                           A   299    ;   33	        if(i > 8) break;
                           A   300    .LINE 33
                           A   301    
000079 3E08                A   302    	LD	A,%8
00007B DDBEFF              A   303    	CP	A,(IX+%FFFFFFFF)
00007E 38 11               A   304    	JR	C,L_5
                           A   305    ;   34	    }
000080                     A   306    L_3:
                           A   307    .LINE 34
                           A   308    
000080 01FF0000            A   309    	LD	BC,255
000084 C5                  A   310    	PUSH	BC
000085 CD 00 00 00         A   311    	CALL	_spi_transfer
000089 C1                  A   312    	POP	BC
00008A DD77FE              A   313    	LD	(IX+%FFFFFFFE),A
00008D FEFF                A   314    	CP	A,%FF
00008F 28 E5               A   315    	JR	Z,L_4
000091                     A   316    L_5:
                           A   317    ;   35	    return res1;
                           A   318    .LINE 35
                           A   319    
000091 DD7EFE              A   320    	LD	A,(IX+%FFFFFFFE)
                           A   321    ;   36	}
                           A   322    .LINE 36
                           A   323    
000094 DDF9                A   324    	LD	SP,IX
000096 DDE1                A   325    	POP	IX
000098 C9                  A   326    	RET	
                           A   327    
                           A   328    
                           A   329    ;**************************** _SD_readRes1 ****
                           A   330    ;Name                         Addr/Register   S
                           A   331    ;_spi_transfer                       IMPORT  --
                           A   332    ;res1                                  IX-2    
                           A   333    ;i                                     IX-1    
                           A   334    
                           A   335    
                           A   336    ; Stack Frame Size: 8 (bytes)
                           A   337    ;       Spill Code: 0 (instruction)
                           A   338    
                           A   339    
                           A   340    .ENDFUNC "SD_readRes1",36,"_SD_readRes1"
                           A   341    ;   37	
                           A   342    ;   38	void SD_readRes7(BYTE *res) {
000099                     A   343    _SD_readRes7:
                           A   344    .DEFINE "_SD_readRes7"
                           A   345    
                           A   346    .VALUE _SD_readRes7
                           A   347    
                           A   348    .CLASS 2
                           A   349    
                           A   350    .TYPE 65
                           A   351    
                           A   352    .ENDEF
                           A   353    
                           A   354    .BEGFUNC "SD_readRes7",38,"_SD_readRes7"
                           A   355    
                           A   356    .LINE 38
                           A   357    
                           A   358    .DEFINE "res"
                           A   359    
                           A   360    .CLASS 65
                           A   361    
                           A   362    .VALUE 6
                           A   363    
                           A   364    .TYPE 44
                           A   365    
                           A   366    .ENDEF
                           A   367    
000099 DDE5                A   368    	PUSH	IX
00009B DD210000 00         A   369    	LD	IX,0
0000A0 DD39                A   370    	ADD	IX,SP
                           A   371    ;   39	    res[0] = SD_readRes1();
                           A   372    .LINE 39
                           A   373    
0000A2 CD 65 00 00         A   374    	CALL	_SD_readRes1
0000A6 DD2706              A   375    	LD	HL,(IX+%6)
0000A9 77                  A   376    	LD	(HL),A
                           A   377    ;   40	
                           A   378    ;   41	    // if error reading R1, return
                           A   379    ;   42	    if(res[0] > 1) return;
                           A   380    .LINE 42
                           A   381    
0000AA DD2706              A   382    	LD	HL,(IX+%6)
0000AD 7E                  A   383    	LD	A,(HL)
0000AE B7ED62              A   384    	UEXT	HL
0000B1 6F                  A   385    	LD	L,A
0000B2 E5C1                A   386    	LD	BC,HL
0000B4 21010000            A   387    	LD	HL,1
0000B8 B7                  A   388    	OR	A,A
0000B9 ED42                A   389    	SBC	HL,BC
0000BB FA C5 00 00         A   390    	JP	M,L__5
0000BF EA 0B 01 00         A   391    	JP	PE,L_9
0000C3 18 04               A   392    	JR	L__6
0000C5                     A   393    L__5:
0000C5 E2 0B 01 00         A   394    	JP	PO,L_9
0000C9                     A   395    L__6:
                           A   396    ;   43	
                           A   397    ;   44	    // read remaining bytes
                           A   398    ;   45	    res[1] = spi_transfer(0xFF);
                           A   399    .LINE 45
                           A   400    
0000C9 01FF0000            A   401    	LD	BC,255
0000CD C5                  A   402    	PUSH	BC
0000CE CD 00 00 00         A   403    	CALL	_spi_transfer
0000D2 C1                  A   404    	POP	BC
0000D3 DD2706              A   405    	LD	HL,(IX+%6)
0000D6 23                  A   406    	INC	HL
0000D7 77                  A   407    	LD	(HL),A
                           A   408    ;   46	    res[2] = spi_transfer(0xFF);
                           A   409    .LINE 46
                           A   410    
0000D8 01FF0000            A   411    	LD	BC,255
0000DC C5                  A   412    	PUSH	BC
0000DD CD 00 00 00         A   413    	CALL	_spi_transfer
0000E1 C1                  A   414    	POP	BC
0000E2 DD3106              A   415    	LD	IY,(IX+%6)
0000E5 ED2302              A   416    	LEA	HL,IY+%2
0000E8 77                  A   417    	LD	(HL),A
                           A   418    ;   47	    res[3] = spi_transfer(0xFF);
                           A   419    .LINE 47
                           A   420    
0000E9 01FF0000            A   421    	LD	BC,255
0000ED C5                  A   422    	PUSH	BC
0000EE CD 00 00 00         A   423    	CALL	_spi_transfer
0000F2 C1                  A   424    	POP	BC
0000F3 DD3106              A   425    	LD	IY,(IX+%6)
0000F6 ED2303              A   426    	LEA	HL,IY+%3
0000F9 77                  A   427    	LD	(HL),A
                           A   428    ;   48	    res[4] = spi_transfer(0xFF);
                           A   429    .LINE 48
                           A   430    
0000FA 01FF0000            A   431    	LD	BC,255
0000FE C5                  A   432    	PUSH	BC
0000FF CD 00 00 00         A   433    	CALL	_spi_transfer
000103 C1                  A   434    	POP	BC
000104 DD3106              A   435    	LD	IY,(IX+%6)
000107 ED2304              A   436    	LEA	HL,IY+%4
00010A 77                  A   437    	LD	(HL),A
                           A   438    ;   49	}
00010B                     A   439    L_9:
                           A   440    .LINE 49
                           A   441    
00010B DDF9                A   442    	LD	SP,IX
00010D DDE1                A   443    	POP	IX
00010F C9                  A   444    	RET	
                           A   445    
                           A   446    
                           A   447    ;**************************** _SD_readRes7 ****
                           A   448    ;Name                         Addr/Register   S
                           A   449    ;_spi_transfer                       IMPORT  --
                           A   450    ;_SD_readRes1                        IMPORT  --
                           A   451    ;res                                   IX+6    
                           A   452    
                           A   453    
                           A   454    ; Stack Frame Size: 9 (bytes)
                           A   455    ;       Spill Code: 0 (instruction)
                           A   456    
                           A   457    
                           A   458    .ENDFUNC "SD_readRes7",49,"_SD_readRes7"
                           A   459    ;   50	
                           A   460    ;   51	BYTE SD_goIdleState() {
000110                     A   461    _SD_goIdleState:
                           A   462    .DEFINE "_SD_goIdleState"
                           A   463    
                           A   464    .VALUE _SD_goIdleState
                           A   465    
                           A   466    .CLASS 2
                           A   467    
                           A   468    .TYPE 76
                           A   469    
                           A   470    .ENDEF
                           A   471    
                           A   472    .BEGFUNC "SD_goIdleState",51,"_SD_goIdleState"
                           A   473    
                           A   474    .LINE 51
                           A   475    
                           A   476    .DEFINE "res1"
                           A   477    
                           A   478    .CLASS 65
                           A   479    
                           A   480    .VALUE -1
                           A   481    
                           A   482    .TYPE 12
                           A   483    
                           A   484    .ENDEF
                           A   485    
000110 DDE5                A   486    	PUSH	IX
000112 DD210000 00         A   487    	LD	IX,0
000117 DD39                A   488    	ADD	IX,SP
000119 3B                  A   489    	DEC	SP
                           A   490    ;   52		BYTE res1;
                           A   491    ;   53	//  printf("SD_goIdleState()\n");
                           A   492    ;   54	    spi_transfer(0xFF);
                           A   493    .LINE 54
                           A   494    
00011A 01FF0000            A   495    	LD	BC,255
00011E C5                  A   496    	PUSH	BC
00011F CD 00 00 00         A   497    	CALL	_spi_transfer
000123 C1                  A   498    	POP	BC
                           A   499    ;   55	    SD_CS_enable();
                           A   500    .LINE 55
                           A   501    
000124 CD 00 00 00         A   502    	CALL	_SD_CS_enable
                           A   503    ;   56	    spi_transfer(0xFF);
                           A   504    .LINE 56
                           A   505    
000128 01FF0000            A   506    	LD	BC,255
00012C C5                  A   507    	PUSH	BC
00012D CD 00 00 00         A   508    	CALL	_spi_transfer
000131 C1                  A   509    	POP	BC
                           A   510    ;   57	    SD_command(CMD0, CMD0_ARG, CMD0_CRC
                           A   511    .LINE 57
                           A   512    
000132 01940000            A   513    	LD	BC,148
000136 C5                  A   514    	PUSH	BC
000137 01000000            A   515    	LD	BC,0
00013B C5                  A   516    	PUSH	BC
00013C C5                  A   517    	PUSH	BC
00013D C5                  A   518    	PUSH	BC
00013E CD 00 00 00         A   519    	CALL	_SD_command
000142 C1                  A   520    	POP	BC
000143 C1                  A   521    	POP	BC
000144 C1                  A   522    	POP	BC
000145 C1                  A   523    	POP	BC
                           A   524    ;   58	    res1 = SD_readRes1();
                           A   525    .LINE 58
                           A   526    
000146 CD 65 00 00         A   527    	CALL	_SD_readRes1
00014A DD77FF              A   528    	LD	(IX+%FFFFFFFF),A
                           A   529    ;   59	    spi_transfer(0xFF);
                           A   530    .LINE 59
                           A   531    
00014D 01FF0000            A   532    	LD	BC,255
000151 C5                  A   533    	PUSH	BC
000152 CD 00 00 00         A   534    	CALL	_spi_transfer
000156 C1                  A   535    	POP	BC
                           A   536    ;   60	    SD_CS_disable();
                           A   537    .LINE 60
                           A   538    
000157 CD 00 00 00         A   539    	CALL	_SD_CS_disable
                           A   540    ;   61	    spi_transfer(0xFF);
                           A   541    .LINE 61
                           A   542    
00015B 01FF0000            A   543    	LD	BC,255
00015F C5                  A   544    	PUSH	BC
000160 CD 00 00 00         A   545    	CALL	_spi_transfer
000164 C1                  A   546    	POP	BC
                           A   547    ;   62	    return res1;
                           A   548    .LINE 62
                           A   549    
000165 DD7EFF              A   550    	LD	A,(IX+%FFFFFFFF)
                           A   551    ;   63	}
                           A   552    .LINE 63
                           A   553    
000168 DDF9                A   554    	LD	SP,IX
00016A DDE1                A   555    	POP	IX
00016C C9                  A   556    	RET	
                           A   557    
                           A   558    
                           A   559    ;**************************** _SD_goIdleState *
                           A   560    ;Name                         Addr/Register   S
                           A   561    ;_SD_CS_disable                      IMPORT  --
                           A   562    ;_SD_readRes1                        IMPORT  --
                           A   563    ;_SD_command                         IMPORT  --
                           A   564    ;_SD_CS_enable                       IMPORT  --
                           A   565    ;_spi_transfer                       IMPORT  --
                           A   566    ;res1                                  IX-1    
                           A   567    
                           A   568    
                           A   569    ; Stack Frame Size: 7 (bytes)
                           A   570    ;       Spill Code: 0 (instruction)
                           A   571    
                           A   572    
                           A   573    .ENDFUNC "SD_goIdleState",63,"_SD_goIdleState"
                           A   574    ;   64	
                           A   575    ;   65	void SD_sendIfCond(BYTE *res) {
00016D                     A   576    _SD_sendIfCond:
                           A   577    .DEFINE "_SD_sendIfCond"
                           A   578    
                           A   579    .VALUE _SD_sendIfCond
                           A   580    
                           A   581    .CLASS 2
                           A   582    
                           A   583    .TYPE 65
                           A   584    
                           A   585    .ENDEF
                           A   586    
                           A   587    .BEGFUNC "SD_sendIfCond",65,"_SD_sendIfCond"
                           A   588    
                           A   589    .LINE 65
                           A   590    
                           A   591    .DEFINE "res"
                           A   592    
                           A   593    .CLASS 65
                           A   594    
                           A   595    .VALUE 6
                           A   596    
                           A   597    .TYPE 44
                           A   598    
                           A   599    .ENDEF
                           A   600    
00016D DDE5                A   601    	PUSH	IX
00016F DD210000 00         A   602    	LD	IX,0
000174 DD39                A   603    	ADD	IX,SP
                           A   604    ;   66	//  printf("SD_sendIfCond()\n");
                           A   605    ;   67	    spi_transfer(0xFF);
                           A   606    .LINE 67
                           A   607    
000176 01FF0000            A   608    	LD	BC,255
00017A C5                  A   609    	PUSH	BC
00017B CD 00 00 00         A   610    	CALL	_spi_transfer
00017F C1                  A   611    	POP	BC
                           A   612    ;   68	    SD_CS_enable();
                           A   613    .LINE 68
                           A   614    
000180 CD 00 00 00         A   615    	CALL	_SD_CS_enable
                           A   616    ;   69	    spi_transfer(0xFF);
                           A   617    .LINE 69
                           A   618    
000184 01FF0000            A   619    	LD	BC,255
000188 C5                  A   620    	PUSH	BC
000189 CD 00 00 00         A   621    	CALL	_spi_transfer
00018D C1                  A   622    	POP	BC
                           A   623    ;   70	    SD_command(CMD8, CMD8_ARG, CMD8_CRC
                           A   624    .LINE 70
                           A   625    
00018E 01860000            A   626    	LD	BC,134
000192 C5                  A   627    	PUSH	BC
000193 01000000            A   628    	LD	BC,0
000197 C5                  A   629    	PUSH	BC
000198 01AA0100            A   630    	LD	BC,426
00019C C5                  A   631    	PUSH	BC
00019D 01080000            A   632    	LD	BC,8
0001A1 C5                  A   633    	PUSH	BC
0001A2 CD 00 00 00         A   634    	CALL	_SD_command
0001A6 C1                  A   635    	POP	BC
0001A7 C1                  A   636    	POP	BC
0001A8 C1                  A   637    	POP	BC
0001A9 C1                  A   638    	POP	BC
                           A   639    ;   71	    SD_readRes7(res);
                           A   640    .LINE 71
                           A   641    
0001AA DD0706              A   642    	LD	BC,(IX+%6)
0001AD C5                  A   643    	PUSH	BC
0001AE CD 99 00 00         A   644    	CALL	_SD_readRes7
0001B2 C1                  A   645    	POP	BC
                           A   646    ;   72	    spi_transfer(0xFF);
                           A   647    .LINE 72
                           A   648    
0001B3 01FF0000            A   649    	LD	BC,255
0001B7 C5                  A   650    	PUSH	BC
0001B8 CD 00 00 00         A   651    	CALL	_spi_transfer
0001BC C1                  A   652    	POP	BC
                           A   653    ;   73	    SD_CS_disable();
                           A   654    .LINE 73
                           A   655    
0001BD CD 00 00 00         A   656    	CALL	_SD_CS_disable
                           A   657    ;   74	    spi_transfer(0xFF);
                           A   658    .LINE 74
                           A   659    
0001C1 01FF0000            A   660    	LD	BC,255
0001C5 C5                  A   661    	PUSH	BC
0001C6 CD 00 00 00         A   662    	CALL	_spi_transfer
0001CA C1                  A   663    	POP	BC
                           A   664    ;   75	}
                           A   665    .LINE 75
                           A   666    
0001CB DDF9                A   667    	LD	SP,IX
0001CD DDE1                A   668    	POP	IX
0001CF C9                  A   669    	RET	
                           A   670    
                           A   671    
                           A   672    ;**************************** _SD_sendIfCond **
                           A   673    ;Name                         Addr/Register   S
                           A   674    ;_SD_CS_disable                      IMPORT  --
                           A   675    ;_SD_readRes7                        IMPORT  --
                           A   676    ;_SD_command                         IMPORT  --
                           A   677    ;_SD_CS_enable                       IMPORT  --
                           A   678    ;_spi_transfer                       IMPORT  --
                           A   679    ;res                                   IX+6    
                           A   680    
                           A   681    
                           A   682    ; Stack Frame Size: 9 (bytes)
                           A   683    ;       Spill Code: 0 (instruction)
                           A   684    
                           A   685    
                           A   686    .ENDFUNC "SD_sendIfCond",75,"_SD_sendIfCond"
                           A   687    ;   76	
                           A   688    ;   77	UINT8 SD_sendApp() {
0001D0                     A   689    _SD_sendApp:
                           A   690    .DEFINE "_SD_sendApp"
                           A   691    
                           A   692    .VALUE _SD_sendApp
                           A   693    
                           A   694    .CLASS 2
                           A   695    
                           A   696    .TYPE 76
                           A   697    
                           A   698    .ENDEF
                           A   699    
                           A   700    .BEGFUNC "SD_sendApp",77,"_SD_sendApp"
                           A   701    
                           A   702    .LINE 77
                           A   703    
                           A   704    .DEFINE "res1"
                           A   705    
                           A   706    .CLASS 65
                           A   707    
                           A   708    .VALUE -1
                           A   709    
                           A   710    .TYPE 12
                           A   711    
                           A   712    .ENDEF
                           A   713    
0001D0 DDE5                A   714    	PUSH	IX
0001D2 DD210000 00         A   715    	LD	IX,0
0001D7 DD39                A   716    	ADD	IX,SP
0001D9 3B                  A   717    	DEC	SP
                           A   718    ;   78		BYTE res1;
                           A   719    ;   79	//	printf("SD_sendApp()\n");
                           A   720    ;   80	    spi_transfer(0xFF);
                           A   721    .LINE 80
                           A   722    
0001DA 01FF0000            A   723    	LD	BC,255
0001DE C5                  A   724    	PUSH	BC
0001DF CD 00 00 00         A   725    	CALL	_spi_transfer
0001E3 C1                  A   726    	POP	BC
                           A   727    ;   81	    SD_CS_enable();
                           A   728    .LINE 81
                           A   729    
0001E4 CD 00 00 00         A   730    	CALL	_SD_CS_enable
                           A   731    ;   82	    spi_transfer(0xFF);
                           A   732    .LINE 82
                           A   733    
0001E8 01FF0000            A   734    	LD	BC,255
0001EC C5                  A   735    	PUSH	BC
0001ED CD 00 00 00         A   736    	CALL	_spi_transfer
0001F1 C1                  A   737    	POP	BC
                           A   738    ;   83	    SD_command(CMD55, CMD55_ARG, CMD55_
                           A   739    .LINE 83
                           A   740    
0001F2 01000000            A   741    	LD	BC,0
0001F6 C5                  A   742    	PUSH	BC
0001F7 C5                  A   743    	PUSH	BC
0001F8 C5                  A   744    	PUSH	BC
0001F9 01370000            A   745    	LD	BC,55
0001FD C5                  A   746    	PUSH	BC
0001FE CD 00 00 00         A   747    	CALL	_SD_command
000202 C1                  A   748    	POP	BC
000203 C1                  A   749    	POP	BC
000204 C1                  A   750    	POP	BC
000205 C1                  A   751    	POP	BC
                           A   752    ;   84	    res1 = SD_readRes1();
                           A   753    .LINE 84
                           A   754    
000206 CD 65 00 00         A   755    	CALL	_SD_readRes1
00020A DD77FF              A   756    	LD	(IX+%FFFFFFFF),A
                           A   757    ;   85	    spi_transfer(0xFF);
                           A   758    .LINE 85
                           A   759    
00020D 01FF0000            A   760    	LD	BC,255
000211 C5                  A   761    	PUSH	BC
000212 CD 00 00 00         A   762    	CALL	_spi_transfer
000216 C1                  A   763    	POP	BC
                           A   764    ;   86	    SD_CS_disable();
                           A   765    .LINE 86
                           A   766    
000217 CD 00 00 00         A   767    	CALL	_SD_CS_disable
                           A   768    ;   87	    spi_transfer(0xFF);
                           A   769    .LINE 87
                           A   770    
00021B 01FF0000            A   771    	LD	BC,255
00021F C5                  A   772    	PUSH	BC
000220 CD 00 00 00         A   773    	CALL	_spi_transfer
000224 C1                  A   774    	POP	BC
                           A   775    ;   88	    return res1;
                           A   776    .LINE 88
                           A   777    
000225 DD7EFF              A   778    	LD	A,(IX+%FFFFFFFF)
                           A   779    ;   89	}
                           A   780    .LINE 89
                           A   781    
000228 DDF9                A   782    	LD	SP,IX
00022A DDE1                A   783    	POP	IX
00022C C9                  A   784    	RET	
                           A   785    
                           A   786    
                           A   787    ;**************************** _SD_sendApp *****
                           A   788    ;Name                         Addr/Register   S
                           A   789    ;_SD_CS_disable                      IMPORT  --
                           A   790    ;_SD_readRes1                        IMPORT  --
                           A   791    ;_SD_command                         IMPORT  --
                           A   792    ;_SD_CS_enable                       IMPORT  --
                           A   793    ;_spi_transfer                       IMPORT  --
                           A   794    ;res1                                  IX-1    
                           A   795    
                           A   796    
                           A   797    ; Stack Frame Size: 7 (bytes)
                           A   798    ;       Spill Code: 0 (instruction)
                           A   799    
                           A   800    
                           A   801    .ENDFUNC "SD_sendApp",89,"_SD_sendApp"
                           A   802    ;   90	
                           A   803    ;   91	UINT8 SD_sendOpCond() {
00022D                     A   804    _SD_sendOpCond:
                           A   805    .DEFINE "_SD_sendOpCond"
                           A   806    
                           A   807    .VALUE _SD_sendOpCond
                           A   808    
                           A   809    .CLASS 2
                           A   810    
                           A   811    .TYPE 76
                           A   812    
                           A   813    .ENDEF
                           A   814    
                           A   815    .BEGFUNC "SD_sendOpCond",91,"_SD_sendOpCond"
                           A   816    
                           A   817    .LINE 91
                           A   818    
                           A   819    .DEFINE "res1"
                           A   820    
                           A   821    .CLASS 65
                           A   822    
                           A   823    .VALUE -1
                           A   824    
                           A   825    .TYPE 12
                           A   826    
                           A   827    .ENDEF
                           A   828    
00022D DDE5                A   829    	PUSH	IX
00022F DD210000 00         A   830    	LD	IX,0
000234 DD39                A   831    	ADD	IX,SP
000236 3B                  A   832    	DEC	SP
                           A   833    ;   92		BYTE res1;
                           A   834    ;   93	//  printf("SD_sendOpCond()\n");
                           A   835    ;   94	    spi_transfer(0xFF);
                           A   836    .LINE 94
                           A   837    
000237 01FF0000            A   838    	LD	BC,255
00023B C5                  A   839    	PUSH	BC
00023C CD 00 00 00         A   840    	CALL	_spi_transfer
000240 C1                  A   841    	POP	BC
                           A   842    ;   95	    SD_CS_enable();
                           A   843    .LINE 95
                           A   844    
000241 CD 00 00 00         A   845    	CALL	_SD_CS_enable
                           A   846    ;   96	    spi_transfer(0xFF);
                           A   847    .LINE 96
                           A   848    
000245 01FF0000            A   849    	LD	BC,255
000249 C5                  A   850    	PUSH	BC
00024A CD 00 00 00         A   851    	CALL	_spi_transfer
00024E C1                  A   852    	POP	BC
                           A   853    ;   97	    SD_command(ACMD41, ACMD41_ARG, ACMD
                           A   854    .LINE 97
                           A   855    
00024F 01000000            A   856    	LD	BC,0
000253 C5                  A   857    	PUSH	BC
000254 01400000            A   858    	LD	BC,64
000258 C5                  A   859    	PUSH	BC
000259 01000000            A   860    	LD	BC,0
00025D C5                  A   861    	PUSH	BC
00025E 01290000            A   862    	LD	BC,41
000262 C5                  A   863    	PUSH	BC
000263 CD 00 00 00         A   864    	CALL	_SD_command
000267 C1                  A   865    	POP	BC
000268 C1                  A   866    	POP	BC
000269 C1                  A   867    	POP	BC
00026A C1                  A   868    	POP	BC
                           A   869    ;   98	    res1 = SD_readRes1();
                           A   870    .LINE 98
                           A   871    
00026B CD 65 00 00         A   872    	CALL	_SD_readRes1
00026F DD77FF              A   873    	LD	(IX+%FFFFFFFF),A
                           A   874    ;   99	    spi_transfer(0xFF);
                           A   875    .LINE 99
                           A   876    
000272 01FF0000            A   877    	LD	BC,255
000276 C5                  A   878    	PUSH	BC
000277 CD 00 00 00         A   879    	CALL	_spi_transfer
00027B C1                  A   880    	POP	BC
                           A   881    ;  100	    SD_CS_disable();
                           A   882    .LINE 100
                           A   883    
00027C CD 00 00 00         A   884    	CALL	_SD_CS_disable
                           A   885    ;  101	    spi_transfer(0xFF);
                           A   886    .LINE 101
                           A   887    
000280 01FF0000            A   888    	LD	BC,255
000284 C5                  A   889    	PUSH	BC
000285 CD 00 00 00         A   890    	CALL	_spi_transfer
000289 C1                  A   891    	POP	BC
                           A   892    ;  102	    return res1;
                           A   893    .LINE 102
                           A   894    
00028A DD7EFF              A   895    	LD	A,(IX+%FFFFFFFF)
                           A   896    ;  103	}
                           A   897    .LINE 103
                           A   898    
00028D DDF9                A   899    	LD	SP,IX
00028F DDE1                A   900    	POP	IX
000291 C9                  A   901    	RET	
                           A   902    
                           A   903    
                           A   904    ;**************************** _SD_sendOpCond **
                           A   905    ;Name                         Addr/Register   S
                           A   906    ;_SD_CS_disable                      IMPORT  --
                           A   907    ;_SD_readRes1                        IMPORT  --
                           A   908    ;_SD_command                         IMPORT  --
                           A   909    ;_SD_CS_enable                       IMPORT  --
                           A   910    ;_spi_transfer                       IMPORT  --
                           A   911    ;res1                                  IX-1    
                           A   912    
                           A   913    
                           A   914    ; Stack Frame Size: 7 (bytes)
                           A   915    ;       Spill Code: 0 (instruction)
                           A   916    
                           A   917    
                           A   918    .ENDFUNC "SD_sendOpCond",103,"_SD_sendOpCond"
                           A   919    ;  104	
                           A   920    ;  105	void SD_readOCR(BYTE *res) {
000292                     A   921    _SD_readOCR:
                           A   922    .DEFINE "_SD_readOCR"
                           A   923    
                           A   924    .VALUE _SD_readOCR
                           A   925    
                           A   926    .CLASS 2
                           A   927    
                           A   928    .TYPE 65
                           A   929    
                           A   930    .ENDEF
                           A   931    
                           A   932    .BEGFUNC "SD_readOCR",105,"_SD_readOCR"
                           A   933    
                           A   934    .LINE 105
                           A   935    
                           A   936    .DEFINE "res"
                           A   937    
                           A   938    .CLASS 65
                           A   939    
                           A   940    .VALUE 6
                           A   941    
                           A   942    .TYPE 44
                           A   943    
                           A   944    .ENDEF
                           A   945    
000292 DDE5                A   946    	PUSH	IX
000294 DD210000 00         A   947    	LD	IX,0
000299 DD39                A   948    	ADD	IX,SP
                           A   949    ;  106	//  printf("SD_readOCR()\n");
                           A   950    ;  107	    spi_transfer(0xFF);
                           A   951    .LINE 107
                           A   952    
00029B 01FF0000            A   953    	LD	BC,255
00029F C5                  A   954    	PUSH	BC
0002A0 CD 00 00 00         A   955    	CALL	_spi_transfer
0002A4 C1                  A   956    	POP	BC
                           A   957    ;  108	    SD_CS_enable();
                           A   958    .LINE 108
                           A   959    
0002A5 CD 00 00 00         A   960    	CALL	_SD_CS_enable
                           A   961    ;  109	    spi_transfer(0xFF);
                           A   962    .LINE 109
                           A   963    
0002A9 01FF0000            A   964    	LD	BC,255
0002AD C5                  A   965    	PUSH	BC
0002AE CD 00 00 00         A   966    	CALL	_spi_transfer
0002B2 C1                  A   967    	POP	BC
                           A   968    ;  110	    SD_command(CMD58, CMD58_ARG, CMD58_
                           A   969    .LINE 110
                           A   970    
0002B3 01000000            A   971    	LD	BC,0
0002B7 C5                  A   972    	PUSH	BC
0002B8 C5                  A   973    	PUSH	BC
0002B9 C5                  A   974    	PUSH	BC
0002BA 013A0000            A   975    	LD	BC,58
0002BE C5                  A   976    	PUSH	BC
0002BF CD 00 00 00         A   977    	CALL	_SD_command
0002C3 C1                  A   978    	POP	BC
0002C4 C1                  A   979    	POP	BC
0002C5 C1                  A   980    	POP	BC
0002C6 C1                  A   981    	POP	BC
                           A   982    ;  111	    SD_readRes7(res);
                           A   983    .LINE 111
                           A   984    
0002C7 DD0706              A   985    	LD	BC,(IX+%6)
0002CA C5                  A   986    	PUSH	BC
0002CB CD 99 00 00         A   987    	CALL	_SD_readRes7
0002CF C1                  A   988    	POP	BC
                           A   989    ;  112	    spi_transfer(0xFF);
                           A   990    .LINE 112
                           A   991    
0002D0 01FF0000            A   992    	LD	BC,255
0002D4 C5                  A   993    	PUSH	BC
0002D5 CD 00 00 00         A   994    	CALL	_spi_transfer
0002D9 C1                  A   995    	POP	BC
                           A   996    ;  113	    SD_CS_disable();
                           A   997    .LINE 113
                           A   998    
0002DA CD 00 00 00         A   999    	CALL	_SD_CS_disable
                           A  1000    ;  114	    spi_transfer(0xFF);
                           A  1001    .LINE 114
                           A  1002    
0002DE 01FF0000            A  1003    	LD	BC,255
0002E2 C5                  A  1004    	PUSH	BC
0002E3 CD 00 00 00         A  1005    	CALL	_spi_transfer
0002E7 C1                  A  1006    	POP	BC
                           A  1007    ;  115	}
                           A  1008    .LINE 115
                           A  1009    
0002E8 DDF9                A  1010    	LD	SP,IX
0002EA DDE1                A  1011    	POP	IX
0002EC C9                  A  1012    	RET	
                           A  1013    
                           A  1014    
                           A  1015    ;**************************** _SD_readOCR *****
                           A  1016    ;Name                         Addr/Register   S
                           A  1017    ;_SD_CS_disable                      IMPORT  --
                           A  1018    ;_SD_readRes7                        IMPORT  --
                           A  1019    ;_SD_command                         IMPORT  --
                           A  1020    ;_SD_CS_enable                       IMPORT  --
                           A  1021    ;_spi_transfer                       IMPORT  --
                           A  1022    ;res                                   IX+6    
                           A  1023    
                           A  1024    
                           A  1025    ; Stack Frame Size: 9 (bytes)
                           A  1026    ;       Spill Code: 0 (instruction)
                           A  1027    
                           A  1028    
                           A  1029    .ENDFUNC "SD_readOCR",115,"_SD_readOCR"
                           A  1030    ;  116	
                           A  1031    ;  117	void SD_powerUpSeq() {
0002ED                     A  1032    _SD_powerUpSeq:
                           A  1033    .DEFINE "_SD_powerUpSeq"
                           A  1034    
                           A  1035    .VALUE _SD_powerUpSeq
                           A  1036    
                           A  1037    .CLASS 2
                           A  1038    
                           A  1039    .TYPE 65
                           A  1040    
                           A  1041    .ENDEF
                           A  1042    
                           A  1043    .BEGFUNC "SD_powerUpSeq",117,"_SD_powerUpSeq"
                           A  1044    
                           A  1045    .LINE 117
                           A  1046    
                           A  1047    .DEFINE "i"
                           A  1048    
                           A  1049    .CLASS 65
                           A  1050    
                           A  1051    .VALUE -3
                           A  1052    
                           A  1053    .TYPE 4
                           A  1054    
                           A  1055    .ENDEF
                           A  1056    
0002ED DDE5                A  1057    	PUSH	IX
0002EF DD210000 00         A  1058    	LD	IX,0
0002F4 DD39                A  1059    	ADD	IX,SP
0002F6 C5                  A  1060    	PUSH	BC
                           A  1061    ;  118		int i;
                           A  1062    ;  119	//  printf("SD_powerUpSeq()\n");
                           A  1063    ;  120	    SD_CS_disable();
                           A  1064    .LINE 120
                           A  1065    
0002F7 CD 00 00 00         A  1066    	CALL	_SD_CS_disable
                           A  1067    ;  121		wait_timer0();
                           A  1068    .LINE 121
                           A  1069    
0002FB CD 00 00 00         A  1070    	CALL	_wait_timer0
                           A  1071    ;  122		spi_transfer(0xFF);
                           A  1072    .LINE 122
                           A  1073    
0002FF 01FF0000            A  1074    	LD	BC,255
000303 C5                  A  1075    	PUSH	BC
000304 CD 00 00 00         A  1076    	CALL	_spi_transfer
000308 C1                  A  1077    	POP	BC
                           A  1078    ;  123	    SD_CS_disable();
                           A  1079    .LINE 123
                           A  1080    
000309 CD 00 00 00         A  1081    	CALL	_SD_CS_disable
                           A  1082    ;  124		for(i = 0; i < SD_INIT_CYCLES; i++)
                           A  1083    .LINE 124
                           A  1084    
00030D 01000000            A  1085    	LD	BC,0
000311 DD0FFD              A  1086    	LD	(IX+%FFFFFFFD),BC
000314 18 11               A  1087    	JR	L_18
000316                     A  1088    L_16:
                           A  1089    ;  125	        spi_transfer(0xFF);
                           A  1090    .LINE 125
                           A  1091    
000316 01FF0000            A  1092    	LD	BC,255
00031A C5                  A  1093    	PUSH	BC
00031B CD 00 00 00         A  1094    	CALL	_spi_transfer
00031F C1                  A  1095    	POP	BC
000320 DD07FD              A  1096    	LD	BC,(IX+%FFFFFFFD)
000323 03                  A  1097    	INC	BC
000324 DD0FFD              A  1098    	LD	(IX+%FFFFFFFD),BC
                           A  1099    ;  126		}
000327                     A  1100    L_18:
                           A  1101    .LINE 126
                           A  1102    
000327 010A0000            A  1103    	LD	BC,10
00032B DD27FD              A  1104    	LD	HL,(IX+%FFFFFFFD)
00032E B7                  A  1105    	OR	A,A
00032F ED42                A  1106    	SBC	HL,BC
000331 FA 3B 03 00         A  1107    	JP	M,L__14
000335 EA 16 03 00         A  1108    	JP	PE,L_16
000339 18 04               A  1109    	JR	L__15
00033B                     A  1110    L__14:
00033B E2 16 03 00         A  1111    	JP	PO,L_16
00033F                     A  1112    L__15:
                           A  1113    ;  127	}
                           A  1114    .LINE 127
                           A  1115    
00033F DDF9                A  1116    	LD	SP,IX
000341 DDE1                A  1117    	POP	IX
000343 C9                  A  1118    	RET	
                           A  1119    
                           A  1120    
                           A  1121    ;**************************** _SD_powerUpSeq **
                           A  1122    ;Name                         Addr/Register   S
                           A  1123    ;_spi_transfer                       IMPORT  --
                           A  1124    ;_wait_timer0                        IMPORT  --
                           A  1125    ;_SD_CS_disable                      IMPORT  --
                           A  1126    ;i                                     IX-3    
                           A  1127    
                           A  1128    
                           A  1129    ; Stack Frame Size: 9 (bytes)
                           A  1130    ;       Spill Code: 0 (instruction)
                           A  1131    
                           A  1132    
                           A  1133    .ENDFUNC "SD_powerUpSeq",127,"_SD_powerUpSeq"
                           A  1134    ;  128	
                           A  1135    ;  129	BYTE SD_readBlocks(DWORD addr, BYTE *bu
000344                     A  1136    _SD_readBlocks:
                           A  1137    .DEFINE "_SD_readBlocks"
                           A  1138    
                           A  1139    .VALUE _SD_readBlocks
                           A  1140    
                           A  1141    .CLASS 2
                           A  1142    
                           A  1143    .TYPE 76
                           A  1144    
                           A  1145    .ENDEF
                           A  1146    
                           A  1147    .BEGFUNC "SD_readBlocks",129,"_SD_readBlocks"
                           A  1148    
                           A  1149    .LINE 129
                           A  1150    
                           A  1151    .DEFINE "addr"
                           A  1152    
                           A  1153    .CLASS 65
                           A  1154    
                           A  1155    .VALUE 6
                           A  1156    
                           A  1157    .TYPE 15
                           A  1158    
                           A  1159    .ENDEF
                           A  1160    
                           A  1161    .DEFINE "buf"
                           A  1162    
                           A  1163    .CLASS 65
                           A  1164    
                           A  1165    .VALUE 12
                           A  1166    
                           A  1167    .TYPE 44
                           A  1168    
                           A  1169    .ENDEF
                           A  1170    
                           A  1171    .DEFINE "count"
                           A  1172    
                           A  1173    .CLASS 65
                           A  1174    
                           A  1175    .VALUE 15
                           A  1176    
                           A  1177    .TYPE 13
                           A  1178    
                           A  1179    .ENDEF
                           A  1180    
                           A  1181    .DEFINE "i"
                           A  1182    
                           A  1183    .CLASS 65
                           A  1184    
                           A  1185    .VALUE -3
                           A  1186    
                           A  1187    .TYPE 14
                           A  1188    
                           A  1189    .ENDEF
                           A  1190    
                           A  1191    .DEFINE "res"
                           A  1192    
                           A  1193    .CLASS 65
                           A  1194    
                           A  1195    .VALUE -4
                           A  1196    
                           A  1197    .TYPE 12
                           A  1198    
                           A  1199    .ENDEF
                           A  1200    
                           A  1201    .DEFINE "token"
                           A  1202    
                           A  1203    .CLASS 65
                           A  1204    
                           A  1205    .VALUE -5
                           A  1206    
                           A  1207    .TYPE 12
                           A  1208    
                           A  1209    .ENDEF
                           A  1210    
                           A  1211    .DEFINE "ptr"
                           A  1212    
                           A  1213    .CLASS 65
                           A  1214    
                           A  1215    .VALUE -8
                           A  1216    
                           A  1217    .TYPE 44
                           A  1218    
                           A  1219    .ENDEF
                           A  1220    
                           A  1221    .DEFINE "sector"
                           A  1222    
                           A  1223    .CLASS 65
                           A  1224    
                           A  1225    .VALUE -12
                           A  1226    
                           A  1227    .TYPE 15
                           A  1228    
                           A  1229    .ENDEF
                           A  1230    
000344 DDE5                A  1231    	PUSH	IX
000346 DD210000 00         A  1232    	LD	IX,0
00034B DD39                A  1233    	ADD	IX,SP
00034D ED22F4              A  1234    	LEA	HL,IX+%FFFFFFF4
000350 F9                  A  1235    	LD	SP,HL
                           A  1236    ;  130		DWORD	sector = addr;
                           A  1237    .LINE 130
                           A  1238    
000351 DD0706              A  1239    	LD	BC,(IX+%6)
000354 DD7E09              A  1240    	LD	A,(IX+%9)
000357 DD0FF4              A  1241    	LD	(IX+%FFFFFFF4),BC
00035A DD77F7              A  1242    	LD	(IX+%FFFFFFF7),A
                           A  1243    ;  131		BYTE	res;
                           A  1244    ;  132		BYTE	token;
                           A  1245    ;  133		BYTE *	ptr = buf;
                           A  1246    .LINE 133
                           A  1247    
00035D DD070C              A  1248    	LD	BC,(IX+%C)
000360 DD0FF8              A  1249    	LD	(IX+%FFFFFFF8),BC
                           A  1250    ;  134		UINT	i;
                           A  1251    ;  135	
                           A  1252    ;  136		for(i = 0; i < count; i++) {
                           A  1253    .LINE 136
                           A  1254    
000363 01000000            A  1255    	LD	BC,0
000367 DD0FFD              A  1256    	LD	(IX+%FFFFFFFD),BC
00036A 18 51               A  1257    	JR	L_27
00036C                     A  1258    L_25:
                           A  1259    ;  137			res = SD_readSingleBlock(sector
                           A  1260    .LINE 137
                           A  1261    
00036C ED65FB              A  1262    	PEA	IX+%FFFFFFFB
00036F DD07F8              A  1263    	LD	BC,(IX+%FFFFFFF8)
000372 C5                  A  1264    	PUSH	BC
000373 DD4EF7              A  1265    	LD	C,(IX+%FFFFFFF7)
000376 0600                A  1266    	LD	B,%0
000378 C5                  A  1267    	PUSH	BC
000379 DD07F4              A  1268    	LD	BC,(IX+%FFFFFFF4)
00037C C5                  A  1269    	PUSH	BC
00037D CD 83 05 00         A  1270    	CALL	_SD_readSingleBlock
000381 C1                  A  1271    	POP	BC
000382 C1                  A  1272    	POP	BC
000383 C1                  A  1273    	POP	BC
000384 C1                  A  1274    	POP	BC
000385 DD77FC              A  1275    	LD	(IX+%FFFFFFFC),A
                           A  1276    ;  138			if(SD_R1_NO_ERROR(res) && (toke
                           A  1277    .LINE 138
                           A  1278    
000388 FE02                A  1279    	CP	A,%2
00038A 30 26               A  1280    	JR	NC,L_24
00038C DD7EFB              A  1281    	LD	A,(IX+%FFFFFFFB)
00038F FEFE                A  1282    	CP	A,%FE
000391 20 1F               A  1283    	JR	NZ,L_24
                           A  1284    ;  139				sector++;
                           A  1285    .LINE 139
                           A  1286    
000393 DD27F4              A  1287    	LD	HL,(IX+%FFFFFFF4)
000396 DD5EF7              A  1288    	LD	E,(IX+%FFFFFFF7)
000399 3E01                A  1289    	LD	A,%1
00039B CD 00 00 00         A  1290    	CALL	__ladd_b
00039F DD2FF4              A  1291    	LD	(IX+%FFFFFFF4),HL
0003A2 DD73F7              A  1292    	LD	(IX+%FFFFFFF7),E
                           A  1293    ;  140				ptr += SD_BLOCK_LEN;
                           A  1294    .LINE 140
                           A  1295    
0003A5 01000200            A  1296    	LD	BC,512
0003A9 DD27F8              A  1297    	LD	HL,(IX+%FFFFFFF8)
0003AC 09                  A  1298    	ADD	HL,BC
0003AD DD2FF8              A  1299    	LD	(IX+%FFFFFFF8),HL
                           A  1300    ;  141			}
                           A  1301    ;  142			else {
                           A  1302    .LINE 142
                           A  1303    
0003B0 18 04               A  1304    	JR	L_26
0003B2                     A  1305    L_24:
                           A  1306    ;  143				return SD_ERROR;
                           A  1307    .LINE 143
                           A  1308    
0003B2 3E01                A  1309    	LD	A,%1
0003B4 18 19               A  1310    	JR	L_29
                           A  1311    ;  144			}
                           A  1312    ;  145		}	
0003B6                     A  1313    L_26:
                           A  1314    .LINE 145
                           A  1315    
0003B6 DD07FD              A  1316    	LD	BC,(IX+%FFFFFFFD)
0003B9 03                  A  1317    	INC	BC
0003BA DD0FFD              A  1318    	LD	(IX+%FFFFFFFD),BC
0003BD                     A  1319    L_27:
0003BD DD070F              A  1320    	LD	BC,(IX+%F)
0003C0 CD 00 00 00         A  1321    	CALL	__stoiu
0003C4 E5C1                A  1322    	LD	BC,HL
0003C6 DD27FD              A  1323    	LD	HL,(IX+%FFFFFFFD)
0003C9 B7                  A  1324    	OR	A,A
0003CA ED42                A  1325    	SBC	HL,BC
0003CC 38 9E               A  1326    	JR	C,L_25
                           A  1327    ;  146		return SD_SUCCESS;
                           A  1328    .LINE 146
                           A  1329    
0003CE AF                  A  1330    	XOR	A,A
                           A  1331    ;  147	}
0003CF                     A  1332    L_29:
                           A  1333    .LINE 147
                           A  1334    
0003CF DDF9                A  1335    	LD	SP,IX
0003D1 DDE1                A  1336    	POP	IX
0003D3 C9                  A  1337    	RET	
                           A  1338    
                           A  1339    
                           A  1340    ;**************************** _SD_readBlocks **
                           A  1341    ;Name                         Addr/Register   S
                           A  1342    ;_SD_readSingleBlock                 IMPORT  --
                           A  1343    ;sector                               IX-12    
                           A  1344    ;ptr                                   IX-8    
                           A  1345    ;token                                 IX-5    
                           A  1346    ;res                                   IX-4    
                           A  1347    ;i                                     IX-3    
                           A  1348    ;count                                IX+15    
                           A  1349    ;buf                                  IX+12    
                           A  1350    ;addr                                  IX+6    
                           A  1351    
                           A  1352    
                           A  1353    ; Stack Frame Size: 30 (bytes)
                           A  1354    ;       Spill Code: 0 (instruction)
                           A  1355    
                           A  1356    
                           A  1357    .ENDFUNC "SD_readBlocks",147,"_SD_readBlocks"
                           A  1358    ;  148	
                           A  1359    ;  149	BYTE SD_writeBlocks(DWORD addr, BYTE *b
0003D4                     A  1360    _SD_writeBlocks:
                           A  1361    .DEFINE "_SD_writeBlocks"
                           A  1362    
                           A  1363    .VALUE _SD_writeBlocks
                           A  1364    
                           A  1365    .CLASS 2
                           A  1366    
                           A  1367    .TYPE 76
                           A  1368    
                           A  1369    .ENDEF
                           A  1370    
                           A  1371    .BEGFUNC "SD_writeBlocks",149,"_SD_writeBlocks"
                           A  1372    
                           A  1373    .LINE 149
                           A  1374    
                           A  1375    .DEFINE "addr"
                           A  1376    
                           A  1377    .CLASS 65
                           A  1378    
                           A  1379    .VALUE 6
                           A  1380    
                           A  1381    .TYPE 15
                           A  1382    
                           A  1383    .ENDEF
                           A  1384    
                           A  1385    .DEFINE "buf"
                           A  1386    
                           A  1387    .CLASS 65
                           A  1388    
                           A  1389    .VALUE 12
                           A  1390    
                           A  1391    .TYPE 44
                           A  1392    
                           A  1393    .ENDEF
                           A  1394    
                           A  1395    .DEFINE "count"
                           A  1396    
                           A  1397    .CLASS 65
                           A  1398    
                           A  1399    .VALUE 15
                           A  1400    
                           A  1401    .TYPE 13
                           A  1402    
                           A  1403    .ENDEF
                           A  1404    
                           A  1405    .DEFINE "i"
                           A  1406    
                           A  1407    .CLASS 65
                           A  1408    
                           A  1409    .VALUE -3
                           A  1410    
                           A  1411    .TYPE 14
                           A  1412    
                           A  1413    .ENDEF
                           A  1414    
                           A  1415    .DEFINE "res"
                           A  1416    
                           A  1417    .CLASS 65
                           A  1418    
                           A  1419    .VALUE -4
                           A  1420    
                           A  1421    .TYPE 12
                           A  1422    
                           A  1423    .ENDEF
                           A  1424    
                           A  1425    .DEFINE "token"
                           A  1426    
                           A  1427    .CLASS 65
                           A  1428    
                           A  1429    .VALUE -5
                           A  1430    
                           A  1431    .TYPE 12
                           A  1432    
                           A  1433    .ENDEF
                           A  1434    
                           A  1435    .DEFINE "ptr"
                           A  1436    
                           A  1437    .CLASS 65
                           A  1438    
                           A  1439    .VALUE -8
                           A  1440    
                           A  1441    .TYPE 44
                           A  1442    
                           A  1443    .ENDEF
                           A  1444    
                           A  1445    .DEFINE "sector"
                           A  1446    
                           A  1447    .CLASS 65
                           A  1448    
                           A  1449    .VALUE -12
                           A  1450    
                           A  1451    .TYPE 15
                           A  1452    
                           A  1453    .ENDEF
                           A  1454    
0003D4 DDE5                A  1455    	PUSH	IX
0003D6 DD210000 00         A  1456    	LD	IX,0
0003DB DD39                A  1457    	ADD	IX,SP
0003DD ED22F4              A  1458    	LEA	HL,IX+%FFFFFFF4
0003E0 F9                  A  1459    	LD	SP,HL
                           A  1460    ;  150		DWORD	sector = addr;
                           A  1461    .LINE 150
                           A  1462    
0003E1 DD0706              A  1463    	LD	BC,(IX+%6)
0003E4 DD7E09              A  1464    	LD	A,(IX+%9)
0003E7 DD0FF4              A  1465    	LD	(IX+%FFFFFFF4),BC
0003EA DD77F7              A  1466    	LD	(IX+%FFFFFFF7),A
                           A  1467    ;  151		BYTE	res;
                           A  1468    ;  152		BYTE	token;
                           A  1469    ;  153		BYTE *	ptr = buf;
                           A  1470    .LINE 153
                           A  1471    
0003ED DD070C              A  1472    	LD	BC,(IX+%C)
0003F0 DD0FF8              A  1473    	LD	(IX+%FFFFFFF8),BC
                           A  1474    ;  154		UINT	i;
                           A  1475    ;  155	
                           A  1476    ;  156		for(i = 0; i < count; i++) {
                           A  1477    .LINE 156
                           A  1478    
0003F3 01000000            A  1479    	LD	BC,0
0003F7 DD0FFD              A  1480    	LD	(IX+%FFFFFFFD),BC
0003FA 18 50               A  1481    	JR	L_37
0003FC                     A  1482    L_35:
                           A  1483    ;  157			res = SD_writeSingleBlock(secto
                           A  1484    .LINE 157
                           A  1485    
0003FC ED65FB              A  1486    	PEA	IX+%FFFFFFFB
0003FF DD07F8              A  1487    	LD	BC,(IX+%FFFFFFF8)
000402 C5                  A  1488    	PUSH	BC
000403 DD4EF7              A  1489    	LD	C,(IX+%FFFFFFF7)
000406 0600                A  1490    	LD	B,%0
000408 C5                  A  1491    	PUSH	BC
000409 DD07F4              A  1492    	LD	BC,(IX+%FFFFFFF4)
00040C C5                  A  1493    	PUSH	BC
00040D CD 63 04 00         A  1494    	CALL	_SD_writeSingleBlock
000411 C1                  A  1495    	POP	BC
000412 C1                  A  1496    	POP	BC
000413 C1                  A  1497    	POP	BC
000414 C1                  A  1498    	POP	BC
000415 DD77FC              A  1499    	LD	(IX+%FFFFFFFC),A
                           A  1500    ;  158			if(res == 0x00 && token == SD_D
                           A  1501    .LINE 158
                           A  1502    
000418 B7                  A  1503    	OR	A,A
000419 20 26               A  1504    	JR	NZ,L_34
00041B DD7EFB              A  1505    	LD	A,(IX+%FFFFFFFB)
00041E FE05                A  1506    	CP	A,%5
000420 20 1F               A  1507    	JR	NZ,L_34
                           A  1508    ;  159				sector++;
                           A  1509    .LINE 159
                           A  1510    
000422 DD27F4              A  1511    	LD	HL,(IX+%FFFFFFF4)
000425 DD5EF7              A  1512    	LD	E,(IX+%FFFFFFF7)
000428 3E01                A  1513    	LD	A,%1
00042A CD 00 00 00         A  1514    	CALL	__ladd_b
00042E DD2FF4              A  1515    	LD	(IX+%FFFFFFF4),HL
000431 DD73F7              A  1516    	LD	(IX+%FFFFFFF7),E
                           A  1517    ;  160				ptr += SD_BLOCK_LEN;
                           A  1518    .LINE 160
                           A  1519    
000434 01000200            A  1520    	LD	BC,512
000438 DD27F8              A  1521    	LD	HL,(IX+%FFFFFFF8)
00043B 09                  A  1522    	ADD	HL,BC
00043C DD2FF8              A  1523    	LD	(IX+%FFFFFFF8),HL
                           A  1524    ;  161			}
                           A  1525    ;  162			else {
                           A  1526    .LINE 162
                           A  1527    
00043F 18 04               A  1528    	JR	L_36
000441                     A  1529    L_34:
                           A  1530    ;  163				return SD_ERROR;
                           A  1531    .LINE 163
                           A  1532    
000441 3E01                A  1533    	LD	A,%1
000443 18 19               A  1534    	JR	L_39
                           A  1535    ;  164			}
                           A  1536    ;  165		}	
000445                     A  1537    L_36:
                           A  1538    .LINE 165
                           A  1539    
000445 DD07FD              A  1540    	LD	BC,(IX+%FFFFFFFD)
000448 03                  A  1541    	INC	BC
000449 DD0FFD              A  1542    	LD	(IX+%FFFFFFFD),BC
00044C                     A  1543    L_37:
00044C DD070F              A  1544    	LD	BC,(IX+%F)
00044F CD 00 00 00         A  1545    	CALL	__stoiu
000453 E5C1                A  1546    	LD	BC,HL
000455 DD27FD              A  1547    	LD	HL,(IX+%FFFFFFFD)
000458 B7                  A  1548    	OR	A,A
000459 ED42                A  1549    	SBC	HL,BC
00045B 38 9F               A  1550    	JR	C,L_35
                           A  1551    ;  166		return SD_SUCCESS;	
                           A  1552    .LINE 166
                           A  1553    
00045D AF                  A  1554    	XOR	A,A
                           A  1555    ;  167	}
00045E                     A  1556    L_39:
                           A  1557    .LINE 167
                           A  1558    
00045E DDF9                A  1559    	LD	SP,IX
000460 DDE1                A  1560    	POP	IX
000462 C9                  A  1561    	RET	
                           A  1562    
                           A  1563    
                           A  1564    ;**************************** _SD_writeBlocks *
                           A  1565    ;Name                         Addr/Register   S
                           A  1566    ;_SD_writeSingleBlock                IMPORT  --
                           A  1567    ;sector                               IX-12    
                           A  1568    ;ptr                                   IX-8    
                           A  1569    ;token                                 IX-5    
                           A  1570    ;res                                   IX-4    
                           A  1571    ;i                                     IX-3    
                           A  1572    ;count                                IX+15    
                           A  1573    ;buf                                  IX+12    
                           A  1574    ;addr                                  IX+6    
                           A  1575    
                           A  1576    
                           A  1577    ; Stack Frame Size: 30 (bytes)
                           A  1578    ;       Spill Code: 0 (instruction)
                           A  1579    
                           A  1580    
                           A  1581    .ENDFUNC "SD_writeBlocks",167,"_SD_writeBlocks"
                           A  1582    ;  168	
                           A  1583    ;  169	BYTE SD_writeSingleBlock(DWORD addr, BY
000463                     A  1584    _SD_writeSingleBlock:
                           A  1585    .DEFINE "_SD_writeSingleBlock"
                           A  1586    
                           A  1587    .VALUE _SD_writeSingleBlock
                           A  1588    
                           A  1589    .CLASS 2
                           A  1590    
                           A  1591    .TYPE 76
                           A  1592    
                           A  1593    .ENDEF
                           A  1594    
                           A  1595    .BEGFUNC "SD_writeSingleBlock",169,"_SD_writeSi
                           A  1596    
                           A  1597    .LINE 169
                           A  1598    
                           A  1599    .DEFINE "addr"
                           A  1600    
                           A  1601    .CLASS 65
                           A  1602    
                           A  1603    .VALUE 6
                           A  1604    
                           A  1605    .TYPE 15
                           A  1606    
                           A  1607    .ENDEF
                           A  1608    
                           A  1609    .DEFINE "buf"
                           A  1610    
                           A  1611    .CLASS 65
                           A  1612    
                           A  1613    .VALUE 12
                           A  1614    
                           A  1615    .TYPE 44
                           A  1616    
                           A  1617    .ENDEF
                           A  1618    
                           A  1619    .DEFINE "token"
                           A  1620    
                           A  1621    .CLASS 65
                           A  1622    
                           A  1623    .VALUE 15
                           A  1624    
                           A  1625    .TYPE 44
                           A  1626    
                           A  1627    .ENDEF
                           A  1628    
                           A  1629    .DEFINE "readAttempts"
                           A  1630    
                           A  1631    .CLASS 65
                           A  1632    
                           A  1633    .VALUE -1
                           A  1634    
                           A  1635    .TYPE 12
                           A  1636    
                           A  1637    .ENDEF
                           A  1638    
                           A  1639    .DEFINE "i"
                           A  1640    
                           A  1641    .CLASS 65
                           A  1642    
                           A  1643    .VALUE -3
                           A  1644    
                           A  1645    .TYPE 13
                           A  1646    
                           A  1647    .ENDEF
                           A  1648    
                           A  1649    .DEFINE "read"
                           A  1650    
                           A  1651    .CLASS 65
                           A  1652    
                           A  1653    .VALUE -4
                           A  1654    
                           A  1655    .TYPE 12
                           A  1656    
                           A  1657    .ENDEF
                           A  1658    
                           A  1659    .DEFINE "res1"
                           A  1660    
                           A  1661    .CLASS 65
                           A  1662    
                           A  1663    .VALUE -5
                           A  1664    
                           A  1665    .TYPE 12
                           A  1666    
                           A  1667    .ENDEF
                           A  1668    
000463 DDE5                A  1669    	PUSH	IX
000465 DD210000 00         A  1670    	LD	IX,0
00046A DD39                A  1671    	ADD	IX,SP
00046C C5                  A  1672    	PUSH	BC
00046D 3B                  A  1673    	DEC	SP
00046E 3B                  A  1674    	DEC	SP
                           A  1675    ;  170	    BYTE	res1;
                           A  1676    ;  171		BYTE 	readAttempts;
                           A  1677    ;  172		BYTE	read = 0x00;
                           A  1678    .LINE 172
                           A  1679    
00046F DD36FC00            A  1680    	LD	(IX+%FFFFFFFC),%0
                           A  1681    ;  173		WORD	i;
                           A  1682    ;  174		//
                           A  1683    ;  175	    // Set token to none
                           A  1684    ;  176		//
                           A  1685    ;  177	    *token = 0xFF;
                           A  1686    .LINE 177
                           A  1687    
000473 DD270F              A  1688    	LD	HL,(IX+%F)
000476 36FF                A  1689    	LD	(HL),%FF
                           A  1690    ;  178		//
                           A  1691    ;  179	    // Assert chip select
                           A  1692    ;  180		//
                           A  1693    ;  181	    spi_transfer(0xFF);
                           A  1694    .LINE 181
                           A  1695    
000478 01FF0000            A  1696    	LD	BC,255
00047C C5                  A  1697    	PUSH	BC
00047D CD 00 00 00         A  1698    	CALL	_spi_transfer
000481 C1                  A  1699    	POP	BC
                           A  1700    ;  182		SD_CS_enable();
                           A  1701    .LINE 182
                           A  1702    
000482 CD 00 00 00         A  1703    	CALL	_SD_CS_enable
                           A  1704    ;  183	    spi_transfer(0xFF);
                           A  1705    .LINE 183
                           A  1706    
000486 01FF0000            A  1707    	LD	BC,255
00048A C5                  A  1708    	PUSH	BC
00048B CD 00 00 00         A  1709    	CALL	_spi_transfer
00048F C1                  A  1710    	POP	BC
                           A  1711    ;  184		//
                           A  1712    ;  185	    // Send CMD24
                           A  1713    ;  186		//
                           A  1714    ;  187	    SD_command(CMD24, addr, CMD24_CRC);
                           A  1715    .LINE 187
                           A  1716    
000490 01000000            A  1717    	LD	BC,0
000494 C5                  A  1718    	PUSH	BC
000495 DD4E09              A  1719    	LD	C,(IX+%9)
000498 0600                A  1720    	LD	B,%0
00049A C5                  A  1721    	PUSH	BC
00049B DD0706              A  1722    	LD	BC,(IX+%6)
00049E C5                  A  1723    	PUSH	BC
00049F 01180000            A  1724    	LD	BC,24
0004A3 C5                  A  1725    	PUSH	BC
0004A4 CD 00 00 00         A  1726    	CALL	_SD_command
0004A8 C1                  A  1727    	POP	BC
0004A9 C1                  A  1728    	POP	BC
0004AA C1                  A  1729    	POP	BC
0004AB C1                  A  1730    	POP	BC
                           A  1731    ;  188		//
                           A  1732    ;  189	    // Read response
                           A  1733    ;  190		//
                           A  1734    ;  191	    res1 = SD_readRes1();
                           A  1735    .LINE 191
                           A  1736    
0004AC CD 65 00 00         A  1737    	CALL	_SD_readRes1
0004B0 DD77FB              A  1738    	LD	(IX+%FFFFFFFB),A
                           A  1739    ;  192	
                           A  1740    ;  193	    // If no error
                           A  1741    ;  194	    if(res1 == SD_READY) {
                           A  1742    .LINE 194
                           A  1743    
0004B3 B7                  A  1744    	OR	A,A
0004B4 C2 63 05 00         A  1745    	JR	NZ,L_54
                           A  1746    ;  195			//
                           A  1747    ;  196	        // Send start token
                           A  1748    ;  197			//
                           A  1749    ;  198	        spi_transfer(SD_START_TOKEN);
                           A  1750    .LINE 198
                           A  1751    
0004B8 01FE0000            A  1752    	LD	BC,254
0004BC C5                  A  1753    	PUSH	BC
0004BD CD 00 00 00         A  1754    	CALL	_spi_transfer
0004C1 C1                  A  1755    	POP	BC
                           A  1756    ;  199	
                           A  1757    ;  200	        // Write buffer to card
                           A  1758    ;  201			//
                           A  1759    ;  202	        for(i = 0; i < SD_BLOCK_LEN; i+
                           A  1760    .LINE 202
                           A  1761    
0004C2 DD36FD00            A  1762    	LD	(IX+%FFFFFFFD),%0
0004C6 DD36FE00            A  1763    	LD	(IX+%FFFFFFFE),%0
0004CA 18 1E               A  1764    	JR	L_43
0004CC                     A  1765    L_41:
                           A  1766    ;  203				spi_transfer(buf[i]);
                           A  1767    .LINE 203
                           A  1768    
0004CC DD07FD              A  1769    	LD	BC,(IX+%FFFFFFFD)
0004CF CD 00 00 00         A  1770    	CALL	__stoiu
0004D3 DD070C              A  1771    	LD	BC,(IX+%C)
0004D6 09                  A  1772    	ADD	HL,BC
0004D7 4E                  A  1773    	LD	C,(HL)
0004D8 0600                A  1774    	LD	B,%0
0004DA C5                  A  1775    	PUSH	BC
0004DB CD 00 00 00         A  1776    	CALL	_spi_transfer
0004DF C1                  A  1777    	POP	BC
0004E0 DD27FD              A  1778    	LD	HL,(IX+%FFFFFFFD)
0004E3 23                  A  1779    	INC	HL
0004E4 DD75FD              A  1780    	LD	(IX+%FFFFFFFD),L
0004E7 DD74FE              A  1781    	LD	(IX+%FFFFFFFE),H
                           A  1782    ;  204			}
0004EA                     A  1783    L_43:
                           A  1784    .LINE 204
                           A  1785    
0004EA 49010002            A  1786    	LD.LIS	BC,512
0004EE DD27FD              A  1787    	LD	HL,(IX+%FFFFFFFD)
0004F1 B7                  A  1788    	OR	A,A
0004F2 40ED42              A  1789    	SBC.SIS	HL,BC
0004F5 38 D5               A  1790    	JR	C,L_41
                           A  1791    ;  205			//
                           A  1792    ;  206	        // Wait for a response (timeout
                           A  1793    ;  207			//
                           A  1794    ;  208	        readAttempts = 0;
                           A  1795    .LINE 208
                           A  1796    
0004F7 DD36FF00            A  1797    	LD	(IX+%FFFFFFFF),%0
                           A  1798    ;  209	        while(++readAttempts != SD_MAX_
                           A  1799    .LINE 209
                           A  1800    
0004FB 18 18               A  1801    	JR	L_46
0004FD                     A  1802    L_47:
                           A  1803    ;  210	            if((read = spi_transfer(0xF
                           A  1804    .LINE 210
                           A  1805    
0004FD 01FF0000            A  1806    	LD	BC,255
000501 C5                  A  1807    	PUSH	BC
000502 CD 00 00 00         A  1808    	CALL	_spi_transfer
000506 C1                  A  1809    	POP	BC
000507 DD77FC              A  1810    	LD	(IX+%FFFFFFFC),A
00050A FEFF                A  1811    	CP	A,%FF
00050C 28 07               A  1812    	JR	Z,L_46
                           A  1813    ;  211					*token = 0xFF;
                           A  1814    .LINE 211
                           A  1815    
00050E DD270F              A  1816    	LD	HL,(IX+%F)
000511 36FF                A  1817    	LD	(HL),%FF
                           A  1818    ;  212					break;
                           A  1819    .LINE 212
                           A  1820    
000513 18 13               A  1821    	JR	L_52
                           A  1822    ;  213				}
000515                     A  1823    L_46:
                           A  1824    .LINE 213
                           A  1825    
000515 DD34FF              A  1826    	INC	(IX+%FFFFFFFF)
000518 DD7EFF              A  1827    	LD	A,(IX+%FFFFFFFF)
00051B B7ED62              A  1828    	UEXT	HL
00051E 6F                  A  1829    	LD	L,A
00051F 01430F00            A  1830    	LD	BC,3907
000523 B7                  A  1831    	OR	A,A
000524 ED42                A  1832    	SBC	HL,BC
000526 20 D5               A  1833    	JR	NZ,L_47
000528                     A  1834    L_52:
                           A  1835    ;  214			//
                           A  1836    ;  215	        // If data accepted
                           A  1837    ;  216			//
                           A  1838    ;  217	        if((read & 0x1F) == 0x05) {
                           A  1839    .LINE 217
                           A  1840    
000528 DD7EFC              A  1841    	LD	A,(IX+%FFFFFFFC)
00052B E61F                A  1842    	AND	A,%1F
00052D FE05                A  1843    	CP	A,%5
00052F 20 32               A  1844    	JR	NZ,L_54
                           A  1845    ;  218				//
                           A  1846    ;  219	            // Set token to data accept
                           A  1847    ;  220				//
                           A  1848    ;  221	            *token = 0x05;
                           A  1849    .LINE 221
                           A  1850    
000531 DD270F              A  1851    	LD	HL,(IX+%F)
000534 3605                A  1852    	LD	(HL),%5
                           A  1853    ;  222				//
                           A  1854    ;  223	            // Wait for write to finish
                           A  1855    ;  224				//
                           A  1856    ;  225	            readAttempts = 0;
                           A  1857    .LINE 225
                           A  1858    
000536 DD36FF00            A  1859    	LD	(IX+%FFFFFFFF),%0
                           A  1860    ;  226	            while(spi_transfer(0xFF) ==
                           A  1861    .LINE 226
                           A  1862    
00053A 18 1A               A  1863    	JR	L_49
00053C                     A  1864    L_50:
                           A  1865    ;  227	                if(++readAttempts == SD
                           A  1866    .LINE 227
                           A  1867    
00053C DD34FF              A  1868    	INC	(IX+%FFFFFFFF)
00053F DD7EFF              A  1869    	LD	A,(IX+%FFFFFFFF)
000542 B7ED62              A  1870    	UEXT	HL
000545 6F                  A  1871    	LD	L,A
000546 01430F00            A  1872    	LD	BC,3907
00054A B7                  A  1873    	OR	A,A
00054B ED42                A  1874    	SBC	HL,BC
00054D 20 07               A  1875    	JR	NZ,L_49
                           A  1876    ;  228						*token = 0x00;
                           A  1877    .LINE 228
                           A  1878    
00054F DD270F              A  1879    	LD	HL,(IX+%F)
000552 3600                A  1880    	LD	(HL),%0
                           A  1881    ;  229						break;
                           A  1882    .LINE 229
                           A  1883    
000554 18 0D               A  1884    	JR	L_54
                           A  1885    ;  230					}
                           A  1886    ;  231				}
000556                     A  1887    L_49:
                           A  1888    .LINE 231
                           A  1889    
000556 01FF0000            A  1890    	LD	BC,255
00055A C5                  A  1891    	PUSH	BC
00055B CD 00 00 00         A  1892    	CALL	_spi_transfer
00055F C1                  A  1893    	POP	BC
000560 B7                  A  1894    	OR	A,A
000561 28 D9               A  1895    	JR	Z,L_50
                           A  1896    ;  232	        }
                           A  1897    ;  233	    }
000563                     A  1898    L_54:
                           A  1899    .LINE 233
                           A  1900    
                           A  1901    ;  234		//
                           A  1902    ;  235	    // Deassert chip select
                           A  1903    ;  236		//
                           A  1904    ;  237	    spi_transfer(0xFF);
                           A  1905    .LINE 237
                           A  1906    
000563 01FF0000            A  1907    	LD	BC,255
000567 C5                  A  1908    	PUSH	BC
000568 CD 00 00 00         A  1909    	CALL	_spi_transfer
00056C C1                  A  1910    	POP	BC
                           A  1911    ;  238	    SD_CS_disable();
                           A  1912    .LINE 238
                           A  1913    
00056D CD 00 00 00         A  1914    	CALL	_SD_CS_disable
                           A  1915    ;  239	    spi_transfer(0xFF);
                           A  1916    .LINE 239
                           A  1917    
000571 01FF0000            A  1918    	LD	BC,255
000575 C5                  A  1919    	PUSH	BC
000576 CD 00 00 00         A  1920    	CALL	_spi_transfer
00057A C1                  A  1921    	POP	BC
                           A  1922    ;  240	
                           A  1923    ;  241	    return res1;	
                           A  1924    .LINE 241
                           A  1925    
00057B DD7EFB              A  1926    	LD	A,(IX+%FFFFFFFB)
                           A  1927    ;  242	}
                           A  1928    .LINE 242
                           A  1929    
00057E DDF9                A  1930    	LD	SP,IX
000580 DDE1                A  1931    	POP	IX
000582 C9                  A  1932    	RET	
                           A  1933    
                           A  1934    
                           A  1935    ;**************************** _SD_writeSingleBl
                           A  1936    ;Name                         Addr/Register   S
                           A  1937    ;_SD_CS_disable                      IMPORT  --
                           A  1938    ;_SD_readRes1                        IMPORT  --
                           A  1939    ;_SD_command                         IMPORT  --
                           A  1940    ;_SD_CS_enable                       IMPORT  --
                           A  1941    ;_spi_transfer                       IMPORT  --
                           A  1942    ;res1                                  IX-5    
                           A  1943    ;read                                  IX-4    
                           A  1944    ;i                                     IX-3    
                           A  1945    ;readAttempts                          IX-1    
                           A  1946    ;token                                IX+15    
                           A  1947    ;buf                                  IX+12    
                           A  1948    ;addr                                  IX+6    
                           A  1949    
                           A  1950    
                           A  1951    ; Stack Frame Size: 23 (bytes)
                           A  1952    ;       Spill Code: 0 (instruction)
                           A  1953    
                           A  1954    
                           A  1955    .ENDFUNC "SD_writeSingleBlock",242,"_SD_writeSi
                           A  1956    ;  243	
                           A  1957    ;  244	BYTE SD_readSingleBlock(DWORD addr, BYT
                           A  1958    ;  245	{
000583                     A  1959    _SD_readSingleBlock:
                           A  1960    .DEFINE "_SD_readSingleBlock"
                           A  1961    
                           A  1962    .VALUE _SD_readSingleBlock
                           A  1963    
                           A  1964    .CLASS 2
                           A  1965    
                           A  1966    .TYPE 76
                           A  1967    
                           A  1968    .ENDEF
                           A  1969    
                           A  1970    .BEGFUNC "SD_readSingleBlock",245,"_SD_readSing
                           A  1971    
                           A  1972    .LINE 245
                           A  1973    
                           A  1974    .DEFINE "addr"
                           A  1975    
                           A  1976    .CLASS 65
                           A  1977    
                           A  1978    .VALUE 6
                           A  1979    
                           A  1980    .TYPE 15
                           A  1981    
                           A  1982    .ENDEF
                           A  1983    
                           A  1984    .DEFINE "buf"
                           A  1985    
                           A  1986    .CLASS 65
                           A  1987    
                           A  1988    .VALUE 12
                           A  1989    
                           A  1990    .TYPE 44
                           A  1991    
                           A  1992    .ENDEF
                           A  1993    
                           A  1994    .DEFINE "token"
                           A  1995    
                           A  1996    .CLASS 65
                           A  1997    
                           A  1998    .VALUE 15
                           A  1999    
                           A  2000    .TYPE 44
                           A  2001    
                           A  2002    .ENDEF
                           A  2003    
                           A  2004    .DEFINE "read"
                           A  2005    
                           A  2006    .CLASS 65
                           A  2007    
                           A  2008    .VALUE -1
                           A  2009    
                           A  2010    .TYPE 12
                           A  2011    
                           A  2012    .ENDEF
                           A  2013    
                           A  2014    .DEFINE "i"
                           A  2015    
                           A  2016    .CLASS 65
                           A  2017    
                           A  2018    .VALUE -3
                           A  2019    
                           A  2020    .TYPE 13
                           A  2021    
                           A  2022    .ENDEF
                           A  2023    
                           A  2024    .DEFINE "readAttempts"
                           A  2025    
                           A  2026    .CLASS 65
                           A  2027    
                           A  2028    .VALUE -5
                           A  2029    
                           A  2030    .TYPE 13
                           A  2031    
                           A  2032    .ENDEF
                           A  2033    
                           A  2034    .DEFINE "res1"
                           A  2035    
                           A  2036    .CLASS 65
                           A  2037    
                           A  2038    .VALUE -6
                           A  2039    
                           A  2040    .TYPE 12
                           A  2041    
                           A  2042    .ENDEF
                           A  2043    
000583 DDE5                A  2044    	PUSH	IX
000585 DD210000 00         A  2045    	LD	IX,0
00058A DD39                A  2046    	ADD	IX,SP
00058C C5                  A  2047    	PUSH	BC
00058D C5                  A  2048    	PUSH	BC
                           A  2049    ;  246	    BYTE	res1;
                           A  2050    ;  247		BYTE	read = 0x00;
                           A  2051    .LINE 247
                           A  2052    
00058E DD36FF00            A  2053    	LD	(IX+%FFFFFFFF),%0
                           A  2054    ;  248	    WORD	readAttempts, i;
                           A  2055    ;  249		//
                           A  2056    ;  250	    // Set token to none
                           A  2057    ;  251		//
                           A  2058    ;  252	    *token = 0xFF;
                           A  2059    .LINE 252
                           A  2060    
000592 DD270F              A  2061    	LD	HL,(IX+%F)
000595 36FF                A  2062    	LD	(HL),%FF
                           A  2063    ;  253		//
                           A  2064    ;  254	    // Assert chip select
                           A  2065    ;  255		//
                           A  2066    ;  256	    spi_transfer(0xFF);
                           A  2067    .LINE 256
                           A  2068    
000597 01FF0000            A  2069    	LD	BC,255
00059B C5                  A  2070    	PUSH	BC
00059C CD 00 00 00         A  2071    	CALL	_spi_transfer
0005A0 C1                  A  2072    	POP	BC
                           A  2073    ;  257	    SD_CS_enable();
                           A  2074    .LINE 257
                           A  2075    
0005A1 CD 00 00 00         A  2076    	CALL	_SD_CS_enable
                           A  2077    ;  258	    spi_transfer(0xFF);
                           A  2078    .LINE 258
                           A  2079    
0005A5 01FF0000            A  2080    	LD	BC,255
0005A9 C5                  A  2081    	PUSH	BC
0005AA CD 00 00 00         A  2082    	CALL	_spi_transfer
0005AE C1                  A  2083    	POP	BC
                           A  2084    ;  259		//
                           A  2085    ;  260	    // Send CMD17
                           A  2086    ;  261		//
                           A  2087    ;  262	    SD_command(CMD17, addr, CMD17_CRC);
                           A  2088    .LINE 262
                           A  2089    
0005AF 01000000            A  2090    	LD	BC,0
0005B3 C5                  A  2091    	PUSH	BC
0005B4 DD4E09              A  2092    	LD	C,(IX+%9)
0005B7 0600                A  2093    	LD	B,%0
0005B9 C5                  A  2094    	PUSH	BC
0005BA DD0706              A  2095    	LD	BC,(IX+%6)
0005BD C5                  A  2096    	PUSH	BC
0005BE 01110000            A  2097    	LD	BC,17
0005C2 C5                  A  2098    	PUSH	BC
0005C3 CD 00 00 00         A  2099    	CALL	_SD_command
0005C7 C1                  A  2100    	POP	BC
0005C8 C1                  A  2101    	POP	BC
0005C9 C1                  A  2102    	POP	BC
0005CA C1                  A  2103    	POP	BC
                           A  2104    ;  263		//
                           A  2105    ;  264	    // Read R1
                           A  2106    ;  265		//
                           A  2107    ;  266	    res1 = SD_readRes1();
                           A  2108    .LINE 266
                           A  2109    
0005CB CD 65 00 00         A  2110    	CALL	_SD_readRes1
0005CF DD77FA              A  2111    	LD	(IX+%FFFFFFFA),A
                           A  2112    ;  267		//
                           A  2113    ;  268	    // If response received from card
                           A  2114    ;  269		//
                           A  2115    ;  270	    if(res1 != 0xFF) {
                           A  2116    .LINE 270
                           A  2117    
0005D2 FEFF                A  2118    	CP	A,%FF
0005D4 CA 62 06 00         A  2119    	JR	Z,L_69
                           A  2120    ;  271			//
                           A  2121    ;  272	        // Wait for a response token (t
                           A  2122    ;  273			//
                           A  2123    ;  274	        readAttempts = 0;
                           A  2124    .LINE 274
                           A  2125    
0005D8 DD36FB00            A  2126    	LD	(IX+%FFFFFFFB),%0
0005DC DD36FC00            A  2127    	LD	(IX+%FFFFFFFC),%0
                           A  2128    ;  275	        while(++readAttempts != SD_MAX_
                           A  2129    .LINE 275
                           A  2130    
0005E0 18 11               A  2131    	JR	L_57
0005E2                     A  2132    L_58:
                           A  2133    ;  276	            if((read = spi_transfer(0xF
                           A  2134    .LINE 276
                           A  2135    
0005E2 01FF0000            A  2136    	LD	BC,255
0005E6 C5                  A  2137    	PUSH	BC
0005E7 CD 00 00 00         A  2138    	CALL	_spi_transfer
0005EB C1                  A  2139    	POP	BC
0005EC DD77FF              A  2140    	LD	(IX+%FFFFFFFF),A
0005EF FEFF                A  2141    	CP	A,%FF
0005F1 20 17               A  2142    	JR	NZ,L_66
                           A  2143    ;  277					break;
0005F3                     A  2144    L_57:
                           A  2145    .LINE 277
                           A  2146    
0005F3 DD27FB              A  2147    	LD	HL,(IX+%FFFFFFFB)
0005F6 23                  A  2148    	INC	HL
0005F7 DD75FB              A  2149    	LD	(IX+%FFFFFFFB),L
0005FA DD74FC              A  2150    	LD	(IX+%FFFFFFFC),H
0005FD 49011B06            A  2151    	LD.LIS	BC,1563
000601 DD27FB              A  2152    	LD	HL,(IX+%FFFFFFFB)
000604 B7                  A  2153    	OR	A,A
000605 40ED42              A  2154    	SBC.SIS	HL,BC
000608 20 D8               A  2155    	JR	NZ,L_58
00060A                     A  2156    L_66:
                           A  2157    ;  278			//
                           A  2158    ;  279	        // If response token is 0xFE
                           A  2159    ;  280			//
                           A  2160    ;  281	        if(read == SD_START_TOKEN) {
                           A  2161    .LINE 281
                           A  2162    
00060A DD7EFF              A  2163    	LD	A,(IX+%FFFFFFFF)
00060D FEFE                A  2164    	CP	A,%FE
00060F 20 4A               A  2165    	JR	NZ,L_67
                           A  2166    ;  282				//
                           A  2167    ;  283	            // Read 512 byte block
                           A  2168    ;  284				//
                           A  2169    ;  285	            for(i = 0; i < SD_BLOCK_LEN
                           A  2170    .LINE 285
                           A  2171    
000611 DD36FD00            A  2172    	LD	(IX+%FFFFFFFD),%0
000615 DD36FE00            A  2173    	LD	(IX+%FFFFFFFE),%0
000619 18 1F               A  2174    	JR	L_63
00061B                     A  2175    L_61:
                           A  2176    ;  286					*buf++ = spi_transfer(0
                           A  2177    .LINE 286
                           A  2178    
00061B 01FF0000            A  2179    	LD	BC,255
00061F C5                  A  2180    	PUSH	BC
000620 CD 00 00 00         A  2181    	CALL	_spi_transfer
000624 C1                  A  2182    	POP	BC
000625 DD270C              A  2183    	LD	HL,(IX+%C)
000628 77                  A  2184    	LD	(HL),A
000629 DD070C              A  2185    	LD	BC,(IX+%C)
00062C 03                  A  2186    	INC	BC
00062D DD0F0C              A  2187    	LD	(IX+%C),BC
000630 DD27FD              A  2188    	LD	HL,(IX+%FFFFFFFD)
000633 23                  A  2189    	INC	HL
000634 DD75FD              A  2190    	LD	(IX+%FFFFFFFD),L
000637 DD74FE              A  2191    	LD	(IX+%FFFFFFFE),H
                           A  2192    ;  287				}
00063A                     A  2193    L_63:
                           A  2194    .LINE 287
                           A  2195    
00063A 49010002            A  2196    	LD.LIS	BC,512
00063E DD27FD              A  2197    	LD	HL,(IX+%FFFFFFFD)
000641 B7                  A  2198    	OR	A,A
000642 40ED42              A  2199    	SBC.SIS	HL,BC
000645 38 D4               A  2200    	JR	C,L_61
                           A  2201    ;  288				//
                           A  2202    ;  289	            // Read 16-bit CRC
                           A  2203    ;  290				//
                           A  2204    ;  291	            spi_transfer(0xFF);
                           A  2205    .LINE 291
                           A  2206    
000647 01FF0000            A  2207    	LD	BC,255
00064B C5                  A  2208    	PUSH	BC
00064C CD 00 00 00         A  2209    	CALL	_spi_transfer
000650 C1                  A  2210    	POP	BC
                           A  2211    ;  292	            spi_transfer(0xFF);
                           A  2212    .LINE 292
                           A  2213    
000651 01FF0000            A  2214    	LD	BC,255
000655 C5                  A  2215    	PUSH	BC
000656 CD 00 00 00         A  2216    	CALL	_spi_transfer
00065A C1                  A  2217    	POP	BC
                           A  2218    ;  293	        }
00065B                     A  2219    L_67:
                           A  2220    .LINE 293
                           A  2221    
                           A  2222    ;  294			//
                           A  2223    ;  295	        // Set token to card response
                           A  2224    ;  296			//
                           A  2225    ;  297	        *token = read;
                           A  2226    .LINE 297
                           A  2227    
00065B DD270F              A  2228    	LD	HL,(IX+%F)
00065E DD7EFF              A  2229    	LD	A,(IX+%FFFFFFFF)
000661 77                  A  2230    	LD	(HL),A
                           A  2231    ;  298	    }
000662                     A  2232    L_69:
                           A  2233    .LINE 298
                           A  2234    
                           A  2235    ;  299		//
                           A  2236    ;  300	    // Deassert chip select
                           A  2237    ;  301		//
                           A  2238    ;  302	    spi_transfer(0xFF);
                           A  2239    .LINE 302
                           A  2240    
000662 01FF0000            A  2241    	LD	BC,255
000666 C5                  A  2242    	PUSH	BC
000667 CD 00 00 00         A  2243    	CALL	_spi_transfer
00066B C1                  A  2244    	POP	BC
                           A  2245    ;  303	    SD_CS_disable();
                           A  2246    .LINE 303
                           A  2247    
00066C CD 00 00 00         A  2248    	CALL	_SD_CS_disable
                           A  2249    ;  304	    spi_transfer(0xFF);
                           A  2250    .LINE 304
                           A  2251    
000670 01FF0000            A  2252    	LD	BC,255
000674 C5                  A  2253    	PUSH	BC
000675 CD 00 00 00         A  2254    	CALL	_spi_transfer
000679 C1                  A  2255    	POP	BC
                           A  2256    ;  305	
                           A  2257    ;  306	    return res1;
                           A  2258    .LINE 306
                           A  2259    
00067A DD7EFA              A  2260    	LD	A,(IX+%FFFFFFFA)
                           A  2261    ;  307	}
                           A  2262    .LINE 307
                           A  2263    
00067D DDF9                A  2264    	LD	SP,IX
00067F DDE1                A  2265    	POP	IX
000681 C9                  A  2266    	RET	
                           A  2267    
                           A  2268    
                           A  2269    ;**************************** _SD_readSingleBlo
                           A  2270    ;Name                         Addr/Register   S
                           A  2271    ;_SD_CS_disable                      IMPORT  --
                           A  2272    ;_SD_readRes1                        IMPORT  --
                           A  2273    ;_SD_command                         IMPORT  --
                           A  2274    ;_SD_CS_enable                       IMPORT  --
                           A  2275    ;_spi_transfer                       IMPORT  --
                           A  2276    ;res1                                  IX-6    
                           A  2277    ;readAttempts                          IX-5    
                           A  2278    ;i                                     IX-3    
                           A  2279    ;read                                  IX-1    
                           A  2280    ;token                                IX+15    
                           A  2281    ;buf                                  IX+12    
                           A  2282    ;addr                                  IX+6    
                           A  2283    
                           A  2284    
                           A  2285    ; Stack Frame Size: 24 (bytes)
                           A  2286    ;       Spill Code: 0 (instruction)
                           A  2287    
                           A  2288    
                           A  2289    .ENDFUNC "SD_readSingleBlock",307,"_SD_readSing
                           A  2290    ;  308	
                           A  2291    ;  309	BYTE SD_init(void) {
000682                     A  2292    _SD_init:
                           A  2293    .DEFINE "_SD_init"
                           A  2294    
                           A  2295    .VALUE _SD_init
                           A  2296    
                           A  2297    .CLASS 2
                           A  2298    
                           A  2299    .TYPE 76
                           A  2300    
                           A  2301    .ENDEF
                           A  2302    
                           A  2303    .BEGFUNC "SD_init",309,"_SD_init"
                           A  2304    
                           A  2305    .LINE 309
                           A  2306    
                           A  2307    .DEFINE "cmdAttempts"
                           A  2308    
                           A  2309    .CLASS 65
                           A  2310    
                           A  2311    .VALUE -1
                           A  2312    
                           A  2313    .TYPE 12
                           A  2314    
                           A  2315    .ENDEF
                           A  2316    
                           A  2317    .DEFINE "res"
                           A  2318    
                           A  2319    .CLASS 65
                           A  2320    
                           A  2321    .VALUE -6
                           A  2322    
                           A  2323    .DIM 5
                           A  2324    
                           A  2325    .TYPE 108
                           A  2326    
                           A  2327    .ENDEF
                           A  2328    
000682 DDE5                A  2329    	PUSH	IX
000684 DD210000 00         A  2330    	LD	IX,0
000689 DD39                A  2331    	ADD	IX,SP
00068B C5                  A  2332    	PUSH	BC
00068C C5                  A  2333    	PUSH	BC
                           A  2334    ;  310		BYTE res[5], cmdAttempts = 0;
                           A  2335    .LINE 310
                           A  2336    
00068D DD36FF00            A  2337    	LD	(IX+%FFFFFFFF),%0
                           A  2338    ;  311	
                           A  2339    ;  312		init_timer0(10, 16, 0x00);  // 10ms
                           A  2340    .LINE 312
                           A  2341    
000691 01000000            A  2342    	LD	BC,0
000695 C5                  A  2343    	PUSH	BC
000696 01100000            A  2344    	LD	BC,16
00069A C5                  A  2345    	PUSH	BC
00069B 010A0000            A  2346    	LD	BC,10
00069F C5                  A  2347    	PUSH	BC
0006A0 CD 00 00 00         A  2348    	CALL	_init_timer0
0006A4 C1                  A  2349    	POP	BC
0006A5 C1                  A  2350    	POP	BC
0006A6 C1                  A  2351    	POP	BC
                           A  2352    ;  313	
                           A  2353    ;  314		SD_powerUpSeq();
                           A  2354    .LINE 314
                           A  2355    
0006A7 CD ED 02 00         A  2356    	CALL	_SD_powerUpSeq
                           A  2357    ;  315		//
                           A  2358    ;  316	    // Command card to idle
                           A  2359    ;  317		//
                           A  2360    ;  318	    while((res[0] = SD_goIdleState()) !
                           A  2361    .LINE 318
                           A  2362    
0006AB 18 10               A  2363    	JR	L_73
0006AD                     A  2364    L_74:
                           A  2365    ;  319	        cmdAttempts++;
                           A  2366    .LINE 319
                           A  2367    
0006AD DD34FF              A  2368    	INC	(IX+%FFFFFFFF)
                           A  2369    ;  320	        if(cmdAttempts > 10) return SD_
                           A  2370    .LINE 320
                           A  2371    
0006B0 3E0A                A  2372    	LD	A,%A
0006B2 DDBEFF              A  2373    	CP	A,(IX+%FFFFFFFF)
0006B5 30 06               A  2374    	JR	NC,L_73
0006B7 3E01                A  2375    	LD	A,%1
0006B9 C3 5B 07 00         A  2376    	JR	L_90
                           A  2377    ;  321	    }
0006BD                     A  2378    L_73:
                           A  2379    .LINE 321
                           A  2380    
0006BD CD 10 01 00         A  2381    	CALL	_SD_goIdleState
0006C1 DD77FA              A  2382    	LD	(IX+%FFFFFFFA),A
0006C4 B7ED62              A  2383    	UEXT	HL
0006C7 6F                  A  2384    	LD	L,A
0006C8 01010000            A  2385    	LD	BC,1
0006CC B7                  A  2386    	OR	A,A
0006CD ED42                A  2387    	SBC	HL,BC
0006CF 20 DC               A  2388    	JR	NZ,L_74
                           A  2389    ;  322		//
                           A  2390    ;  323	    // Send interface conditions
                           A  2391    ;  324		//
                           A  2392    ;  325	    SD_sendIfCond(res);
                           A  2393    .LINE 325
                           A  2394    
0006D1 ED65FA              A  2395    	PEA	IX+%FFFFFFFA
0006D4 CD 6D 01 00         A  2396    	CALL	_SD_sendIfCond
0006D8 C1                  A  2397    	POP	BC
                           A  2398    ;  326	    if(res[0] != 0x01) {
                           A  2399    .LINE 326
                           A  2400    
0006D9 DD7EFA              A  2401    	LD	A,(IX+%FFFFFFFA)
0006DC B7ED62              A  2402    	UEXT	HL
0006DF 6F                  A  2403    	LD	L,A
0006E0 01010000            A  2404    	LD	BC,1
0006E4 B7                  A  2405    	OR	A,A
0006E5 ED42                A  2406    	SBC	HL,BC
0006E7 28 04               A  2407    	JR	Z,L_78
                           A  2408    ;  327	        return SD_ERROR;
                           A  2409    .LINE 327
                           A  2410    
0006E9 3E01                A  2411    	LD	A,%1
0006EB 18 6E               A  2412    	JR	L_90
                           A  2413    ;  328	    }
0006ED                     A  2414    L_78:
                           A  2415    .LINE 328
                           A  2416    
                           A  2417    ;  329		//
                           A  2418    ;  330	    // Check echo pattern
                           A  2419    ;  331		//
                           A  2420    ;  332	    if(res[4] != 0xAA) {
                           A  2421    .LINE 332
                           A  2422    
0006ED ED22FE              A  2423    	LEA	HL,IX+%FFFFFFFE
0006F0 7E                  A  2424    	LD	A,(HL)
0006F1 B7ED62              A  2425    	UEXT	HL
0006F4 6F                  A  2426    	LD	L,A
0006F5 01AA0000            A  2427    	LD	BC,170
0006F9 B7                  A  2428    	OR	A,A
0006FA ED42                A  2429    	SBC	HL,BC
0006FC 28 04               A  2430    	JR	Z,L_79
                           A  2431    ;  333	        return SD_ERROR;
                           A  2432    .LINE 333
                           A  2433    
0006FE 3E01                A  2434    	LD	A,%1
000700 18 59               A  2435    	JR	L_90
                           A  2436    ;  334	    }
000702                     A  2437    L_79:
                           A  2438    .LINE 334
                           A  2439    
                           A  2440    ;  335		//
                           A  2441    ;  336	    // Attempt to initialize card
                           A  2442    ;  337		//
                           A  2443    ;  338	    cmdAttempts = 0;
                           A  2444    .LINE 338
                           A  2445    
000702 DD36FF00            A  2446    	LD	(IX+%FFFFFFFF),%0
                           A  2447    ;  339	    do {
000706                     A  2448    L_85:
                           A  2449    .LINE 339
                           A  2450    
                           A  2451    ;  340	        if(cmdAttempts > 100) return SD
                           A  2452    .LINE 340
                           A  2453    
000706 3E64                A  2454    	LD	A,%64
000708 DDBEFF              A  2455    	CP	A,(IX+%FFFFFFFF)
00070B 30 04               A  2456    	JR	NC,L_81
00070D 3E01                A  2457    	LD	A,%1
00070F 18 4A               A  2458    	JR	L_90
000711                     A  2459    L_81:
                           A  2460    ;  341			//
                           A  2461    ;  342	        // Send app cmd
                           A  2462    ;  343			//
                           A  2463    ;  344	        res[0] = SD_sendApp();
                           A  2464    .LINE 344
                           A  2465    
000711 CD D0 01 00         A  2466    	CALL	_SD_sendApp
000715 DD77FA              A  2467    	LD	(IX+%FFFFFFFA),A
                           A  2468    ;  345			//
                           A  2469    ;  346	        // If no error in response
                           A  2470    ;  347			//
                           A  2471    ;  348	        if(res[0] < 2) {
                           A  2472    .LINE 348
                           A  2473    
000718 B7ED62              A  2474    	UEXT	HL
00071B 6F                  A  2475    	LD	L,A
00071C 01020000            A  2476    	LD	BC,2
000720 B7                  A  2477    	OR	A,A
000721 ED42                A  2478    	SBC	HL,BC
000723 F2 2E 07 00         A  2479    	JP	P,L_83
                           A  2480    ;  349	            res[0] = SD_sendOpCond();
                           A  2481    .LINE 349
                           A  2482    
000727 CD 2D 02 00         A  2483    	CALL	_SD_sendOpCond
00072B DD77FA              A  2484    	LD	(IX+%FFFFFFFA),A
                           A  2485    ;  350	        }
00072E                     A  2486    L_83:
                           A  2487    .LINE 350
                           A  2488    
                           A  2489    ;  351			//
                           A  2490    ;  352	        // Wait
                           A  2491    ;  353			//
                           A  2492    ;  354	        wait_timer0();
                           A  2493    .LINE 354
                           A  2494    
00072E CD 00 00 00         A  2495    	CALL	_wait_timer0
                           A  2496    ;  355	        cmdAttempts++;
                           A  2497    .LINE 355
                           A  2498    
000732 DD34FF              A  2499    	INC	(IX+%FFFFFFFF)
                           A  2500    ;  356	    }
                           A  2501    ;  357	    while(res[0] != SD_READY);
                           A  2502    .LINE 357
                           A  2503    
000735 DD7EFA              A  2504    	LD	A,(IX+%FFFFFFFA)
000738 B7                  A  2505    	OR	A,A
000739 20 CB               A  2506    	JR	NZ,L_85
                           A  2507    ;  358		//
                           A  2508    ;  359	    // Read OCR
                           A  2509    ;  360		//
                           A  2510    ;  361	    SD_readOCR(res);
                           A  2511    .LINE 361
                           A  2512    
00073B ED65FA              A  2513    	PEA	IX+%FFFFFFFA
00073E CD 92 02 00         A  2514    	CALL	_SD_readOCR
000742 C1                  A  2515    	POP	BC
                           A  2516    ;  362	    //
                           A  2517    ;  363	    // Disable 10ms timer
                           A  2518    ;  364	    //
                           A  2519    ;  365	   	enable_timer0(0);
                           A  2520    .LINE 365
                           A  2521    
000743 01000000            A  2522    	LD	BC,0
000747 C5                  A  2523    	PUSH	BC
000748 CD 00 00 00         A  2524    	CALL	_enable_timer0
00074C C1                  A  2525    	POP	BC
                           A  2526    ;  366		//
                           A  2527    ;  367	    // Check card is ready
                           A  2528    ;  368		//
                           A  2529    ;  369	    if(!(res[1] & 0x80)) return SD_ERRO
                           A  2530    .LINE 369
                           A  2531    
00074D ED22FA              A  2532    	LEA	HL,IX+%FFFFFFFA
000750 23                  A  2533    	INC	HL
000751 7E                  A  2534    	LD	A,(HL)
000752 E680                A  2535    	AND	A,%80
000754 20 04               A  2536    	JR	NZ,L_89
000756 3E01                A  2537    	LD	A,%1
000758 18 01               A  2538    	JR	L_90
00075A                     A  2539    L_89:
                           A  2540    ;  370	
                           A  2541    ;  371	    return SD_SUCCESS;	
                           A  2542    .LINE 371
                           A  2543    
00075A AF                  A  2544    	XOR	A,A
                           A  2545    ;  372	}
00075B                     A  2546    L_90:
                           A  2547    .LINE 372
                           A  2548    
00075B DDF9                A  2549    	LD	SP,IX
00075D DDE1                A  2550    	POP	IX
00075F C9                  A  2551    	RET	
                           A  2552    
                           A  2553    
                           A  2554    ;**************************** _SD_init ********
                           A  2555    ;Name                         Addr/Register   S
                           A  2556    ;_enable_timer0                      IMPORT  --
                           A  2557    ;_SD_readOCR                         IMPORT  --
                           A  2558    ;_wait_timer0                        IMPORT  --
                           A  2559    ;_SD_sendOpCond                      IMPORT  --
                           A  2560    ;_SD_sendApp                         IMPORT  --
                           A  2561    ;_SD_sendIfCond                      IMPORT  --
                           A  2562    ;_SD_goIdleState                     IMPORT  --
                           A  2563    ;_SD_powerUpSeq                      IMPORT  --
                           A  2564    ;_init_timer0                        IMPORT  --
                           A  2565    ;res                                   IX-6    
                           A  2566    ;cmdAttempts                           IX-1    
                           A  2567    
                           A  2568    
                           A  2569    ; Stack Frame Size: 12 (bytes)
                           A  2570    ;       Spill Code: 0 (instruction)
                           A  2571    
                           A  2572    
                           A  2573    .ENDFUNC "SD_init",372,"_SD_init"
                           A  2574    	XREF _wait_timer0:ROM
                           A  2575    	XREF _enable_timer0:ROM
                           A  2576    	XREF _init_timer0:ROM
                           A  2577    	XREF _SD_CS_disable:ROM
                           A  2578    	XREF _SD_CS_enable:ROM
                           A  2579    	XREF _spi_transfer:ROM
                           A  2580    	XREF __stoiu:ROM
                           A  2581    	XREF __ladd_b:ROM
                           A  2582    	XDEF _SD_init
                           A  2583    	XDEF _SD_readSingleBlock
                           A  2584    	XDEF _SD_writeSingleBlock
                           A  2585    	XDEF _SD_writeBlocks
                           A  2586    	XDEF _SD_readBlocks
                           A  2587    	XDEF _SD_powerUpSeq
                           A  2588    	XDEF _SD_readOCR
                           A  2589    	XDEF _SD_sendOpCond
                           A  2590    	XDEF _SD_sendApp
                           A  2591    	XDEF _SD_sendIfCond
                           A  2592    	XDEF _SD_goIdleState
                           A  2593    	XDEF _SD_readRes7
                           A  2594    	XDEF _SD_readRes1
                           A  2595    	XDEF _SD_command
                           A  2596    	END


Errors: 0
Warnings: 0
Lines Assembled: 2597
