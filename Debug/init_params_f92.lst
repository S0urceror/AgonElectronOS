Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     07:37:07     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	AGON Electron OS - C Startup Code
                           A     3    ; Author:	Copyright (C) 2005 by ZiLOG, Inc.  
                           A     4    ; Modified:	Dean Belfield
                           A     5    
                           B     0    			INCLUDE	"../src/macros.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Useful Macros
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/09/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 08/08/2022:	Added GET_GPIO
                           B     9    ; 09/09/2022:	Commented
                           B    10    
                           B    11    ; Add A to HL (unsigned)
                           B    12    ;
                           B    13    ADD8U_HL:		MACRO 
                           B    14    			ADD	A, L 
                           B    15    			LD	L, A 
                           B    16    			ADC	A, H
                           B    17    			SUB	L
                           B    18    			LD	H, A 
                           B    19    			ENDMACRO 
                           B    20    
                           B    21    ; Set a GPIO register
                           B    22    ; Parameters:
                           B    23    ; - REG: Register to set
                           B    24    ; - VAL: Bit(s) to set (1: set, 0: ignore)
                           B    25    ;
                           B    26    SET_GPIO:		MACRO	REG, VAL
                           B    27    			IN0	A,(REG)
                           B    28    			OR	VAL
                           B    29    			OUT0	(REG),A
                           B    30    			ENDMACRO
                           B    31    
                           B    32    ; Reset a GPIO register
                           B    33    ; Parameters:
                           B    34    ; - REG: Register to set
                           B    35    ; - VAL: Bit(s) to reset (1: reset, 0: ignore)
                           B    36    ;	
                           B    37    RES_GPIO:		MACRO	REG, VAL
                           B    38    			PUSH	BC
                           B    39    			LD	A, VAL
                           B    40    			CPL
                           B    41    			LD	C, A
                           B    42    			IN0	A,(REG)
                           B    43    			AND	C
                           B    44    			OUT0	(REG),A
                           B    45    			POP	BC
                           B    46    			ENDMACRO
                           B    47    
                           B    48    ; Get a GPIO register
                           B    49    ; Parameters:
                           B    50    ; - REG: Register to test
                           B    51    ; - VAL: Bit(s) to test
                           B    52    ;	
                           B    53    GET_GPIO:		MACRO	REG, VAL
                           B    54    			IN0	A,(REG)
                           B    55    			TST	A, VAL
                           B    56    			ENDMACRO
                           B    57    				
                           B     0    			INCLUDE	"../src/equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B   102    
       00000083            B   103    TMR1_CTL		EQU	83h
       00000084            B   104    TMR1_DR_L               EQU     84h
       00000084            B   105    TMR1_RR_L               EQU     84h
       00000085            B   106    TMR1_DR_H               EQU     85h
       00000085            B   107    TMR1_RR_H               EQU     85h
                           B   108    
                           B   109    ; UART constants
       00000050            B   110    UART0_SEND_BUFFER_SIZE  EQU     80
       00000050            B   111    UART0_RECV_BUFFER_SIZE  EQU     80
       00000002            B   112    UART_IER_TRANSMITINT    EQU     00000010b
                           A     8    
                           B     0    			INCLUDE "ez80f92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
                           B    11    TMR0_CTL:	.equ  %80
                           B    12    TMR0_DR_L:	.equ  %81
                           B    13    TMR0_RR_L:	.equ  %81
                           B    14    TMR0_DR_H:	.equ  %82
                           B    15    TMR0_RR_H:	.equ  %82
                           B    16    TMR1_CTL:	.equ  %83
                           B    17    TMR1_DR_L:	.equ  %84
                           B    18    TMR1_RR_L:	.equ  %84
                           B    19    TMR1_DR_H:	.equ  %85
                           B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
                           B    51    PB_DR:		.equ %9A
                           B    52    PB_DDR:		.equ %9B
                           B    53    PB_ALT1:	.equ %9C
                           B    54    PB_ALT2:	.equ %9D
                           B    55    PC_DR:		.equ %9E
                           B    56    PC_DDR:		.equ %9F
                           B    57    PC_ALT1:	.equ %A0
                           B    58    PC_ALT2:	.equ %A1
                           B    59    PD_DR:		.equ %A2
                           B    60    PD_DDR:		.equ %A3
                           B    61    PD_ALT1:	.equ %A4
                           B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A    10    
                           A    11    			XREF	__stack
                           A    12    			XREF	__init_default_vectors
                           A    13    			XREF	__c_startup
                           A    14    			XREF	__cstartup
                           A    15    			XREF	_main
                           A    16    			XREF	__CS0_LBR_INIT_PARAM
                           A    17    			XREF	__CS0_UBR_INIT_PARAM
                           A    18    			XREF	__CS0_CTL_INIT_PARAM
                           A    19    			XREF	__CS1_LBR_INIT_PARAM
                           A    20    			XREF	__CS1_UBR_INIT_PARAM
                           A    21    			XREF	__CS1_CTL_INIT_PARAM
                           A    22    			XREF	__CS2_LBR_INIT_PARAM
                           A    23    			XREF	__CS2_UBR_INIT_PARAM
                           A    24    			XREF	__CS2_CTL_INIT_PARAM
                           A    25    			XREF	__CS3_LBR_INIT_PARAM
                           A    26    			XREF	__CS3_UBR_INIT_PARAM
                           A    27    			XREF	__CS3_CTL_INIT_PARAM
                           A    28    			XREF	__CS0_BMC_INIT_PARAM
                           A    29    			XREF	__CS1_BMC_INIT_PARAM
                           A    30    			XREF	__CS2_BMC_INIT_PARAM
                           A    31    			XREF	__CS3_BMC_INIT_PARAM
                           A    32    			XREF	__FLASH_CTL_INIT_PARAM
                           A    33    			XREF	__FLASH_ADDR_U_INIT_PARAM
                           A    34    			XREF	__RAM_CTL_INIT_PARAM
                           A    35    			XREF	__RAM_ADDR_U_INIT_PARAM
                           A    36    
                           A    37    			XDEF	__init
                           A    38    			XDEF	_abort
                           A    39    			XDEF	__exit
                           A    40    			XDEF	_exit
                           A    41    			
                           A    42    			XREF	__exec16
                           A    43    			XREF	_exec16
                           A    44    			
                           A    45    			XREF	GPIOB_SETMODE
                           A    46    			
                           A    47    			XREF 	_coldBoot		
                           A    48    			XREF 	_timer2
                           A    49    			XREF 	_callSM
                           A    50    			XREF 	_tmpLHU			
                           A    51    ;			
                           A    52    ; Startup code
                           A    53    ;
                           A    54    			DEFINE .STARTUP, SPACE = ROM
                           A    55    			SEGMENT .STARTUP
                           A    56    			
                           A    57    			.ASSUME ADL = 1
                           A    58    
                           A    59    ; Minimum default initialization
                           A    60    ;
                           A    61    ; Disable internal peripheral interrupt sources
                           A    62    ; -- this will help during a RAM debug session 
                           A    63    ;
000000 3EFF                A    64    __init:			ld a, %FF
000002 ED399B              A    65    			out0 (PB_DDR), a         ; GPIO
000005 ED399F              A    66    			out0 (PC_DDR), a         ;
000008 ED39A3              A    67    			out0 (PD_DDR), a         ;
00000B 3E00                A    68    			ld a, %00
00000D ED399C              A    69    			out0 (PB_ALT1), a        ;
000010 ED39A0              A    70    			out0 (PC_ALT1), a        ;
000013 ED39A4              A    71    			out0 (PD_ALT1), a        ;
000016 ED399D              A    72    			out0 (PB_ALT2), a        ;
000019 ED39A1              A    73    			out0 (PC_ALT2), a        ;
00001C ED39A5              A    74    			out0 (PD_ALT2), a        ;
00001F ED3980              A    75    			out0 (TMR0_CTL), a       ; timers
000022 ED3983              A    76    			out0 (TMR1_CTL), a       ;
000025 ED3986              A    77    			out0 (TMR2_CTL), a       ;
000028 ED3989              A    78    			out0 (TMR3_CTL), a       ;
00002B ED398C              A    79    			out0 (TMR4_CTL), a       ;
00002E ED398F              A    80    			out0 (TMR5_CTL), a       ;
000031 ED39C1              A    81    			out0 (UART0_IER), a      ; UARTs
000034 ED39D1              A    82    			out0 (UART1_IER), a      ;
000037 ED39CB              A    83    			out0 (I2C_CTL), a        ; I2C
00003A ED39FB              A    84    			out0 (FLASH_IRQ), a      ; Flash
00003D 3E04                A    85    			ld a, %04
00003F ED39BA              A    86    			out0 (SPI_CTL), a        ; SPI
000042 ED38ED              A    87    			in0 a, (RTC_CTRL)        ; RTC, Wri
000045 E6BE                A    88    			and a, %BE               ;      res
000047 ED39ED              A    89    			out0 (RTC_CTRL), a       ;      the
                           A    90    ;
                           A    91    ; Configure external memory/io
                           A    92    ;
00004A 3E 00               A    93    			ld a, __CS0_LBR_INIT_PARAM
00004C ED39A8              A    94    			out0 (CS0_LBR), a
00004F 3E 00               A    95    			ld a, __CS0_UBR_INIT_PARAM
000051 ED39A9              A    96    			out0 (CS0_UBR), a
000054 3E 00               A    97    			ld a, __CS0_BMC_INIT_PARAM
000056 ED39F0              A    98    			out0 (CS0_BMC), a
000059 3E 00               A    99    			ld a, __CS0_CTL_INIT_PARAM
00005B ED39AA              A   100    			out0 (CS0_CTL), a
                           A   101    
00005E 3E 00               A   102    			ld a, __CS1_LBR_INIT_PARAM
000060 ED39AB              A   103    			out0 (CS1_LBR), a
000063 3E 00               A   104    			ld a, __CS1_UBR_INIT_PARAM
000065 ED39AC              A   105    			out0 (CS1_UBR), a
000068 3E 00               A   106    			ld a, __CS1_BMC_INIT_PARAM
00006A ED39F1              A   107    			out0 (CS1_BMC), a
00006D 3E 00               A   108    			ld a, __CS1_CTL_INIT_PARAM
00006F ED39AD              A   109    			out0 (CS1_CTL), a
                           A   110    
000072 3E 00               A   111    			ld a, __CS2_LBR_INIT_PARAM
000074 ED39AE              A   112    			out0 (CS2_LBR), a
000077 3E 00               A   113    			ld a, __CS2_UBR_INIT_PARAM
000079 ED39AF              A   114    			out0 (CS2_UBR), a
00007C 3E 00               A   115    			ld a, __CS2_BMC_INIT_PARAM
00007E ED39F2              A   116    			out0 (CS2_BMC), a
000081 3E 00               A   117    			ld a, __CS2_CTL_INIT_PARAM
000083 ED39B0              A   118    			out0 (CS2_CTL), a
                           A   119    
000086 3E 00               A   120    			ld a, __CS3_LBR_INIT_PARAM
000088 ED39B1              A   121    			out0 (CS3_LBR), a
00008B 3E 00               A   122    			ld a, __CS3_UBR_INIT_PARAM
00008D ED39B2              A   123    			out0 (CS3_UBR), a
000090 3E 00               A   124    			ld a, __CS3_BMC_INIT_PARAM
000092 ED39F3              A   125    			out0 (CS3_BMC), a
000095 3E 00               A   126    			ld a, __CS3_CTL_INIT_PARAM
000097 ED39B3              A   127    			out0 (CS3_CTL), a
                           A   128    ;   
                           A   129    ; Enable internal memory
                           A   130    ;
00009A 3E 00               A   131    			ld a, __FLASH_ADDR_U_INIT_PARAM
00009C ED39F7              A   132    			out0 (FLASH_ADDR_U), a
00009F 3E 00               A   133    			ld a, __FLASH_CTL_INIT_PARAM
0000A1 ED39F8              A   134    			out0 (FLASH_CTRL), a
                           A   135    
0000A4 3E 00               A   136    			ld a, __RAM_ADDR_U_INIT_PARAM
0000A6 ED39B5              A   137    			out0 (RAM_ADDR_U), a
0000A9 3E 00               A   138    			ld a, __RAM_CTL_INIT_PARAM
0000AB ED39B4              A   139    			out0 (RAM_CTL), a
                           A   140    ;
                           A   141    ; Setup Stack Pointer
                           A   142    ;
0000AE 31 00 00 00         A   143    			ld sp, __stack
                           A   144    ;
                           A   145    ; Detect warm or cold boot
                           A   146    ;
0000B2 ED57                A   147    			ld a, i			; Register I should
0000B4 B7                  A   148    			or a, a		
0000B5 3E01                A   149    			ld a, 1			; Set to 1 if cold 
0000B7 28 01               A   150    			jr z, $F
0000B9 3D                  A   151    			dec a			; Otherwise set to 
0000BA F5                  A   152    $$:			push af 		; Stack AF, will st
                           A   153    ;
                           A   154    ; Initialize the interrupt vector table
                           A   155    ;
0000BB CD 00 00 00         A   156    			call __init_default_vectors
                           A   157    ;
                           A   158    ; Further hardware/firmware initialisation
                           A   159    ;
0000BF 3E09                A   160    			LD	A, GPIOMODE_INTRE
0000C1 0602                A   161    			LD	B, 2
0000C3 CD 00 00 00         A   162    			CALL	GPIOB_SETMODE
                           A   163    ;
                           A   164    ; Start application
                           A   165    ;
0000C7 3E 00               A   166    			ld a, __cstartup
0000C9 B7                  A   167    			or a, a
0000CA 28 09               A   168    			jr z, __no_cstartup
0000CC CD 00 00 00         A   169    			call __c_startup
                           A   170    
0000D0 F1                  A   171    			pop af			; Pop the coldboot 
0000D1 32 00 00 00         A   172    			ld (_coldBoot), a	; And store
                           A   173    
                           A   174    
0000D5 21000000            A   175    __no_cstartup:		ld hl, 0                ; h
0000D9 E5                  A   176    			push hl                 ; argv[0] =
0000DA DD210000 00         A   177    			ld ix, 0
0000DF DD39                A   178    			add ix, sp              ; ix = &arg
0000E1 DDE5                A   179    			push ix                 ; &argv[0]
0000E3 E1                  A   180    			pop hl
0000E4 11000000            A   181    			ld de, 0                ; argc = 0
0000E8 CD 00 00 00         A   182    			call _main              ; int main(
0000EC D1                  A   183    			pop de					; clean the
                           A   184    
0000ED                     A   185    __exit:
0000ED                     A   186    _exit:
0000ED 18 FE               A   187    _abort:			jr $                	; If we
                           A   188    
                           A   189    
                           A   190    ; Define global constants
                           A   191    ;
                           A   192    			XREF _SYS_CLK_FREQ
                           A   193    			XDEF _SysClkFreq
                           A   194    
0000EF 00000000            A   195    _SysClkFreq:		DL _SYS_CLK_FREQ
                           A   196    			
                           A   197    			END


Errors: 0
Warnings: 0
Lines Assembled: 546
