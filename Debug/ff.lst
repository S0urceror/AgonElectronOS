Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     07:37:05     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src_fatfs\ff.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",566
                           A     9    .DEFINE "fs_type"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "pdrv"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "n_fats"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "wflag"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "fsi_flag"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "id"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 13
                           A    38    .ENDEF
                           A    39    .DEFINE "n_rootdir"
                           A    40    .VALUE 7
                           A    41    .CLASS 8
                           A    42    .TYPE 13
                           A    43    .ENDEF
                           A    44    .DEFINE "csize"
                           A    45    .VALUE 9
                           A    46    .CLASS 8
                           A    47    .TYPE 13
                           A    48    .ENDEF
                           A    49    .DEFINE "lfnbuf"
                           A    50    .VALUE 11
                           A    51    .CLASS 8
                           A    52    .TYPE 45
                           A    53    .ENDEF
                           A    54    .DEFINE "last_clst"
                           A    55    .VALUE 14
                           A    56    .CLASS 8
                           A    57    .TYPE 15
                           A    58    .ENDEF
                           A    59    .DEFINE "free_clst"
                           A    60    .VALUE 18
                           A    61    .CLASS 8
                           A    62    .TYPE 15
                           A    63    .ENDEF
                           A    64    .DEFINE "cdir"
                           A    65    .VALUE 22
                           A    66    .CLASS 8
                           A    67    .TYPE 15
                           A    68    .ENDEF
                           A    69    .DEFINE "n_fatent"
                           A    70    .VALUE 26
                           A    71    .CLASS 8
                           A    72    .TYPE 15
                           A    73    .ENDEF
                           A    74    .DEFINE "fsize"
                           A    75    .VALUE 30
                           A    76    .CLASS 8
                           A    77    .TYPE 15
                           A    78    .ENDEF
                           A    79    .DEFINE "volbase"
                           A    80    .VALUE 34
                           A    81    .CLASS 8
                           A    82    .TYPE 15
                           A    83    .ENDEF
                           A    84    .DEFINE "fatbase"
                           A    85    .VALUE 38
                           A    86    .CLASS 8
                           A    87    .TYPE 15
                           A    88    .ENDEF
                           A    89    .DEFINE "dirbase"
                           A    90    .VALUE 42
                           A    91    .CLASS 8
                           A    92    .TYPE 15
                           A    93    .ENDEF
                           A    94    .DEFINE "database"
                           A    95    .VALUE 46
                           A    96    .CLASS 8
                           A    97    .TYPE 15
                           A    98    .ENDEF
                           A    99    .DEFINE "winsect"
                           A   100    .VALUE 50
                           A   101    .CLASS 8
                           A   102    .TYPE 15
                           A   103    .ENDEF
                           A   104    .DEFINE "win"
                           A   105    .VALUE 54
                           A   106    .CLASS 8
                           A   107    .DIM 512
                           A   108    .TYPE 108
                           A   109    .ENDEF
                           A   110    .ENDREC "NONAME0"
                           A   111    .BEGREC "NONAME1",15
                           A   112    .DEFINE "fs"
                           A   113    .VALUE 0
                           A   114    .CLASS 8
                           A   115    .TAG "NONAME0"
                           A   116    .TYPE 40
                           A   117    .ENDEF
                           A   118    .DEFINE "id"
                           A   119    .VALUE 3
                           A   120    .CLASS 8
                           A   121    .TYPE 13
                           A   122    .ENDEF
                           A   123    .DEFINE "attr"
                           A   124    .VALUE 5
                           A   125    .CLASS 8
                           A   126    .TYPE 12
                           A   127    .ENDEF
                           A   128    .DEFINE "stat"
                           A   129    .VALUE 6
                           A   130    .CLASS 8
                           A   131    .TYPE 12
                           A   132    .ENDEF
                           A   133    .DEFINE "sclust"
                           A   134    .VALUE 7
                           A   135    .CLASS 8
                           A   136    .TYPE 15
                           A   137    .ENDEF
                           A   138    .DEFINE "objsize"
                           A   139    .VALUE 11
                           A   140    .CLASS 8
                           A   141    .TYPE 15
                           A   142    .ENDEF
                           A   143    .ENDREC "NONAME1"
                           A   144    .BEGREC "NONAME2",36
                           A   145    .DEFINE "obj"
                           A   146    .VALUE 0
                           A   147    .CLASS 8
                           A   148    .TAG "NONAME1"
                           A   149    .TYPE 8
                           A   150    .ENDEF
                           A   151    .DEFINE "flag"
                           A   152    .VALUE 15
                           A   153    .CLASS 8
                           A   154    .TYPE 12
                           A   155    .ENDEF
                           A   156    .DEFINE "err"
                           A   157    .VALUE 16
                           A   158    .CLASS 8
                           A   159    .TYPE 12
                           A   160    .ENDEF
                           A   161    .DEFINE "fptr"
                           A   162    .VALUE 17
                           A   163    .CLASS 8
                           A   164    .TYPE 15
                           A   165    .ENDEF
                           A   166    .DEFINE "clust"
                           A   167    .VALUE 21
                           A   168    .CLASS 8
                           A   169    .TYPE 15
                           A   170    .ENDEF
                           A   171    .DEFINE "sect"
                           A   172    .VALUE 25
                           A   173    .CLASS 8
                           A   174    .TYPE 15
                           A   175    .ENDEF
                           A   176    .DEFINE "dir_sect"
                           A   177    .VALUE 29
                           A   178    .CLASS 8
                           A   179    .TYPE 15
                           A   180    .ENDEF
                           A   181    .DEFINE "dir_ptr"
                           A   182    .VALUE 33
                           A   183    .CLASS 8
                           A   184    .TYPE 44
                           A   185    .ENDEF
                           A   186    .ENDREC "NONAME2"
                           A   187    .BEGREC "NONAME3",46
                           A   188    .DEFINE "obj"
                           A   189    .VALUE 0
                           A   190    .CLASS 8
                           A   191    .TAG "NONAME1"
                           A   192    .TYPE 8
                           A   193    .ENDEF
                           A   194    .DEFINE "dptr"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 15
                           A   198    .ENDEF
                           A   199    .DEFINE "clust"
                           A   200    .VALUE 19
                           A   201    .CLASS 8
                           A   202    .TYPE 15
                           A   203    .ENDEF
                           A   204    .DEFINE "sect"
                           A   205    .VALUE 23
                           A   206    .CLASS 8
                           A   207    .TYPE 15
                           A   208    .ENDEF
                           A   209    .DEFINE "dir"
                           A   210    .VALUE 27
                           A   211    .CLASS 8
                           A   212    .TYPE 44
                           A   213    .ENDEF
                           A   214    .DEFINE "fn"
                           A   215    .VALUE 30
                           A   216    .CLASS 8
                           A   217    .DIM 12
                           A   218    .TYPE 108
                           A   219    .ENDEF
                           A   220    .DEFINE "blk_ofs"
                           A   221    .VALUE 42
                           A   222    .CLASS 8
                           A   223    .TYPE 15
                           A   224    .ENDEF
                           A   225    .ENDREC "NONAME3"
                           A   226    .BEGREC "NONAME4",278
                           A   227    .DEFINE "fsize"
                           A   228    .VALUE 0
                           A   229    .CLASS 8
                           A   230    .TYPE 15
                           A   231    .ENDEF
                           A   232    .DEFINE "fdate"
                           A   233    .VALUE 4
                           A   234    .CLASS 8
                           A   235    .TYPE 13
                           A   236    .ENDEF
                           A   237    .DEFINE "ftime"
                           A   238    .VALUE 6
                           A   239    .CLASS 8
                           A   240    .TYPE 13
                           A   241    .ENDEF
                           A   242    .DEFINE "fattrib"
                           A   243    .VALUE 8
                           A   244    .CLASS 8
                           A   245    .TYPE 12
                           A   246    .ENDEF
                           A   247    .DEFINE "altname"
                           A   248    .VALUE 9
                           A   249    .CLASS 8
                           A   250    .DIM 13
                           A   251    .TYPE 98
                           A   252    .ENDEF
                           A   253    .DEFINE "fname"
                           A   254    .VALUE 22
                           A   255    .CLASS 8
                           A   256    .DIM 256
                           A   257    .TYPE 98
                           A   258    .ENDEF
                           A   259    .ENDREC "NONAME4"
                           A   260    .BEGREC "NONAME5",12
                           A   261    .DEFINE "fmt"
                           A   262    .VALUE 0
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "n_fat"
                           A   267    .VALUE 1
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "align"
                           A   272    .VALUE 2
                           A   273    .CLASS 8
                           A   274    .TYPE 14
                           A   275    .ENDEF
                           A   276    .DEFINE "n_root"
                           A   277    .VALUE 5
                           A   278    .CLASS 8
                           A   279    .TYPE 14
                           A   280    .ENDEF
                           A   281    .DEFINE "au_size"
                           A   282    .VALUE 8
                           A   283    .CLASS 8
                           A   284    .TYPE 15
                           A   285    .ENDEF
                           A   286    .ENDREC "NONAME5"
                           A   287    	SEGMENT BSS
000000                     A   288    _FatFs:
000000                     A   289    	DS	3
                           A   290    .DEFINE "FatFs"
                           A   291    .ALIAS "_FatFs"
                           A   292    .CLASS 83
                           A   293    .VALUE _FatFs
                           A   294    .DIM 1
                           A   295    .TAG "NONAME0"
                           A   296    .TYPE 360
                           A   297    .ENDEF
000003                     A   298    _Fsid:
000003                     A   299    	DS	2*1
                           A   300    .DEFINE "Fsid"
                           A   301    .ALIAS "_Fsid"
                           A   302    .CLASS 83
                           A   303    .VALUE _Fsid
                           A   304    .TYPE 13
                           A   305    .ENDEF
000005                     A   306    _CurrVol:
000005                     A   307    	DS	1
                           A   308    .DEFINE "CurrVol"
                           A   309    .ALIAS "_CurrVol"
                           A   310    .CLASS 83
                           A   311    .VALUE _CurrVol
                           A   312    .TYPE 12
                           A   313    .ENDEF
                           A   314    	SEGMENT TEXT
000000                     A   315    _LfnOfs:
000000 01                  A   316    	DB	1
000001 03                  A   317    	DB	3
000002 05                  A   318    	DB	5
000003 07                  A   319    	DB	7
000004 09                  A   320    	DB	9
000005 0E                  A   321    	DB	14
000006 10                  A   322    	DB	16
000007 12                  A   323    	DB	18
000008 14                  A   324    	DB	20
000009 16                  A   325    	DB	22
00000A 18                  A   326    	DB	24
00000B 1C                  A   327    	DB	28
00000C 1E                  A   328    	DB	30
                           A   329    .DEFINE "LfnOfs"
                           A   330    .ALIAS "_LfnOfs"
                           A   331    .CLASS 84
                           A   332    .VALUE _LfnOfs
                           A   333    .DIM 13
                           A   334    .TYPE 108
                           A   335    .ENDEF
00000D                     A   336    _ExCvt:
00000D 80                  A   337    	DB	128
00000E 9A                  A   338    	DB	154
00000F 45                  A   339    	DB	69
000010 41                  A   340    	DB	65
000011 8E                  A   341    	DB	142
000012 41                  A   342    	DB	65
000013 8F                  A   343    	DB	143
000014 80                  A   344    	DB	128
000015 45                  A   345    	DB	69
000016 45                  A   346    	DB	69
000017 45                  A   347    	DB	69
000018 49                  A   348    	DB	73
000019 49                  A   349    	DB	73
00001A 49                  A   350    	DB	73
00001B 8E                  A   351    	DB	142
00001C 8F                  A   352    	DB	143
00001D 90                  A   353    	DB	144
00001E 92                  A   354    	DB	146
00001F 92                  A   355    	DB	146
000020 4F                  A   356    	DB	79
000021 99                  A   357    	DB	153
000022 4F                  A   358    	DB	79
000023 55                  A   359    	DB	85
000024 55                  A   360    	DB	85
000025 59                  A   361    	DB	89
000026 99                  A   362    	DB	153
000027 9A                  A   363    	DB	154
000028 9B                  A   364    	DB	155
000029 9C                  A   365    	DB	156
00002A 9D                  A   366    	DB	157
00002B 9E                  A   367    	DB	158
00002C 9F                  A   368    	DB	159
00002D 41                  A   369    	DB	65
00002E 49                  A   370    	DB	73
00002F 4F                  A   371    	DB	79
000030 55                  A   372    	DB	85
000031 A5                  A   373    	DB	165
000032 A5                  A   374    	DB	165
000033 A6                  A   375    	DB	166
000034 A7                  A   376    	DB	167
000035 A8                  A   377    	DB	168
000036 A9                  A   378    	DB	169
000037 AA                  A   379    	DB	170
000038 AB                  A   380    	DB	171
000039 AC                  A   381    	DB	172
00003A AD                  A   382    	DB	173
00003B AE                  A   383    	DB	174
00003C AF                  A   384    	DB	175
00003D B0                  A   385    	DB	176
00003E B1                  A   386    	DB	177
00003F B2                  A   387    	DB	178
000040 B3                  A   388    	DB	179
000041 B4                  A   389    	DB	180
000042 B5                  A   390    	DB	181
000043 B6                  A   391    	DB	182
000044 B7                  A   392    	DB	183
000045 B8                  A   393    	DB	184
000046 B9                  A   394    	DB	185
000047 BA                  A   395    	DB	186
000048 BB                  A   396    	DB	187
000049 BC                  A   397    	DB	188
00004A BD                  A   398    	DB	189
00004B BE                  A   399    	DB	190
00004C BF                  A   400    	DB	191
00004D C0                  A   401    	DB	192
00004E C1                  A   402    	DB	193
00004F C2                  A   403    	DB	194
000050 C3                  A   404    	DB	195
000051 C4                  A   405    	DB	196
000052 C5                  A   406    	DB	197
000053 C6                  A   407    	DB	198
000054 C7                  A   408    	DB	199
000055 C8                  A   409    	DB	200
000056 C9                  A   410    	DB	201
000057 CA                  A   411    	DB	202
000058 CB                  A   412    	DB	203
000059 CC                  A   413    	DB	204
00005A CD                  A   414    	DB	205
00005B CE                  A   415    	DB	206
00005C CF                  A   416    	DB	207
00005D D0                  A   417    	DB	208
00005E D1                  A   418    	DB	209
00005F D2                  A   419    	DB	210
000060 D3                  A   420    	DB	211
000061 D4                  A   421    	DB	212
000062 D5                  A   422    	DB	213
000063 D6                  A   423    	DB	214
000064 D7                  A   424    	DB	215
000065 D8                  A   425    	DB	216
000066 D9                  A   426    	DB	217
000067 DA                  A   427    	DB	218
000068 DB                  A   428    	DB	219
000069 DC                  A   429    	DB	220
00006A DD                  A   430    	DB	221
00006B DE                  A   431    	DB	222
00006C DF                  A   432    	DB	223
00006D E0                  A   433    	DB	224
00006E E1                  A   434    	DB	225
00006F E2                  A   435    	DB	226
000070 E3                  A   436    	DB	227
000071 E4                  A   437    	DB	228
000072 E5                  A   438    	DB	229
000073 E6                  A   439    	DB	230
000074 E7                  A   440    	DB	231
000075 E8                  A   441    	DB	232
000076 E9                  A   442    	DB	233
000077 EA                  A   443    	DB	234
000078 EB                  A   444    	DB	235
000079 EC                  A   445    	DB	236
00007A ED                  A   446    	DB	237
00007B EE                  A   447    	DB	238
00007C EF                  A   448    	DB	239
00007D F0                  A   449    	DB	240
00007E F1                  A   450    	DB	241
00007F F2                  A   451    	DB	242
000080 F3                  A   452    	DB	243
000081 F4                  A   453    	DB	244
000082 F5                  A   454    	DB	245
000083 F6                  A   455    	DB	246
000084 F7                  A   456    	DB	247
000085 F8                  A   457    	DB	248
000086 F9                  A   458    	DB	249
000087 FA                  A   459    	DB	250
000088 FB                  A   460    	DB	251
000089 FC                  A   461    	DB	252
00008A FD                  A   462    	DB	253
00008B FE                  A   463    	DB	254
00008C FF                  A   464    	DB	255
                           A   465    .DEFINE "ExCvt"
                           A   466    .ALIAS "_ExCvt"
                           A   467    .CLASS 84
                           A   468    .VALUE _ExCvt
                           A   469    .DIM 128
                           A   470    .TYPE 108
                           A   471    .ENDEF
                           A   472    ;    1	/*-------------------------------------
                           A   473    ;    2	/  FatFs - Generic FAT Filesystem Modul
                           A   474    ;    3	/--------------------------------------
                           A   475    ;    4	/
                           A   476    ;    5	/ Copyright (C) 2021, ChaN, all right r
                           A   477    ;    6	/
                           A   478    ;    7	/ FatFs module is an open source softwa
                           A   479    ;    8	/ source and binary forms, with or with
                           A   480    ;    9	/ that the following condition is met:
                           A   481    ;   10	/
                           A   482    ;   11	/ 1. Redistributions of source code mus
                           A   483    ;   12	/    this condition and the following d
                           A   484    ;   13	/
                           A   485    ;   14	/ This software is provided by the copy
                           A   486    ;   15	/ and any warranties related to this so
                           A   487    ;   16	/ The copyright owner or contributors b
                           A   488    ;   17	/ by use of this software.
                           A   489    ;   18	/
                           A   490    ;   19	/--------------------------------------
                           A   491    ;   20	
                           A   492    ;   21	#include <string.h>
                           A   493    ;   22	
                           A   494    ;   23	#include "ff.h"			/* Declarations
                           A   495    ;   24	#include "diskio.h"		/* Declarations
                           A   496    ;   25	
                           A   497    ;   26	
                           A   498    ;   27	/*-------------------------------------
                           A   499    ;   28	
                           A   500    ;   29	   Module Private Definitions
                           A   501    ;   30	
                           A   502    ;   31	---------------------------------------
                           A   503    ;   32	
                           A   504    ;   33	#if FF_DEFINED != 86631	/* Revision ID 
                           A   505    ;   34	#error Wrong include file (ff.h).
                           A   506    ;   35	#endif
                           A   507    ;   36	
                           A   508    ;   37	
                           A   509    ;   38	/* Limits and boundaries */
                           A   510    ;   39	#define MAX_DIR		0x200000		/* 
                           A   511    ;   40	#define MAX_DIR_EX	0x10000000		/* 
                           A   512    ;   41	#define MAX_FAT12	0xFF5			/* 
                           A   513    ;   42	#define MAX_FAT16	0xFFF5			/* 
                           A   514    ;   43	#define MAX_FAT32	0x0FFFFFF5		/* 
                           A   515    ;   44	#define MAX_EXFAT	0x7FFFFFFD		/* 
                           A   516    ;   45	
                           A   517    ;   46	
                           A   518    ;   47	/* Character code support macros */
                           A   519    ;   48	#define IsUpper(c)		((c) >= 'A' && 
                           A   520    ;   49	#define IsLower(c)		((c) >= 'a' && 
                           A   521    ;   50	#define IsDigit(c)		((c) >= '0' && 
                           A   522    ;   51	#define IsSeparator(c)	((c) == '/' || 
                           A   523    ;   52	#define IsTerminator(c)	((UINT)(c) < (F
                           A   524    ;   53	#define IsSurrogate(c)	((c) >= 0xD800 
                           A   525    ;   54	#define IsSurrogateH(c)	((c) >= 0xD800 
                           A   526    ;   55	#define IsSurrogateL(c)	((c) >= 0xDC00 
                           A   527    ;   56	
                           A   528    ;   57	
                           A   529    ;   58	/* Additional file access control and f
                           A   530    ;   59	#define FA_SEEKEND	0x20	/* Seek to 
                           A   531    ;   60	#define FA_MODIFIED	0x40	/* File has
                           A   532    ;   61	#define FA_DIRTY	0x80	/* FIL.buf[
                           A   533    ;   62	
                           A   534    ;   63	
                           A   535    ;   64	/* Additional file attribute bits for i
                           A   536    ;   65	#define AM_VOL		0x08	/* Volume l
                           A   537    ;   66	#define AM_LFN		0x0F	/* LFN entr
                           A   538    ;   67	#define AM_MASK		0x3F	/* Mask of 
                           A   539    ;   68	#define AM_MASKX	0x37	/* Mask of 
                           A   540    ;   69	
                           A   541    ;   70	
                           A   542    ;   71	/* Name status flags in fn[11] */
                           A   543    ;   72	#define NSFLAG		11		/* Index of
                           A   544    ;   73	#define NS_LOSS		0x01	/* Out of 8
                           A   545    ;   74	#define NS_LFN		0x02	/* Force to
                           A   546    ;   75	#define NS_LAST		0x04	/* Last seg
                           A   547    ;   76	#define NS_BODY		0x08	/* Lower ca
                           A   548    ;   77	#define NS_EXT		0x10	/* Lower ca
                           A   549    ;   78	#define NS_DOT		0x20	/* Dot entr
                           A   550    ;   79	#define NS_NOLFN	0x40	/* Do not f
                           A   551    ;   80	#define NS_NONAME	0x80	/* Not foll
                           A   552    ;   81	
                           A   553    ;   82	
                           A   554    ;   83	/* exFAT directory entry types */
                           A   555    ;   84	#define	ET_BITMAP	0x81	/* Allocati
                           A   556    ;   85	#define	ET_UPCASE	0x82	/* Up-case 
                           A   557    ;   86	#define	ET_VLABEL	0x83	/* Volume l
                           A   558    ;   87	#define	ET_FILEDIR	0x85	/* File and
                           A   559    ;   88	#define	ET_STREAM	0xC0	/* Stream e
                           A   560    ;   89	#define	ET_FILENAME	0xC1	/* Name ext
                           A   561    ;   90	
                           A   562    ;   91	
                           A   563    ;   92	/* FatFs refers the FAT structure as si
                           A   564    ;   93	/ because the C structure is not binary
                           A   565    ;   94	
                           A   566    ;   95	#define BS_JmpBoot			0		/* 
                           A   567    ;   96	#define BS_OEMName			3		/* 
                           A   568    ;   97	#define BPB_BytsPerSec		11		/* 
                           A   569    ;   98	#define BPB_SecPerClus		13		/* 
                           A   570    ;   99	#define BPB_RsvdSecCnt		14		/* 
                           A   571    ;  100	#define BPB_NumFATs			16		/* 
                           A   572    ;  101	#define BPB_RootEntCnt		17		/* 
                           A   573    ;  102	#define BPB_TotSec16		19		/* 
                           A   574    ;  103	#define BPB_Media			21		/* 
                           A   575    ;  104	#define BPB_FATSz16			22		/* 
                           A   576    ;  105	#define BPB_SecPerTrk		24		/* 
                           A   577    ;  106	#define BPB_NumHeads		26		/* 
                           A   578    ;  107	#define BPB_HiddSec			28		/* 
                           A   579    ;  108	#define BPB_TotSec32		32		/* 
                           A   580    ;  109	#define BS_DrvNum			36		/* 
                           A   581    ;  110	#define BS_NTres			37		/* 
                           A   582    ;  111	#define BS_BootSig			38		/* 
                           A   583    ;  112	#define BS_VolID			39		/* 
                           A   584    ;  113	#define BS_VolLab			43		/* 
                           A   585    ;  114	#define BS_FilSysType		54		/* 
                           A   586    ;  115	#define BS_BootCode			62		/* 
                           A   587    ;  116	#define BS_55AA				510		/* 
                           A   588    ;  117	
                           A   589    ;  118	#define BPB_FATSz32			36		/* 
                           A   590    ;  119	#define BPB_ExtFlags32		40		/* 
                           A   591    ;  120	#define BPB_FSVer32			42		/* 
                           A   592    ;  121	#define BPB_RootClus32		44		/* 
                           A   593    ;  122	#define BPB_FSInfo32		48		/* 
                           A   594    ;  123	#define BPB_BkBootSec32		50		/* 
                           A   595    ;  124	#define BS_DrvNum32			64		/* 
                           A   596    ;  125	#define BS_NTres32			65		/* 
                           A   597    ;  126	#define BS_BootSig32		66		/* 
                           A   598    ;  127	#define BS_VolID32			67		/* 
                           A   599    ;  128	#define BS_VolLab32			71		/* 
                           A   600    ;  129	#define BS_FilSysType32		82		/* 
                           A   601    ;  130	#define BS_BootCode32		90		/* 
                           A   602    ;  131	
                           A   603    ;  132	#define BPB_ZeroedEx		11		/* 
                           A   604    ;  133	#define BPB_VolOfsEx		64		/* 
                           A   605    ;  134	#define BPB_TotSecEx		72		/* 
                           A   606    ;  135	#define BPB_FatOfsEx		80		/* 
                           A   607    ;  136	#define BPB_FatSzEx			84		/* 
                           A   608    ;  137	#define BPB_DataOfsEx		88		/* 
                           A   609    ;  138	#define BPB_NumClusEx		92		/* 
                           A   610    ;  139	#define BPB_RootClusEx		96		/* 
                           A   611    ;  140	#define BPB_VolIDEx			100		/* 
                           A   612    ;  141	#define BPB_FSVerEx			104		/* 
                           A   613    ;  142	#define BPB_VolFlagEx		106		/* 
                           A   614    ;  143	#define BPB_BytsPerSecEx	108		/* 
                           A   615    ;  144	#define BPB_SecPerClusEx	109		/* 
                           A   616    ;  145	#define BPB_NumFATsEx		110		/* 
                           A   617    ;  146	#define BPB_DrvNumEx		111		/* 
                           A   618    ;  147	#define BPB_PercInUseEx		112		/* 
                           A   619    ;  148	#define BPB_RsvdEx			113		/* 
                           A   620    ;  149	#define BS_BootCodeEx		120		/* 
                           A   621    ;  150	
                           A   622    ;  151	#define DIR_Name			0		/* 
                           A   623    ;  152	#define DIR_Attr			11		/* 
                           A   624    ;  153	#define DIR_NTres			12		/* 
                           A   625    ;  154	#define DIR_CrtTime10		13		/* 
                           A   626    ;  155	#define DIR_CrtTime			14		/* 
                           A   627    ;  156	#define DIR_LstAccDate		18		/* 
                           A   628    ;  157	#define DIR_FstClusHI		20		/* 
                           A   629    ;  158	#define DIR_ModTime			22		/* 
                           A   630    ;  159	#define DIR_FstClusLO		26		/* 
                           A   631    ;  160	#define DIR_FileSize		28		/* 
                           A   632    ;  161	#define LDIR_Ord			0		/* 
                           A   633    ;  162	#define LDIR_Attr			11		/* 
                           A   634    ;  163	#define LDIR_Type			12		/* 
                           A   635    ;  164	#define LDIR_Chksum			13		/* 
                           A   636    ;  165	#define LDIR_FstClusLO		26		/* 
                           A   637    ;  166	#define XDIR_Type			0		/* 
                           A   638    ;  167	#define XDIR_NumLabel		1		/* 
                           A   639    ;  168	#define XDIR_Label			2		/* 
                           A   640    ;  169	#define XDIR_CaseSum		4		/* 
                           A   641    ;  170	#define XDIR_NumSec			1		/* 
                           A   642    ;  171	#define XDIR_SetSum			2		/* 
                           A   643    ;  172	#define XDIR_Attr			4		/* 
                           A   644    ;  173	#define XDIR_CrtTime		8		/* 
                           A   645    ;  174	#define XDIR_ModTime		12		/* 
                           A   646    ;  175	#define XDIR_AccTime		16		/* 
                           A   647    ;  176	#define XDIR_CrtTime10		20		/* 
                           A   648    ;  177	#define XDIR_ModTime10		21		/* 
                           A   649    ;  178	#define XDIR_CrtTZ			22		/* 
                           A   650    ;  179	#define XDIR_ModTZ			23		/* 
                           A   651    ;  180	#define XDIR_AccTZ			24		/* 
                           A   652    ;  181	#define XDIR_GenFlags		33		/* 
                           A   653    ;  182	#define XDIR_NumName		35		/* 
                           A   654    ;  183	#define XDIR_NameHash		36		/* 
                           A   655    ;  184	#define XDIR_ValidFileSize	40		/* 
                           A   656    ;  185	#define XDIR_FstClus		52		/* 
                           A   657    ;  186	#define XDIR_FileSize		56		/* 
                           A   658    ;  187	
                           A   659    ;  188	#define SZDIRE				32		/* 
                           A   660    ;  189	#define DDEM				0xE5	/* 
                           A   661    ;  190	#define RDDEM				0x05	/* 
                           A   662    ;  191	#define LLEF				0x40	/* 
                           A   663    ;  192	
                           A   664    ;  193	#define FSI_LeadSig			0		/* 
                           A   665    ;  194	#define FSI_StrucSig		484		/* 
                           A   666    ;  195	#define FSI_Free_Count		488		/* 
                           A   667    ;  196	#define FSI_Nxt_Free		492		/* 
                           A   668    ;  197	
                           A   669    ;  198	#define MBR_Table			446		/* 
                           A   670    ;  199	#define SZ_PTE				16		/* 
                           A   671    ;  200	#define PTE_Boot			0		/* 
                           A   672    ;  201	#define PTE_StHead			1		/* 
                           A   673    ;  202	#define PTE_StSec			2		/* 
                           A   674    ;  203	#define PTE_StCyl			3		/* 
                           A   675    ;  204	#define PTE_System			4		/* 
                           A   676    ;  205	#define PTE_EdHead			5		/* 
                           A   677    ;  206	#define PTE_EdSec			6		/* 
                           A   678    ;  207	#define PTE_EdCyl			7		/* 
                           A   679    ;  208	#define PTE_StLba			8		/* 
                           A   680    ;  209	#define PTE_SizLba			12		/* 
                           A   681    ;  210	
                           A   682    ;  211	#define GPTH_Sign			0		/* 
                           A   683    ;  212	#define GPTH_Rev			8		/* 
                           A   684    ;  213	#define GPTH_Size			12		/* 
                           A   685    ;  214	#define GPTH_Bcc			16		/* 
                           A   686    ;  215	#define GPTH_CurLba			24		/* 
                           A   687    ;  216	#define GPTH_BakLba			32		/* 
                           A   688    ;  217	#define GPTH_FstLba			40		/* 
                           A   689    ;  218	#define GPTH_LstLba			48		/* 
                           A   690    ;  219	#define GPTH_DskGuid		56		/* 
                           A   691    ;  220	#define GPTH_PtOfs			72		/* 
                           A   692    ;  221	#define GPTH_PtNum			80		/* 
                           A   693    ;  222	#define GPTH_PteSize		84		/* 
                           A   694    ;  223	#define GPTH_PtBcc			88		/* 
                           A   695    ;  224	#define SZ_GPTE				128		/* 
                           A   696    ;  225	#define GPTE_PtGuid			0		/* 
                           A   697    ;  226	#define GPTE_UpGuid			16		/* 
                           A   698    ;  227	#define GPTE_FstLba			32		/* 
                           A   699    ;  228	#define GPTE_LstLba			40		/* 
                           A   700    ;  229	#define GPTE_Flags			48		/* 
                           A   701    ;  230	#define GPTE_Name			56		/* 
                           A   702    ;  231	
                           A   703    ;  232	
                           A   704    ;  233	/* Post process on fatal error in the f
                           A   705    ;  234	#define ABORT(fs, res)		{ fp->err =
                           A   706    ;  235	
                           A   707    ;  236	
                           A   708    ;  237	/* Re-entrancy related */
                           A   709    ;  238	#if FF_FS_REENTRANT
                           A   710    ;  239	#if FF_USE_LFN == 1
                           A   711    ;  240	#error Static LFN work area cannot be u
                           A   712    ;  241	#endif
                           A   713    ;  242	#define LEAVE_FF(fs, res)	{ unlock_fs
                           A   714    ;  243	#else
                           A   715    ;  244	#define LEAVE_FF(fs, res)	return res
                           A   716    ;  245	#endif
                           A   717    ;  246	
                           A   718    ;  247	
                           A   719    ;  248	/* Definitions of logical drive - physi
                           A   720    ;  249	#if FF_MULTI_PARTITION
                           A   721    ;  250	#define LD2PD(vol) VolToPart[vol].pd	
                           A   722    ;  251	#define LD2PT(vol) VolToPart[vol].pt	
                           A   723    ;  252	#else
                           A   724    ;  253	#define LD2PD(vol) (BYTE)(vol)	/* Each
                           A   725    ;  254	#define LD2PT(vol) 0			/* Auto
                           A   726    ;  255	#endif
                           A   727    ;  256	
                           A   728    ;  257	
                           A   729    ;  258	/* Definitions of sector size */
                           A   730    ;  259	#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_
                           A   731    ;  260	#error Wrong sector size configuration
                           A   732    ;  261	#endif
                           A   733    ;  262	#if FF_MAX_SS == FF_MIN_SS
                           A   734    ;  263	#define SS(fs)	((UINT)FF_MAX_SS)	/* 
                           A   735    ;  264	#else
                           A   736    ;  265	#define SS(fs)	((fs)->ssize)	/* Vari
                           A   737    ;  266	#endif
                           A   738    ;  267	
                           A   739    ;  268	
                           A   740    ;  269	/* Timestamp */
                           A   741    ;  270	#if FF_FS_NORTC == 1
                           A   742    ;  271	#if FF_NORTC_YEAR < 1980 || FF_NORTC_YE
                           A   743    ;  272	#error Invalid FF_FS_NORTC settings
                           A   744    ;  273	#endif
                           A   745    ;  274	#define GET_FATTIME()	((DWORD)(FF_NOR
                           A   746    ;  275	#else
                           A   747    ;  276	#define GET_FATTIME()	get_fattime()
                           A   748    ;  277	#endif
                           A   749    ;  278	
                           A   750    ;  279	
                           A   751    ;  280	/* File lock controls */
                           A   752    ;  281	#if FF_FS_LOCK != 0
                           A   753    ;  282	#if FF_FS_READONLY
                           A   754    ;  283	#error FF_FS_LOCK must be 0 at read-onl
                           A   755    ;  284	#endif
                           A   756    ;  285	typedef struct {
                           A   757    ;  286		FATFS *fs;		/* Object ID 1, vol
                           A   758    ;  287		DWORD clu;		/* Object ID 2, con
                           A   759    ;  288		DWORD ofs;		/* Object ID 3, off
                           A   760    ;  289		WORD ctr;		/* Object open coun
                           A   761    ;  290	} FILESEM;
                           A   762    ;  291	#endif
                           A   763    ;  292	
                           A   764    ;  293	
                           A   765    ;  294	/* SBCS up-case tables (\x80-\xFF) */
                           A   766    ;  295	#define TBL_CT437  {0x80,0x9A,0x45,0x41
                           A   767    ;  296						0x90,0x92,0x92,0x4F
                           A   768    ;  297						0x41,0x49,0x4F,0x55
                           A   769    ;  298						0xB0,0xB1,0xB2,0xB3
                           A   770    ;  299						0xC0,0xC1,0xC2,0xC3
                           A   771    ;  300						0xD0,0xD1,0xD2,0xD3
                           A   772    ;  301						0xE0,0xE1,0xE2,0xE3
                           A   773    ;  302						0xF0,0xF1,0xF2,0xF3
                           A   774    ;  303	#define TBL_CT720  {0x80,0x81,0x82,0x83
                           A   775    ;  304						0x90,0x91,0x92,0x93
                           A   776    ;  305						0xA0,0xA1,0xA2,0xA3
                           A   777    ;  306						0xB0,0xB1,0xB2,0xB3
                           A   778    ;  307						0xC0,0xC1,0xC2,0xC3
                           A   779    ;  308						0xD0,0xD1,0xD2,0xD3
                           A   780    ;  309						0xE0,0xE1,0xE2,0xE3
                           A   781    ;  310						0xF0,0xF1,0xF2,0xF3
                           A   782    ;  311	#define TBL_CT737  {0x80,0x81,0x82,0x83
                           A   783    ;  312						0x90,0x92,0x92,0x93
                           A   784    ;  313						0x88,0x89,0x8A,0x8B
                           A   785    ;  314						0xB0,0xB1,0xB2,0xB3
                           A   786    ;  315						0xC0,0xC1,0xC2,0xC3
                           A   787    ;  316						0xD0,0xD1,0xD2,0xD3
                           A   788    ;  317						0x97,0xEA,0xEB,0xEC
                           A   789    ;  318						0xF0,0xF1,0xF2,0xF3
                           A   790    ;  319	#define TBL_CT771  {0x80,0x81,0x82,0x83
                           A   791    ;  320						0x90,0x91,0x92,0x93
                           A   792    ;  321						0x80,0x81,0x82,0x83
                           A   793    ;  322						0xB0,0xB1,0xB2,0xB3
                           A   794    ;  323						0xC0,0xC1,0xC2,0xC3
                           A   795    ;  324						0xD0,0xD1,0xD2,0xD3
                           A   796    ;  325						0x90,0x91,0x92,0x93
                           A   797    ;  326						0xF0,0xF0,0xF2,0xF2
                           A   798    ;  327	#define TBL_CT775  {0x80,0x9A,0x91,0xA0
                           A   799    ;  328						0x90,0x92,0x92,0xE2
                           A   800    ;  329						0xA0,0xA1,0xE0,0xA3
                           A   801    ;  330						0xB0,0xB1,0xB2,0xB3
                           A   802    ;  331						0xC0,0xC1,0xC2,0xC3
                           A   803    ;  332						0xB5,0xB6,0xB7,0xB8
                           A   804    ;  333						0xE0,0xE1,0xE2,0xE3
                           A   805    ;  334						0xF0,0xF1,0xF2,0xF3
                           A   806    ;  335	#define TBL_CT850  {0x43,0x55,0x45,0x41
                           A   807    ;  336						0x45,0x92,0x92,0x4F
                           A   808    ;  337						0x41,0x49,0x4F,0x55
                           A   809    ;  338						0xB0,0xB1,0xB2,0xB3
                           A   810    ;  339						0xC0,0xC1,0xC2,0xC3
                           A   811    ;  340						0xD1,0xD1,0x45,0x45
                           A   812    ;  341						0x4F,0xE1,0x4F,0x4F
                           A   813    ;  342						0xF0,0xF1,0xF2,0xF3
                           A   814    ;  343	#define TBL_CT852  {0x80,0x9A,0x90,0xB6
                           A   815    ;  344						0x90,0x91,0x91,0xE2
                           A   816    ;  345						0xB5,0xD6,0xE0,0xE9
                           A   817    ;  346						0xB0,0xB1,0xB2,0xB3
                           A   818    ;  347						0xC0,0xC1,0xC2,0xC3
                           A   819    ;  348						0xD1,0xD1,0xD2,0xD3
                           A   820    ;  349						0xE0,0xE1,0xE2,0xE3
                           A   821    ;  350						0xF0,0xF1,0xF2,0xF3
                           A   822    ;  351	#define TBL_CT855  {0x81,0x81,0x83,0x83
                           A   823    ;  352						0x91,0x91,0x93,0x93
                           A   824    ;  353						0xA1,0xA1,0xA3,0xA3
                           A   825    ;  354						0xB0,0xB1,0xB2,0xB3
                           A   826    ;  355						0xC0,0xC1,0xC2,0xC3
                           A   827    ;  356						0xD1,0xD1,0xD3,0xD3
                           A   828    ;  357						0xE0,0xE2,0xE2,0xE4
                           A   829    ;  358						0xF0,0xF2,0xF2,0xF4
                           A   830    ;  359	#define TBL_CT857  {0x80,0x9A,0x90,0xB6
                           A   831    ;  360						0x90,0x92,0x92,0xE2
                           A   832    ;  361						0xB5,0xD6,0xE0,0xE9
                           A   833    ;  362						0xB0,0xB1,0xB2,0xB3
                           A   834    ;  363						0xC0,0xC1,0xC2,0xC3
                           A   835    ;  364						0xD0,0xD1,0xD2,0xD3
                           A   836    ;  365						0xE0,0xE1,0xE2,0xE3
                           A   837    ;  366						0xF0,0xF1,0xF2,0xF3
                           A   838    ;  367	#define TBL_CT860  {0x80,0x9A,0x90,0x8F
                           A   839    ;  368						0x90,0x91,0x92,0x8C
                           A   840    ;  369						0x86,0x8B,0x9F,0x96
                           A   841    ;  370						0xB0,0xB1,0xB2,0xB3
                           A   842    ;  371						0xC0,0xC1,0xC2,0xC3
                           A   843    ;  372						0xD0,0xD1,0xD2,0xD3
                           A   844    ;  373						0xE0,0xE1,0xE2,0xE3
                           A   845    ;  374						0xF0,0xF1,0xF2,0xF3
                           A   846    ;  375	#define TBL_CT861  {0x80,0x9A,0x90,0x41
                           A   847    ;  376						0x90,0x92,0x92,0x4F
                           A   848    ;  377						0xA4,0xA5,0xA6,0xA7
                           A   849    ;  378						0xB0,0xB1,0xB2,0xB3
                           A   850    ;  379						0xC0,0xC1,0xC2,0xC3
                           A   851    ;  380						0xD0,0xD1,0xD2,0xD3
                           A   852    ;  381						0xE0,0xE1,0xE2,0xE3
                           A   853    ;  382						0xF0,0xF1,0xF2,0xF3
                           A   854    ;  383	#define TBL_CT862  {0x80,0x81,0x82,0x83
                           A   855    ;  384						0x90,0x91,0x92,0x93
                           A   856    ;  385						0x41,0x49,0x4F,0x55
                           A   857    ;  386						0xB0,0xB1,0xB2,0xB3
                           A   858    ;  387						0xC0,0xC1,0xC2,0xC3
                           A   859    ;  388						0xD0,0xD1,0xD2,0xD3
                           A   860    ;  389						0xE0,0xE1,0xE2,0xE3
                           A   861    ;  390						0xF0,0xF1,0xF2,0xF3
                           A   862    ;  391	#define TBL_CT863  {0x43,0x55,0x45,0x41
                           A   863    ;  392						0x45,0x45,0x45,0x4F
                           A   864    ;  393						0xA0,0xA1,0x4F,0x55
                           A   865    ;  394						0xB0,0xB1,0xB2,0xB3
                           A   866    ;  395						0xC0,0xC1,0xC2,0xC3
                           A   867    ;  396						0xD0,0xD1,0xD2,0xD3
                           A   868    ;  397						0xE0,0xE1,0xE2,0xE3
                           A   869    ;  398						0xF0,0xF1,0xF2,0xF3
                           A   870    ;  399	#define TBL_CT864  {0x80,0x9A,0x45,0x41
                           A   871    ;  400						0x90,0x92,0x92,0x4F
                           A   872    ;  401						0x41,0x49,0x4F,0x55
                           A   873    ;  402						0xB0,0xB1,0xB2,0xB3
                           A   874    ;  403						0xC0,0xC1,0xC2,0xC3
                           A   875    ;  404						0xD0,0xD1,0xD2,0xD3
                           A   876    ;  405						0xE0,0xE1,0xE2,0xE3
                           A   877    ;  406						0xF0,0xF1,0xF2,0xF3
                           A   878    ;  407	#define TBL_CT865  {0x80,0x9A,0x90,0x41
                           A   879    ;  408						0x90,0x92,0x92,0x4F
                           A   880    ;  409						0x41,0x49,0x4F,0x55
                           A   881    ;  410						0xB0,0xB1,0xB2,0xB3
                           A   882    ;  411						0xC0,0xC1,0xC2,0xC3
                           A   883    ;  412						0xD0,0xD1,0xD2,0xD3
                           A   884    ;  413						0xE0,0xE1,0xE2,0xE3
                           A   885    ;  414						0xF0,0xF1,0xF2,0xF3
                           A   886    ;  415	#define TBL_CT866  {0x80,0x81,0x82,0x83
                           A   887    ;  416						0x90,0x91,0x92,0x93
                           A   888    ;  417						0x80,0x81,0x82,0x83
                           A   889    ;  418						0xB0,0xB1,0xB2,0xB3
                           A   890    ;  419						0xC0,0xC1,0xC2,0xC3
                           A   891    ;  420						0xD0,0xD1,0xD2,0xD3
                           A   892    ;  421						0x90,0x91,0x92,0x93
                           A   893    ;  422						0xF0,0xF0,0xF2,0xF2
                           A   894    ;  423	#define TBL_CT869  {0x80,0x81,0x82,0x83
                           A   895    ;  424						0x90,0x91,0x92,0x93
                           A   896    ;  425						0x91,0x90,0x92,0x95
                           A   897    ;  426						0xB0,0xB1,0xB2,0xB3
                           A   898    ;  427						0xC0,0xC1,0xC2,0xC3
                           A   899    ;  428						0xD0,0xD1,0xD2,0xD3
                           A   900    ;  429						0xA9,0xAA,0xAC,0xAD
                           A   901    ;  430						0xF0,0xF1,0xD1,0xD2
                           A   902    ;  431	
                           A   903    ;  432	
                           A   904    ;  433	/* DBCS code range |----- 1st byte ----
                           A   905    ;  434	/*                  <------>    <------
                           A   906    ;  435	#define TBL_DC932 {0x81, 0x9F, 0xE0, 0x
                           A   907    ;  436	#define TBL_DC936 {0x81, 0xFE, 0x00, 0x
                           A   908    ;  437	#define TBL_DC949 {0x81, 0xFE, 0x00, 0x
                           A   909    ;  438	#define TBL_DC950 {0x81, 0xFE, 0x00, 0x
                           A   910    ;  439	
                           A   911    ;  440	
                           A   912    ;  441	/* Macros for table definitions */
                           A   913    ;  442	#define MERGE_2STR(a, b) a ## b
                           A   914    ;  443	#define MKCVTBL(hd, cp) MERGE_2STR(hd, 
                           A   915    ;  444	
                           A   916    ;  445	
                           A   917    ;  446	
                           A   918    ;  447	
                           A   919    ;  448	/*-------------------------------------
                           A   920    ;  449	
                           A   921    ;  450	   Module Private Work Area
                           A   922    ;  451	
                           A   923    ;  452	---------------------------------------
                           A   924    ;  453	/* Remark: Variables defined here witho
                           A   925    ;  454	/  zero/null at start-up. If not, the l
                           A   926    ;  455	/  not compliance with C standard. */
                           A   927    ;  456	
                           A   928    ;  457	/*--------------------------------*/
                           A   929    ;  458	/* File/Volume controls           */
                           A   930    ;  459	/*--------------------------------*/
                           A   931    ;  460	
                           A   932    ;  461	#if FF_VOLUMES < 1 || FF_VOLUMES > 10
                           A   933    ;  462	#error Wrong FF_VOLUMES setting
                           A   934    ;  463	#endif
                           A   935    ;  464	static FATFS* FatFs[FF_VOLUMES];	/* 
                           A   936    ;  465	static WORD Fsid;					/* 
                           A   937    ;  466	
                           A   938    ;  467	#if FF_FS_RPATH != 0
                           A   939    ;  468	static BYTE CurrVol;				/* 
                           A   940    ;  469	#endif
                           A   941    ;  470	
                           A   942    ;  471	#if FF_FS_LOCK != 0
                           A   943    ;  472	static FILESEM Files[FF_FS_LOCK];	/* 
                           A   944    ;  473	#endif
                           A   945    ;  474	
                           A   946    ;  475	#if FF_STR_VOLUME_ID
                           A   947    ;  476	#ifdef FF_VOLUME_STRS
                           A   948    ;  477	static const char* const VolumeStr[FF_V
                           A   949    ;  478	#endif
                           A   950    ;  479	#endif
                           A   951    ;  480	
                           A   952    ;  481	#if FF_LBA64
                           A   953    ;  482	#if FF_MIN_GPT > 0x100000000
                           A   954    ;  483	#error Wrong FF_MIN_GPT setting
                           A   955    ;  484	#endif
                           A   956    ;  485	static const BYTE GUID_MS_Basic[16] = {
                           A   957    ;  486	#endif
                           A   958    ;  487	
                           A   959    ;  488	
                           A   960    ;  489	
                           A   961    ;  490	/*--------------------------------*/
                           A   962    ;  491	/* LFN/Directory working buffer   */
                           A   963    ;  492	/*--------------------------------*/
                           A   964    ;  493	
                           A   965    ;  494	#if FF_USE_LFN == 0		/* Non-LFN conf
                           A   966    ;  495	#if FF_FS_EXFAT
                           A   967    ;  496	#error LFN must be enabled when enable 
                           A   968    ;  497	#endif
                           A   969    ;  498	#define DEF_NAMBUF
                           A   970    ;  499	#define INIT_NAMBUF(fs)
                           A   971    ;  500	#define FREE_NAMBUF()
                           A   972    ;  501	#define LEAVE_MKFS(res)	return res
                           A   973    ;  502	
                           A   974    ;  503	#else					/* LFN configur
                           A   975    ;  504	#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
                           A   976    ;  505	#error Wrong setting of FF_MAX_LFN
                           A   977    ;  506	#endif
                           A   978    ;  507	#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_B
                           A   979    ;  508	#error Wrong setting of FF_LFN_BUF or F
                           A   980    ;  509	#endif
                           A   981    ;  510	#if FF_LFN_UNICODE < 0 || FF_LFN_UNICOD
                           A   982    ;  511	#error Wrong setting of FF_LFN_UNICODE
                           A   983    ;  512	#endif
                           A   984    ;  513	static const BYTE LfnOfs[] = {1,3,5,7,9
                           A   985    ;  514	#define MAXDIRB(nc)	((nc + 44U) / 15 * 
                           A   986    ;  515	
                           A   987    ;  516	#if FF_USE_LFN == 1		/* LFN enabled 
                           A   988    ;  517	#if FF_FS_EXFAT
                           A   989    ;  518	static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)]
                           A   990    ;  519	#endif
                           A   991    ;  520	static WCHAR LfnBuf[FF_MAX_LFN + 1];	
                           A   992    ;  521	#define DEF_NAMBUF
                           A   993    ;  522	#define INIT_NAMBUF(fs)
                           A   994    ;  523	#define FREE_NAMBUF()
                           A   995    ;  524	#define LEAVE_MKFS(res)	return res
                           A   996    ;  525	
                           A   997    ;  526	#elif FF_USE_LFN == 2 	/* LFN enabled 
                           A   998    ;  527	#if FF_FS_EXFAT
                           A   999    ;  528	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A  1000    ;  529	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A  1001    ;  530	#define FREE_NAMBUF()
                           A  1002    ;  531	#else
                           A  1003    ;  532	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A  1004    ;  533	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A  1005    ;  534	#define FREE_NAMBUF()
                           A  1006    ;  535	#endif
                           A  1007    ;  536	#define LEAVE_MKFS(res)	return res
                           A  1008    ;  537	
                           A  1009    ;  538	#elif FF_USE_LFN == 3 	/* LFN enabled 
                           A  1010    ;  539	#if FF_FS_EXFAT
                           A  1011    ;  540	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A  1012    ;  541	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A  1013    ;  542	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A  1014    ;  543	#else
                           A  1015    ;  544	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A  1016    ;  545	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A  1017    ;  546	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A  1018    ;  547	#endif
                           A  1019    ;  548	#define LEAVE_MKFS(res)	{ if (!work) ff
                           A  1020    ;  549	#define MAX_MALLOC	0x8000	/* Must be 
                           A  1021    ;  550	
                           A  1022    ;  551	#else
                           A  1023    ;  552	#error Wrong setting of FF_USE_LFN
                           A  1024    ;  553	
                           A  1025    ;  554	#endif	/* FF_USE_LFN == 1 */
                           A  1026    ;  555	#endif	/* FF_USE_LFN == 0 */
                           A  1027    ;  556	
                           A  1028    ;  557	
                           A  1029    ;  558	
                           A  1030    ;  559	/*--------------------------------*/
                           A  1031    ;  560	/* Code conversion tables         */
                           A  1032    ;  561	/*--------------------------------*/
                           A  1033    ;  562	
                           A  1034    ;  563	#if FF_CODE_PAGE == 0	/* Run-time cod
                           A  1035    ;  564	#define CODEPAGE CodePage
                           A  1036    ;  565	static WORD CodePage;	/* Current code
                           A  1037    ;  566	static const BYTE *ExCvt, *DbcTbl;	/* 
                           A  1038    ;  567	
                           A  1039    ;  568	static const BYTE Ct437[] = TBL_CT437;
                           A  1040    ;  569	static const BYTE Ct720[] = TBL_CT720;
                           A  1041    ;  570	static const BYTE Ct737[] = TBL_CT737;
                           A  1042    ;  571	static const BYTE Ct771[] = TBL_CT771;
                           A  1043    ;  572	static const BYTE Ct775[] = TBL_CT775;
                           A  1044    ;  573	static const BYTE Ct850[] = TBL_CT850;
                           A  1045    ;  574	static const BYTE Ct852[] = TBL_CT852;
                           A  1046    ;  575	static const BYTE Ct855[] = TBL_CT855;
                           A  1047    ;  576	static const BYTE Ct857[] = TBL_CT857;
                           A  1048    ;  577	static const BYTE Ct860[] = TBL_CT860;
                           A  1049    ;  578	static const BYTE Ct861[] = TBL_CT861;
                           A  1050    ;  579	static const BYTE Ct862[] = TBL_CT862;
                           A  1051    ;  580	static const BYTE Ct863[] = TBL_CT863;
                           A  1052    ;  581	static const BYTE Ct864[] = TBL_CT864;
                           A  1053    ;  582	static const BYTE Ct865[] = TBL_CT865;
                           A  1054    ;  583	static const BYTE Ct866[] = TBL_CT866;
                           A  1055    ;  584	static const BYTE Ct869[] = TBL_CT869;
                           A  1056    ;  585	static const BYTE Dc932[] = TBL_DC932;
                           A  1057    ;  586	static const BYTE Dc936[] = TBL_DC936;
                           A  1058    ;  587	static const BYTE Dc949[] = TBL_DC949;
                           A  1059    ;  588	static const BYTE Dc950[] = TBL_DC950;
                           A  1060    ;  589	
                           A  1061    ;  590	#elif FF_CODE_PAGE < 900	/* Static c
                           A  1062    ;  591	#define CODEPAGE FF_CODE_PAGE
                           A  1063    ;  592	static const BYTE ExCvt[] = MKCVTBL(TBL
                           A  1064    	SEGMENT CODE
                           A  1065    ;  593	
                           A  1066    ;  594	#else					/* Static code 
                           A  1067    ;  595	#define CODEPAGE FF_CODE_PAGE
                           A  1068    ;  596	static const BYTE DbcTbl[] = MKCVTBL(TB
                           A  1069    ;  597	
                           A  1070    ;  598	#endif
                           A  1071    ;  599	
                           A  1072    ;  600	
                           A  1073    ;  601	
                           A  1074    ;  602	
                           A  1075    ;  603	/*-------------------------------------
                           A  1076    ;  604	
                           A  1077    ;  605	   Module Private Functions
                           A  1078    ;  606	
                           A  1079    ;  607	---------------------------------------
                           A  1080    ;  608	
                           A  1081    ;  609	
                           A  1082    ;  610	/*-------------------------------------
                           A  1083    ;  611	/* Load/Store multi-byte word in the FA
                           A  1084    ;  612	/*-------------------------------------
                           A  1085    ;  613	
                           A  1086    ;  614	static WORD ld_word (const BYTE* ptr)	
                           A  1087    ;  615	{
000000                     A  1088    _ld_word:
                           A  1089    .DEFINE "_ld_word"
                           A  1090    
                           A  1091    .VALUE _ld_word
                           A  1092    
                           A  1093    .CLASS 3
                           A  1094    
                           A  1095    .TYPE 77
                           A  1096    
                           A  1097    .ENDEF
                           A  1098    
                           A  1099    .BEGFUNC "ld_word",615,"_ld_word"
                           A  1100    
                           A  1101    .LINE 615
                           A  1102    
                           A  1103    .DEFINE "ptr"
                           A  1104    
                           A  1105    .CLASS 65
                           A  1106    
                           A  1107    .VALUE 6
                           A  1108    
                           A  1109    .TYPE 204
                           A  1110    
                           A  1111    .ENDEF
                           A  1112    
                           A  1113    .DEFINE "rv"
                           A  1114    
                           A  1115    .CLASS 65
                           A  1116    
                           A  1117    .VALUE -2
                           A  1118    
                           A  1119    .TYPE 13
                           A  1120    
                           A  1121    .ENDEF
                           A  1122    
000000 DDE5                A  1123    	PUSH	IX
000002 DD210000 00         A  1124    	LD	IX,0
000007 DD39                A  1125    	ADD	IX,SP
000009 3B                  A  1126    	DEC	SP
00000A 3B                  A  1127    	DEC	SP
                           A  1128    ;  616		WORD rv;
                           A  1129    ;  617	
                           A  1130    ;  618		rv = ptr[1];
                           A  1131    .LINE 618
                           A  1132    
00000B DD2706              A  1133    	LD	HL,(IX+%6)
00000E 23                  A  1134    	INC	HL
00000F 4E                  A  1135    	LD	C,(HL)
000010 0600                A  1136    	LD	B,%0
000012 C5E1                A  1137    	LD	HL,BC
000014 DD75FE              A  1138    	LD	(IX+%FFFFFFFE),L
000017 DD74FF              A  1139    	LD	(IX+%FFFFFFFF),H
                           A  1140    ;  619		rv = rv << 8 | ptr[0];
                           A  1141    .LINE 619
                           A  1142    
00001A DD2706              A  1143    	LD	HL,(IX+%6)
00001D 4E                  A  1144    	LD	C,(HL)
00001E C5D1                A  1145    	LD	DE,BC
000020 DD27FE              A  1146    	LD	HL,(IX+%FFFFFFFE)
000023 65                  A  1147    	LD	H,L
000024 2E00                A  1148    	LD	L,%0
000026 E5C1                A  1149    	LD	BC,HL
000028 D5E1                A  1150    	LD	HL,DE
00002A CD 00 00 00         A  1151    	CALL	__sor
00002E DD75FE              A  1152    	LD	(IX+%FFFFFFFE),L
000031 DD74FF              A  1153    	LD	(IX+%FFFFFFFF),H
                           A  1154    ;  620		return rv;
                           A  1155    .LINE 620
                           A  1156    
000034 DD27FE              A  1157    	LD	HL,(IX+%FFFFFFFE)
                           A  1158    ;  621	}
                           A  1159    .LINE 621
                           A  1160    
000037 DDF9                A  1161    	LD	SP,IX
000039 DDE1                A  1162    	POP	IX
00003B C9                  A  1163    	RET	
                           A  1164    
                           A  1165    
                           A  1166    ;**************************** _ld_word ********
                           A  1167    ;Name                         Addr/Register   S
                           A  1168    ;rv                                    IX-2    
                           A  1169    ;ptr                                   IX+6    
                           A  1170    
                           A  1171    
                           A  1172    ; Stack Frame Size: 11 (bytes)
                           A  1173    ;       Spill Code: 0 (instruction)
                           A  1174    
                           A  1175    
                           A  1176    .ENDFUNC "ld_word",621,"_ld_word"
                           A  1177    ;  622	
                           A  1178    ;  623	static DWORD ld_dword (const BYTE* ptr)
                           A  1179    ;  624	{
00003C                     A  1180    _ld_dword:
                           A  1181    .DEFINE "_ld_dword"
                           A  1182    
                           A  1183    .VALUE _ld_dword
                           A  1184    
                           A  1185    .CLASS 3
                           A  1186    
                           A  1187    .TYPE 79
                           A  1188    
                           A  1189    .ENDEF
                           A  1190    
                           A  1191    .BEGFUNC "ld_dword",624,"_ld_dword"
                           A  1192    
                           A  1193    .LINE 624
                           A  1194    
                           A  1195    .DEFINE "ptr"
                           A  1196    
                           A  1197    .CLASS 65
                           A  1198    
                           A  1199    .VALUE 6
                           A  1200    
                           A  1201    .TYPE 204
                           A  1202    
                           A  1203    .ENDEF
                           A  1204    
                           A  1205    .DEFINE "rv"
                           A  1206    
                           A  1207    .CLASS 65
                           A  1208    
                           A  1209    .VALUE -4
                           A  1210    
                           A  1211    .TYPE 15
                           A  1212    
                           A  1213    .ENDEF
                           A  1214    
00003C DDE5                A  1215    	PUSH	IX
00003E DD210000 00         A  1216    	LD	IX,0
000043 DD39                A  1217    	ADD	IX,SP
000045 ED22EB              A  1218    	LEA	HL,IX+%FFFFFFEB
000048 F9                  A  1219    	LD	SP,HL
                           A  1220    ;  625		DWORD rv;
                           A  1221    ;  626	
                           A  1222    ;  627		rv = ptr[3];
                           A  1223    .LINE 627
                           A  1224    
000049 DD3106              A  1225    	LD	IY,(IX+%6)
00004C B7ED62              A  1226    	UEXT	HL
00004F FD6E03              A  1227    	LD	L,(IY+%3)
000052 DD2FFC              A  1228    	LD	(IX+%FFFFFFFC),HL
000055 DD74FF              A  1229    	LD	(IX+%FFFFFFFF),H
                           A  1230    ;  628		rv = rv << 8 | ptr[2];
                           A  1231    .LINE 628
                           A  1232    
000058 B7ED62              A  1233    	UEXT	HL
00005B FD6E02              A  1234    	LD	L,(IY+%2)
00005E DD2FF9              A  1235    	LD	(IX+%FFFFFFF9),HL
000061 5C                  A  1236    	LD	E,H
000062 DD07FC              A  1237    	LD	BC,(IX+%FFFFFFFC)
000065 C5                  A  1238    	PUSH	BC
000066 C5                  A  1239    	PUSH	BC
000067 B7ED62              A  1240    	UEXT	HL
00006A E5                  A  1241    	PUSH	HL
00006B 33                  A  1242    	INC	SP
00006C 33                  A  1243    	INC	SP
00006D C1                  A  1244    	POP	BC
00006E DD73F8              A  1245    	LD	(IX+%FFFFFFF8),E	; spill
000071 D1                  A  1246    	POP	DE
000072 DD73F7              A  1247    	LD	(IX+%FFFFFFF7),E	; spill
000075 DD5EF8              A  1248    	LD	E,(IX+%FFFFFFF8)	; unspill
000078 33                  A  1249    	INC	SP
000079 DD27F9              A  1250    	LD	HL,(IX+%FFFFFFF9)
00007C DD73F8              A  1251    	LD	(IX+%FFFFFFF8),E	; spill
00007F DD5EF7              A  1252    	LD	E,(IX+%FFFFFFF7)	; unspill
000082 7B                  A  1253    	LD	A,E
000083 DD5EF8              A  1254    	LD	E,(IX+%FFFFFFF8)	; unspill
000086 CD 00 00 00         A  1255    	CALL	__lor
00008A DD2FFC              A  1256    	LD	(IX+%FFFFFFFC),HL
00008D DD73FF              A  1257    	LD	(IX+%FFFFFFFF),E
                           A  1258    ;  629		rv = rv << 8 | ptr[1];
                           A  1259    .LINE 629
                           A  1260    
000090 B7ED62              A  1261    	UEXT	HL
000093 FD6E01              A  1262    	LD	L,(IY+%1)
000096 DD2FF4              A  1263    	LD	(IX+%FFFFFFF4),HL
000099 5C                  A  1264    	LD	E,H
00009A DD07FC              A  1265    	LD	BC,(IX+%FFFFFFFC)
00009D C5                  A  1266    	PUSH	BC
00009E C5                  A  1267    	PUSH	BC
00009F B7ED62              A  1268    	UEXT	HL
0000A2 E5                  A  1269    	PUSH	HL
0000A3 33                  A  1270    	INC	SP
0000A4 33                  A  1271    	INC	SP
0000A5 C1                  A  1272    	POP	BC
0000A6 DD73F8              A  1273    	LD	(IX+%FFFFFFF8),E	; spill
0000A9 D1                  A  1274    	POP	DE
0000AA DD73F3              A  1275    	LD	(IX+%FFFFFFF3),E	; spill
0000AD DD5EF8              A  1276    	LD	E,(IX+%FFFFFFF8)	; unspill
0000B0 33                  A  1277    	INC	SP
0000B1 DD27F4              A  1278    	LD	HL,(IX+%FFFFFFF4)
0000B4 DD73F8              A  1279    	LD	(IX+%FFFFFFF8),E	; spill
0000B7 DD5EF3              A  1280    	LD	E,(IX+%FFFFFFF3)	; unspill
0000BA 7B                  A  1281    	LD	A,E
0000BB DD5EF8              A  1282    	LD	E,(IX+%FFFFFFF8)	; unspill
0000BE CD 00 00 00         A  1283    	CALL	__lor
0000C2 DD2FFC              A  1284    	LD	(IX+%FFFFFFFC),HL
0000C5 DD73FF              A  1285    	LD	(IX+%FFFFFFFF),E
                           A  1286    ;  630		rv = rv << 8 | ptr[0];
                           A  1287    .LINE 630
                           A  1288    
0000C8 E5C1                A  1289    	LD	BC,HL
0000CA C5                  A  1290    	PUSH	BC
0000CB C5                  A  1291    	PUSH	BC
0000CC B7ED62              A  1292    	UEXT	HL
0000CF E5                  A  1293    	PUSH	HL
0000D0 33                  A  1294    	INC	SP
0000D1 33                  A  1295    	INC	SP
0000D2 D1                  A  1296    	POP	DE
0000D3 DD1FED              A  1297    	LD	(IX+%FFFFFFED),DE	; spill
0000D6 E1                  A  1298    	POP	HL
0000D7 DD75EB              A  1299    	LD	(IX+%FFFFFFEB),L	; spill
0000DA 33                  A  1300    	INC	SP
0000DB B7ED62              A  1301    	UEXT	HL
0000DE FD6E00              A  1302    	LD	L,(IY)
0000E1 E5C1                A  1303    	LD	BC,HL
0000E3 7C                  A  1304    	LD	A,H
0000E4 DD6EEB              A  1305    	LD	L,(IX+%FFFFFFEB)	; unspill
0000E7 5D                  A  1306    	LD	E,L
0000E8 DD1FF0              A  1307    	LD	(IX+%FFFFFFF0),DE	; spill
0000EB DD27ED              A  1308    	LD	HL,(IX+%FFFFFFED)
0000EE DD17F0              A  1309    	LD	DE,(IX+%FFFFFFF0)	; unspill
0000F1 CD 00 00 00         A  1310    	CALL	__lor
0000F5 DD2FFC              A  1311    	LD	(IX+%FFFFFFFC),HL
0000F8 DD73FF              A  1312    	LD	(IX+%FFFFFFFF),E
                           A  1313    ;  631		return rv;
                           A  1314    .LINE 631
                           A  1315    
0000FB DD27FC              A  1316    	LD	HL,(IX+%FFFFFFFC)
0000FE DD5EFF              A  1317    	LD	E,(IX+%FFFFFFFF)
                           A  1318    ;  632	}
                           A  1319    .LINE 632
                           A  1320    
000101 DDF9                A  1321    	LD	SP,IX
000103 DDE1                A  1322    	POP	IX
000105 C9                  A  1323    	RET	
                           A  1324    
                           A  1325    
                           A  1326    ;**************************** _ld_dword *******
                           A  1327    ;Name                         Addr/Register   S
                           A  1328    ;rv                                    IX-4    
                           A  1329    ;ptr                                   IX+6    
                           A  1330    
                           A  1331    
                           A  1332    ; Stack Frame Size: 30 (bytes)
                           A  1333    ;       Spill Code: -1 (instruction)
                           A  1334    
                           A  1335    
                           A  1336    .ENDFUNC "ld_dword",632,"_ld_dword"
                           A  1337    ;  633	
                           A  1338    ;  634	#if FF_FS_EXFAT
                           A  1339    ;  635	static QWORD ld_qword (const BYTE* ptr)
                           A  1340    ;  636	{
                           A  1341    ;  637		QWORD rv;
                           A  1342    ;  638	
                           A  1343    ;  639		rv = ptr[7];
                           A  1344    ;  640		rv = rv << 8 | ptr[6];
                           A  1345    ;  641		rv = rv << 8 | ptr[5];
                           A  1346    ;  642		rv = rv << 8 | ptr[4];
                           A  1347    ;  643		rv = rv << 8 | ptr[3];
                           A  1348    ;  644		rv = rv << 8 | ptr[2];
                           A  1349    ;  645		rv = rv << 8 | ptr[1];
                           A  1350    ;  646		rv = rv << 8 | ptr[0];
                           A  1351    ;  647		return rv;
                           A  1352    ;  648	}
                           A  1353    ;  649	#endif
                           A  1354    ;  650	
                           A  1355    ;  651	#if !FF_FS_READONLY
                           A  1356    ;  652	static void st_word (BYTE* ptr, WORD va
                           A  1357    ;  653	{
000106                     A  1358    _st_word:
                           A  1359    .DEFINE "_st_word"
                           A  1360    
                           A  1361    .VALUE _st_word
                           A  1362    
                           A  1363    .CLASS 3
                           A  1364    
                           A  1365    .TYPE 65
                           A  1366    
                           A  1367    .ENDEF
                           A  1368    
                           A  1369    .BEGFUNC "st_word",653,"_st_word"
                           A  1370    
                           A  1371    .LINE 653
                           A  1372    
                           A  1373    .DEFINE "ptr"
                           A  1374    
                           A  1375    .CLASS 65
                           A  1376    
                           A  1377    .VALUE 6
                           A  1378    
                           A  1379    .TYPE 44
                           A  1380    
                           A  1381    .ENDEF
                           A  1382    
                           A  1383    .DEFINE "val"
                           A  1384    
                           A  1385    .CLASS 65
                           A  1386    
                           A  1387    .VALUE 9
                           A  1388    
                           A  1389    .TYPE 13
                           A  1390    
                           A  1391    .ENDEF
                           A  1392    
000106 DDE5                A  1393    	PUSH	IX
000108 DD210000 00         A  1394    	LD	IX,0
00010D DD39                A  1395    	ADD	IX,SP
                           A  1396    ;  654		*ptr++ = (BYTE)val; val >>= 8;
                           A  1397    .LINE 654
                           A  1398    
00010F DD7E09              A  1399    	LD	A,(IX+%9)
000112 DD2706              A  1400    	LD	HL,(IX+%6)
000115 77                  A  1401    	LD	(HL),A
000116 DD0706              A  1402    	LD	BC,(IX+%6)
000119 03                  A  1403    	INC	BC
00011A DD0F06              A  1404    	LD	(IX+%6),BC
00011D DD0709              A  1405    	LD	BC,(IX+%9)
000120 CD 00 00 00         A  1406    	CALL	__stoiu
000124 E5C1                A  1407    	LD	BC,HL
000126 3B                  A  1408    	DEC	SP
000127 C5                  A  1409    	PUSH	BC
000128 33                  A  1410    	INC	SP
000129 F1                  A  1411    	POP	AF
00012A 17ED62              A  1412    	SEXT	HL
00012D E5                  A  1413    	PUSH	HL
00012E C5                  A  1414    	PUSH	BC
00012F 33                  A  1415    	INC	SP
000130 E1                  A  1416    	POP	HL
000131 33                  A  1417    	INC	SP
000132 33                  A  1418    	INC	SP
000133 DD7509              A  1419    	LD	(IX+%9),L
000136 DD740A              A  1420    	LD	(IX+%A),H
                           A  1421    ;  655		*ptr++ = (BYTE)val;
                           A  1422    .LINE 655
                           A  1423    
000139 DD7E09              A  1424    	LD	A,(IX+%9)
00013C DD2706              A  1425    	LD	HL,(IX+%6)
00013F 77                  A  1426    	LD	(HL),A
                           A  1427    ;  656	}
                           A  1428    .LINE 656
                           A  1429    
000140 DDF9                A  1430    	LD	SP,IX
000142 DDE1                A  1431    	POP	IX
000144 C9                  A  1432    	RET	
                           A  1433    
                           A  1434    
                           A  1435    ;**************************** _st_word ********
                           A  1436    ;Name                         Addr/Register   S
                           A  1437    ;val                                   IX+9    
                           A  1438    ;ptr                                   IX+6    
                           A  1439    
                           A  1440    
                           A  1441    ; Stack Frame Size: 12 (bytes)
                           A  1442    ;       Spill Code: -1 (instruction)
                           A  1443    
                           A  1444    
                           A  1445    .ENDFUNC "st_word",656,"_st_word"
                           A  1446    ;  657	
                           A  1447    ;  658	static void st_dword (BYTE* ptr, DWORD 
                           A  1448    ;  659	{
000145                     A  1449    _st_dword:
                           A  1450    .DEFINE "_st_dword"
                           A  1451    
                           A  1452    .VALUE _st_dword
                           A  1453    
                           A  1454    .CLASS 3
                           A  1455    
                           A  1456    .TYPE 65
                           A  1457    
                           A  1458    .ENDEF
                           A  1459    
                           A  1460    .BEGFUNC "st_dword",659,"_st_dword"
                           A  1461    
                           A  1462    .LINE 659
                           A  1463    
                           A  1464    .DEFINE "ptr"
                           A  1465    
                           A  1466    .CLASS 65
                           A  1467    
                           A  1468    .VALUE 6
                           A  1469    
                           A  1470    .TYPE 44
                           A  1471    
                           A  1472    .ENDEF
                           A  1473    
                           A  1474    .DEFINE "val"
                           A  1475    
                           A  1476    .CLASS 65
                           A  1477    
                           A  1478    .VALUE 9
                           A  1479    
                           A  1480    .TYPE 15
                           A  1481    
                           A  1482    .ENDEF
                           A  1483    
000145 DDE5                A  1484    	PUSH	IX
000147 DD210000 00         A  1485    	LD	IX,0
00014C DD39                A  1486    	ADD	IX,SP
                           A  1487    ;  660		*ptr++ = (BYTE)val; val >>= 8;
                           A  1488    .LINE 660
                           A  1489    
00014E DD7E09              A  1490    	LD	A,(IX+%9)
000151 DD2706              A  1491    	LD	HL,(IX+%6)
000154 77                  A  1492    	LD	(HL),A
000155 DD0706              A  1493    	LD	BC,(IX+%6)
000158 03                  A  1494    	INC	BC
000159 DD0F06              A  1495    	LD	(IX+%6),BC
00015C DD070A              A  1496    	LD	BC,(IX+%A)
00015F AF                  A  1497    	XOR	A,A
000160 DD0F09              A  1498    	LD	(IX+%9),BC
000163 DD770C              A  1499    	LD	(IX+%C),A
                           A  1500    ;  661		*ptr++ = (BYTE)val; val >>= 8;
                           A  1501    .LINE 661
                           A  1502    
000166 DD7E09              A  1503    	LD	A,(IX+%9)
000169 DD2706              A  1504    	LD	HL,(IX+%6)
00016C 77                  A  1505    	LD	(HL),A
00016D DD0706              A  1506    	LD	BC,(IX+%6)
000170 03                  A  1507    	INC	BC
000171 DD0F06              A  1508    	LD	(IX+%6),BC
000174 DD070A              A  1509    	LD	BC,(IX+%A)
000177 AF                  A  1510    	XOR	A,A
000178 DD0F09              A  1511    	LD	(IX+%9),BC
00017B DD770C              A  1512    	LD	(IX+%C),A
                           A  1513    ;  662		*ptr++ = (BYTE)val; val >>= 8;
                           A  1514    .LINE 662
                           A  1515    
00017E DD7E09              A  1516    	LD	A,(IX+%9)
000181 DD2706              A  1517    	LD	HL,(IX+%6)
000184 77                  A  1518    	LD	(HL),A
000185 DD0706              A  1519    	LD	BC,(IX+%6)
000188 03                  A  1520    	INC	BC
000189 DD0F06              A  1521    	LD	(IX+%6),BC
00018C DD070A              A  1522    	LD	BC,(IX+%A)
00018F AF                  A  1523    	XOR	A,A
000190 DD0F09              A  1524    	LD	(IX+%9),BC
000193 DD770C              A  1525    	LD	(IX+%C),A
                           A  1526    ;  663		*ptr++ = (BYTE)val;
                           A  1527    .LINE 663
                           A  1528    
000196 DD7E09              A  1529    	LD	A,(IX+%9)
000199 DD2706              A  1530    	LD	HL,(IX+%6)
00019C 77                  A  1531    	LD	(HL),A
                           A  1532    ;  664	}
                           A  1533    .LINE 664
                           A  1534    
00019D DDF9                A  1535    	LD	SP,IX
00019F DDE1                A  1536    	POP	IX
0001A1 C9                  A  1537    	RET	
                           A  1538    
                           A  1539    
                           A  1540    ;**************************** _st_dword *******
                           A  1541    ;Name                         Addr/Register   S
                           A  1542    ;val                                   IX+9    
                           A  1543    ;ptr                                   IX+6    
                           A  1544    
                           A  1545    
                           A  1546    ; Stack Frame Size: 15 (bytes)
                           A  1547    ;       Spill Code: -1 (instruction)
                           A  1548    
                           A  1549    
                           A  1550    .ENDFUNC "st_dword",664,"_st_dword"
                           A  1551    ;  665	
                           A  1552    ;  666	#if FF_FS_EXFAT
                           A  1553    ;  667	static void st_qword (BYTE* ptr, QWORD 
                           A  1554    ;  668	{
                           A  1555    ;  669		*ptr++ = (BYTE)val; val >>= 8;
                           A  1556    ;  670		*ptr++ = (BYTE)val; val >>= 8;
                           A  1557    ;  671		*ptr++ = (BYTE)val; val >>= 8;
                           A  1558    ;  672		*ptr++ = (BYTE)val; val >>= 8;
                           A  1559    ;  673		*ptr++ = (BYTE)val; val >>= 8;
                           A  1560    ;  674		*ptr++ = (BYTE)val; val >>= 8;
                           A  1561    ;  675		*ptr++ = (BYTE)val; val >>= 8;
                           A  1562    ;  676		*ptr++ = (BYTE)val;
                           A  1563    ;  677	}
                           A  1564    ;  678	#endif
                           A  1565    ;  679	#endif	/* !FF_FS_READONLY */
                           A  1566    ;  680	
                           A  1567    ;  681	
                           A  1568    ;  682	
                           A  1569    ;  683	/*-------------------------------------
                           A  1570    ;  684	/* String functions                    
                           A  1571    ;  685	/*-------------------------------------
                           A  1572    ;  686	
                           A  1573    ;  687	/* Test if the byte is DBC 1st byte */
                           A  1574    ;  688	static int dbc_1st (BYTE c)
                           A  1575    ;  689	{
0001A2                     A  1576    _dbc_1st:
                           A  1577    .DEFINE "_dbc_1st"
                           A  1578    
                           A  1579    .VALUE _dbc_1st
                           A  1580    
                           A  1581    .CLASS 3
                           A  1582    
                           A  1583    .TYPE 68
                           A  1584    
                           A  1585    .ENDEF
                           A  1586    
                           A  1587    .BEGFUNC "dbc_1st",689,"_dbc_1st"
                           A  1588    
                           A  1589    .LINE 689
                           A  1590    
                           A  1591    .DEFINE "c"
                           A  1592    
                           A  1593    .CLASS 65
                           A  1594    
                           A  1595    .VALUE 6
                           A  1596    
                           A  1597    .TYPE 12
                           A  1598    
                           A  1599    .ENDEF
                           A  1600    
0001A2 DDE5                A  1601    	PUSH	IX
0001A4 DD210000 00         A  1602    	LD	IX,0
0001A9 DD39                A  1603    	ADD	IX,SP
                           A  1604    ;  690	#if FF_CODE_PAGE == 0		/* Variable
                           A  1605    ;  691		if (DbcTbl && c >= DbcTbl[0]) {
                           A  1606    ;  692			if (c <= DbcTbl[1]) return 1;	
                           A  1607    ;  693			if (c >= DbcTbl[2] && c <= DbcT
                           A  1608    ;  694		}
                           A  1609    ;  695	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1610    ;  696		if (c >= DbcTbl[0]) {
                           A  1611    ;  697			if (c <= DbcTbl[1]) return 1;
                           A  1612    ;  698			if (c >= DbcTbl[2] && c <= DbcT
                           A  1613    ;  699		}
                           A  1614    ;  700	#else						/* SBCS fix
                           A  1615    ;  701		if (c != 0) return 0;	/* Always f
                           A  1616    .LINE 701
                           A  1617    
0001AB DD7E06              A  1618    	LD	A,(IX+%6)
0001AE B7                  A  1619    	OR	A,A
0001AF 28 05               A  1620    	JR	Z,L_11
0001B1 B7                  A  1621    	OR	A,A
0001B2 ED62                A  1622    	SBC	HL,HL
0001B4 18 03               A  1623    	JR	L_12
0001B6                     A  1624    L_11:
                           A  1625    ;  702	#endif
                           A  1626    ;  703		return 0;
                           A  1627    .LINE 703
                           A  1628    
0001B6 B7                  A  1629    	OR	A,A
0001B7 ED62                A  1630    	SBC	HL,HL
                           A  1631    ;  704	}
0001B9                     A  1632    L_12:
                           A  1633    .LINE 704
                           A  1634    
0001B9 DDF9                A  1635    	LD	SP,IX
0001BB DDE1                A  1636    	POP	IX
0001BD C9                  A  1637    	RET	
                           A  1638    
                           A  1639    
                           A  1640    ;**************************** _dbc_1st ********
                           A  1641    ;Name                         Addr/Register   S
                           A  1642    ;c                                     IX+6    
                           A  1643    
                           A  1644    
                           A  1645    ; Stack Frame Size: 9 (bytes)
                           A  1646    ;       Spill Code: -1 (instruction)
                           A  1647    
                           A  1648    
                           A  1649    .ENDFUNC "dbc_1st",704,"_dbc_1st"
                           A  1650    ;  705	
                           A  1651    ;  706	
                           A  1652    ;  707	/* Test if the byte is DBC 2nd byte */
                           A  1653    ;  708	static int dbc_2nd (BYTE c)
                           A  1654    ;  709	{
0001BE                     A  1655    _dbc_2nd:
                           A  1656    .DEFINE "_dbc_2nd"
                           A  1657    
                           A  1658    .VALUE _dbc_2nd
                           A  1659    
                           A  1660    .CLASS 3
                           A  1661    
                           A  1662    .TYPE 68
                           A  1663    
                           A  1664    .ENDEF
                           A  1665    
                           A  1666    .BEGFUNC "dbc_2nd",709,"_dbc_2nd"
                           A  1667    
                           A  1668    .LINE 709
                           A  1669    
                           A  1670    .DEFINE "c"
                           A  1671    
                           A  1672    .CLASS 65
                           A  1673    
                           A  1674    .VALUE 6
                           A  1675    
                           A  1676    .TYPE 12
                           A  1677    
                           A  1678    .ENDEF
                           A  1679    
0001BE DDE5                A  1680    	PUSH	IX
0001C0 DD210000 00         A  1681    	LD	IX,0
0001C5 DD39                A  1682    	ADD	IX,SP
                           A  1683    ;  710	#if FF_CODE_PAGE == 0		/* Variable
                           A  1684    ;  711		if (DbcTbl && c >= DbcTbl[4]) {
                           A  1685    ;  712			if (c <= DbcTbl[5]) return 1;	
                           A  1686    ;  713			if (c >= DbcTbl[6] && c <= DbcT
                           A  1687    ;  714			if (c >= DbcTbl[8] && c <= DbcT
                           A  1688    ;  715		}
                           A  1689    ;  716	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1690    ;  717		if (c >= DbcTbl[4]) {
                           A  1691    ;  718			if (c <= DbcTbl[5]) return 1;
                           A  1692    ;  719			if (c >= DbcTbl[6] && c <= DbcT
                           A  1693    ;  720			if (c >= DbcTbl[8] && c <= DbcT
                           A  1694    ;  721		}
                           A  1695    ;  722	#else						/* SBCS fix
                           A  1696    ;  723		if (c != 0) return 0;	/* Always f
                           A  1697    .LINE 723
                           A  1698    
0001C7 DD7E06              A  1699    	LD	A,(IX+%6)
0001CA B7                  A  1700    	OR	A,A
0001CB 28 05               A  1701    	JR	Z,L_14
0001CD B7                  A  1702    	OR	A,A
0001CE ED62                A  1703    	SBC	HL,HL
0001D0 18 03               A  1704    	JR	L_15
0001D2                     A  1705    L_14:
                           A  1706    ;  724	#endif
                           A  1707    ;  725		return 0;
                           A  1708    .LINE 725
                           A  1709    
0001D2 B7                  A  1710    	OR	A,A
0001D3 ED62                A  1711    	SBC	HL,HL
                           A  1712    ;  726	}
0001D5                     A  1713    L_15:
                           A  1714    .LINE 726
                           A  1715    
0001D5 DDF9                A  1716    	LD	SP,IX
0001D7 DDE1                A  1717    	POP	IX
0001D9 C9                  A  1718    	RET	
                           A  1719    
                           A  1720    
                           A  1721    ;**************************** _dbc_2nd ********
                           A  1722    ;Name                         Addr/Register   S
                           A  1723    ;c                                     IX+6    
                           A  1724    
                           A  1725    
                           A  1726    ; Stack Frame Size: 9 (bytes)
                           A  1727    ;       Spill Code: -1 (instruction)
                           A  1728    
                           A  1729    
                           A  1730    .ENDFUNC "dbc_2nd",726,"_dbc_2nd"
                           A  1731    ;  727	
                           A  1732    ;  728	
                           A  1733    ;  729	#if FF_USE_LFN
                           A  1734    ;  730	
                           A  1735    ;  731	/* Get a Unicode code point from the TC
                           A  1736    ;  732	static DWORD tchar2uni (	/* Returns 
                           A  1737    ;  733		const TCHAR** str		/* Pointer 
                           A  1738    ;  734	)
                           A  1739    ;  735	{
0001DA                     A  1740    _tchar2uni:
                           A  1741    .DEFINE "_tchar2uni"
                           A  1742    
                           A  1743    .VALUE _tchar2uni
                           A  1744    
                           A  1745    .CLASS 3
                           A  1746    
                           A  1747    .TYPE 79
                           A  1748    
                           A  1749    .ENDEF
                           A  1750    
                           A  1751    .BEGFUNC "tchar2uni",735,"_tchar2uni"
                           A  1752    
                           A  1753    .LINE 735
                           A  1754    
                           A  1755    .DEFINE "str"
                           A  1756    
                           A  1757    .CLASS 65
                           A  1758    
                           A  1759    .VALUE 6
                           A  1760    
                           A  1761    .TYPE 1570
                           A  1762    
                           A  1763    .ENDEF
                           A  1764    
                           A  1765    .DEFINE "p"
                           A  1766    
                           A  1767    .CLASS 65
                           A  1768    
                           A  1769    .VALUE -3
                           A  1770    
                           A  1771    .TYPE 194
                           A  1772    
                           A  1773    .ENDEF
                           A  1774    
                           A  1775    .DEFINE "wc"
                           A  1776    
                           A  1777    .CLASS 65
                           A  1778    
                           A  1779    .VALUE -5
                           A  1780    
                           A  1781    .TYPE 13
                           A  1782    
                           A  1783    .ENDEF
                           A  1784    
                           A  1785    .DEFINE "b"
                           A  1786    
                           A  1787    .CLASS 65
                           A  1788    
                           A  1789    .VALUE -6
                           A  1790    
                           A  1791    .TYPE 12
                           A  1792    
                           A  1793    .ENDEF
                           A  1794    
                           A  1795    .DEFINE "uc"
                           A  1796    
                           A  1797    .CLASS 65
                           A  1798    
                           A  1799    .VALUE -10
                           A  1800    
                           A  1801    .TYPE 15
                           A  1802    
                           A  1803    .ENDEF
                           A  1804    
0001DA DDE5                A  1805    	PUSH	IX
0001DC DD210000 00         A  1806    	LD	IX,0
0001E1 DD39                A  1807    	ADD	IX,SP
0001E3 C5                  A  1808    	PUSH	BC
0001E4 C5                  A  1809    	PUSH	BC
0001E5 C5                  A  1810    	PUSH	BC
0001E6 3B                  A  1811    	DEC	SP
                           A  1812    ;  736		DWORD uc;
                           A  1813    ;  737		const TCHAR *p = *str;
                           A  1814    .LINE 737
                           A  1815    
0001E7 DD2706              A  1816    	LD	HL,(IX+%6)
0001EA ED07                A  1817    	LD	BC,(HL)
0001EC DD0FFD              A  1818    	LD	(IX+%FFFFFFFD),BC
                           A  1819    ;  738	
                           A  1820    ;  739	#if FF_LFN_UNICODE == 1		/* UTF-16 i
                           A  1821    ;  740		WCHAR wc;
                           A  1822    ;  741	
                           A  1823    ;  742		uc = *p++;	/* Get a unit */
                           A  1824    ;  743		if (IsSurrogate(uc)) {	/* Surrogat
                           A  1825    ;  744			wc = *p++;		/* Get low surr
                           A  1826    ;  745			if (!IsSurrogateH(uc) || !IsSur
                           A  1827    ;  746			uc = uc << 16 | wc;
                           A  1828    ;  747		}
                           A  1829    ;  748	
                           A  1830    ;  749	#elif FF_LFN_UNICODE == 2	/* UTF-8 in
                           A  1831    ;  750		BYTE b;
                           A  1832    ;  751		int nf;
                           A  1833    ;  752	
                           A  1834    ;  753		uc = (BYTE)*p++;	/* Get an encod
                           A  1835    ;  754		if (uc & 0x80) {	/* Multiple byt
                           A  1836    ;  755			if        ((uc & 0xE0) == 0xC0)
                           A  1837    ;  756				uc &= 0x1F; nf = 1;
                           A  1838    ;  757			} else if ((uc & 0xF0) == 0xE0)
                           A  1839    ;  758				uc &= 0x0F; nf = 2;
                           A  1840    ;  759			} else if ((uc & 0xF8) == 0xF0)
                           A  1841    ;  760				uc &= 0x07; nf = 3;
                           A  1842    ;  761			} else {						
                           A  1843    ;  762				return 0xFFFFFFFF;
                           A  1844    ;  763			}
                           A  1845    ;  764			do {	/* Get trailing bytes *
                           A  1846    ;  765				b = (BYTE)*p++;
                           A  1847    ;  766				if ((b & 0xC0) != 0x80) ret
                           A  1848    ;  767				uc = uc << 6 | (b & 0x3F);
                           A  1849    ;  768			} while (--nf != 0);
                           A  1850    ;  769			if (uc < 0x80 || IsSurrogate(uc
                           A  1851    ;  770			if (uc >= 0x010000) uc = 0xD800
                           A  1852    ;  771		}
                           A  1853    ;  772	
                           A  1854    ;  773	#elif FF_LFN_UNICODE == 3	/* UTF-32 i
                           A  1855    ;  774		uc = (TCHAR)*p++;	/* Get a unit *
                           A  1856    ;  775		if (uc >= 0x110000 || IsSurrogate(u
                           A  1857    ;  776		if (uc >= 0x010000) uc = 0xD800DC00
                           A  1858    ;  777	
                           A  1859    ;  778	#else		/* ANSI/OEM input */
                           A  1860    ;  779		BYTE b;
                           A  1861    ;  780		WCHAR wc;
                           A  1862    ;  781	
                           A  1863    ;  782		wc = (BYTE)*p++;			/* Get 
                           A  1864    .LINE 782
                           A  1865    
0001EF C5E1                A  1866    	LD	HL,BC
0001F1 4E                  A  1867    	LD	C,(HL)
0001F2 0600                A  1868    	LD	B,%0
0001F4 C5E1                A  1869    	LD	HL,BC
0001F6 DD75FB              A  1870    	LD	(IX+%FFFFFFFB),L
0001F9 DD74FC              A  1871    	LD	(IX+%FFFFFFFC),H
0001FC DD07FD              A  1872    	LD	BC,(IX+%FFFFFFFD)
0001FF 03                  A  1873    	INC	BC
000200 DD0FFD              A  1874    	LD	(IX+%FFFFFFFD),BC
                           A  1875    ;  783		if (dbc_1st((BYTE)wc)) {	/* Is i
                           A  1876    .LINE 783
                           A  1877    
000203 DD4EFB              A  1878    	LD	C,(IX+%FFFFFFFB)
000206 0600                A  1879    	LD	B,%0
000208 C5                  A  1880    	PUSH	BC
000209 CD A2 01 00         A  1881    	CALL	_dbc_1st
00020D C1                  A  1882    	POP	BC
00020E 01000000            A  1883    	LD	BC,0
000212 B7                  A  1884    	OR	A,A
000213 ED42                A  1885    	SBC	HL,BC
000215 28 3D               A  1886    	JR	Z,L_23
                           A  1887    ;  784			b = (BYTE)*p++;			/* Get 
                           A  1888    .LINE 784
                           A  1889    
000217 DD27FD              A  1890    	LD	HL,(IX+%FFFFFFFD)
00021A 7E                  A  1891    	LD	A,(HL)
00021B DD77FA              A  1892    	LD	(IX+%FFFFFFFA),A
00021E DD07FD              A  1893    	LD	BC,(IX+%FFFFFFFD)
000221 03                  A  1894    	INC	BC
000222 DD0FFD              A  1895    	LD	(IX+%FFFFFFFD),BC
                           A  1896    ;  785			if (!dbc_2nd(b)) return 0xFFFFF
                           A  1897    .LINE 785
                           A  1898    
000225 DD4EFA              A  1899    	LD	C,(IX+%FFFFFFFA)
000228 0600                A  1900    	LD	B,%0
00022A C5                  A  1901    	PUSH	BC
00022B CD BE 01 00         A  1902    	CALL	_dbc_2nd
00022F C1                  A  1903    	POP	BC
000230 01000000            A  1904    	LD	BC,0
000234 B7                  A  1905    	OR	A,A
000235 ED42                A  1906    	SBC	HL,BC
000237 20 08               A  1907    	JR	NZ,L_19
000239 21FFFFFF            A  1908    	LD	HL,16777215
00023D 1EFF                A  1909    	LD	E,%FF
00023F 18 66               A  1910    	JR	L_25
000241                     A  1911    L_19:
                           A  1912    ;  786			wc = (wc << 8) + b;		/* Make
                           A  1913    .LINE 786
                           A  1914    
000241 DD27FB              A  1915    	LD	HL,(IX+%FFFFFFFB)
000244 65                  A  1916    	LD	H,L
000245 2E00                A  1917    	LD	L,%0
000247 DD4EFA              A  1918    	LD	C,(IX+%FFFFFFFA)
00024A 0600                A  1919    	LD	B,%0
00024C 4009                A  1920    	ADD.SIS	HL,BC
00024E DD75FB              A  1921    	LD	(IX+%FFFFFFFB),L
000251 DD74FC              A  1922    	LD	(IX+%FFFFFFFC),H
                           A  1923    ;  787		}
000254                     A  1924    L_23:
                           A  1925    .LINE 787
                           A  1926    
                           A  1927    ;  788		if (wc != 0) {
                           A  1928    .LINE 788
                           A  1929    
000254 49010000            A  1930    	LD.LIS	BC,0
000258 DD27FB              A  1931    	LD	HL,(IX+%FFFFFFFB)
00025B B7                  A  1932    	OR	A,A
00025C 40ED42              A  1933    	SBC.SIS	HL,BC
00025F 28 2A               A  1934    	JR	Z,L_24
                           A  1935    ;  789			wc = ff_oem2uni(wc, CODEPAGE);	
                           A  1936    .LINE 789
                           A  1937    
000261 01B50100            A  1938    	LD	BC,437
000265 C5                  A  1939    	PUSH	BC
000266 DD07FB              A  1940    	LD	BC,(IX+%FFFFFFFB)
000269 C5                  A  1941    	PUSH	BC
00026A CD 00 00 00         A  1942    	CALL	_ff_oem2uni
00026E C1                  A  1943    	POP	BC
00026F C1                  A  1944    	POP	BC
000270 DD75FB              A  1945    	LD	(IX+%FFFFFFFB),L
000273 DD74FC              A  1946    	LD	(IX+%FFFFFFFC),H
                           A  1947    ;  790			if (wc == 0) return 0xFFFFFFFF;
                           A  1948    .LINE 790
                           A  1949    
000276 49010000            A  1950    	LD.LIS	BC,0
00027A DD27FB              A  1951    	LD	HL,(IX+%FFFFFFFB)
00027D B7                  A  1952    	OR	A,A
00027E 40ED42              A  1953    	SBC.SIS	HL,BC
000281 20 08               A  1954    	JR	NZ,L_24
000283 21FFFFFF            A  1955    	LD	HL,16777215
000287 1EFF                A  1956    	LD	E,%FF
000289 18 1C               A  1957    	JR	L_25
                           A  1958    ;  791		}
00028B                     A  1959    L_24:
                           A  1960    .LINE 791
                           A  1961    
                           A  1962    ;  792		uc = wc;
                           A  1963    .LINE 792
                           A  1964    
00028B DD07FB              A  1965    	LD	BC,(IX+%FFFFFFFB)
00028E CD 00 00 00         A  1966    	CALL	__stoiu
000292 AF                  A  1967    	XOR	A,A
000293 DD2FF6              A  1968    	LD	(IX+%FFFFFFF6),HL
000296 DD77F9              A  1969    	LD	(IX+%FFFFFFF9),A
                           A  1970    ;  793	
                           A  1971    ;  794	#endif
                           A  1972    ;  795		*str = p;	/* Next read pointer */
                           A  1973    .LINE 795
                           A  1974    
000299 DD2706              A  1975    	LD	HL,(IX+%6)
00029C DD07FD              A  1976    	LD	BC,(IX+%FFFFFFFD)
00029F ED0F                A  1977    	LD	(HL),BC
                           A  1978    ;  796		return uc;
                           A  1979    .LINE 796
                           A  1980    
0002A1 DD27F6              A  1981    	LD	HL,(IX+%FFFFFFF6)
0002A4 DD5EF9              A  1982    	LD	E,(IX+%FFFFFFF9)
                           A  1983    ;  797	}
0002A7                     A  1984    L_25:
                           A  1985    .LINE 797
                           A  1986    
0002A7 DDF9                A  1987    	LD	SP,IX
0002A9 DDE1                A  1988    	POP	IX
0002AB C9                  A  1989    	RET	
                           A  1990    
                           A  1991    
                           A  1992    ;**************************** _tchar2uni ******
                           A  1993    ;Name                         Addr/Register   S
                           A  1994    ;_ff_oem2uni                         IMPORT  --
                           A  1995    ;uc                                   IX-10    
                           A  1996    ;b                                     IX-6    
                           A  1997    ;wc                                    IX-5    
                           A  1998    ;p                                     IX-3    
                           A  1999    ;str                                   IX+6    
                           A  2000    
                           A  2001    
                           A  2002    ; Stack Frame Size: 19 (bytes)
                           A  2003    ;       Spill Code: -1 (instruction)
                           A  2004    
                           A  2005    
                           A  2006    .ENDFUNC "tchar2uni",797,"_tchar2uni"
                           A  2007    ;  798	
                           A  2008    ;  799	
                           A  2009    ;  800	/* Store a Unicode char in defined API 
                           A  2010    ;  801	static UINT put_utf (	/* Returns numb
                           A  2011    ;  802		DWORD chr,	/* UTF-16 encoded chara
                           A  2012    ;  803		TCHAR* buf,	/* Output buffer */
                           A  2013    ;  804		UINT szb	/* Size of the buffer *
                           A  2014    ;  805	)
                           A  2015    ;  806	{
0002AC                     A  2016    _put_utf:
                           A  2017    .DEFINE "_put_utf"
                           A  2018    
                           A  2019    .VALUE _put_utf
                           A  2020    
                           A  2021    .CLASS 3
                           A  2022    
                           A  2023    .TYPE 78
                           A  2024    
                           A  2025    .ENDEF
                           A  2026    
                           A  2027    .BEGFUNC "put_utf",806,"_put_utf"
                           A  2028    
                           A  2029    .LINE 806
                           A  2030    
                           A  2031    .DEFINE "chr"
                           A  2032    
                           A  2033    .CLASS 65
                           A  2034    
                           A  2035    .VALUE 6
                           A  2036    
                           A  2037    .TYPE 15
                           A  2038    
                           A  2039    .ENDEF
                           A  2040    
                           A  2041    .DEFINE "buf"
                           A  2042    
                           A  2043    .CLASS 65
                           A  2044    
                           A  2045    .VALUE 12
                           A  2046    
                           A  2047    .TYPE 34
                           A  2048    
                           A  2049    .ENDEF
                           A  2050    
                           A  2051    .DEFINE "szb"
                           A  2052    
                           A  2053    .CLASS 65
                           A  2054    
                           A  2055    .VALUE 15
                           A  2056    
                           A  2057    .TYPE 14
                           A  2058    
                           A  2059    .ENDEF
                           A  2060    
                           A  2061    .DEFINE "wc"
                           A  2062    
                           A  2063    .CLASS 65
                           A  2064    
                           A  2065    .VALUE -2
                           A  2066    
                           A  2067    .TYPE 13
                           A  2068    
                           A  2069    .ENDEF
                           A  2070    
0002AC DDE5                A  2071    	PUSH	IX
0002AE DD210000 00         A  2072    	LD	IX,0
0002B3 DD39                A  2073    	ADD	IX,SP
0002B5 3B                  A  2074    	DEC	SP
0002B6 3B                  A  2075    	DEC	SP
                           A  2076    ;  807	#if FF_LFN_UNICODE == 1	/* UTF-16 outpu
                           A  2077    ;  808		WCHAR hs, wc;
                           A  2078    ;  809	
                           A  2079    ;  810		hs = (WCHAR)(chr >> 16);
                           A  2080    ;  811		wc = (WCHAR)chr;
                           A  2081    ;  812		if (hs == 0) {	/* Single encoding 
                           A  2082    ;  813			if (szb < 1 || IsSurrogate(wc))
                           A  2083    ;  814			*buf = wc;
                           A  2084    ;  815			return 1;
                           A  2085    ;  816		}
                           A  2086    ;  817		if (szb < 2 || !IsSurrogateH(hs) ||
                           A  2087    ;  818		*buf++ = hs;
                           A  2088    ;  819		*buf++ = wc;
                           A  2089    ;  820		return 2;
                           A  2090    ;  821	
                           A  2091    ;  822	#elif FF_LFN_UNICODE == 2	/* UTF-8 ou
                           A  2092    ;  823		DWORD hc;
                           A  2093    ;  824	
                           A  2094    ;  825		if (chr < 0x80) {	/* Single byte 
                           A  2095    ;  826			if (szb < 1) return 0;	/* Buff
                           A  2096    ;  827			*buf = (TCHAR)chr;
                           A  2097    ;  828			return 1;
                           A  2098    ;  829		}
                           A  2099    ;  830		if (chr < 0x800) {	/* 2-byte seque
                           A  2100    ;  831			if (szb < 2) return 0;	/* Buff
                           A  2101    ;  832			*buf++ = (TCHAR)(0xC0 | (chr >>
                           A  2102    ;  833			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2103    ;  834			return 2;
                           A  2104    ;  835		}
                           A  2105    ;  836		if (chr < 0x10000) {	/* 3-byte s
                           A  2106    ;  837			if (szb < 3 || IsSurrogate(chr)
                           A  2107    ;  838			*buf++ = (TCHAR)(0xE0 | (chr >>
                           A  2108    ;  839			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2109    ;  840			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2110    ;  841			return 3;
                           A  2111    ;  842		}
                           A  2112    ;  843		/* 4-byte sequence */
                           A  2113    ;  844		if (szb < 4) return 0;	/* Buffer o
                           A  2114    ;  845		hc = ((chr & 0xFFFF0000) - 0xD80000
                           A  2115    ;  846		chr = (chr & 0xFFFF) - 0xDC00;		
                           A  2116    ;  847		if (hc >= 0x100000 || chr >= 0x400)
                           A  2117    ;  848		chr = (hc | chr) + 0x10000;
                           A  2118    ;  849		*buf++ = (TCHAR)(0xF0 | (chr >> 18 
                           A  2119    ;  850		*buf++ = (TCHAR)(0x80 | (chr >> 12 
                           A  2120    ;  851		*buf++ = (TCHAR)(0x80 | (chr >> 6 &
                           A  2121    ;  852		*buf++ = (TCHAR)(0x80 | (chr >> 0 &
                           A  2122    ;  853		return 4;
                           A  2123    ;  854	
                           A  2124    ;  855	#elif FF_LFN_UNICODE == 3	/* UTF-32 o
                           A  2125    ;  856		DWORD hc;
                           A  2126    ;  857	
                           A  2127    ;  858		if (szb < 1) return 0;	/* Buffer o
                           A  2128    ;  859		if (chr >= 0x10000) {	/* Out of B
                           A  2129    ;  860			hc = ((chr & 0xFFFF0000) - 0xD8
                           A  2130    ;  861			chr = (chr & 0xFFFF) - 0xDC00;	
                           A  2131    ;  862			if (hc >= 0x100000 || chr >= 0x
                           A  2132    ;  863			chr = (hc | chr) + 0x10000;
                           A  2133    ;  864		}
                           A  2134    ;  865		*buf++ = (TCHAR)chr;
                           A  2135    ;  866		return 1;
                           A  2136    ;  867	
                           A  2137    ;  868	#else						/* ANSI/OEM
                           A  2138    ;  869		WCHAR wc;
                           A  2139    ;  870	
                           A  2140    ;  871		wc = ff_uni2oem(chr, CODEPAGE);
                           A  2141    .LINE 871
                           A  2142    
0002B7 01B50100            A  2143    	LD	BC,437
0002BB C5                  A  2144    	PUSH	BC
0002BC DD4E09              A  2145    	LD	C,(IX+%9)
0002BF 0600                A  2146    	LD	B,%0
0002C1 C5                  A  2147    	PUSH	BC
0002C2 DD0706              A  2148    	LD	BC,(IX+%6)
0002C5 C5                  A  2149    	PUSH	BC
0002C6 CD 00 00 00         A  2150    	CALL	_ff_uni2oem
0002CA C1                  A  2151    	POP	BC
0002CB C1                  A  2152    	POP	BC
0002CC C1                  A  2153    	POP	BC
0002CD DD75FE              A  2154    	LD	(IX+%FFFFFFFE),L
0002D0 DD74FF              A  2155    	LD	(IX+%FFFFFFFF),H
                           A  2156    ;  872		if (wc >= 0x100) {	/* Is this a DB
                           A  2157    .LINE 872
                           A  2158    
0002D3 49010001            A  2159    	LD.LIS	BC,256
0002D7 DD27FE              A  2160    	LD	HL,(IX+%FFFFFFFE)
0002DA B7                  A  2161    	OR	A,A
0002DB 40ED42              A  2162    	SBC.SIS	HL,BC
0002DE 38 40               A  2163    	JR	C,L_33
                           A  2164    ;  873			if (szb < 2) return 0;
                           A  2165    .LINE 873
                           A  2166    
0002E0 01020000            A  2167    	LD	BC,2
0002E4 DD270F              A  2168    	LD	HL,(IX+%F)
0002E7 B7                  A  2169    	OR	A,A
0002E8 ED42                A  2170    	SBC	HL,BC
0002EA 30 05               A  2171    	JR	NC,L_28
0002EC B7                  A  2172    	OR	A,A
0002ED ED62                A  2173    	SBC	HL,HL
0002EF 18 58               A  2174    	JR	L_36
0002F1                     A  2175    L_28:
                           A  2176    ;  874			*buf++ = (char)(wc >> 8);	/* 
                           A  2177    .LINE 874
                           A  2178    
0002F1 DD07FE              A  2179    	LD	BC,(IX+%FFFFFFFE)
0002F4 CD 00 00 00         A  2180    	CALL	__stoiu
0002F8 E5C1                A  2181    	LD	BC,HL
0002FA 3B                  A  2182    	DEC	SP
0002FB C5                  A  2183    	PUSH	BC
0002FC 33                  A  2184    	INC	SP
0002FD F1                  A  2185    	POP	AF
0002FE 17ED62              A  2186    	SEXT	HL
000301 E5                  A  2187    	PUSH	HL
000302 C5                  A  2188    	PUSH	BC
000303 33                  A  2189    	INC	SP
000304 E1                  A  2190    	POP	HL
000305 33                  A  2191    	INC	SP
000306 33                  A  2192    	INC	SP
000307 DD310C              A  2193    	LD	IY,(IX+%C)
00030A FD7500              A  2194    	LD	(IY),L
00030D DD070C              A  2195    	LD	BC,(IX+%C)
000310 03                  A  2196    	INC	BC
000311 DD0F0C              A  2197    	LD	(IX+%C),BC
                           A  2198    ;  875			*buf++ = (TCHAR)wc;			/* 
                           A  2199    .LINE 875
                           A  2200    
000314 DD7EFE              A  2201    	LD	A,(IX+%FFFFFFFE)
000317 C5E1                A  2202    	LD	HL,BC
000319 77                  A  2203    	LD	(HL),A
                           A  2204    ;  876			return 2;
                           A  2205    .LINE 876
                           A  2206    
00031A 21020000            A  2207    	LD	HL,2
00031E 18 29               A  2208    	JR	L_36
                           A  2209    ;  877		}
000320                     A  2210    L_33:
                           A  2211    .LINE 877
                           A  2212    
                           A  2213    ;  878		if (wc == 0 || szb < 1) return 0;	
                           A  2214    .LINE 878
                           A  2215    
000320 49010000            A  2216    	LD.LIS	BC,0
000324 DD27FE              A  2217    	LD	HL,(IX+%FFFFFFFE)
000327 B7                  A  2218    	OR	A,A
000328 40ED42              A  2219    	SBC.SIS	HL,BC
00032B 28 0C               A  2220    	JR	Z,L_32
00032D 01010000            A  2221    	LD	BC,1
000331 DD270F              A  2222    	LD	HL,(IX+%F)
000334 B7                  A  2223    	OR	A,A
000335 ED42                A  2224    	SBC	HL,BC
000337 30 05               A  2225    	JR	NC,L_35
000339                     A  2226    L_32:
000339 B7                  A  2227    	OR	A,A
00033A ED62                A  2228    	SBC	HL,HL
00033C 18 0B               A  2229    	JR	L_36
00033E                     A  2230    L_35:
                           A  2231    ;  879		*buf++ = (TCHAR)wc;					
                           A  2232    .LINE 879
                           A  2233    
00033E DD7EFE              A  2234    	LD	A,(IX+%FFFFFFFE)
000341 DD270C              A  2235    	LD	HL,(IX+%C)
000344 77                  A  2236    	LD	(HL),A
                           A  2237    ;  880		return 1;
                           A  2238    .LINE 880
                           A  2239    
000345 21010000            A  2240    	LD	HL,1
                           A  2241    ;  881	#endif
                           A  2242    ;  882	}
000349                     A  2243    L_36:
                           A  2244    .LINE 882
                           A  2245    
000349 DDF9                A  2246    	LD	SP,IX
00034B DDE1                A  2247    	POP	IX
00034D C9                  A  2248    	RET	
                           A  2249    
                           A  2250    
                           A  2251    ;**************************** _put_utf ********
                           A  2252    ;Name                         Addr/Register   S
                           A  2253    ;_ff_uni2oem                         IMPORT  --
                           A  2254    ;wc                                    IX-2    
                           A  2255    ;szb                                  IX+15    
                           A  2256    ;buf                                  IX+12    
                           A  2257    ;chr                                   IX+6    
                           A  2258    
                           A  2259    
                           A  2260    ; Stack Frame Size: 20 (bytes)
                           A  2261    ;       Spill Code: -1 (instruction)
                           A  2262    
                           A  2263    
                           A  2264    .ENDFUNC "put_utf",882,"_put_utf"
                           A  2265    ;  883	#endif	/* FF_USE_LFN */
                           A  2266    ;  884	
                           A  2267    ;  885	
                           A  2268    ;  886	#if FF_FS_REENTRANT
                           A  2269    ;  887	/*-------------------------------------
                           A  2270    ;  888	/* Request/Release grant to access the 
                           A  2271    ;  889	/*-------------------------------------
                           A  2272    ;  890	static int lock_fs (		/* 1:Ok, 0:
                           A  2273    ;  891		FATFS* fs		/* Filesystem objec
                           A  2274    ;  892	)
                           A  2275    ;  893	{
                           A  2276    ;  894		return ff_req_grant(fs->sobj);
                           A  2277    ;  895	}
                           A  2278    ;  896	
                           A  2279    ;  897	
                           A  2280    ;  898	static void unlock_fs (
                           A  2281    ;  899		FATFS* fs,		/* Filesystem objec
                           A  2282    ;  900		FRESULT res		/* Result code to b
                           A  2283    ;  901	)
                           A  2284    ;  902	{
                           A  2285    ;  903		if (fs && res != FR_NOT_ENABLED && 
                           A  2286    ;  904			ff_rel_grant(fs->sobj);
                           A  2287    ;  905		}
                           A  2288    ;  906	}
                           A  2289    ;  907	
                           A  2290    ;  908	#endif
                           A  2291    ;  909	
                           A  2292    ;  910	
                           A  2293    ;  911	
                           A  2294    ;  912	#if FF_FS_LOCK != 0
                           A  2295    ;  913	/*-------------------------------------
                           A  2296    ;  914	/* File lock control functions         
                           A  2297    ;  915	/*-------------------------------------
                           A  2298    ;  916	
                           A  2299    ;  917	static FRESULT chk_lock (	/* Check if
                           A  2300    ;  918		DIR* dp,		/* Directory object
                           A  2301    ;  919		int acc			/* Desired access t
                           A  2302    ;  920	)
                           A  2303    ;  921	{
                           A  2304    ;  922		UINT i, be;
                           A  2305    ;  923	
                           A  2306    ;  924		/* Search open object table for the
                           A  2307    ;  925		be = 0;
                           A  2308    ;  926		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2309    ;  927			if (Files[i].fs) {	/* Existing
                           A  2310    ;  928				if (Files[i].fs == dp->obj.
                           A  2311    ;  929					Files[i].clu == dp->obj
                           A  2312    ;  930					Files[i].ofs == dp->dpt
                           A  2313    ;  931			} else {			/* Blank en
                           A  2314    ;  932				be = 1;
                           A  2315    ;  933			}
                           A  2316    ;  934		}
                           A  2317    ;  935		if (i == FF_FS_LOCK) {	/* The obje
                           A  2318    ;  936			return (!be && acc != 2) ? FR_T
                           A  2319    ;  937		}
                           A  2320    ;  938	
                           A  2321    ;  939		/* The object was opened. Reject an
                           A  2322    ;  940		return (acc != 0 || Files[i].ctr ==
                           A  2323    ;  941	}
                           A  2324    ;  942	
                           A  2325    ;  943	
                           A  2326    ;  944	static int enq_lock (void)	/* Check if
                           A  2327    ;  945	{
                           A  2328    ;  946		UINT i;
                           A  2329    ;  947	
                           A  2330    ;  948		for (i = 0; i < FF_FS_LOCK && Files
                           A  2331    ;  949		return (i == FF_FS_LOCK) ? 0 : 1;
                           A  2332    ;  950	}
                           A  2333    ;  951	
                           A  2334    ;  952	
                           A  2335    ;  953	static UINT inc_lock (	/* Increment ob
                           A  2336    ;  954		DIR* dp,	/* Directory object poi
                           A  2337    ;  955		int acc		/* Desired access (0:Re
                           A  2338    ;  956	)
                           A  2339    ;  957	{
                           A  2340    ;  958		UINT i;
                           A  2341    ;  959	
                           A  2342    ;  960	
                           A  2343    ;  961		for (i = 0; i < FF_FS_LOCK; i++) {	
                           A  2344    ;  962			if (Files[i].fs == dp->obj.fs
                           A  2345    ;  963			 && Files[i].clu == dp->obj.scl
                           A  2346    ;  964			 && Files[i].ofs == dp->dptr) b
                           A  2347    ;  965		}
                           A  2348    ;  966	
                           A  2349    ;  967		if (i == FF_FS_LOCK) {			/* 
                           A  2350    ;  968			for (i = 0; i < FF_FS_LOCK && F
                           A  2351    ;  969			if (i == FF_FS_LOCK) return 0;	
                           A  2352    ;  970			Files[i].fs = dp->obj.fs;
                           A  2353    ;  971			Files[i].clu = dp->obj.sclust;
                           A  2354    ;  972			Files[i].ofs = dp->dptr;
                           A  2355    ;  973			Files[i].ctr = 0;
                           A  2356    ;  974		}
                           A  2357    ;  975	
                           A  2358    ;  976		if (acc >= 1 && Files[i].ctr) retur
                           A  2359    ;  977	
                           A  2360    ;  978		Files[i].ctr = acc ? 0x100 : Files[
                           A  2361    ;  979	
                           A  2362    ;  980		return i + 1;	/* Index number ori
                           A  2363    ;  981	}
                           A  2364    ;  982	
                           A  2365    ;  983	
                           A  2366    ;  984	static FRESULT dec_lock (	/* Decremen
                           A  2367    ;  985		UINT i			/* Semaphore index 
                           A  2368    ;  986	)
                           A  2369    ;  987	{
                           A  2370    ;  988		WORD n;
                           A  2371    ;  989		FRESULT res;
                           A  2372    ;  990	
                           A  2373    ;  991	
                           A  2374    ;  992		if (--i < FF_FS_LOCK) {	/* Index nu
                           A  2375    ;  993			n = Files[i].ctr;
                           A  2376    ;  994			if (n == 0x100) n = 0;	/* If w
                           A  2377    ;  995			if (n > 0) n--;			/* Decr
                           A  2378    ;  996			Files[i].ctr = n;
                           A  2379    ;  997			if (n == 0) Files[i].fs = 0;	
                           A  2380    ;  998			res = FR_OK;
                           A  2381    ;  999		} else {
                           A  2382    ; 1000			res = FR_INT_ERR;		/* Inva
                           A  2383    ; 1001		}
                           A  2384    ; 1002		return res;
                           A  2385    ; 1003	}
                           A  2386    ; 1004	
                           A  2387    ; 1005	
                           A  2388    ; 1006	static void clear_lock (	/* Clear lo
                           A  2389    ; 1007		FATFS *fs
                           A  2390    ; 1008	)
                           A  2391    ; 1009	{
                           A  2392    ; 1010		UINT i;
                           A  2393    ; 1011	
                           A  2394    ; 1012		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2395    ; 1013			if (Files[i].fs == fs) Files[i]
                           A  2396    ; 1014		}
                           A  2397    ; 1015	}
                           A  2398    ; 1016	
                           A  2399    ; 1017	#endif	/* FF_FS_LOCK != 0 */
                           A  2400    ; 1018	
                           A  2401    ; 1019	
                           A  2402    ; 1020	
                           A  2403    ; 1021	/*-------------------------------------
                           A  2404    ; 1022	/* Move/Flush disk access window in the
                           A  2405    ; 1023	/*-------------------------------------
                           A  2406    ; 1024	#if !FF_FS_READONLY
                           A  2407    ; 1025	static FRESULT sync_window (	/* Retu
                           A  2408    ; 1026		FATFS* fs			/* Filesystem o
                           A  2409    ; 1027	)
                           A  2410    ; 1028	{
00034E                     A  2411    _sync_window:
                           A  2412    .DEFINE "_sync_window"
                           A  2413    
                           A  2414    .VALUE _sync_window
                           A  2415    
                           A  2416    .CLASS 3
                           A  2417    
                           A  2418    .TYPE 68
                           A  2419    
                           A  2420    .ENDEF
                           A  2421    
                           A  2422    .BEGFUNC "sync_window",1028,"_sync_window"
                           A  2423    
                           A  2424    .LINE 1028
                           A  2425    
                           A  2426    .DEFINE "fs"
                           A  2427    
                           A  2428    .CLASS 65
                           A  2429    
                           A  2430    .VALUE 6
                           A  2431    
                           A  2432    .TAG "NONAME0"
                           A  2433    
                           A  2434    .TYPE 40
                           A  2435    
                           A  2436    .ENDEF
                           A  2437    
                           A  2438    .DEFINE "res"
                           A  2439    
                           A  2440    .CLASS 65
                           A  2441    
                           A  2442    .VALUE -3
                           A  2443    
                           A  2444    .TYPE 4
                           A  2445    
                           A  2446    .ENDEF
                           A  2447    
00034E DDE5                A  2448    	PUSH	IX
000350 DD210000 00         A  2449    	LD	IX,0
000355 DD39                A  2450    	ADD	IX,SP
000357 ED22F5              A  2451    	LEA	HL,IX+%FFFFFFF5
00035A F9                  A  2452    	LD	SP,HL
                           A  2453    ; 1029		FRESULT res = FR_OK;
                           A  2454    .LINE 1029
                           A  2455    
00035B 01000000            A  2456    	LD	BC,0
00035F DD0FFD              A  2457    	LD	(IX+%FFFFFFFD),BC
                           A  2458    ; 1030	
                           A  2459    ; 1031	
                           A  2460    ; 1032		if (fs->wflag) {	/* Is the disk 
                           A  2461    .LINE 1032
                           A  2462    
000362 DD3106              A  2463    	LD	IY,(IX+%6)
000365 FD7E03              A  2464    	LD	A,(IY+%3)
000368 B7                  A  2465    	OR	A,A
000369 CA 16 04 00         A  2466    	JR	Z,L_42
                           A  2467    ; 1033			if (disk_write(fs->pdrv, fs->wi
                           A  2468    .LINE 1033
                           A  2469    
00036D 01010000            A  2470    	LD	BC,1
000371 C5                  A  2471    	PUSH	BC
000372 DD3106              A  2472    	LD	IY,(IX+%6)
000375 FD0732              A  2473    	LD	BC,(IY+%32)
000378 FD7E35              A  2474    	LD	A,(IY+%35)
00037B 2600                A  2475    	LD	H,%0
00037D 6F                  A  2476    	LD	L,A
00037E E5                  A  2477    	PUSH	HL
00037F C5                  A  2478    	PUSH	BC
000380 ED6636              A  2479    	PEA	IY+%36
000383 FD4E01              A  2480    	LD	C,(IY+%1)
000386 0600                A  2481    	LD	B,%0
000388 C5                  A  2482    	PUSH	BC
000389 CD 00 00 00         A  2483    	CALL	_disk_write
00038D C1                  A  2484    	POP	BC
00038E C1                  A  2485    	POP	BC
00038F C1                  A  2486    	POP	BC
000390 C1                  A  2487    	POP	BC
000391 C1                  A  2488    	POP	BC
000392 01000000            A  2489    	LD	BC,0
000396 B7                  A  2490    	OR	A,A
000397 ED42                A  2491    	SBC	HL,BC
000399 20 74               A  2492    	JR	NZ,L_40
                           A  2493    ; 1034				fs->wflag = 0;	/* Clear wi
                           A  2494    .LINE 1034
                           A  2495    
00039B DD3106              A  2496    	LD	IY,(IX+%6)
00039E FD360300            A  2497    	LD	(IY+%3),%0
                           A  2498    ; 1035				if (fs->winsect - fs->fatba
                           A  2499    .LINE 1035
                           A  2500    
0003A2 FD0732              A  2501    	LD	BC,(IY+%32)
0003A5 FD7E35              A  2502    	LD	A,(IY+%35)
0003A8 DD0FF5              A  2503    	LD	(IX+%FFFFFFF5),BC
0003AB DD77F8              A  2504    	LD	(IX+%FFFFFFF8),A
0003AE FD071E              A  2505    	LD	BC,(IY+%1E)
0003B1 FD7E21              A  2506    	LD	A,(IY+%21)
0003B4 DD0FF9              A  2507    	LD	(IX+%FFFFFFF9),BC
0003B7 DD77FC              A  2508    	LD	(IX+%FFFFFFFC),A
0003BA DD27F5              A  2509    	LD	HL,(IX+%FFFFFFF5)
0003BD DD5EF8              A  2510    	LD	E,(IX+%FFFFFFF8)
0003C0 FD0726              A  2511    	LD	BC,(IY+%26)
0003C3 FD7E29              A  2512    	LD	A,(IY+%29)
0003C6 CD 00 00 00         A  2513    	CALL	__lsub
0003CA DD07F9              A  2514    	LD	BC,(IX+%FFFFFFF9)
0003CD DD7EFC              A  2515    	LD	A,(IX+%FFFFFFFC)
0003D0 CD 00 00 00         A  2516    	CALL	__lcmpu
0003D4 30 40               A  2517    	JR	NC,L_42
                           A  2518    ; 1036					if (fs->n_fats == 2) di
                           A  2519    .LINE 1036
                           A  2520    
0003D6 DD3106              A  2521    	LD	IY,(IX+%6)
0003D9 FD7E02              A  2522    	LD	A,(IY+%2)
0003DC FE02                A  2523    	CP	A,%2
0003DE 20 36               A  2524    	JR	NZ,L_42
0003E0 01010000            A  2525    	LD	BC,1
0003E4 C5                  A  2526    	PUSH	BC
0003E5 DD27F9              A  2527    	LD	HL,(IX+%FFFFFFF9)
0003E8 DD5EFC              A  2528    	LD	E,(IX+%FFFFFFFC)
0003EB DD07F5              A  2529    	LD	BC,(IX+%FFFFFFF5)
0003EE DD7EF8              A  2530    	LD	A,(IX+%FFFFFFF8)
0003F1 CD 00 00 00         A  2531    	CALL	__ladd
0003F5 4B                  A  2532    	LD	C,E
0003F6 0600                A  2533    	LD	B,%0
0003F8 C5                  A  2534    	PUSH	BC
0003F9 E5                  A  2535    	PUSH	HL
0003FA DD3106              A  2536    	LD	IY,(IX+%6)
0003FD ED6636              A  2537    	PEA	IY+%36
000400 FD4E01              A  2538    	LD	C,(IY+%1)
000403 C5                  A  2539    	PUSH	BC
000404 CD 00 00 00         A  2540    	CALL	_disk_write
000408 C1                  A  2541    	POP	BC
000409 C1                  A  2542    	POP	BC
00040A C1                  A  2543    	POP	BC
00040B C1                  A  2544    	POP	BC
00040C C1                  A  2545    	POP	BC
                           A  2546    ; 1037				}
                           A  2547    ; 1038			} else {
                           A  2548    .LINE 1038
                           A  2549    
00040D 18 07               A  2550    	JR	L_42
00040F                     A  2551    L_40:
                           A  2552    ; 1039				res = FR_DISK_ERR;
                           A  2553    .LINE 1039
                           A  2554    
00040F 01010000            A  2555    	LD	BC,1
000413 DD0FFD              A  2556    	LD	(IX+%FFFFFFFD),BC
                           A  2557    ; 1040			}
                           A  2558    ; 1041		}
000416                     A  2559    L_42:
                           A  2560    .LINE 1041
                           A  2561    
                           A  2562    ; 1042		return res;
                           A  2563    .LINE 1042
                           A  2564    
000416 DD27FD              A  2565    	LD	HL,(IX+%FFFFFFFD)
                           A  2566    ; 1043	}
                           A  2567    .LINE 1043
                           A  2568    
000419 DDF9                A  2569    	LD	SP,IX
00041B DDE1                A  2570    	POP	IX
00041D C9                  A  2571    	RET	
                           A  2572    
                           A  2573    
                           A  2574    ;**************************** _sync_window ****
                           A  2575    ;Name                         Addr/Register   S
                           A  2576    ;_disk_write                         IMPORT  --
                           A  2577    ;G_0                                  IX-11    
                           A  2578    ;G_1                                   IX-7    
                           A  2579    ;res                                   IX-3    
                           A  2580    ;fs                                    IX+6    
                           A  2581    
                           A  2582    
                           A  2583    ; Stack Frame Size: 20 (bytes)
                           A  2584    ;       Spill Code: -1 (instruction)
                           A  2585    
                           A  2586    
                           A  2587    .ENDFUNC "sync_window",1043,"_sync_window"
                           A  2588    ; 1044	#endif
                           A  2589    ; 1045	
                           A  2590    ; 1046	
                           A  2591    ; 1047	static FRESULT move_window (	/* Retu
                           A  2592    ; 1048		FATFS* fs,		/* Filesystem objec
                           A  2593    ; 1049		LBA_t sect		/* Sector LBA to ma
                           A  2594    ; 1050	)
                           A  2595    ; 1051	{
00041E                     A  2596    _move_window:
                           A  2597    .DEFINE "_move_window"
                           A  2598    
                           A  2599    .VALUE _move_window
                           A  2600    
                           A  2601    .CLASS 3
                           A  2602    
                           A  2603    .TYPE 68
                           A  2604    
                           A  2605    .ENDEF
                           A  2606    
                           A  2607    .BEGFUNC "move_window",1051,"_move_window"
                           A  2608    
                           A  2609    .LINE 1051
                           A  2610    
                           A  2611    .DEFINE "fs"
                           A  2612    
                           A  2613    .CLASS 65
                           A  2614    
                           A  2615    .VALUE 6
                           A  2616    
                           A  2617    .TAG "NONAME0"
                           A  2618    
                           A  2619    .TYPE 40
                           A  2620    
                           A  2621    .ENDEF
                           A  2622    
                           A  2623    .DEFINE "sect"
                           A  2624    
                           A  2625    .CLASS 65
                           A  2626    
                           A  2627    .VALUE 9
                           A  2628    
                           A  2629    .TYPE 15
                           A  2630    
                           A  2631    .ENDEF
                           A  2632    
                           A  2633    .DEFINE "res"
                           A  2634    
                           A  2635    .CLASS 65
                           A  2636    
                           A  2637    .VALUE -3
                           A  2638    
                           A  2639    .TYPE 4
                           A  2640    
                           A  2641    .ENDEF
                           A  2642    
00041E DDE5                A  2643    	PUSH	IX
000420 DD210000 00         A  2644    	LD	IX,0
000425 DD39                A  2645    	ADD	IX,SP
000427 C5                  A  2646    	PUSH	BC
                           A  2647    ; 1052		FRESULT res = FR_OK;
                           A  2648    .LINE 1052
                           A  2649    
000428 01000000            A  2650    	LD	BC,0
00042C DD0FFD              A  2651    	LD	(IX+%FFFFFFFD),BC
                           A  2652    ; 1053	
                           A  2653    ; 1054	
                           A  2654    ; 1055		if (sect != fs->winsect) {	/* Wind
                           A  2655    .LINE 1055
                           A  2656    
00042F DD3106              A  2657    	LD	IY,(IX+%6)
000432 FD2732              A  2658    	LD	HL,(IY+%32)
000435 FD5E35              A  2659    	LD	E,(IY+%35)
000438 DD0709              A  2660    	LD	BC,(IX+%9)
00043B DD7E0C              A  2661    	LD	A,(IX+%C)
00043E CD 00 00 00         A  2662    	CALL	__lcmpu
000442 28 67               A  2663    	JR	Z,L_48
                           A  2664    ; 1056	#if !FF_FS_READONLY
                           A  2665    ; 1057			res = sync_window(fs);		/* 
                           A  2666    .LINE 1057
                           A  2667    
000444 DD0706              A  2668    	LD	BC,(IX+%6)
000447 C5                  A  2669    	PUSH	BC
000448 CD 4E 03 00         A  2670    	CALL	_sync_window
00044C C1                  A  2671    	POP	BC
00044D DD2FFD              A  2672    	LD	(IX+%FFFFFFFD),HL
                           A  2673    ; 1058	#endif
                           A  2674    ; 1059			if (res == FR_OK) {			/* 
                           A  2675    .LINE 1059
                           A  2676    
000450 01000000            A  2677    	LD	BC,0
000454 DD27FD              A  2678    	LD	HL,(IX+%FFFFFFFD)
000457 B7                  A  2679    	OR	A,A
000458 ED42                A  2680    	SBC	HL,BC
00045A 20 4F               A  2681    	JR	NZ,L_48
                           A  2682    ; 1060				if (disk_read(fs->pdrv, fs-
                           A  2683    .LINE 1060
                           A  2684    
00045C 01010000            A  2685    	LD	BC,1
000460 C5                  A  2686    	PUSH	BC
000461 DD4E0C              A  2687    	LD	C,(IX+%C)
000464 0600                A  2688    	LD	B,%0
000466 C5                  A  2689    	PUSH	BC
000467 DD0709              A  2690    	LD	BC,(IX+%9)
00046A C5                  A  2691    	PUSH	BC
00046B DD3106              A  2692    	LD	IY,(IX+%6)
00046E ED6636              A  2693    	PEA	IY+%36
000471 FD4E01              A  2694    	LD	C,(IY+%1)
000474 0600                A  2695    	LD	B,%0
000476 C5                  A  2696    	PUSH	BC
000477 CD 00 00 00         A  2697    	CALL	_disk_read
00047B C1                  A  2698    	POP	BC
00047C C1                  A  2699    	POP	BC
00047D C1                  A  2700    	POP	BC
00047E C1                  A  2701    	POP	BC
00047F C1                  A  2702    	POP	BC
000480 01000000            A  2703    	LD	BC,0
000484 B7                  A  2704    	OR	A,A
000485 ED42                A  2705    	SBC	HL,BC
000487 28 13               A  2706    	JR	Z,L_45
                           A  2707    ; 1061					sect = (LBA_t)0 - 1;	
                           A  2708    .LINE 1061
                           A  2709    
000489 01FFFFFF            A  2710    	LD	BC,16777215
00048D 3EFF                A  2711    	LD	A,%FF
00048F DD0F09              A  2712    	LD	(IX+%9),BC
000492 DD770C              A  2713    	LD	(IX+%C),A
                           A  2714    ; 1062					res = FR_DISK_ERR;
                           A  2715    .LINE 1062
                           A  2716    
000495 01010000            A  2717    	LD	BC,1
000499 DD0FFD              A  2718    	LD	(IX+%FFFFFFFD),BC
                           A  2719    ; 1063				}
00049C                     A  2720    L_45:
                           A  2721    .LINE 1063
                           A  2722    
                           A  2723    ; 1064				fs->winsect = sect;
                           A  2724    .LINE 1064
                           A  2725    
00049C DD0709              A  2726    	LD	BC,(IX+%9)
00049F DD7E0C              A  2727    	LD	A,(IX+%C)
0004A2 DD3106              A  2728    	LD	IY,(IX+%6)
0004A5 FD0F32              A  2729    	LD	(IY+%32),BC
0004A8 FD7735              A  2730    	LD	(IY+%35),A
                           A  2731    ; 1065			}
                           A  2732    ; 1066		}
0004AB                     A  2733    L_48:
                           A  2734    .LINE 1066
                           A  2735    
                           A  2736    ; 1067		return res;
                           A  2737    .LINE 1067
                           A  2738    
0004AB DD27FD              A  2739    	LD	HL,(IX+%FFFFFFFD)
                           A  2740    ; 1068	}
                           A  2741    .LINE 1068
                           A  2742    
0004AE DDF9                A  2743    	LD	SP,IX
0004B0 DDE1                A  2744    	POP	IX
0004B2 C9                  A  2745    	RET	
                           A  2746    
                           A  2747    
                           A  2748    ;**************************** _move_window ****
                           A  2749    ;Name                         Addr/Register   S
                           A  2750    ;_disk_read                          IMPORT  --
                           A  2751    ;res                                   IX-3    
                           A  2752    ;sect                                  IX+9    
                           A  2753    ;fs                                    IX+6    
                           A  2754    
                           A  2755    
                           A  2756    ; Stack Frame Size: 18 (bytes)
                           A  2757    ;       Spill Code: -1 (instruction)
                           A  2758    
                           A  2759    
                           A  2760    .ENDFUNC "move_window",1068,"_move_window"
                           A  2761    ; 1069	
                           A  2762    ; 1070	
                           A  2763    ; 1071	
                           A  2764    ; 1072	
                           A  2765    ; 1073	#if !FF_FS_READONLY
                           A  2766    ; 1074	/*-------------------------------------
                           A  2767    ; 1075	/* Synchronize filesystem and data on t
                           A  2768    ; 1076	/*-------------------------------------
                           A  2769    ; 1077	
                           A  2770    ; 1078	static FRESULT sync_fs (	/* Returns 
                           A  2771    ; 1079		FATFS* fs		/* Filesystem objec
                           A  2772    ; 1080	)
                           A  2773    ; 1081	{
0004B3                     A  2774    _sync_fs:
                           A  2775    .DEFINE "_sync_fs"
                           A  2776    
                           A  2777    .VALUE _sync_fs
                           A  2778    
                           A  2779    .CLASS 3
                           A  2780    
                           A  2781    .TYPE 68
                           A  2782    
                           A  2783    .ENDEF
                           A  2784    
                           A  2785    .BEGFUNC "sync_fs",1081,"_sync_fs"
                           A  2786    
                           A  2787    .LINE 1081
                           A  2788    
                           A  2789    .DEFINE "fs"
                           A  2790    
                           A  2791    .CLASS 65
                           A  2792    
                           A  2793    .VALUE 6
                           A  2794    
                           A  2795    .TAG "NONAME0"
                           A  2796    
                           A  2797    .TYPE 40
                           A  2798    
                           A  2799    .ENDEF
                           A  2800    
                           A  2801    .DEFINE "res"
                           A  2802    
                           A  2803    .CLASS 65
                           A  2804    
                           A  2805    .VALUE -3
                           A  2806    
                           A  2807    .TYPE 4
                           A  2808    
                           A  2809    .ENDEF
                           A  2810    
0004B3 DDE5                A  2811    	PUSH	IX
0004B5 DD210000 00         A  2812    	LD	IX,0
0004BA DD39                A  2813    	ADD	IX,SP
0004BC C5                  A  2814    	PUSH	BC
                           A  2815    ; 1082		FRESULT res;
                           A  2816    ; 1083	
                           A  2817    ; 1084	
                           A  2818    ; 1085		res = sync_window(fs);
                           A  2819    .LINE 1085
                           A  2820    
0004BD DD0706              A  2821    	LD	BC,(IX+%6)
0004C0 C5                  A  2822    	PUSH	BC
0004C1 CD 4E 03 00         A  2823    	CALL	_sync_window
0004C5 C1                  A  2824    	POP	BC
0004C6 DD2FFD              A  2825    	LD	(IX+%FFFFFFFD),HL
                           A  2826    ; 1086		if (res == FR_OK) {
                           A  2827    .LINE 1086
                           A  2828    
0004C9 01000000            A  2829    	LD	BC,0
0004CD DD27FD              A  2830    	LD	HL,(IX+%FFFFFFFD)
0004D0 B7                  A  2831    	OR	A,A
0004D1 ED42                A  2832    	SBC	HL,BC
0004D3 C2 F1 05 00         A  2833    	JR	NZ,L_55
                           A  2834    ; 1087			if (fs->fs_type == FS_FAT32 && 
                           A  2835    .LINE 1087
                           A  2836    
0004D7 DD3106              A  2837    	LD	IY,(IX+%6)
0004DA FD7E00              A  2838    	LD	A,(IY+%0)
0004DD FE03                A  2839    	CP	A,%3
0004DF C2 CB 05 00         A  2840    	JR	NZ,L_53
0004E3 DD3106              A  2841    	LD	IY,(IX+%6)
0004E6 FD7E04              A  2842    	LD	A,(IY+%4)
0004E9 FE01                A  2843    	CP	A,%1
0004EB C2 CB 05 00         A  2844    	JR	NZ,L_53
                           A  2845    ; 1088				/* Create FSInfo structure 
                           A  2846    ; 1089				memset(fs->win, 0, sizeof f
                           A  2847    .LINE 1089
                           A  2848    
0004EF 01000200            A  2849    	LD	BC,512
0004F3 C5                  A  2850    	PUSH	BC
0004F4 01000000            A  2851    	LD	BC,0
0004F8 C5                  A  2852    	PUSH	BC
0004F9 DD3106              A  2853    	LD	IY,(IX+%6)
0004FC ED6636              A  2854    	PEA	IY+%36
0004FF CD 00 00 00         A  2855    	CALL	_memset
000503 C1                  A  2856    	POP	BC
000504 C1                  A  2857    	POP	BC
000505 C1                  A  2858    	POP	BC
                           A  2859    ; 1090				st_word(fs->win + BS_55AA, 
                           A  2860    .LINE 1090
                           A  2861    
000506 0155AA00            A  2862    	LD	BC,43605
00050A C5                  A  2863    	PUSH	BC
00050B 01FE0100            A  2864    	LD	BC,510
00050F DD3106              A  2865    	LD	IY,(IX+%6)
000512 ED2336              A  2866    	LEA	HL,IY+%36
000515 09                  A  2867    	ADD	HL,BC
000516 E5                  A  2868    	PUSH	HL
000517 CD 06 01 00         A  2869    	CALL	_st_word
00051B C1                  A  2870    	POP	BC
00051C C1                  A  2871    	POP	BC
                           A  2872    ; 1091				st_dword(fs->win + FSI_Lead
                           A  2873    .LINE 1091
                           A  2874    
00051D 01410000            A  2875    	LD	BC,65
000521 C5                  A  2876    	PUSH	BC
000522 01525261            A  2877    	LD	BC,6378066
000526 C5                  A  2878    	PUSH	BC
000527 DD3106              A  2879    	LD	IY,(IX+%6)
00052A ED6636              A  2880    	PEA	IY+%36
00052D CD 45 01 00         A  2881    	CALL	_st_dword
000531 C1                  A  2882    	POP	BC
000532 C1                  A  2883    	POP	BC
000533 C1                  A  2884    	POP	BC
                           A  2885    ; 1092				st_dword(fs->win + FSI_Stru
                           A  2886    .LINE 1092
                           A  2887    
000534 01610000            A  2888    	LD	BC,97
000538 C5                  A  2889    	PUSH	BC
000539 01727241            A  2890    	LD	BC,4289138
00053D C5                  A  2891    	PUSH	BC
00053E 01E40100            A  2892    	LD	BC,484
000542 DD3106              A  2893    	LD	IY,(IX+%6)
000545 ED2336              A  2894    	LEA	HL,IY+%36
000548 09                  A  2895    	ADD	HL,BC
000549 E5                  A  2896    	PUSH	HL
00054A CD 45 01 00         A  2897    	CALL	_st_dword
00054E C1                  A  2898    	POP	BC
00054F C1                  A  2899    	POP	BC
000550 C1                  A  2900    	POP	BC
                           A  2901    ; 1093				st_dword(fs->win + FSI_Free
                           A  2902    .LINE 1093
                           A  2903    
000551 DD3106              A  2904    	LD	IY,(IX+%6)
000554 FD0712              A  2905    	LD	BC,(IY+%12)
000557 FD7E15              A  2906    	LD	A,(IY+%15)
00055A 2600                A  2907    	LD	H,%0
00055C 6F                  A  2908    	LD	L,A
00055D E5                  A  2909    	PUSH	HL
00055E C5                  A  2910    	PUSH	BC
00055F 01E80100            A  2911    	LD	BC,488
000563 ED2336              A  2912    	LEA	HL,IY+%36
000566 09                  A  2913    	ADD	HL,BC
000567 E5                  A  2914    	PUSH	HL
000568 CD 45 01 00         A  2915    	CALL	_st_dword
00056C C1                  A  2916    	POP	BC
00056D C1                  A  2917    	POP	BC
00056E C1                  A  2918    	POP	BC
                           A  2919    ; 1094				st_dword(fs->win + FSI_Nxt_
                           A  2920    .LINE 1094
                           A  2921    
00056F DD3106              A  2922    	LD	IY,(IX+%6)
000572 FD070E              A  2923    	LD	BC,(IY+%E)
000575 FD7E11              A  2924    	LD	A,(IY+%11)
000578 2600                A  2925    	LD	H,%0
00057A 6F                  A  2926    	LD	L,A
00057B E5                  A  2927    	PUSH	HL
00057C C5                  A  2928    	PUSH	BC
00057D 01EC0100            A  2929    	LD	BC,492
000581 ED2336              A  2930    	LEA	HL,IY+%36
000584 09                  A  2931    	ADD	HL,BC
000585 E5                  A  2932    	PUSH	HL
000586 CD 45 01 00         A  2933    	CALL	_st_dword
00058A C1                  A  2934    	POP	BC
00058B C1                  A  2935    	POP	BC
00058C C1                  A  2936    	POP	BC
                           A  2937    ; 1095				fs->winsect = fs->volbase +
                           A  2938    .LINE 1095
                           A  2939    
00058D DD3106              A  2940    	LD	IY,(IX+%6)
000590 FD2722              A  2941    	LD	HL,(IY+%22)
000593 FD5E25              A  2942    	LD	E,(IY+%25)
000596 3E01                A  2943    	LD	A,%1
000598 CD 00 00 00         A  2944    	CALL	__ladd_b
00059C FD2F32              A  2945    	LD	(IY+%32),HL
00059F FD7335              A  2946    	LD	(IY+%35),E
                           A  2947    ; 1096				disk_write(fs->pdrv, fs->wi
                           A  2948    .LINE 1096
                           A  2949    
0005A2 01010000            A  2950    	LD	BC,1
0005A6 C5                  A  2951    	PUSH	BC
0005A7 FD0732              A  2952    	LD	BC,(IY+%32)
0005AA FD7E35              A  2953    	LD	A,(IY+%35)
0005AD 2600                A  2954    	LD	H,%0
0005AF 6F                  A  2955    	LD	L,A
0005B0 E5                  A  2956    	PUSH	HL
0005B1 C5                  A  2957    	PUSH	BC
0005B2 ED6636              A  2958    	PEA	IY+%36
0005B5 FD4E01              A  2959    	LD	C,(IY+%1)
0005B8 0600                A  2960    	LD	B,%0
0005BA C5                  A  2961    	PUSH	BC
0005BB CD 00 00 00         A  2962    	CALL	_disk_write
0005BF C1                  A  2963    	POP	BC
0005C0 C1                  A  2964    	POP	BC
0005C1 C1                  A  2965    	POP	BC
0005C2 C1                  A  2966    	POP	BC
0005C3 C1                  A  2967    	POP	BC
                           A  2968    ; 1097				fs->fsi_flag = 0;
                           A  2969    .LINE 1097
                           A  2970    
0005C4 DD3106              A  2971    	LD	IY,(IX+%6)
0005C7 FD360400            A  2972    	LD	(IY+%4),%0
                           A  2973    ; 1098			}
0005CB                     A  2974    L_53:
                           A  2975    .LINE 1098
                           A  2976    
                           A  2977    ; 1099			/* Make sure that no pending wr
                           A  2978    ; 1100			if (disk_ioctl(fs->pdrv, CTRL_S
                           A  2979    .LINE 1100
                           A  2980    
0005CB 01000000            A  2981    	LD	BC,0
0005CF C5                  A  2982    	PUSH	BC
0005D0 C5                  A  2983    	PUSH	BC
0005D1 DD3106              A  2984    	LD	IY,(IX+%6)
0005D4 FD4E01              A  2985    	LD	C,(IY+%1)
0005D7 0600                A  2986    	LD	B,%0
0005D9 C5                  A  2987    	PUSH	BC
0005DA CD 00 00 00         A  2988    	CALL	_disk_ioctl
0005DE C1                  A  2989    	POP	BC
0005DF C1                  A  2990    	POP	BC
0005E0 C1                  A  2991    	POP	BC
0005E1 01000000            A  2992    	LD	BC,0
0005E5 B7                  A  2993    	OR	A,A
0005E6 ED42                A  2994    	SBC	HL,BC
0005E8 28 07               A  2995    	JR	Z,L_55
0005EA 01010000            A  2996    	LD	BC,1
0005EE DD0FFD              A  2997    	LD	(IX+%FFFFFFFD),BC
                           A  2998    ; 1101		}
0005F1                     A  2999    L_55:
                           A  3000    .LINE 1101
                           A  3001    
                           A  3002    ; 1102	
                           A  3003    ; 1103		return res;
                           A  3004    .LINE 1103
                           A  3005    
0005F1 DD27FD              A  3006    	LD	HL,(IX+%FFFFFFFD)
                           A  3007    ; 1104	}
                           A  3008    .LINE 1104
                           A  3009    
0005F4 DDF9                A  3010    	LD	SP,IX
0005F6 DDE1                A  3011    	POP	IX
0005F8 C9                  A  3012    	RET	
                           A  3013    
                           A  3014    
                           A  3015    ;**************************** _sync_fs ********
                           A  3016    ;Name                         Addr/Register   S
                           A  3017    ;_disk_ioctl                         IMPORT  --
                           A  3018    ;_disk_write                         IMPORT  --
                           A  3019    ;_memset                             IMPORT  --
                           A  3020    ;res                                   IX-3    
                           A  3021    ;fs                                    IX+6    
                           A  3022    
                           A  3023    
                           A  3024    ; Stack Frame Size: 12 (bytes)
                           A  3025    ;       Spill Code: -1 (instruction)
                           A  3026    
                           A  3027    
                           A  3028    .ENDFUNC "sync_fs",1104,"_sync_fs"
                           A  3029    ; 1105	
                           A  3030    ; 1106	#endif
                           A  3031    ; 1107	
                           A  3032    ; 1108	
                           A  3033    ; 1109	
                           A  3034    ; 1110	/*-------------------------------------
                           A  3035    ; 1111	/* Get physical sector number from clus
                           A  3036    ; 1112	/*-------------------------------------
                           A  3037    ; 1113	
                           A  3038    ; 1114	static LBA_t clst2sect (	/* !=0:Sect
                           A  3039    ; 1115		FATFS* fs,		/* Filesystem objec
                           A  3040    ; 1116		DWORD clst		/* Cluster# to be c
                           A  3041    ; 1117	)
                           A  3042    ; 1118	{
0005F9                     A  3043    _clst2sect:
                           A  3044    .DEFINE "_clst2sect"
                           A  3045    
                           A  3046    .VALUE _clst2sect
                           A  3047    
                           A  3048    .CLASS 3
                           A  3049    
                           A  3050    .TYPE 79
                           A  3051    
                           A  3052    .ENDEF
                           A  3053    
                           A  3054    .BEGFUNC "clst2sect",1118,"_clst2sect"
                           A  3055    
                           A  3056    .LINE 1118
                           A  3057    
                           A  3058    .DEFINE "fs"
                           A  3059    
                           A  3060    .CLASS 65
                           A  3061    
                           A  3062    .VALUE 6
                           A  3063    
                           A  3064    .TAG "NONAME0"
                           A  3065    
                           A  3066    .TYPE 40
                           A  3067    
                           A  3068    .ENDEF
                           A  3069    
                           A  3070    .DEFINE "clst"
                           A  3071    
                           A  3072    .CLASS 65
                           A  3073    
                           A  3074    .VALUE 9
                           A  3075    
                           A  3076    .TYPE 15
                           A  3077    
                           A  3078    .ENDEF
                           A  3079    
0005F9 DDE5                A  3080    	PUSH	IX
0005FB DD210000 00         A  3081    	LD	IX,0
000600 DD39                A  3082    	ADD	IX,SP
                           A  3083    ; 1119		clst -= 2;		/* Cluster number i
                           A  3084    .LINE 1119
                           A  3085    
000602 DD2709              A  3086    	LD	HL,(IX+%9)
000605 DD5E0C              A  3087    	LD	E,(IX+%C)
000608 01020000            A  3088    	LD	BC,2
00060C AF                  A  3089    	XOR	A,A
00060D CD 00 00 00         A  3090    	CALL	__lsub
000611 DD2F09              A  3091    	LD	(IX+%9),HL
000614 DD730C              A  3092    	LD	(IX+%C),E
                           A  3093    ; 1120		if (clst >= fs->n_fatent - 2) retur
                           A  3094    .LINE 1120
                           A  3095    
000617 DD3106              A  3096    	LD	IY,(IX+%6)
00061A FD271A              A  3097    	LD	HL,(IY+%1A)
00061D FD5E1D              A  3098    	LD	E,(IY+%1D)
000620 01020000            A  3099    	LD	BC,2
000624 AF                  A  3100    	XOR	A,A
000625 CD 00 00 00         A  3101    	CALL	__lsub
000629 7B                  A  3102    	LD	A,E
00062A E5C1                A  3103    	LD	BC,HL
00062C DD2709              A  3104    	LD	HL,(IX+%9)
00062F DD5E0C              A  3105    	LD	E,(IX+%C)
000632 CD 00 00 00         A  3106    	CALL	__lcmpu
000636 38 07               A  3107    	JR	C,L_58
000638 B7                  A  3108    	OR	A,A
000639 ED62                A  3109    	SBC	HL,HL
00063B 1E00                A  3110    	LD	E,%0
00063D 18 20               A  3111    	JR	L_59
00063F                     A  3112    L_58:
                           A  3113    ; 1121		return fs->database + (LBA_t)fs->cs
                           A  3114    .LINE 1121
                           A  3115    
00063F DD3106              A  3116    	LD	IY,(IX+%6)
000642 FD0709              A  3117    	LD	BC,(IY+%9)
000645 CD 00 00 00         A  3118    	CALL	__stoiu
000649 1E00                A  3119    	LD	E,%0
00064B DD0709              A  3120    	LD	BC,(IX+%9)
00064E DD7E0C              A  3121    	LD	A,(IX+%C)
000651 CD 00 00 00         A  3122    	CALL	__lmulu
000655 FD072E              A  3123    	LD	BC,(IY+%2E)
000658 FD7E31              A  3124    	LD	A,(IY+%31)
00065B CD 00 00 00         A  3125    	CALL	__ladd
                           A  3126    ; 1122	}
00065F                     A  3127    L_59:
                           A  3128    .LINE 1122
                           A  3129    
00065F DDF9                A  3130    	LD	SP,IX
000661 DDE1                A  3131    	POP	IX
000663 C9                  A  3132    	RET	
                           A  3133    
                           A  3134    
                           A  3135    ;**************************** _clst2sect ******
                           A  3136    ;Name                         Addr/Register   S
                           A  3137    ;clst                                  IX+9    
                           A  3138    ;fs                                    IX+6    
                           A  3139    
                           A  3140    
                           A  3141    ; Stack Frame Size: 15 (bytes)
                           A  3142    ;       Spill Code: -1 (instruction)
                           A  3143    
                           A  3144    
                           A  3145    .ENDFUNC "clst2sect",1122,"_clst2sect"
                           A  3146    ; 1123	
                           A  3147    ; 1124	
                           A  3148    ; 1125	
                           A  3149    ; 1126	
                           A  3150    ; 1127	/*-------------------------------------
                           A  3151    ; 1128	/* FAT access - Read value of an FAT en
                           A  3152    ; 1129	/*-------------------------------------
                           A  3153    ; 1130	
                           A  3154    ; 1131	static DWORD get_fat (		/* 0xFFFFFF
                           A  3155    ; 1132		FFOBJID* obj,	/* Corresponding ob
                           A  3156    ; 1133		DWORD clst		/* Cluster number t
                           A  3157    ; 1134	)
                           A  3158    ; 1135	{
000664                     A  3159    _get_fat:
                           A  3160    .DEFINE "_get_fat"
                           A  3161    
                           A  3162    .VALUE _get_fat
                           A  3163    
                           A  3164    .CLASS 3
                           A  3165    
                           A  3166    .TYPE 79
                           A  3167    
                           A  3168    .ENDEF
                           A  3169    
                           A  3170    .BEGFUNC "get_fat",1135,"_get_fat"
                           A  3171    
                           A  3172    .LINE 1135
                           A  3173    
                           A  3174    .DEFINE "obj"
                           A  3175    
                           A  3176    .CLASS 65
                           A  3177    
                           A  3178    .VALUE 6
                           A  3179    
                           A  3180    .TAG "NONAME1"
                           A  3181    
                           A  3182    .TYPE 40
                           A  3183    
                           A  3184    .ENDEF
                           A  3185    
                           A  3186    .DEFINE "clst"
                           A  3187    
                           A  3188    .CLASS 65
                           A  3189    
                           A  3190    .VALUE 9
                           A  3191    
                           A  3192    .TYPE 15
                           A  3193    
                           A  3194    .ENDEF
                           A  3195    
                           A  3196    .DEFINE "fs"
                           A  3197    
                           A  3198    .CLASS 65
                           A  3199    
                           A  3200    .VALUE -3
                           A  3201    
                           A  3202    .TAG "NONAME0"
                           A  3203    
                           A  3204    .TYPE 40
                           A  3205    
                           A  3206    .ENDEF
                           A  3207    
                           A  3208    .DEFINE "bc"
                           A  3209    
                           A  3210    .CLASS 65
                           A  3211    
                           A  3212    .VALUE -6
                           A  3213    
                           A  3214    .TYPE 14
                           A  3215    
                           A  3216    .ENDEF
                           A  3217    
                           A  3218    .DEFINE "val"
                           A  3219    
                           A  3220    .CLASS 65
                           A  3221    
                           A  3222    .VALUE -10
                           A  3223    
                           A  3224    .TYPE 15
                           A  3225    
                           A  3226    .ENDEF
                           A  3227    
                           A  3228    .DEFINE "wc"
                           A  3229    
                           A  3230    .CLASS 65
                           A  3231    
                           A  3232    .VALUE -13
                           A  3233    
                           A  3234    .TYPE 14
                           A  3235    
                           A  3236    .ENDEF
                           A  3237    
000664 DDE5                A  3238    	PUSH	IX
000666 DD210000 00         A  3239    	LD	IX,0
00066B DD39                A  3240    	ADD	IX,SP
00066D ED22F0              A  3241    	LEA	HL,IX+%FFFFFFF0
000670 F9                  A  3242    	LD	SP,HL
                           A  3243    ; 1136		UINT wc, bc;
                           A  3244    ; 1137		DWORD val;
                           A  3245    ; 1138		FATFS *fs = obj->fs;
                           A  3246    .LINE 1138
                           A  3247    
000671 DD3106              A  3248    	LD	IY,(IX+%6)
000674 FD0700              A  3249    	LD	BC,(IY+%0)
000677 DD0FFD              A  3250    	LD	(IX+%FFFFFFFD),BC
                           A  3251    ; 1139	
                           A  3252    ; 1140	
                           A  3253    ; 1141		if (clst < 2 || clst >= fs->n_faten
                           A  3254    .LINE 1141
                           A  3255    
00067A DD2709              A  3256    	LD	HL,(IX+%9)
00067D DD5E0C              A  3257    	LD	E,(IX+%C)
000680 01020000            A  3258    	LD	BC,2
000684 AF                  A  3259    	XOR	A,A
000685 CD 00 00 00         A  3260    	CALL	__lcmpu
000689 38 15               A  3261    	JR	C,L_78
00068B DD2709              A  3262    	LD	HL,(IX+%9)
00068E DD5E0C              A  3263    	LD	E,(IX+%C)
000691 DD31FD              A  3264    	LD	IY,(IX+%FFFFFFFD)
000694 FD071A              A  3265    	LD	BC,(IY+%1A)
000697 FD7E1D              A  3266    	LD	A,(IY+%1D)
00069A CD 00 00 00         A  3267    	CALL	__lcmpu
00069E 38 0F               A  3268    	JR	C,L_79
0006A0                     A  3269    L_78:
                           A  3270    ; 1142			val = 1;	/* Internal error *
                           A  3271    .LINE 1142
                           A  3272    
0006A0 01010000            A  3273    	LD	BC,1
0006A4 AF                  A  3274    	XOR	A,A
0006A5 DD0FF6              A  3275    	LD	(IX+%FFFFFFF6),BC
0006A8 DD77F9              A  3276    	LD	(IX+%FFFFFFF9),A
                           A  3277    ; 1143	
                           A  3278    ; 1144		} else {
                           A  3279    .LINE 1144
                           A  3280    
0006AB C3 CB 08 00         A  3281    	JR	L_80
0006AF                     A  3282    L_79:
                           A  3283    ; 1145			val = 0xFFFFFFFF;	/* Default 
                           A  3284    .LINE 1145
                           A  3285    
0006AF 01FFFFFF            A  3286    	LD	BC,16777215
0006B3 3EFF                A  3287    	LD	A,%FF
0006B5 DD0FF6              A  3288    	LD	(IX+%FFFFFFF6),BC
0006B8 DD77F9              A  3289    	LD	(IX+%FFFFFFF9),A
                           A  3290    ; 1146	
                           A  3291    ; 1147			switch (fs->fs_type) {
                           A  3292    .LINE 1147
                           A  3293    
0006BB DD31FD              A  3294    	LD	IY,(IX+%FFFFFFFD)
0006BE FD7E00              A  3295    	LD	A,(IY+%0)
0006C1 B7ED62              A  3296    	UEXT	HL
0006C4 6F                  A  3297    	LD	L,A
0006C5 E5C1                A  3298    	LD	BC,HL
0006C7                     A  3299    L__37:
0006C7 11010000            A  3300    	LD	DE,1
0006CB B7                  A  3301    	OR	A,A
0006CC ED52                A  3302    	SBC	HL,DE
0006CE DA C0 08 00         A  3303    	JR	C,L_77
0006D2 21030000            A  3304    	LD	HL,3
0006D6 B7                  A  3305    	OR	A,A
0006D7 ED42                A  3306    	SBC	HL,BC
0006D9 DA C0 08 00         A  3307    	JR	C,L_77
0006DD C5E1                A  3308    	LD	HL,BC
0006DF E5C1                A  3309    	LD	BC,HL
0006E1 29                  A  3310    	ADD	HL,HL
0006E2 09                  A  3311    	ADD	HL,BC
0006E3 01 E8 06 00         A  3312    	LD	BC,L__36-3
0006E7 09                  A  3313    	ADD	HL,BC
0006E8 ED27                A  3314    	LD	HL,(HL)
0006EA E9                  A  3315    	JP	(HL)
0006EB                     A  3316    L__36:
0006EB F40600              A  3317    	DW24	L_61	
                           A  3318    
0006EE F30700              A  3319    	DW24	L_71	
                           A  3320    
0006F1 550800              A  3321    	DW24	L_74	
                           A  3322    
                           A  3323    ; 1148			case FS_FAT12 :
0006F4                     A  3324    L_61:
                           A  3325    .LINE 1148
                           A  3326    
                           A  3327    ; 1149				bc = (UINT)clst; bc += bc /
                           A  3328    .LINE 1149
                           A  3329    
0006F4 DD2709              A  3330    	LD	HL,(IX+%9)
0006F7 3E01                A  3331    	LD	A,%1
0006F9 CD 00 00 00         A  3332    	CALL	__ishru_b
0006FD DD0709              A  3333    	LD	BC,(IX+%9)
000700 09                  A  3334    	ADD	HL,BC
000701 DD2FFA              A  3335    	LD	(IX+%FFFFFFFA),HL
                           A  3336    ; 1150				if (move_window(fs, fs->fat
                           A  3337    .LINE 1150
                           A  3338    
000704 3E09                A  3339    	LD	A,%9
000706 CD 00 00 00         A  3340    	CALL	__ishru_b
00070A E5C1                A  3341    	LD	BC,HL
00070C AF                  A  3342    	XOR	A,A
00070D DD31FD              A  3343    	LD	IY,(IX+%FFFFFFFD)
000710 FD2726              A  3344    	LD	HL,(IY+%26)
000713 FD5E29              A  3345    	LD	E,(IY+%29)
000716 CD 00 00 00         A  3346    	CALL	__ladd
00071A 4B                  A  3347    	LD	C,E
00071B 0600                A  3348    	LD	B,%0
00071D C5                  A  3349    	PUSH	BC
00071E E5                  A  3350    	PUSH	HL
00071F DD07FD              A  3351    	LD	BC,(IX+%FFFFFFFD)
000722 C5                  A  3352    	PUSH	BC
000723 CD 1E 04 00         A  3353    	CALL	_move_window
000727 C1                  A  3354    	POP	BC
000728 C1                  A  3355    	POP	BC
000729 C1                  A  3356    	POP	BC
00072A 01000000            A  3357    	LD	BC,0
00072E B7                  A  3358    	OR	A,A
00072F ED42                A  3359    	SBC	HL,BC
000731 C2 CB 08 00         A  3360    	JR	NZ,L_80
                           A  3361    ; 1151				wc = fs->win[bc++ % SS(fs)]
                           A  3362    .LINE 1151
                           A  3363    
000735 01FF0100            A  3364    	LD	BC,511
000739 DD27FA              A  3365    	LD	HL,(IX+%FFFFFFFA)
00073C CD 00 00 00         A  3366    	CALL	__iand
000740 E5C1                A  3367    	LD	BC,HL
000742 DD31FD              A  3368    	LD	IY,(IX+%FFFFFFFD)
000745 ED2336              A  3369    	LEA	HL,IY+%36
000748 09                  A  3370    	ADD	HL,BC
000749 7E                  A  3371    	LD	A,(HL)
00074A B7ED62              A  3372    	UEXT	HL
00074D 6F                  A  3373    	LD	L,A
00074E DD2FF3              A  3374    	LD	(IX+%FFFFFFF3),HL
000751 DD07FA              A  3375    	LD	BC,(IX+%FFFFFFFA)
000754 03                  A  3376    	INC	BC
000755 DD0FFA              A  3377    	LD	(IX+%FFFFFFFA),BC
                           A  3378    ; 1152				if (move_window(fs, fs->fat
                           A  3379    .LINE 1152
                           A  3380    
000758 C5E1                A  3381    	LD	HL,BC
00075A 3E09                A  3382    	LD	A,%9
00075C CD 00 00 00         A  3383    	CALL	__ishru_b
000760 E5C1                A  3384    	LD	BC,HL
000762 AF                  A  3385    	XOR	A,A
000763 FD2726              A  3386    	LD	HL,(IY+%26)
000766 FD5E29              A  3387    	LD	E,(IY+%29)
000769 CD 00 00 00         A  3388    	CALL	__ladd
00076D 4B                  A  3389    	LD	C,E
00076E 0600                A  3390    	LD	B,%0
000770 C5                  A  3391    	PUSH	BC
000771 E5                  A  3392    	PUSH	HL
000772 DD07FD              A  3393    	LD	BC,(IX+%FFFFFFFD)
000775 C5                  A  3394    	PUSH	BC
000776 CD 1E 04 00         A  3395    	CALL	_move_window
00077A C1                  A  3396    	POP	BC
00077B C1                  A  3397    	POP	BC
00077C C1                  A  3398    	POP	BC
00077D 01000000            A  3399    	LD	BC,0
000781 B7                  A  3400    	OR	A,A
000782 ED42                A  3401    	SBC	HL,BC
000784 C2 CB 08 00         A  3402    	JR	NZ,L_80
                           A  3403    ; 1153				wc |= fs->win[bc % SS(fs)] 
                           A  3404    .LINE 1153
                           A  3405    
000788 01FF0100            A  3406    	LD	BC,511
00078C DD27FA              A  3407    	LD	HL,(IX+%FFFFFFFA)
00078F CD 00 00 00         A  3408    	CALL	__iand
000793 E5C1                A  3409    	LD	BC,HL
000795 DD31FD              A  3410    	LD	IY,(IX+%FFFFFFFD)
000798 ED2336              A  3411    	LEA	HL,IY+%36
00079B 09                  A  3412    	ADD	HL,BC
00079C 7E                  A  3413    	LD	A,(HL)
00079D B7ED62              A  3414    	UEXT	HL
0007A0 6F                  A  3415    	LD	L,A
0007A1 E5                  A  3416    	PUSH	HL
0007A2 B7ED62              A  3417    	UEXT	HL
0007A5 E5                  A  3418    	PUSH	HL
0007A6 33                  A  3419    	INC	SP
0007A7 33                  A  3420    	INC	SP
0007A8 E1                  A  3421    	POP	HL
0007A9 33                  A  3422    	INC	SP
0007AA DD07F3              A  3423    	LD	BC,(IX+%FFFFFFF3)
0007AD CD 00 00 00         A  3424    	CALL	__ior
0007B1 DD2FF3              A  3425    	LD	(IX+%FFFFFFF3),HL
                           A  3426    ; 1154				val = (clst & 1) ? (wc >> 4
                           A  3427    .LINE 1154
                           A  3428    
0007B4 DD7E09              A  3429    	LD	A,(IX+%9)
0007B7 E601                A  3430    	AND	A,%1
0007B9 B7ED62              A  3431    	UEXT	HL
0007BC 6F                  A  3432    	LD	L,A
0007BD 5C                  A  3433    	LD	E,H
0007BE 01000000            A  3434    	LD	BC,0
0007C2 AF                  A  3435    	XOR	A,A
0007C3 CD 00 00 00         A  3436    	CALL	__lcmpu
0007C7 28 0E               A  3437    	JR	Z,L_69
0007C9 DD27F3              A  3438    	LD	HL,(IX+%FFFFFFF3)
0007CC 3E04                A  3439    	LD	A,%4
0007CE CD 00 00 00         A  3440    	CALL	__ishru_b
0007D2 DD2FF0              A  3441    	LD	(IX+%FFFFFFF0),HL
0007D5 18 0E               A  3442    	JR	L_70
0007D7                     A  3443    L_69:
0007D7 01FF0F00            A  3444    	LD	BC,4095
0007DB DD27F3              A  3445    	LD	HL,(IX+%FFFFFFF3)
0007DE CD 00 00 00         A  3446    	CALL	__iand
0007E2 DD2FF0              A  3447    	LD	(IX+%FFFFFFF0),HL
0007E5                     A  3448    L_70:
0007E5 DD07F0              A  3449    	LD	BC,(IX+%FFFFFFF0)
0007E8 AF                  A  3450    	XOR	A,A
0007E9 DD0FF6              A  3451    	LD	(IX+%FFFFFFF6),BC
0007EC DD77F9              A  3452    	LD	(IX+%FFFFFFF9),A
                           A  3453    ; 1155				break;
                           A  3454    .LINE 1155
                           A  3455    
0007EF C3 CB 08 00         A  3456    	JR	L_80
                           A  3457    ; 1156	
                           A  3458    ; 1157			case FS_FAT16 :
0007F3                     A  3459    L_71:
                           A  3460    .LINE 1157
                           A  3461    
                           A  3462    ; 1158				if (move_window(fs, fs->fat
                           A  3463    .LINE 1158
                           A  3464    
0007F3 DD070A              A  3465    	LD	BC,(IX+%A)
0007F6 AF                  A  3466    	XOR	A,A
0007F7 DD31FD              A  3467    	LD	IY,(IX+%FFFFFFFD)
0007FA FD2726              A  3468    	LD	HL,(IY+%26)
0007FD FD5E29              A  3469    	LD	E,(IY+%29)
000800 CD 00 00 00         A  3470    	CALL	__ladd
000804 4B                  A  3471    	LD	C,E
000805 0600                A  3472    	LD	B,%0
000807 C5                  A  3473    	PUSH	BC
000808 E5                  A  3474    	PUSH	HL
000809 DD07FD              A  3475    	LD	BC,(IX+%FFFFFFFD)
00080C C5                  A  3476    	PUSH	BC
00080D CD 1E 04 00         A  3477    	CALL	_move_window
000811 C1                  A  3478    	POP	BC
000812 C1                  A  3479    	POP	BC
000813 C1                  A  3480    	POP	BC
000814 01000000            A  3481    	LD	BC,0
000818 B7                  A  3482    	OR	A,A
000819 ED42                A  3483    	SBC	HL,BC
00081B C2 CB 08 00         A  3484    	JR	NZ,L_80
                           A  3485    ; 1159				val = ld_word(fs->win + cls
                           A  3486    .LINE 1159
                           A  3487    
00081F DD2709              A  3488    	LD	HL,(IX+%9)
000822 DD5E0C              A  3489    	LD	E,(IX+%C)
000825 01020000            A  3490    	LD	BC,2
000829 AF                  A  3491    	XOR	A,A
00082A CD 00 00 00         A  3492    	CALL	__lmulu
00082E 01FF0100            A  3493    	LD	BC,511
000832 AF                  A  3494    	XOR	A,A
000833 CD 00 00 00         A  3495    	CALL	__land
000837 E5C1                A  3496    	LD	BC,HL
000839 DD31FD              A  3497    	LD	IY,(IX+%FFFFFFFD)
00083C ED2336              A  3498    	LEA	HL,IY+%36
00083F 09                  A  3499    	ADD	HL,BC
000840 E5                  A  3500    	PUSH	HL
000841 CD 00 00 00         A  3501    	CALL	_ld_word
000845 C1                  A  3502    	POP	BC
000846 E5C1                A  3503    	LD	BC,HL
000848 CD 00 00 00         A  3504    	CALL	__stoiu
00084C AF                  A  3505    	XOR	A,A
00084D DD2FF6              A  3506    	LD	(IX+%FFFFFFF6),HL
000850 DD77F9              A  3507    	LD	(IX+%FFFFFFF9),A
                           A  3508    ; 1160				break;
                           A  3509    .LINE 1160
                           A  3510    
000853 18 76               A  3511    	JR	L_80
                           A  3512    ; 1161	
                           A  3513    ; 1162			case FS_FAT32 :
000855                     A  3514    L_74:
                           A  3515    .LINE 1162
                           A  3516    
                           A  3517    ; 1163				if (move_window(fs, fs->fat
                           A  3518    .LINE 1163
                           A  3519    
000855 DD0709              A  3520    	LD	BC,(IX+%9)
000858 DD7E0C              A  3521    	LD	A,(IX+%C)
00085B 2E07                A  3522    	LD	L,%7
00085D CD 00 00 00         A  3523    	CALL	__lshru
000861 DD31FD              A  3524    	LD	IY,(IX+%FFFFFFFD)
000864 FD2726              A  3525    	LD	HL,(IY+%26)
000867 FD5E29              A  3526    	LD	E,(IY+%29)
00086A CD 00 00 00         A  3527    	CALL	__ladd
00086E 4B                  A  3528    	LD	C,E
00086F 0600                A  3529    	LD	B,%0
000871 C5                  A  3530    	PUSH	BC
000872 E5                  A  3531    	PUSH	HL
000873 DD07FD              A  3532    	LD	BC,(IX+%FFFFFFFD)
000876 C5                  A  3533    	PUSH	BC
000877 CD 1E 04 00         A  3534    	CALL	_move_window
00087B C1                  A  3535    	POP	BC
00087C C1                  A  3536    	POP	BC
00087D C1                  A  3537    	POP	BC
00087E 01000000            A  3538    	LD	BC,0
000882 B7                  A  3539    	OR	A,A
000883 ED42                A  3540    	SBC	HL,BC
000885 20 44               A  3541    	JR	NZ,L_80
                           A  3542    ; 1164				val = ld_dword(fs->win + cl
                           A  3543    .LINE 1164
                           A  3544    
000887 DD2709              A  3545    	LD	HL,(IX+%9)
00088A DD5E0C              A  3546    	LD	E,(IX+%C)
00088D 01040000            A  3547    	LD	BC,4
000891 AF                  A  3548    	XOR	A,A
000892 CD 00 00 00         A  3549    	CALL	__lmulu
000896 01FF0100            A  3550    	LD	BC,511
00089A AF                  A  3551    	XOR	A,A
00089B CD 00 00 00         A  3552    	CALL	__land
00089F E5C1                A  3553    	LD	BC,HL
0008A1 DD31FD              A  3554    	LD	IY,(IX+%FFFFFFFD)
0008A4 ED2336              A  3555    	LEA	HL,IY+%36
0008A7 09                  A  3556    	ADD	HL,BC
0008A8 E5                  A  3557    	PUSH	HL
0008A9 CD 3C 00 00         A  3558    	CALL	_ld_dword
0008AD C1                  A  3559    	POP	BC
0008AE 01FFFFFF            A  3560    	LD	BC,16777215
0008B2 3E0F                A  3561    	LD	A,%F
0008B4 CD 00 00 00         A  3562    	CALL	__land
0008B8 DD2FF6              A  3563    	LD	(IX+%FFFFFFF6),HL
0008BB DD73F9              A  3564    	LD	(IX+%FFFFFFF9),E
                           A  3565    ; 1165				break;
                           A  3566    .LINE 1165
                           A  3567    
0008BE 18 0B               A  3568    	JR	L_80
                           A  3569    ; 1166	#if FF_FS_EXFAT
                           A  3570    ; 1167			case FS_EXFAT :
                           A  3571    ; 1168				if ((obj->objsize != 0 && o
                           A  3572    ; 1169					DWORD cofs = clst - obj
                           A  3573    ; 1170					DWORD clen = (DWORD)((L
                           A  3574    ; 1171	
                           A  3575    ; 1172					if (obj->stat == 2 && c
                           A  3576    ; 1173						val = (cofs == clen
                           A  3577    ; 1174						break;
                           A  3578    ; 1175					}
                           A  3579    ; 1176					if (obj->stat == 3 && c
                           A  3580    ; 1177						val = clst + 1; 	
                           A  3581    ; 1178						break;
                           A  3582    ; 1179					}
                           A  3583    ; 1180					if (obj->stat != 2) {	
                           A  3584    ; 1181						if (obj->n_frag != 
                           A  3585    ; 1182							val = 0x7FFFFFF
                           A  3586    ; 1183						} else {
                           A  3587    ; 1184							if (move_window
                           A  3588    ; 1185							val = ld_dword(
                           A  3589    ; 1186						}
                           A  3590    ; 1187						break;
                           A  3591    ; 1188					}
                           A  3592    ; 1189				}
                           A  3593    ; 1190				val = 1;	/* Internal err
                           A  3594    ; 1191				break;
                           A  3595    ; 1192	#endif
                           A  3596    ; 1193			default:
0008C0                     A  3597    L_77:
                           A  3598    .LINE 1193
                           A  3599    
                           A  3600    ; 1194				val = 1;	/* Internal err
                           A  3601    .LINE 1194
                           A  3602    
0008C0 01010000            A  3603    	LD	BC,1
0008C4 AF                  A  3604    	XOR	A,A
0008C5 DD0FF6              A  3605    	LD	(IX+%FFFFFFF6),BC
0008C8 DD77F9              A  3606    	LD	(IX+%FFFFFFF9),A
                           A  3607    ; 1195			}
                           A  3608    ; 1196		}
0008CB                     A  3609    L_80:
                           A  3610    .LINE 1196
                           A  3611    
                           A  3612    ; 1197	
                           A  3613    ; 1198		return val;
                           A  3614    .LINE 1198
                           A  3615    
0008CB DD27F6              A  3616    	LD	HL,(IX+%FFFFFFF6)
0008CE DD5EF9              A  3617    	LD	E,(IX+%FFFFFFF9)
                           A  3618    ; 1199	}
                           A  3619    .LINE 1199
                           A  3620    
0008D1 DDF9                A  3621    	LD	SP,IX
0008D3 DDE1                A  3622    	POP	IX
0008D5 C9                  A  3623    	RET	
                           A  3624    
                           A  3625    
                           A  3626    ;**************************** _get_fat ********
                           A  3627    ;Name                         Addr/Register   S
                           A  3628    ;temp67                               IX-16    
                           A  3629    ;wc                                   IX-13    
                           A  3630    ;val                                  IX-10    
                           A  3631    ;bc                                    IX-6    
                           A  3632    ;fs                                    IX-3    
                           A  3633    ;clst                                  IX+9    
                           A  3634    ;obj                                   IX+6    
                           A  3635    
                           A  3636    
                           A  3637    ; Stack Frame Size: 31 (bytes)
                           A  3638    ;       Spill Code: -1 (instruction)
                           A  3639    
                           A  3640    
                           A  3641    .ENDFUNC "get_fat",1199,"_get_fat"
                           A  3642    ; 1200	
                           A  3643    ; 1201	
                           A  3644    ; 1202	
                           A  3645    ; 1203	
                           A  3646    ; 1204	#if !FF_FS_READONLY
                           A  3647    ; 1205	/*-------------------------------------
                           A  3648    ; 1206	/* FAT access - Change value of an FAT 
                           A  3649    ; 1207	/*-------------------------------------
                           A  3650    ; 1208	
                           A  3651    ; 1209	static FRESULT put_fat (	/* FR_OK(0)
                           A  3652    ; 1210		FATFS* fs,		/* Corresponding fi
                           A  3653    ; 1211		DWORD clst,		/* FAT index number
                           A  3654    ; 1212		DWORD val		/* New value to be 
                           A  3655    ; 1213	)
                           A  3656    ; 1214	{
0008D6                     A  3657    _put_fat:
                           A  3658    .DEFINE "_put_fat"
                           A  3659    
                           A  3660    .VALUE _put_fat
                           A  3661    
                           A  3662    .CLASS 3
                           A  3663    
                           A  3664    .TYPE 68
                           A  3665    
                           A  3666    .ENDEF
                           A  3667    
                           A  3668    .BEGFUNC "put_fat",1214,"_put_fat"
                           A  3669    
                           A  3670    .LINE 1214
                           A  3671    
                           A  3672    .DEFINE "fs"
                           A  3673    
                           A  3674    .CLASS 65
                           A  3675    
                           A  3676    .VALUE 6
                           A  3677    
                           A  3678    .TAG "NONAME0"
                           A  3679    
                           A  3680    .TYPE 40
                           A  3681    
                           A  3682    .ENDEF
                           A  3683    
                           A  3684    .DEFINE "clst"
                           A  3685    
                           A  3686    .CLASS 65
                           A  3687    
                           A  3688    .VALUE 9
                           A  3689    
                           A  3690    .TYPE 15
                           A  3691    
                           A  3692    .ENDEF
                           A  3693    
                           A  3694    .DEFINE "val"
                           A  3695    
                           A  3696    .CLASS 65
                           A  3697    
                           A  3698    .VALUE 15
                           A  3699    
                           A  3700    .TYPE 15
                           A  3701    
                           A  3702    .ENDEF
                           A  3703    
                           A  3704    .DEFINE "res"
                           A  3705    
                           A  3706    .CLASS 65
                           A  3707    
                           A  3708    .VALUE -3
                           A  3709    
                           A  3710    .TYPE 4
                           A  3711    
                           A  3712    .ENDEF
                           A  3713    
                           A  3714    .DEFINE "bc"
                           A  3715    
                           A  3716    .CLASS 65
                           A  3717    
                           A  3718    .VALUE -6
                           A  3719    
                           A  3720    .TYPE 14
                           A  3721    
                           A  3722    .ENDEF
                           A  3723    
                           A  3724    .DEFINE "p"
                           A  3725    
                           A  3726    .CLASS 65
                           A  3727    
                           A  3728    .VALUE -16
                           A  3729    
                           A  3730    .TYPE 44
                           A  3731    
                           A  3732    .ENDEF
                           A  3733    
0008D6 DDE5                A  3734    	PUSH	IX
0008D8 DD210000 00         A  3735    	LD	IX,0
0008DD DD39                A  3736    	ADD	IX,SP
0008DF ED22E6              A  3737    	LEA	HL,IX+%FFFFFFE6
0008E2 F9                  A  3738    	LD	SP,HL
                           A  3739    ; 1215		UINT bc;
                           A  3740    ; 1216		BYTE *p;
                           A  3741    ; 1217		FRESULT res = FR_INT_ERR;
                           A  3742    .LINE 1217
                           A  3743    
0008E3 01020000            A  3744    	LD	BC,2
0008E7 DD0FFD              A  3745    	LD	(IX+%FFFFFFFD),BC
                           A  3746    ; 1218	
                           A  3747    ; 1219	
                           A  3748    ; 1220		if (clst >= 2 && clst < fs->n_faten
                           A  3749    .LINE 1220
                           A  3750    
0008EA DD2709              A  3751    	LD	HL,(IX+%9)
0008ED DD5E0C              A  3752    	LD	E,(IX+%C)
0008F0 AF                  A  3753    	XOR	A,A
0008F1 CD 00 00 00         A  3754    	CALL	__lcmpu
0008F5 DA EC 0B 00         A  3755    	JR	C,L_106
0008F9 DD2709              A  3756    	LD	HL,(IX+%9)
0008FC DD5E0C              A  3757    	LD	E,(IX+%C)
0008FF DD3106              A  3758    	LD	IY,(IX+%6)
000902 FD071A              A  3759    	LD	BC,(IY+%1A)
000905 FD7E1D              A  3760    	LD	A,(IY+%1D)
000908 CD 00 00 00         A  3761    	CALL	__lcmpu
00090C D2 EC 0B 00         A  3762    	JR	NC,L_106
                           A  3763    ; 1221			switch (fs->fs_type) {
                           A  3764    .LINE 1221
                           A  3765    
000910 DD3106              A  3766    	LD	IY,(IX+%6)
000913 FD7E00              A  3767    	LD	A,(IY+%0)
000916 B7ED62              A  3768    	UEXT	HL
000919 6F                  A  3769    	LD	L,A
00091A E5C1                A  3770    	LD	BC,HL
00091C                     A  3771    L__49:
00091C 11010000            A  3772    	LD	DE,1
000920 B7                  A  3773    	OR	A,A
000921 ED52                A  3774    	SBC	HL,DE
000923 DA EC 0B 00         A  3775    	JR	C,L_106
000927 21030000            A  3776    	LD	HL,3
00092B B7                  A  3777    	OR	A,A
00092C ED42                A  3778    	SBC	HL,BC
00092E DA EC 0B 00         A  3779    	JR	C,L_106
000932 C5E1                A  3780    	LD	HL,BC
000934 E5C1                A  3781    	LD	BC,HL
000936 29                  A  3782    	ADD	HL,HL
000937 09                  A  3783    	ADD	HL,BC
000938 01 3D 09 00         A  3784    	LD	BC,L__48-3
00093C 09                  A  3785    	ADD	HL,BC
00093D ED27                A  3786    	LD	HL,(HL)
00093F E9                  A  3787    	JP	(HL)
000940                     A  3788    L__48:
000940 490900              A  3789    	DW24	L_83	
                           A  3790    
000943 B50A00              A  3791    	DW24	L_97	
                           A  3792    
000946 1E0B00              A  3793    	DW24	L_100	
                           A  3794    
                           A  3795    ; 1222			case FS_FAT12:
000949                     A  3796    L_83:
                           A  3797    .LINE 1222
                           A  3798    
                           A  3799    ; 1223				bc = (UINT)clst; bc += bc /
                           A  3800    .LINE 1223
                           A  3801    
000949 DD2709              A  3802    	LD	HL,(IX+%9)
00094C 3E01                A  3803    	LD	A,%1
00094E CD 00 00 00         A  3804    	CALL	__ishru_b
000952 DD0709              A  3805    	LD	BC,(IX+%9)
000955 09                  A  3806    	ADD	HL,BC
000956 DD2FFA              A  3807    	LD	(IX+%FFFFFFFA),HL
                           A  3808    ; 1224				res = move_window(fs, fs->f
                           A  3809    .LINE 1224
                           A  3810    
000959 3E09                A  3811    	LD	A,%9
00095B CD 00 00 00         A  3812    	CALL	__ishru_b
00095F E5C1                A  3813    	LD	BC,HL
000961 AF                  A  3814    	XOR	A,A
000962 DD3106              A  3815    	LD	IY,(IX+%6)
000965 FD2726              A  3816    	LD	HL,(IY+%26)
000968 FD5E29              A  3817    	LD	E,(IY+%29)
00096B CD 00 00 00         A  3818    	CALL	__ladd
00096F 4B                  A  3819    	LD	C,E
000970 0600                A  3820    	LD	B,%0
000972 C5                  A  3821    	PUSH	BC
000973 E5                  A  3822    	PUSH	HL
000974 DD0706              A  3823    	LD	BC,(IX+%6)
000977 C5                  A  3824    	PUSH	BC
000978 CD 1E 04 00         A  3825    	CALL	_move_window
00097C C1                  A  3826    	POP	BC
00097D C1                  A  3827    	POP	BC
00097E C1                  A  3828    	POP	BC
00097F DD2FFD              A  3829    	LD	(IX+%FFFFFFFD),HL
                           A  3830    ; 1225				if (res != FR_OK) break;
                           A  3831    .LINE 1225
                           A  3832    
000982 01000000            A  3833    	LD	BC,0
000986 DD27FD              A  3834    	LD	HL,(IX+%FFFFFFFD)
000989 B7                  A  3835    	OR	A,A
00098A ED42                A  3836    	SBC	HL,BC
00098C C2 EC 0B 00         A  3837    	JR	NZ,L_106
                           A  3838    ; 1226				p = fs->win + bc++ % SS(fs)
                           A  3839    .LINE 1226
                           A  3840    
000990 DD3106              A  3841    	LD	IY,(IX+%6)
000993 ED0336              A  3842    	LEA	BC,IY+%36
000996 DD0FED              A  3843    	LD	(IX+%FFFFFFED),BC
000999 DD07FA              A  3844    	LD	BC,(IX+%FFFFFFFA)
00099C 03                  A  3845    	INC	BC
00099D DD0FFA              A  3846    	LD	(IX+%FFFFFFFA),BC
                           A  3847    ; 1227				*p = (clst & 1) ? ((*p & 0x
                           A  3848    .LINE 1227
                           A  3849    
0009A0 DD7E09              A  3850    	LD	A,(IX+%9)
0009A3 E601                A  3851    	AND	A,%1
0009A5 B7ED62              A  3852    	UEXT	HL
0009A8 6F                  A  3853    	LD	L,A
0009A9 5C                  A  3854    	LD	E,H
0009AA 01000000            A  3855    	LD	BC,0
0009AE AF                  A  3856    	XOR	A,A
0009AF CD 00 00 00         A  3857    	CALL	__lcmpu
0009B3 20 04               A  3858    	JR	NZ,L__54
0009B5 3E01                A  3859    	LD	A,%1
0009B7 18 01               A  3860    	JR	L__55
0009B9                     A  3861    L__54:
0009B9 AF                  A  3862    	XOR	A,A
0009BA                     A  3863    L__55:
0009BA DD77F9              A  3864    	LD	(IX+%FFFFFFF9),A
0009BD B7                  A  3865    	OR	A,A
0009BE 20 3B               A  3866    	JR	NZ,L_89
0009C0 DD3106              A  3867    	LD	IY,(IX+%6)
0009C3 ED0336              A  3868    	LEA	BC,IY+%36
0009C6 DD0FED              A  3869    	LD	(IX+%FFFFFFED),BC
0009C9 01FF0100            A  3870    	LD	BC,511
0009CD DD27FA              A  3871    	LD	HL,(IX+%FFFFFFFA)
0009D0 CD 00 00 00         A  3872    	CALL	__iand
0009D4 E5C1                A  3873    	LD	BC,HL
0009D6 ED2336              A  3874    	LEA	HL,IY+%36
0009D9 09                  A  3875    	ADD	HL,BC
0009DA 7E                  A  3876    	LD	A,(HL)
0009DB E60F                A  3877    	AND	A,%F
0009DD B7ED62              A  3878    	UEXT	HL
0009E0 6F                  A  3879    	LD	L,A
0009E1 E5D1                A  3880    	LD	DE,HL
0009E3 DD7E0F              A  3881    	LD	A,(IX+%F)
0009E6 B7ED62              A  3882    	UEXT	HL
0009E9 6F                  A  3883    	LD	L,A
0009EA 29                  A  3884    	ADD	HL,HL
0009EB 29                  A  3885    	ADD	HL,HL
0009EC 29                  A  3886    	ADD	HL,HL
0009ED 29                  A  3887    	ADD	HL,HL
0009EE E5C1                A  3888    	LD	BC,HL
0009F0 D5E1                A  3889    	LD	HL,DE
0009F2 CD 00 00 00         A  3890    	CALL	__ior
0009F6 DD2FF6              A  3891    	LD	(IX+%FFFFFFF6),HL
0009F9 18 0A               A  3892    	JR	L_90
0009FB                     A  3893    L_89:
0009FB DD7E0F              A  3894    	LD	A,(IX+%F)
0009FE B7ED62              A  3895    	UEXT	HL
000A01 6F                  A  3896    	LD	L,A
000A02 DD2FF6              A  3897    	LD	(IX+%FFFFFFF6),HL
000A05                     A  3898    L_90:
000A05 01FF0100            A  3899    	LD	BC,511
000A09 DD27FA              A  3900    	LD	HL,(IX+%FFFFFFFA)
000A0C CD 00 00 00         A  3901    	CALL	__iand
000A10 DD2FEA              A  3902    	LD	(IX+%FFFFFFEA),HL
000A13 DD7EF6              A  3903    	LD	A,(IX+%FFFFFFF6)
000A16 DD07ED              A  3904    	LD	BC,(IX+%FFFFFFED)
000A19 09                  A  3905    	ADD	HL,BC
000A1A 77                  A  3906    	LD	(HL),A
                           A  3907    ; 1228				fs->wflag = 1;
                           A  3908    .LINE 1228
                           A  3909    
000A1B DD3106              A  3910    	LD	IY,(IX+%6)
000A1E FD360301            A  3911    	LD	(IY+%3),%1
                           A  3912    ; 1229				res = move_window(fs, fs->f
                           A  3913    .LINE 1229
                           A  3914    
000A22 DD27FA              A  3915    	LD	HL,(IX+%FFFFFFFA)
000A25 3E09                A  3916    	LD	A,%9
000A27 CD 00 00 00         A  3917    	CALL	__ishru_b
000A2B E5C1                A  3918    	LD	BC,HL
000A2D AF                  A  3919    	XOR	A,A
000A2E FD2726              A  3920    	LD	HL,(IY+%26)
000A31 FD5E29              A  3921    	LD	E,(IY+%29)
000A34 CD 00 00 00         A  3922    	CALL	__ladd
000A38 4B                  A  3923    	LD	C,E
000A39 0600                A  3924    	LD	B,%0
000A3B C5                  A  3925    	PUSH	BC
000A3C E5                  A  3926    	PUSH	HL
000A3D DD0706              A  3927    	LD	BC,(IX+%6)
000A40 C5                  A  3928    	PUSH	BC
000A41 CD 1E 04 00         A  3929    	CALL	_move_window
000A45 C1                  A  3930    	POP	BC
000A46 C1                  A  3931    	POP	BC
000A47 C1                  A  3932    	POP	BC
000A48 DD2FFD              A  3933    	LD	(IX+%FFFFFFFD),HL
                           A  3934    ; 1230				if (res != FR_OK) break;
                           A  3935    .LINE 1230
                           A  3936    
000A4B 01000000            A  3937    	LD	BC,0
000A4F DD27FD              A  3938    	LD	HL,(IX+%FFFFFFFD)
000A52 B7                  A  3939    	OR	A,A
000A53 ED42                A  3940    	SBC	HL,BC
000A55 C2 EC 0B 00         A  3941    	JR	NZ,L_106
                           A  3942    ; 1231				p = fs->win + bc % SS(fs);
                           A  3943    .LINE 1231
                           A  3944    
000A59 DD07EA              A  3945    	LD	BC,(IX+%FFFFFFEA)
000A5C DD3106              A  3946    	LD	IY,(IX+%6)
000A5F ED2336              A  3947    	LEA	HL,IY+%36
000A62 09                  A  3948    	ADD	HL,BC
000A63 DD2FF0              A  3949    	LD	(IX+%FFFFFFF0),HL
                           A  3950    ; 1232				*p = (clst & 1) ? (BYTE)(va
                           A  3951    .LINE 1232
                           A  3952    
000A66 DD7EF9              A  3953    	LD	A,(IX+%FFFFFFF9)
000A69 B7                  A  3954    	OR	A,A
000A6A 20 16               A  3955    	JR	NZ,L_95
000A6C DD070F              A  3956    	LD	BC,(IX+%F)
000A6F DD7E12              A  3957    	LD	A,(IX+%12)
000A72 2E04                A  3958    	LD	L,%4
000A74 CD 00 00 00         A  3959    	CALL	__lshru
000A78 79                  A  3960    	LD	A,C
000A79 B7ED62              A  3961    	UEXT	HL
000A7C 6F                  A  3962    	LD	L,A
000A7D DD2FF3              A  3963    	LD	(IX+%FFFFFFF3),HL
000A80 18 21               A  3964    	JR	L_96
000A82                     A  3965    L_95:
000A82 DD0710              A  3966    	LD	BC,(IX+%10)
000A85 79                  A  3967    	LD	A,C
000A86 E60F                A  3968    	AND	A,%F
000A88 B7ED62              A  3969    	UEXT	HL
000A8B 6F                  A  3970    	LD	L,A
000A8C E5D1                A  3971    	LD	DE,HL
000A8E DD27F0              A  3972    	LD	HL,(IX+%FFFFFFF0)
000A91 7E                  A  3973    	LD	A,(HL)
000A92 E6F0                A  3974    	AND	A,%F0
000A94 B7ED62              A  3975    	UEXT	HL
000A97 6F                  A  3976    	LD	L,A
000A98 E5C1                A  3977    	LD	BC,HL
000A9A D5E1                A  3978    	LD	HL,DE
000A9C CD 00 00 00         A  3979    	CALL	__ior
000AA0 DD2FF3              A  3980    	LD	(IX+%FFFFFFF3),HL
000AA3                     A  3981    L_96:
000AA3 DD7EF3              A  3982    	LD	A,(IX+%FFFFFFF3)
000AA6 DD27F0              A  3983    	LD	HL,(IX+%FFFFFFF0)
000AA9 77                  A  3984    	LD	(HL),A
                           A  3985    ; 1233				fs->wflag = 1;
                           A  3986    .LINE 1233
                           A  3987    
000AAA DD3106              A  3988    	LD	IY,(IX+%6)
000AAD FD360301            A  3989    	LD	(IY+%3),%1
                           A  3990    ; 1234				break;
                           A  3991    .LINE 1234
                           A  3992    
000AB1 C3 EC 0B 00         A  3993    	JR	L_106
                           A  3994    ; 1235	
                           A  3995    ; 1236			case FS_FAT16:
000AB5                     A  3996    L_97:
                           A  3997    .LINE 1236
                           A  3998    
                           A  3999    ; 1237				res = move_window(fs, fs->f
                           A  4000    .LINE 1237
                           A  4001    
000AB5 DD070A              A  4002    	LD	BC,(IX+%A)
000AB8 AF                  A  4003    	XOR	A,A
000AB9 DD3106              A  4004    	LD	IY,(IX+%6)
000ABC FD2726              A  4005    	LD	HL,(IY+%26)
000ABF FD5E29              A  4006    	LD	E,(IY+%29)
000AC2 CD 00 00 00         A  4007    	CALL	__ladd
000AC6 4B                  A  4008    	LD	C,E
000AC7 0600                A  4009    	LD	B,%0
000AC9 C5                  A  4010    	PUSH	BC
000ACA E5                  A  4011    	PUSH	HL
000ACB DD0706              A  4012    	LD	BC,(IX+%6)
000ACE C5                  A  4013    	PUSH	BC
000ACF CD 1E 04 00         A  4014    	CALL	_move_window
000AD3 C1                  A  4015    	POP	BC
000AD4 C1                  A  4016    	POP	BC
000AD5 C1                  A  4017    	POP	BC
000AD6 DD2FFD              A  4018    	LD	(IX+%FFFFFFFD),HL
                           A  4019    ; 1238				if (res != FR_OK) break;
                           A  4020    .LINE 1238
                           A  4021    
000AD9 01000000            A  4022    	LD	BC,0
000ADD DD27FD              A  4023    	LD	HL,(IX+%FFFFFFFD)
000AE0 B7                  A  4024    	OR	A,A
000AE1 ED42                A  4025    	SBC	HL,BC
000AE3 C2 EC 0B 00         A  4026    	JR	NZ,L_106
                           A  4027    ; 1239				st_word(fs->win + clst * 2 
                           A  4028    .LINE 1239
                           A  4029    
000AE7 DD070F              A  4030    	LD	BC,(IX+%F)
000AEA C5                  A  4031    	PUSH	BC
000AEB DD2709              A  4032    	LD	HL,(IX+%9)
000AEE DD5E0C              A  4033    	LD	E,(IX+%C)
000AF1 01020000            A  4034    	LD	BC,2
000AF5 AF                  A  4035    	XOR	A,A
000AF6 CD 00 00 00         A  4036    	CALL	__lmulu
000AFA 01FF0100            A  4037    	LD	BC,511
000AFE AF                  A  4038    	XOR	A,A
000AFF CD 00 00 00         A  4039    	CALL	__land
000B03 E5C1                A  4040    	LD	BC,HL
000B05 DD3106              A  4041    	LD	IY,(IX+%6)
000B08 ED2336              A  4042    	LEA	HL,IY+%36
000B0B 09                  A  4043    	ADD	HL,BC
000B0C E5                  A  4044    	PUSH	HL
000B0D CD 06 01 00         A  4045    	CALL	_st_word
000B11 C1                  A  4046    	POP	BC
000B12 C1                  A  4047    	POP	BC
                           A  4048    ; 1240				fs->wflag = 1;
                           A  4049    .LINE 1240
                           A  4050    
000B13 DD3106              A  4051    	LD	IY,(IX+%6)
000B16 FD360301            A  4052    	LD	(IY+%3),%1
                           A  4053    ; 1241				break;
                           A  4054    .LINE 1241
                           A  4055    
000B1A C3 EC 0B 00         A  4056    	JR	L_106
                           A  4057    ; 1242	
                           A  4058    ; 1243			case FS_FAT32:
000B1E                     A  4059    L_100:
                           A  4060    .LINE 1243
                           A  4061    
                           A  4062    ; 1244	#if FF_FS_EXFAT
                           A  4063    ; 1245			case FS_EXFAT:
                           A  4064    ; 1246	#endif
                           A  4065    ; 1247				res = move_window(fs, fs->f
                           A  4066    .LINE 1247
                           A  4067    
000B1E DD0709              A  4068    	LD	BC,(IX+%9)
000B21 DD7E0C              A  4069    	LD	A,(IX+%C)
000B24 2E07                A  4070    	LD	L,%7
000B26 CD 00 00 00         A  4071    	CALL	__lshru
000B2A DD3106              A  4072    	LD	IY,(IX+%6)
000B2D FD2726              A  4073    	LD	HL,(IY+%26)
000B30 FD5E29              A  4074    	LD	E,(IY+%29)
000B33 CD 00 00 00         A  4075    	CALL	__ladd
000B37 4B                  A  4076    	LD	C,E
000B38 0600                A  4077    	LD	B,%0
000B3A C5                  A  4078    	PUSH	BC
000B3B E5                  A  4079    	PUSH	HL
000B3C DD0706              A  4080    	LD	BC,(IX+%6)
000B3F C5                  A  4081    	PUSH	BC
000B40 CD 1E 04 00         A  4082    	CALL	_move_window
000B44 C1                  A  4083    	POP	BC
000B45 C1                  A  4084    	POP	BC
000B46 C1                  A  4085    	POP	BC
000B47 DD2FFD              A  4086    	LD	(IX+%FFFFFFFD),HL
                           A  4087    ; 1248				if (res != FR_OK) break;
                           A  4088    .LINE 1248
                           A  4089    
000B4A 01000000            A  4090    	LD	BC,0
000B4E DD27FD              A  4091    	LD	HL,(IX+%FFFFFFFD)
000B51 B7                  A  4092    	OR	A,A
000B52 ED42                A  4093    	SBC	HL,BC
000B54 C2 EC 0B 00         A  4094    	JR	NZ,L_106
                           A  4095    ; 1249				if (!FF_FS_EXFAT || fs->fs_
                           A  4096    ; 1250					val = (val & 0x0FFFFFFF
                           A  4097    .LINE 1250
                           A  4098    
000B58 DD2709              A  4099    	LD	HL,(IX+%9)
000B5B DD5E0C              A  4100    	LD	E,(IX+%C)
000B5E 01040000            A  4101    	LD	BC,4
000B62 AF                  A  4102    	XOR	A,A
000B63 CD 00 00 00         A  4103    	CALL	__lmulu
000B67 01FF0100            A  4104    	LD	BC,511
000B6B AF                  A  4105    	XOR	A,A
000B6C CD 00 00 00         A  4106    	CALL	__land
000B70 E5C1                A  4107    	LD	BC,HL
000B72 DD3106              A  4108    	LD	IY,(IX+%6)
000B75 ED2336              A  4109    	LEA	HL,IY+%36
000B78 09                  A  4110    	ADD	HL,BC
000B79 E5                  A  4111    	PUSH	HL
000B7A CD 3C 00 00         A  4112    	CALL	_ld_dword
000B7E C1                  A  4113    	POP	BC
000B7F 01000000            A  4114    	LD	BC,0
000B83 3EF0                A  4115    	LD	A,%F0
000B85 CD 00 00 00         A  4116    	CALL	__land
000B89 DD73E9              A  4117    	LD	(IX+%FFFFFFE9),E
000B8C DD2FE6              A  4118    	LD	(IX+%FFFFFFE6),HL
000B8F DD270F              A  4119    	LD	HL,(IX+%F)
000B92 DD5E12              A  4120    	LD	E,(IX+%12)
000B95 01FFFFFF            A  4121    	LD	BC,16777215
000B99 3E0F                A  4122    	LD	A,%F
000B9B CD 00 00 00         A  4123    	CALL	__land
000B9F 7B                  A  4124    	LD	A,E
000BA0 E5C1                A  4125    	LD	BC,HL
000BA2 DD5EE9              A  4126    	LD	E,(IX+%FFFFFFE9)
000BA5 DD27E6              A  4127    	LD	HL,(IX+%FFFFFFE6)
000BA8 CD 00 00 00         A  4128    	CALL	__lor
000BAC DD2F0F              A  4129    	LD	(IX+%F),HL
000BAF DD7312              A  4130    	LD	(IX+%12),E
                           A  4131    ; 1251				}
                           A  4132    ; 1252				st_dword(fs->win + clst * 4
                           A  4133    .LINE 1252
                           A  4134    
000BB2 DD4E12              A  4135    	LD	C,(IX+%12)
000BB5 0600                A  4136    	LD	B,%0
000BB7 C5                  A  4137    	PUSH	BC
000BB8 DD070F              A  4138    	LD	BC,(IX+%F)
000BBB C5                  A  4139    	PUSH	BC
000BBC DD2709              A  4140    	LD	HL,(IX+%9)
000BBF DD5E0C              A  4141    	LD	E,(IX+%C)
000BC2 01040000            A  4142    	LD	BC,4
000BC6 AF                  A  4143    	XOR	A,A
000BC7 CD 00 00 00         A  4144    	CALL	__lmulu
000BCB 01FF0100            A  4145    	LD	BC,511
000BCF AF                  A  4146    	XOR	A,A
000BD0 CD 00 00 00         A  4147    	CALL	__land
000BD4 E5C1                A  4148    	LD	BC,HL
000BD6 DD3106              A  4149    	LD	IY,(IX+%6)
000BD9 ED2336              A  4150    	LEA	HL,IY+%36
000BDC 09                  A  4151    	ADD	HL,BC
000BDD E5                  A  4152    	PUSH	HL
000BDE CD 45 01 00         A  4153    	CALL	_st_dword
000BE2 C1                  A  4154    	POP	BC
000BE3 C1                  A  4155    	POP	BC
000BE4 C1                  A  4156    	POP	BC
                           A  4157    ; 1253				fs->wflag = 1;
                           A  4158    .LINE 1253
                           A  4159    
000BE5 DD3106              A  4160    	LD	IY,(IX+%6)
000BE8 FD360301            A  4161    	LD	(IY+%3),%1
                           A  4162    ; 1254				break;
                           A  4163    ; 1255			}
                           A  4164    ; 1256		}
000BEC                     A  4165    L_106:
                           A  4166    .LINE 1256
                           A  4167    
                           A  4168    ; 1257		return res;
                           A  4169    .LINE 1257
                           A  4170    
000BEC DD27FD              A  4171    	LD	HL,(IX+%FFFFFFFD)
                           A  4172    ; 1258	}
                           A  4173    .LINE 1258
                           A  4174    
000BEF DDF9                A  4175    	LD	SP,IX
000BF1 DDE1                A  4176    	POP	IX
000BF3 C9                  A  4177    	RET	
                           A  4178    
                           A  4179    
                           A  4180    ;**************************** _put_fat ********
                           A  4181    ;Name                         Addr/Register   S
                           A  4182    ;G_7                                  IX-22    
                           A  4183    ;G_6                                  IX-19    
                           A  4184    ;p                                    IX-16    
                           A  4185    ;temp93                               IX-13    
                           A  4186    ;temp87                               IX-10    
                           A  4187    ;G_8                                   IX-7    
                           A  4188    ;bc                                    IX-6    
                           A  4189    ;res                                   IX-3    
                           A  4190    ;val                                  IX+15    
                           A  4191    ;clst                                  IX+9    
                           A  4192    ;fs                                    IX+6    
                           A  4193    
                           A  4194    
                           A  4195    ; Stack Frame Size: 47 (bytes)
                           A  4196    ;       Spill Code: -1 (instruction)
                           A  4197    
                           A  4198    
                           A  4199    .ENDFUNC "put_fat",1258,"_put_fat"
                           A  4200    ; 1259	
                           A  4201    ; 1260	#endif /* !FF_FS_READONLY */
                           A  4202    ; 1261	
                           A  4203    ; 1262	
                           A  4204    ; 1263	
                           A  4205    ; 1264	
                           A  4206    ; 1265	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A  4207    ; 1266	/*-------------------------------------
                           A  4208    ; 1267	/* exFAT: Accessing FAT and Allocation 
                           A  4209    ; 1268	/*-------------------------------------
                           A  4210    ; 1269	
                           A  4211    ; 1270	/*-------------------------------------
                           A  4212    ; 1271	/* Find a contiguous free cluster block
                           A  4213    ; 1272	/*-------------------------------------
                           A  4214    ; 1273	
                           A  4215    ; 1274	static DWORD find_bitmap (	/* 0:Not fo
                           A  4216    ; 1275		FATFS* fs,	/* Filesystem object */
                           A  4217    ; 1276		DWORD clst,	/* Cluster number to sc
                           A  4218    ; 1277		DWORD ncl	/* Number of contiguous
                           A  4219    ; 1278	)
                           A  4220    ; 1279	{
                           A  4221    ; 1280		BYTE bm, bv;
                           A  4222    ; 1281		UINT i;
                           A  4223    ; 1282		DWORD val, scl, ctr;
                           A  4224    ; 1283	
                           A  4225    ; 1284	
                           A  4226    ; 1285		clst -= 2;	/* The first bit in the
                           A  4227    ; 1286		if (clst >= fs->n_fatent - 2) clst 
                           A  4228    ; 1287		scl = val = clst; ctr = 0;
                           A  4229    ; 1288		for (;;) {
                           A  4230    ; 1289			if (move_window(fs, fs->bitbase
                           A  4231    ; 1290			i = val / 8 % SS(fs); bm = 1 <<
                           A  4232    ; 1291			do {
                           A  4233    ; 1292				do {
                           A  4234    ; 1293					bv = fs->win[i] & bm; b
                           A  4235    ; 1294					if (++val >= fs->n_fate
                           A  4236    ; 1295						val = 0; bm = 0; i 
                           A  4237    ; 1296					}
                           A  4238    ; 1297					if (bv == 0) {	/* Is i
                           A  4239    ; 1298						if (++ctr == ncl) r
                           A  4240    ; 1299					} else {
                           A  4241    ; 1300						scl = val; ctr = 0;
                           A  4242    ; 1301					}
                           A  4243    ; 1302					if (val == clst) return
                           A  4244    ; 1303				} while (bm != 0);
                           A  4245    ; 1304				bm = 1;
                           A  4246    ; 1305			} while (++i < SS(fs));
                           A  4247    ; 1306		}
                           A  4248    ; 1307	}
                           A  4249    ; 1308	
                           A  4250    ; 1309	
                           A  4251    ; 1310	/*-------------------------------------
                           A  4252    ; 1311	/* Set/Clear a block of allocation bitm
                           A  4253    ; 1312	/*-------------------------------------
                           A  4254    ; 1313	
                           A  4255    ; 1314	static FRESULT change_bitmap (
                           A  4256    ; 1315		FATFS* fs,	/* Filesystem object */
                           A  4257    ; 1316		DWORD clst,	/* Cluster number to ch
                           A  4258    ; 1317		DWORD ncl,	/* Number of clusters t
                           A  4259    ; 1318		int bv		/* bit value to be set 
                           A  4260    ; 1319	)
                           A  4261    ; 1320	{
                           A  4262    ; 1321		BYTE bm;
                           A  4263    ; 1322		UINT i;
                           A  4264    ; 1323		LBA_t sect;
                           A  4265    ; 1324	
                           A  4266    ; 1325	
                           A  4267    ; 1326		clst -= 2;	/* The first bit corres
                           A  4268    ; 1327		sect = fs->bitbase + clst / 8 / SS(
                           A  4269    ; 1328		i = clst / 8 % SS(fs);				
                           A  4270    ; 1329		bm = 1 << (clst % 8);				
                           A  4271    ; 1330		for (;;) {
                           A  4272    ; 1331			if (move_window(fs, sect++) != 
                           A  4273    ; 1332			do {
                           A  4274    ; 1333				do {
                           A  4275    ; 1334					if (bv == (int)((fs->wi
                           A  4276    ; 1335					fs->win[i] ^= bm;	/* 
                           A  4277    ; 1336					fs->wflag = 1;
                           A  4278    ; 1337					if (--ncl == 0) return 
                           A  4279    ; 1338				} while (bm <<= 1);		/* 
                           A  4280    ; 1339				bm = 1;
                           A  4281    ; 1340			} while (++i < SS(fs));		/* 
                           A  4282    ; 1341			i = 0;
                           A  4283    ; 1342		}
                           A  4284    ; 1343	}
                           A  4285    ; 1344	
                           A  4286    ; 1345	
                           A  4287    ; 1346	/*-------------------------------------
                           A  4288    ; 1347	/* Fill the first fragment of the FAT c
                           A  4289    ; 1348	/*-------------------------------------
                           A  4290    ; 1349	
                           A  4291    ; 1350	static FRESULT fill_first_frag (
                           A  4292    ; 1351		FFOBJID* obj	/* Pointer to the c
                           A  4293    ; 1352	)
                           A  4294    ; 1353	{
                           A  4295    ; 1354		FRESULT res;
                           A  4296    ; 1355		DWORD cl, n;
                           A  4297    ; 1356	
                           A  4298    ; 1357	
                           A  4299    ; 1358		if (obj->stat == 3) {	/* Has the 
                           A  4300    ; 1359			for (cl = obj->sclust, n = obj-
                           A  4301    ; 1360				res = put_fat(obj->fs, cl, 
                           A  4302    ; 1361				if (res != FR_OK) return re
                           A  4303    ; 1362			}
                           A  4304    ; 1363			obj->stat = 0;	/* Change statu
                           A  4305    ; 1364		}
                           A  4306    ; 1365		return FR_OK;
                           A  4307    ; 1366	}
                           A  4308    ; 1367	
                           A  4309    ; 1368	
                           A  4310    ; 1369	/*-------------------------------------
                           A  4311    ; 1370	/* Fill the last fragment of the FAT ch
                           A  4312    ; 1371	/*-------------------------------------
                           A  4313    ; 1372	
                           A  4314    ; 1373	static FRESULT fill_last_frag (
                           A  4315    ; 1374		FFOBJID* obj,	/* Pointer to the c
                           A  4316    ; 1375		DWORD lcl,		/* Last cluster of 
                           A  4317    ; 1376		DWORD term		/* Value to set the
                           A  4318    ; 1377	)
                           A  4319    ; 1378	{
                           A  4320    ; 1379		FRESULT res;
                           A  4321    ; 1380	
                           A  4322    ; 1381	
                           A  4323    ; 1382		while (obj->n_frag > 0) {	/* Crea
                           A  4324    ; 1383			res = put_fat(obj->fs, lcl - ob
                           A  4325    ; 1384			if (res != FR_OK) return res;
                           A  4326    ; 1385			obj->n_frag--;
                           A  4327    ; 1386		}
                           A  4328    ; 1387		return FR_OK;
                           A  4329    ; 1388	}
                           A  4330    ; 1389	
                           A  4331    ; 1390	#endif	/* FF_FS_EXFAT && !FF_FS_READON
                           A  4332    ; 1391	
                           A  4333    ; 1392	
                           A  4334    ; 1393	
                           A  4335    ; 1394	#if !FF_FS_READONLY
                           A  4336    ; 1395	/*-------------------------------------
                           A  4337    ; 1396	/* FAT handling - Remove a cluster chai
                           A  4338    ; 1397	/*-------------------------------------
                           A  4339    ; 1398	
                           A  4340    ; 1399	static FRESULT remove_chain (	/* FR_O
                           A  4341    ; 1400		FFOBJID* obj,		/* Correspondin
                           A  4342    ; 1401		DWORD clst,			/* Cluster to r
                           A  4343    ; 1402		DWORD pclst			/* Previous clu
                           A  4344    ; 1403	)
                           A  4345    ; 1404	{
000BF4                     A  4346    _remove_chain:
                           A  4347    .DEFINE "_remove_chain"
                           A  4348    
                           A  4349    .VALUE _remove_chain
                           A  4350    
                           A  4351    .CLASS 3
                           A  4352    
                           A  4353    .TYPE 68
                           A  4354    
                           A  4355    .ENDEF
                           A  4356    
                           A  4357    .BEGFUNC "remove_chain",1404,"_remove_chain"
                           A  4358    
                           A  4359    .LINE 1404
                           A  4360    
                           A  4361    .DEFINE "obj"
                           A  4362    
                           A  4363    .CLASS 65
                           A  4364    
                           A  4365    .VALUE 6
                           A  4366    
                           A  4367    .TAG "NONAME1"
                           A  4368    
                           A  4369    .TYPE 40
                           A  4370    
                           A  4371    .ENDEF
                           A  4372    
                           A  4373    .DEFINE "clst"
                           A  4374    
                           A  4375    .CLASS 65
                           A  4376    
                           A  4377    .VALUE 9
                           A  4378    
                           A  4379    .TYPE 15
                           A  4380    
                           A  4381    .ENDEF
                           A  4382    
                           A  4383    .DEFINE "pclst"
                           A  4384    
                           A  4385    .CLASS 65
                           A  4386    
                           A  4387    .VALUE 15
                           A  4388    
                           A  4389    .TYPE 15
                           A  4390    
                           A  4391    .ENDEF
                           A  4392    
                           A  4393    .DEFINE "fs"
                           A  4394    
                           A  4395    .CLASS 65
                           A  4396    
                           A  4397    .VALUE -3
                           A  4398    
                           A  4399    .TAG "NONAME0"
                           A  4400    
                           A  4401    .TYPE 40
                           A  4402    
                           A  4403    .ENDEF
                           A  4404    
                           A  4405    .DEFINE "res"
                           A  4406    
                           A  4407    .CLASS 65
                           A  4408    
                           A  4409    .VALUE -6
                           A  4410    
                           A  4411    .TYPE 4
                           A  4412    
                           A  4413    .ENDEF
                           A  4414    
                           A  4415    .DEFINE "nxt"
                           A  4416    
                           A  4417    .CLASS 65
                           A  4418    
                           A  4419    .VALUE -10
                           A  4420    
                           A  4421    .TYPE 15
                           A  4422    
                           A  4423    .ENDEF
                           A  4424    
000BF4 DDE5                A  4425    	PUSH	IX
000BF6 DD210000 00         A  4426    	LD	IX,0
000BFB DD39                A  4427    	ADD	IX,SP
000BFD ED22F2              A  4428    	LEA	HL,IX+%FFFFFFF2
000C00 F9                  A  4429    	LD	SP,HL
                           A  4430    ; 1405		FRESULT res = FR_OK;
                           A  4431    .LINE 1405
                           A  4432    
000C01 01000000            A  4433    	LD	BC,0
000C05 DD0FFA              A  4434    	LD	(IX+%FFFFFFFA),BC
                           A  4435    ; 1406		DWORD nxt;
                           A  4436    ; 1407		FATFS *fs = obj->fs;
                           A  4437    .LINE 1407
                           A  4438    
000C08 DD3106              A  4439    	LD	IY,(IX+%6)
000C0B FD0700              A  4440    	LD	BC,(IY+%0)
000C0E DD0FFD              A  4441    	LD	(IX+%FFFFFFFD),BC
                           A  4442    ; 1408	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  4443    ; 1409		DWORD scl = clst, ecl = clst;
                           A  4444    ; 1410	#endif
                           A  4445    ; 1411	#if FF_USE_TRIM
                           A  4446    ; 1412		LBA_t rt[2];
                           A  4447    ; 1413	#endif
                           A  4448    ; 1414	
                           A  4449    ; 1415		if (clst < 2 || clst >= fs->n_faten
                           A  4450    .LINE 1415
                           A  4451    
000C11 DD2709              A  4452    	LD	HL,(IX+%9)
000C14 DD5E0C              A  4453    	LD	E,(IX+%C)
000C17 01020000            A  4454    	LD	BC,2
000C1B AF                  A  4455    	XOR	A,A
000C1C CD 00 00 00         A  4456    	CALL	__lcmpu
000C20 38 15               A  4457    	JR	C,L_109
000C22 DD2709              A  4458    	LD	HL,(IX+%9)
000C25 DD5E0C              A  4459    	LD	E,(IX+%C)
000C28 DD31FD              A  4460    	LD	IY,(IX+%FFFFFFFD)
000C2B FD071A              A  4461    	LD	BC,(IY+%1A)
000C2E FD7E1D              A  4462    	LD	A,(IY+%1D)
000C31 CD 00 00 00         A  4463    	CALL	__lcmpu
000C35 38 08               A  4464    	JR	C,L_113
000C37                     A  4465    L_109:
000C37 21020000            A  4466    	LD	HL,2
000C3B C3 89 0D 00         A  4467    	JR	L_130
000C3F                     A  4468    L_113:
                           A  4469    ; 1416	
                           A  4470    ; 1417		/* Mark the previous cluster 'EOC' 
                           A  4471    ; 1418		if (pclst != 0 && (!FF_FS_EXFAT || 
                           A  4472    .LINE 1418
                           A  4473    
000C3F DD270F              A  4474    	LD	HL,(IX+%F)
000C42 DD5E12              A  4475    	LD	E,(IX+%12)
000C45 01000000            A  4476    	LD	BC,0
000C49 AF                  A  4477    	XOR	A,A
000C4A CD 00 00 00         A  4478    	CALL	__lcmpu
000C4E 28 37               A  4479    	JR	Z,L_128
                           A  4480    ; 1419			res = put_fat(fs, pclst, 0xFFFF
                           A  4481    .LINE 1419
                           A  4482    
000C50 01FF0000            A  4483    	LD	BC,255
000C54 C5                  A  4484    	PUSH	BC
000C55 01FFFFFF            A  4485    	LD	BC,16777215
000C59 C5                  A  4486    	PUSH	BC
000C5A DD4E12              A  4487    	LD	C,(IX+%12)
000C5D 0600                A  4488    	LD	B,%0
000C5F C5                  A  4489    	PUSH	BC
000C60 DD070F              A  4490    	LD	BC,(IX+%F)
000C63 C5                  A  4491    	PUSH	BC
000C64 DD07FD              A  4492    	LD	BC,(IX+%FFFFFFFD)
000C67 C5                  A  4493    	PUSH	BC
000C68 CD D6 08 00         A  4494    	CALL	_put_fat
000C6C C1                  A  4495    	POP	BC
000C6D C1                  A  4496    	POP	BC
000C6E C1                  A  4497    	POP	BC
000C6F C1                  A  4498    	POP	BC
000C70 C1                  A  4499    	POP	BC
000C71 DD2FFA              A  4500    	LD	(IX+%FFFFFFFA),HL
                           A  4501    ; 1420			if (res != FR_OK) return res;
                           A  4502    .LINE 1420
                           A  4503    
000C74 01000000            A  4504    	LD	BC,0
000C78 DD27FA              A  4505    	LD	HL,(IX+%FFFFFFFA)
000C7B B7                  A  4506    	OR	A,A
000C7C ED42                A  4507    	SBC	HL,BC
000C7E 28 07               A  4508    	JR	Z,L_128
000C80 DD27FA              A  4509    	LD	HL,(IX+%FFFFFFFA)
000C83 C3 89 0D 00         A  4510    	JR	L_130
                           A  4511    ; 1421		}
000C87                     A  4512    L_128:
                           A  4513    .LINE 1421
                           A  4514    
                           A  4515    ; 1422	
                           A  4516    ; 1423		/* Remove the chain */
                           A  4517    ; 1424		do {
000C87                     A  4518    L_126:
                           A  4519    .LINE 1424
                           A  4520    
                           A  4521    ; 1425			nxt = get_fat(obj, clst);		
                           A  4522    .LINE 1425
                           A  4523    
000C87 DD4E0C              A  4524    	LD	C,(IX+%C)
000C8A 0600                A  4525    	LD	B,%0
000C8C C5                  A  4526    	PUSH	BC
000C8D DD0709              A  4527    	LD	BC,(IX+%9)
000C90 C5                  A  4528    	PUSH	BC
000C91 DD0706              A  4529    	LD	BC,(IX+%6)
000C94 C5                  A  4530    	PUSH	BC
000C95 CD 64 06 00         A  4531    	CALL	_get_fat
000C99 C1                  A  4532    	POP	BC
000C9A C1                  A  4533    	POP	BC
000C9B C1                  A  4534    	POP	BC
000C9C DD2FF6              A  4535    	LD	(IX+%FFFFFFF6),HL
000C9F DD73F9              A  4536    	LD	(IX+%FFFFFFF9),E
                           A  4537    ; 1426			if (nxt == 0) break;			
                           A  4538    .LINE 1426
                           A  4539    
000CA2 DD27F6              A  4540    	LD	HL,(IX+%FFFFFFF6)
000CA5 DD5EF9              A  4541    	LD	E,(IX+%FFFFFFF9)
000CA8 01000000            A  4542    	LD	BC,0
000CAC AF                  A  4543    	XOR	A,A
000CAD CD 00 00 00         A  4544    	CALL	__lcmpu
000CB1 CA 86 0D 00         A  4545    	JR	Z,L_129
                           A  4546    ; 1427			if (nxt == 1) return FR_INT_ERR
                           A  4547    .LINE 1427
                           A  4548    
000CB5 DD27F6              A  4549    	LD	HL,(IX+%FFFFFFF6)
000CB8 DD5EF9              A  4550    	LD	E,(IX+%FFFFFFF9)
000CBB 01010000            A  4551    	LD	BC,1
000CBF AF                  A  4552    	XOR	A,A
000CC0 CD 00 00 00         A  4553    	CALL	__lcmpu
000CC4 20 08               A  4554    	JR	NZ,L_118
000CC6 21020000            A  4555    	LD	HL,2
000CCA C3 89 0D 00         A  4556    	JR	L_130
000CCE                     A  4557    L_118:
                           A  4558    ; 1428			if (nxt == 0xFFFFFFFF) return F
                           A  4559    .LINE 1428
                           A  4560    
000CCE DD27F6              A  4561    	LD	HL,(IX+%FFFFFFF6)
000CD1 DD5EF9              A  4562    	LD	E,(IX+%FFFFFFF9)
000CD4 01FFFFFF            A  4563    	LD	BC,16777215
000CD8 3EFF                A  4564    	LD	A,%FF
000CDA CD 00 00 00         A  4565    	CALL	__lcmpu
000CDE 20 08               A  4566    	JR	NZ,L_120
000CE0 21010000            A  4567    	LD	HL,1
000CE4 C3 89 0D 00         A  4568    	JR	L_130
                           A  4569    ; 1429			if (!FF_FS_EXFAT || fs->fs_type
000CE8                     A  4570    L_120:
                           A  4571    .LINE 1429
                           A  4572    
                           A  4573    ; 1430				res = put_fat(fs, clst, 0);
                           A  4574    .LINE 1430
                           A  4575    
000CE8 01000000            A  4576    	LD	BC,0
000CEC C5                  A  4577    	PUSH	BC
000CED C5                  A  4578    	PUSH	BC
000CEE DD4E0C              A  4579    	LD	C,(IX+%C)
000CF1 0600                A  4580    	LD	B,%0
000CF3 C5                  A  4581    	PUSH	BC
000CF4 DD0709              A  4582    	LD	BC,(IX+%9)
000CF7 C5                  A  4583    	PUSH	BC
000CF8 DD07FD              A  4584    	LD	BC,(IX+%FFFFFFFD)
000CFB C5                  A  4585    	PUSH	BC
000CFC CD D6 08 00         A  4586    	CALL	_put_fat
000D00 C1                  A  4587    	POP	BC
000D01 C1                  A  4588    	POP	BC
000D02 C1                  A  4589    	POP	BC
000D03 C1                  A  4590    	POP	BC
000D04 C1                  A  4591    	POP	BC
000D05 DD2FFA              A  4592    	LD	(IX+%FFFFFFFA),HL
                           A  4593    ; 1431				if (res != FR_OK) return re
                           A  4594    .LINE 1431
                           A  4595    
000D08 01000000            A  4596    	LD	BC,0
000D0C DD27FA              A  4597    	LD	HL,(IX+%FFFFFFFA)
000D0F B7                  A  4598    	OR	A,A
000D10 ED42                A  4599    	SBC	HL,BC
000D12 28 05               A  4600    	JR	Z,L_124
000D14 DD27FA              A  4601    	LD	HL,(IX+%FFFFFFFA)
000D17 18 70               A  4602    	JR	L_130
                           A  4603    ; 1432			}
000D19                     A  4604    L_124:
                           A  4605    .LINE 1432
                           A  4606    
                           A  4607    ; 1433			if (fs->free_clst < fs->n_faten
                           A  4608    .LINE 1433
                           A  4609    
000D19 DD31FD              A  4610    	LD	IY,(IX+%FFFFFFFD)
000D1C FD0712              A  4611    	LD	BC,(IY+%12)
000D1F FD7E15              A  4612    	LD	A,(IY+%15)
000D22 DD0FF2              A  4613    	LD	(IX+%FFFFFFF2),BC
000D25 DD77F5              A  4614    	LD	(IX+%FFFFFFF5),A
000D28 FD271A              A  4615    	LD	HL,(IY+%1A)
000D2B FD5E1D              A  4616    	LD	E,(IY+%1D)
000D2E 01020000            A  4617    	LD	BC,2
000D32 AF                  A  4618    	XOR	A,A
000D33 CD 00 00 00         A  4619    	CALL	__lsub
000D37 7B                  A  4620    	LD	A,E
000D38 E5C1                A  4621    	LD	BC,HL
000D3A DD27F2              A  4622    	LD	HL,(IX+%FFFFFFF2)
000D3D DD5EF5              A  4623    	LD	E,(IX+%FFFFFFF5)
000D40 CD 00 00 00         A  4624    	CALL	__lcmpu
000D44 30 1D               A  4625    	JR	NC,L_125
                           A  4626    ; 1434				fs->free_clst++;
                           A  4627    .LINE 1434
                           A  4628    
000D46 DD27F2              A  4629    	LD	HL,(IX+%FFFFFFF2)
000D49 DD5EF5              A  4630    	LD	E,(IX+%FFFFFFF5)
000D4C 3E01                A  4631    	LD	A,%1
000D4E CD 00 00 00         A  4632    	CALL	__ladd_b
000D52 DD31FD              A  4633    	LD	IY,(IX+%FFFFFFFD)
000D55 FD2F12              A  4634    	LD	(IY+%12),HL
000D58 FD7315              A  4635    	LD	(IY+%15),E
                           A  4636    ; 1435				fs->fsi_flag |= 1;
                           A  4637    .LINE 1435
                           A  4638    
000D5B FD7E04              A  4639    	LD	A,(IY+%4)
000D5E CBC7                A  4640    	SET	%0,A
000D60 FD7704              A  4641    	LD	(IY+%4),A
                           A  4642    ; 1436			}
000D63                     A  4643    L_125:
                           A  4644    .LINE 1436
                           A  4645    
                           A  4646    ; 1437	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  4647    ; 1438			if (ecl + 1 == nxt) {	/* Is n
                           A  4648    ; 1439				ecl = nxt;
                           A  4649    ; 1440			} else {				/* End 
                           A  4650    ; 1441	#if FF_FS_EXFAT
                           A  4651    ; 1442				if (fs->fs_type == FS_EXFAT
                           A  4652    ; 1443					res = change_bitmap(fs,
                           A  4653    ; 1444					if (res != FR_OK) retur
                           A  4654    ; 1445				}
                           A  4655    ; 1446	#endif
                           A  4656    ; 1447	#if FF_USE_TRIM
                           A  4657    ; 1448				rt[0] = clst2sect(fs, scl);
                           A  4658    ; 1449				rt[1] = clst2sect(fs, ecl) 
                           A  4659    ; 1450				disk_ioctl(fs->pdrv, CTRL_T
                           A  4660    ; 1451	#endif
                           A  4661    ; 1452				scl = ecl = nxt;
                           A  4662    ; 1453			}
                           A  4663    ; 1454	#endif
                           A  4664    ; 1455			clst = nxt;					/* 
                           A  4665    .LINE 1455
                           A  4666    
000D63 DD07F6              A  4667    	LD	BC,(IX+%FFFFFFF6)
000D66 DD7EF9              A  4668    	LD	A,(IX+%FFFFFFF9)
000D69 DD0F09              A  4669    	LD	(IX+%9),BC
000D6C DD770C              A  4670    	LD	(IX+%C),A
                           A  4671    ; 1456		} while (clst < fs->n_fatent);	/* 
                           A  4672    .LINE 1456
                           A  4673    
000D6F DD27F6              A  4674    	LD	HL,(IX+%FFFFFFF6)
000D72 DD5EF9              A  4675    	LD	E,(IX+%FFFFFFF9)
000D75 DD31FD              A  4676    	LD	IY,(IX+%FFFFFFFD)
000D78 FD071A              A  4677    	LD	BC,(IY+%1A)
000D7B FD7E1D              A  4678    	LD	A,(IY+%1D)
000D7E CD 00 00 00         A  4679    	CALL	__lcmpu
000D82 DA 87 0C 00         A  4680    	JR	C,L_126
000D86                     A  4681    L_129:
                           A  4682    ; 1457	
                           A  4683    ; 1458	#if FF_FS_EXFAT
                           A  4684    ; 1459		/* Some post processes for chain st
                           A  4685    ; 1460		if (fs->fs_type == FS_EXFAT) {
                           A  4686    ; 1461			if (pclst == 0) {	/* Has the 
                           A  4687    ; 1462				obj->stat = 0;		/* Chan
                           A  4688    ; 1463			} else {
                           A  4689    ; 1464				if (obj->stat == 0) {	/* 
                           A  4690    ; 1465					clst = obj->sclust;		
                           A  4691    ; 1466					while (clst != pclst) {
                           A  4692    ; 1467						nxt = get_fat(obj, 
                           A  4693    ; 1468						if (nxt < 2) return
                           A  4694    ; 1469						if (nxt == 0xFFFFFF
                           A  4695    ; 1470						if (nxt != clst + 1
                           A  4696    ; 1471						clst++;
                           A  4697    ; 1472					}
                           A  4698    ; 1473					if (clst == pclst) {	
                           A  4699    ; 1474						obj->stat = 2;		
                           A  4700    ; 1475					}
                           A  4701    ; 1476				} else {
                           A  4702    ; 1477					if (obj->stat == 3 && p
                           A  4703    ; 1478						obj->stat = 2;	/* 
                           A  4704    ; 1479					}
                           A  4705    ; 1480				}
                           A  4706    ; 1481			}
                           A  4707    ; 1482		}
                           A  4708    ; 1483	#endif
                           A  4709    ; 1484		return FR_OK;
                           A  4710    .LINE 1484
                           A  4711    
000D86 B7                  A  4712    	OR	A,A
000D87 ED62                A  4713    	SBC	HL,HL
                           A  4714    ; 1485	}
000D89                     A  4715    L_130:
                           A  4716    .LINE 1485
                           A  4717    
000D89 DDF9                A  4718    	LD	SP,IX
000D8B DDE1                A  4719    	POP	IX
000D8D C9                  A  4720    	RET	
                           A  4721    
                           A  4722    
                           A  4723    ;**************************** _remove_chain ***
                           A  4724    ;Name                         Addr/Register   S
                           A  4725    ;G_9                                  IX-14    
                           A  4726    ;nxt                                  IX-10    
                           A  4727    ;res                                   IX-6    
                           A  4728    ;fs                                    IX-3    
                           A  4729    ;pclst                                IX+15    
                           A  4730    ;clst                                  IX+9    
                           A  4731    ;obj                                   IX+6    
                           A  4732    
                           A  4733    
                           A  4734    ; Stack Frame Size: 35 (bytes)
                           A  4735    ;       Spill Code: -1 (instruction)
                           A  4736    
                           A  4737    
                           A  4738    .ENDFUNC "remove_chain",1485,"_remove_chain"
                           A  4739    ; 1486	
                           A  4740    ; 1487	
                           A  4741    ; 1488	
                           A  4742    ; 1489	
                           A  4743    ; 1490	/*-------------------------------------
                           A  4744    ; 1491	/* FAT handling - Stretch a chain or Cr
                           A  4745    ; 1492	/*-------------------------------------
                           A  4746    ; 1493	
                           A  4747    ; 1494	static DWORD create_chain (	/* 0:No fre
                           A  4748    ; 1495		FFOBJID* obj,		/* Correspondin
                           A  4749    ; 1496		DWORD clst			/* Cluster# to 
                           A  4750    ; 1497	)
                           A  4751    ; 1498	{
000D8E                     A  4752    _create_chain:
                           A  4753    .DEFINE "_create_chain"
                           A  4754    
                           A  4755    .VALUE _create_chain
                           A  4756    
                           A  4757    .CLASS 3
                           A  4758    
                           A  4759    .TYPE 79
                           A  4760    
                           A  4761    .ENDEF
                           A  4762    
                           A  4763    .BEGFUNC "create_chain",1498,"_create_chain"
                           A  4764    
                           A  4765    .LINE 1498
                           A  4766    
                           A  4767    .DEFINE "obj"
                           A  4768    
                           A  4769    .CLASS 65
                           A  4770    
                           A  4771    .VALUE 6
                           A  4772    
                           A  4773    .TAG "NONAME1"
                           A  4774    
                           A  4775    .TYPE 40
                           A  4776    
                           A  4777    .ENDEF
                           A  4778    
                           A  4779    .DEFINE "clst"
                           A  4780    
                           A  4781    .CLASS 65
                           A  4782    
                           A  4783    .VALUE 9
                           A  4784    
                           A  4785    .TYPE 15
                           A  4786    
                           A  4787    .ENDEF
                           A  4788    
                           A  4789    .DEFINE "cs"
                           A  4790    
                           A  4791    .CLASS 65
                           A  4792    
                           A  4793    .VALUE -4
                           A  4794    
                           A  4795    .TYPE 15
                           A  4796    
                           A  4797    .ENDEF
                           A  4798    
                           A  4799    .DEFINE "ncl"
                           A  4800    
                           A  4801    .CLASS 65
                           A  4802    
                           A  4803    .VALUE -8
                           A  4804    
                           A  4805    .TYPE 15
                           A  4806    
                           A  4807    .ENDEF
                           A  4808    
                           A  4809    .DEFINE "fs"
                           A  4810    
                           A  4811    .CLASS 65
                           A  4812    
                           A  4813    .VALUE -11
                           A  4814    
                           A  4815    .TAG "NONAME0"
                           A  4816    
                           A  4817    .TYPE 40
                           A  4818    
                           A  4819    .ENDEF
                           A  4820    
                           A  4821    .DEFINE "scl"
                           A  4822    
                           A  4823    .CLASS 65
                           A  4824    
                           A  4825    .VALUE -15
                           A  4826    
                           A  4827    .TYPE 15
                           A  4828    
                           A  4829    .ENDEF
                           A  4830    
                           A  4831    .DEFINE "res"
                           A  4832    
                           A  4833    .CLASS 65
                           A  4834    
                           A  4835    .VALUE -18
                           A  4836    
                           A  4837    .TYPE 4
                           A  4838    
                           A  4839    .ENDEF
                           A  4840    
000D8E DDE5                A  4841    	PUSH	IX
000D90 DD210000 00         A  4842    	LD	IX,0
000D95 DD39                A  4843    	ADD	IX,SP
000D97 ED22E6              A  4844    	LEA	HL,IX+%FFFFFFE6
000D9A F9                  A  4845    	LD	SP,HL
                           A  4846    ; 1499		DWORD cs, ncl, scl;
                           A  4847    ; 1500		FRESULT res;
                           A  4848    ; 1501		FATFS *fs = obj->fs;
                           A  4849    .LINE 1501
                           A  4850    
000D9B DD3106              A  4851    	LD	IY,(IX+%6)
000D9E FD0700              A  4852    	LD	BC,(IY+%0)
000DA1 DD0FF5              A  4853    	LD	(IX+%FFFFFFF5),BC
                           A  4854    ; 1502	
                           A  4855    ; 1503	
                           A  4856    ; 1504		if (clst == 0) {	/* Create a new
                           A  4857    .LINE 1504
                           A  4858    
000DA4 DD2709              A  4859    	LD	HL,(IX+%9)
000DA7 DD5E0C              A  4860    	LD	E,(IX+%C)
000DAA 01000000            A  4861    	LD	BC,0
000DAE AF                  A  4862    	XOR	A,A
000DAF CD 00 00 00         A  4863    	CALL	__lcmpu
000DB3 20 43               A  4864    	JR	NZ,L_140
                           A  4865    ; 1505			scl = fs->last_clst;			
                           A  4866    .LINE 1505
                           A  4867    
000DB5 DD31F5              A  4868    	LD	IY,(IX+%FFFFFFF5)
000DB8 FD070E              A  4869    	LD	BC,(IY+%E)
000DBB FD7E11              A  4870    	LD	A,(IY+%11)
000DBE DD0FF1              A  4871    	LD	(IX+%FFFFFFF1),BC
000DC1 DD77F4              A  4872    	LD	(IX+%FFFFFFF4),A
                           A  4873    ; 1506			if (scl == 0 || scl >= fs->n_fa
                           A  4874    .LINE 1506
                           A  4875    
000DC4 C5E1                A  4876    	LD	HL,BC
000DC6 DD5EF4              A  4877    	LD	E,(IX+%FFFFFFF4)
000DC9 01000000            A  4878    	LD	BC,0
000DCD AF                  A  4879    	XOR	A,A
000DCE CD 00 00 00         A  4880    	CALL	__lcmpu
000DD2 28 17               A  4881    	JR	Z,L_132
000DD4 DD27F1              A  4882    	LD	HL,(IX+%FFFFFFF1)
000DD7 DD5EF4              A  4883    	LD	E,(IX+%FFFFFFF4)
000DDA DD31F5              A  4884    	LD	IY,(IX+%FFFFFFF5)
000DDD FD071A              A  4885    	LD	BC,(IY+%1A)
000DE0 FD7E1D              A  4886    	LD	A,(IY+%1D)
000DE3 CD 00 00 00         A  4887    	CALL	__lcmpu
000DE7 DA 75 0E 00         A  4888    	JR	C,L_142
000DEB                     A  4889    L_132:
000DEB 01010000            A  4890    	LD	BC,1
000DEF AF                  A  4891    	XOR	A,A
000DF0 DD0FF1              A  4892    	LD	(IX+%FFFFFFF1),BC
000DF3 DD77F4              A  4893    	LD	(IX+%FFFFFFF4),A
                           A  4894    ; 1507		}
                           A  4895    ; 1508		else {				/* Stretch a ch
                           A  4896    .LINE 1508
                           A  4897    
000DF6 18 7D               A  4898    	JR	L_142
000DF8                     A  4899    L_140:
                           A  4900    ; 1509			cs = get_fat(obj, clst);		
                           A  4901    .LINE 1509
                           A  4902    
000DF8 DD4E0C              A  4903    	LD	C,(IX+%C)
000DFB 0600                A  4904    	LD	B,%0
000DFD C5                  A  4905    	PUSH	BC
000DFE DD0709              A  4906    	LD	BC,(IX+%9)
000E01 C5                  A  4907    	PUSH	BC
000E02 DD0706              A  4908    	LD	BC,(IX+%6)
000E05 C5                  A  4909    	PUSH	BC
000E06 CD 64 06 00         A  4910    	CALL	_get_fat
000E0A C1                  A  4911    	POP	BC
000E0B C1                  A  4912    	POP	BC
000E0C C1                  A  4913    	POP	BC
000E0D DD2FFC              A  4914    	LD	(IX+%FFFFFFFC),HL
000E10 DD73FF              A  4915    	LD	(IX+%FFFFFFFF),E
                           A  4916    ; 1510			if (cs < 2) return 1;			
                           A  4917    .LINE 1510
                           A  4918    
000E13 DD27FC              A  4919    	LD	HL,(IX+%FFFFFFFC)
000E16 DD5EFF              A  4920    	LD	E,(IX+%FFFFFFFF)
000E19 01020000            A  4921    	LD	BC,2
000E1D AF                  A  4922    	XOR	A,A
000E1E CD 00 00 00         A  4923    	CALL	__lcmpu
000E22 30 0A               A  4924    	JR	NC,L_135
000E24 21010000            A  4925    	LD	HL,1
000E28 1E00                A  4926    	LD	E,%0
000E2A C3 5B 11 00         A  4927    	JR	L_182
000E2E                     A  4928    L_135:
                           A  4929    ; 1511			if (cs == 0xFFFFFFFF) return cs
                           A  4930    .LINE 1511
                           A  4931    
000E2E DD27FC              A  4932    	LD	HL,(IX+%FFFFFFFC)
000E31 DD5EFF              A  4933    	LD	E,(IX+%FFFFFFFF)
000E34 01FFFFFF            A  4934    	LD	BC,16777215
000E38 3EFF                A  4935    	LD	A,%FF
000E3A CD 00 00 00         A  4936    	CALL	__lcmpu
000E3E 20 0A               A  4937    	JR	NZ,L_137
000E40 DD27FC              A  4938    	LD	HL,(IX+%FFFFFFFC)
000E43 DD5EFF              A  4939    	LD	E,(IX+%FFFFFFFF)
000E46 C3 5B 11 00         A  4940    	JR	L_182
000E4A                     A  4941    L_137:
                           A  4942    ; 1512			if (cs < fs->n_fatent) return c
                           A  4943    .LINE 1512
                           A  4944    
000E4A DD27FC              A  4945    	LD	HL,(IX+%FFFFFFFC)
000E4D DD5EFF              A  4946    	LD	E,(IX+%FFFFFFFF)
000E50 DD31F5              A  4947    	LD	IY,(IX+%FFFFFFF5)
000E53 FD071A              A  4948    	LD	BC,(IY+%1A)
000E56 FD7E1D              A  4949    	LD	A,(IY+%1D)
000E59 CD 00 00 00         A  4950    	CALL	__lcmpu
000E5D 30 0A               A  4951    	JR	NC,L_138
000E5F DD27FC              A  4952    	LD	HL,(IX+%FFFFFFFC)
000E62 DD5EFF              A  4953    	LD	E,(IX+%FFFFFFFF)
000E65 C3 5B 11 00         A  4954    	JR	L_182
000E69                     A  4955    L_138:
                           A  4956    ; 1513			scl = clst;						
                           A  4957    .LINE 1513
                           A  4958    
000E69 DD0709              A  4959    	LD	BC,(IX+%9)
000E6C DD7E0C              A  4960    	LD	A,(IX+%C)
000E6F DD0FF1              A  4961    	LD	(IX+%FFFFFFF1),BC
000E72 DD77F4              A  4962    	LD	(IX+%FFFFFFF4),A
                           A  4963    ; 1514		}
000E75                     A  4964    L_142:
                           A  4965    .LINE 1514
                           A  4966    
                           A  4967    ; 1515		if (fs->free_clst == 0) return 0;	
                           A  4968    .LINE 1515
                           A  4969    
000E75 DD31F5              A  4970    	LD	IY,(IX+%FFFFFFF5)
000E78 FD2712              A  4971    	LD	HL,(IY+%12)
000E7B FD5E15              A  4972    	LD	E,(IY+%15)
000E7E 01000000            A  4973    	LD	BC,0
000E82 AF                  A  4974    	XOR	A,A
000E83 CD 00 00 00         A  4975    	CALL	__lcmpu
000E87 20 09               A  4976    	JR	NZ,L_170
000E89 B7                  A  4977    	OR	A,A
000E8A ED62                A  4978    	SBC	HL,HL
000E8C 1E00                A  4979    	LD	E,%0
000E8E C3 5B 11 00         A  4980    	JR	L_182
000E92                     A  4981    L_170:
                           A  4982    ; 1516	
                           A  4983    ; 1517	#if FF_FS_EXFAT
                           A  4984    ; 1518		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  4985    ; 1519			ncl = find_bitmap(fs, scl, 1);	
                           A  4986    ; 1520			if (ncl == 0 || ncl == 0xFFFFFF
                           A  4987    ; 1521			res = change_bitmap(fs, ncl, 1,
                           A  4988    ; 1522			if (res == FR_INT_ERR) return 1
                           A  4989    ; 1523			if (res == FR_DISK_ERR) return 
                           A  4990    ; 1524			if (clst == 0) {				
                           A  4991    ; 1525				obj->stat = 2;				
                           A  4992    ; 1526			} else {						
                           A  4993    ; 1527				if (obj->stat == 2 && ncl !
                           A  4994    ; 1528					obj->n_cont = scl - obj
                           A  4995    ; 1529					obj->stat = 3;			
                           A  4996    ; 1530				}
                           A  4997    ; 1531			}
                           A  4998    ; 1532			if (obj->stat != 2) {	/* Is t
                           A  4999    ; 1533				if (ncl == clst + 1) {	/* 
                           A  5000    ; 1534					obj->n_frag = obj->n_fr
                           A  5001    ; 1535				} else {				/* 
                           A  5002    ; 1536					if (obj->n_frag == 0) o
                           A  5003    ; 1537					res = fill_last_frag(ob
                           A  5004    ; 1538					if (res == FR_OK) obj->
                           A  5005    ; 1539				}
                           A  5006    ; 1540			}
                           A  5007    ; 1541		} else
                           A  5008    ; 1542	#endif
                           A  5009    ; 1543		{	/* On the FAT/FAT32 volume */
                           A  5010    ; 1544			ncl = 0;
                           A  5011    .LINE 1544
                           A  5012    
000E92 AF                  A  5013    	XOR	A,A
000E93 DD0FF8              A  5014    	LD	(IX+%FFFFFFF8),BC
000E96 DD77FB              A  5015    	LD	(IX+%FFFFFFFB),A
                           A  5016    ; 1545			if (scl == clst) {				
                           A  5017    .LINE 1545
                           A  5018    
000E99 DD27F1              A  5019    	LD	HL,(IX+%FFFFFFF1)
000E9C DD5EF4              A  5020    	LD	E,(IX+%FFFFFFF4)
000E9F DD0709              A  5021    	LD	BC,(IX+%9)
000EA2 DD7E0C              A  5022    	LD	A,(IX+%C)
000EA5 CD 00 00 00         A  5023    	CALL	__lcmpu
000EA9 C2 83 0F 00         A  5024    	JR	NZ,L_166
                           A  5025    ; 1546				ncl = scl + 1;				
                           A  5026    .LINE 1546
                           A  5027    
000EAD DD27F1              A  5028    	LD	HL,(IX+%FFFFFFF1)
000EB0 DD5EF4              A  5029    	LD	E,(IX+%FFFFFFF4)
000EB3 3E01                A  5030    	LD	A,%1
000EB5 CD 00 00 00         A  5031    	CALL	__ladd_b
000EB9 DD2FF8              A  5032    	LD	(IX+%FFFFFFF8),HL
000EBC DD73FB              A  5033    	LD	(IX+%FFFFFFFB),E
                           A  5034    ; 1547				if (ncl >= fs->n_fatent) nc
                           A  5035    .LINE 1547
                           A  5036    
000EBF DD27F8              A  5037    	LD	HL,(IX+%FFFFFFF8)
000EC2 DD5EFB              A  5038    	LD	E,(IX+%FFFFFFFB)
000EC5 DD31F5              A  5039    	LD	IY,(IX+%FFFFFFF5)
000EC8 FD071A              A  5040    	LD	BC,(IY+%1A)
000ECB FD7E1D              A  5041    	LD	A,(IY+%1D)
000ECE CD 00 00 00         A  5042    	CALL	__lcmpu
000ED2 38 0B               A  5043    	JR	C,L_144
000ED4 01020000            A  5044    	LD	BC,2
000ED8 AF                  A  5045    	XOR	A,A
000ED9 DD0FF8              A  5046    	LD	(IX+%FFFFFFF8),BC
000EDC DD77FB              A  5047    	LD	(IX+%FFFFFFFB),A
000EDF                     A  5048    L_144:
                           A  5049    ; 1548				cs = get_fat(obj, ncl);		
                           A  5050    .LINE 1548
                           A  5051    
000EDF DD4EFB              A  5052    	LD	C,(IX+%FFFFFFFB)
000EE2 0600                A  5053    	LD	B,%0
000EE4 C5                  A  5054    	PUSH	BC
000EE5 DD07F8              A  5055    	LD	BC,(IX+%FFFFFFF8)
000EE8 C5                  A  5056    	PUSH	BC
000EE9 DD0706              A  5057    	LD	BC,(IX+%6)
000EEC C5                  A  5058    	PUSH	BC
000EED CD 64 06 00         A  5059    	CALL	_get_fat
000EF1 C1                  A  5060    	POP	BC
000EF2 C1                  A  5061    	POP	BC
000EF3 C1                  A  5062    	POP	BC
000EF4 DD2FFC              A  5063    	LD	(IX+%FFFFFFFC),HL
000EF7 DD73FF              A  5064    	LD	(IX+%FFFFFFFF),E
                           A  5065    ; 1549				if (cs == 1 || cs == 0xFFFF
                           A  5066    .LINE 1549
                           A  5067    
000EFA DD27FC              A  5068    	LD	HL,(IX+%FFFFFFFC)
000EFD DD5EFF              A  5069    	LD	E,(IX+%FFFFFFFF)
000F00 01010000            A  5070    	LD	BC,1
000F04 AF                  A  5071    	XOR	A,A
000F05 CD 00 00 00         A  5072    	CALL	__lcmpu
000F09 28 12               A  5073    	JR	Z,L_146
000F0B DD27FC              A  5074    	LD	HL,(IX+%FFFFFFFC)
000F0E DD5EFF              A  5075    	LD	E,(IX+%FFFFFFFF)
000F11 01FFFFFF            A  5076    	LD	BC,16777215
000F15 3EFF                A  5077    	LD	A,%FF
000F17 CD 00 00 00         A  5078    	CALL	__lcmpu
000F1B 20 0A               A  5079    	JR	NZ,L_151
000F1D                     A  5080    L_146:
000F1D DD27FC              A  5081    	LD	HL,(IX+%FFFFFFFC)
000F20 DD5EFF              A  5082    	LD	E,(IX+%FFFFFFFF)
000F23 C3 5B 11 00         A  5083    	JR	L_182
000F27                     A  5084    L_151:
                           A  5085    ; 1550				if (cs != 0) {				
                           A  5086    .LINE 1550
                           A  5087    
000F27 DD27FC              A  5088    	LD	HL,(IX+%FFFFFFFC)
000F2A DD5EFF              A  5089    	LD	E,(IX+%FFFFFFFF)
000F2D 01000000            A  5090    	LD	BC,0
000F31 AF                  A  5091    	XOR	A,A
000F32 CD 00 00 00         A  5092    	CALL	__lcmpu
000F36 28 4B               A  5093    	JR	Z,L_166
                           A  5094    ; 1551					cs = fs->last_clst;		
                           A  5095    .LINE 1551
                           A  5096    
000F38 DD31F5              A  5097    	LD	IY,(IX+%FFFFFFF5)
000F3B FD070E              A  5098    	LD	BC,(IY+%E)
000F3E FD7E11              A  5099    	LD	A,(IY+%11)
000F41 DD0FFC              A  5100    	LD	(IX+%FFFFFFFC),BC
000F44 DD77FF              A  5101    	LD	(IX+%FFFFFFFF),A
                           A  5102    ; 1552					if (cs >= 2 && cs < fs-
                           A  5103    .LINE 1552
                           A  5104    
000F47 C5E1                A  5105    	LD	HL,BC
000F49 DD5EFF              A  5106    	LD	E,(IX+%FFFFFFFF)
000F4C 01020000            A  5107    	LD	BC,2
000F50 AF                  A  5108    	XOR	A,A
000F51 CD 00 00 00         A  5109    	CALL	__lcmpu
000F55 38 21               A  5110    	JR	C,L_149
000F57 DD27FC              A  5111    	LD	HL,(IX+%FFFFFFFC)
000F5A DD5EFF              A  5112    	LD	E,(IX+%FFFFFFFF)
000F5D DD31F5              A  5113    	LD	IY,(IX+%FFFFFFF5)
000F60 FD071A              A  5114    	LD	BC,(IY+%1A)
000F63 FD7E1D              A  5115    	LD	A,(IY+%1D)
000F66 CD 00 00 00         A  5116    	CALL	__lcmpu
000F6A 30 0C               A  5117    	JR	NC,L_149
000F6C DD07FC              A  5118    	LD	BC,(IX+%FFFFFFFC)
000F6F DD7EFF              A  5119    	LD	A,(IX+%FFFFFFFF)
000F72 DD0FF1              A  5120    	LD	(IX+%FFFFFFF1),BC
000F75 DD77F4              A  5121    	LD	(IX+%FFFFFFF4),A
000F78                     A  5122    L_149:
                           A  5123    ; 1553					ncl = 0;
                           A  5124    .LINE 1553
                           A  5125    
000F78 01000000            A  5126    	LD	BC,0
000F7C AF                  A  5127    	XOR	A,A
000F7D DD0FF8              A  5128    	LD	(IX+%FFFFFFF8),BC
000F80 DD77FB              A  5129    	LD	(IX+%FFFFFFFB),A
                           A  5130    ; 1554				}
                           A  5131    ; 1555			}
000F83                     A  5132    L_166:
                           A  5133    .LINE 1555
                           A  5134    
                           A  5135    ; 1556			if (ncl == 0) {	/* The new clus
                           A  5136    .LINE 1556
                           A  5137    
000F83 DD27F8              A  5138    	LD	HL,(IX+%FFFFFFF8)
000F86 DD5EFB              A  5139    	LD	E,(IX+%FFFFFFFB)
000F89 01000000            A  5140    	LD	BC,0
000F8D AF                  A  5141    	XOR	A,A
000F8E CD 00 00 00         A  5142    	CALL	__lcmpu
000F92 C2 60 10 00         A  5143    	JR	NZ,L_167
                           A  5144    ; 1557				ncl = scl;	/* Start cluste
                           A  5145    .LINE 1557
                           A  5146    
000F96 DD07F1              A  5147    	LD	BC,(IX+%FFFFFFF1)
000F99 DD7EF4              A  5148    	LD	A,(IX+%FFFFFFF4)
000F9C DD0FF8              A  5149    	LD	(IX+%FFFFFFF8),BC
000F9F DD77FB              A  5150    	LD	(IX+%FFFFFFFB),A
                           A  5151    ; 1558				for (;;) {
000FA2                     A  5152    L_163:
                           A  5153    .LINE 1558
                           A  5154    
                           A  5155    ; 1559					ncl++;					
                           A  5156    .LINE 1559
                           A  5157    
000FA2 DD27F8              A  5158    	LD	HL,(IX+%FFFFFFF8)
000FA5 DD5EFB              A  5159    	LD	E,(IX+%FFFFFFFB)
000FA8 3E01                A  5160    	LD	A,%1
000FAA CD 00 00 00         A  5161    	CALL	__ladd_b
000FAE DD2FF8              A  5162    	LD	(IX+%FFFFFFF8),HL
000FB1 DD73FB              A  5163    	LD	(IX+%FFFFFFFB),E
                           A  5164    ; 1560					if (ncl >= fs->n_fatent
                           A  5165    .LINE 1560
                           A  5166    
000FB4 DD27F8              A  5167    	LD	HL,(IX+%FFFFFFF8)
000FB7 DD5EFB              A  5168    	LD	E,(IX+%FFFFFFFB)
000FBA DD31F5              A  5169    	LD	IY,(IX+%FFFFFFF5)
000FBD FD071A              A  5170    	LD	BC,(IY+%1A)
000FC0 FD7E1D              A  5171    	LD	A,(IY+%1D)
000FC3 CD 00 00 00         A  5172    	CALL	__lcmpu
000FC7 38 21               A  5173    	JR	C,L_156
                           A  5174    ; 1561						ncl = 2;
                           A  5175    .LINE 1561
                           A  5176    
000FC9 01020000            A  5177    	LD	BC,2
000FCD AF                  A  5178    	XOR	A,A
000FCE DD0FF8              A  5179    	LD	(IX+%FFFFFFF8),BC
000FD1 DD77FB              A  5180    	LD	(IX+%FFFFFFFB),A
                           A  5181    ; 1562						if (ncl > scl) retu
                           A  5182    .LINE 1562
                           A  5183    
000FD4 DD27F1              A  5184    	LD	HL,(IX+%FFFFFFF1)
000FD7 DD5EF4              A  5185    	LD	E,(IX+%FFFFFFF4)
000FDA AF                  A  5186    	XOR	A,A
000FDB CD 00 00 00         A  5187    	CALL	__lcmpu
000FDF 30 09               A  5188    	JR	NC,L_156
000FE1 B7                  A  5189    	OR	A,A
000FE2 ED62                A  5190    	SBC	HL,HL
000FE4 1E00                A  5191    	LD	E,%0
000FE6 C3 5B 11 00         A  5192    	JR	L_182
                           A  5193    ; 1563					}
000FEA                     A  5194    L_156:
                           A  5195    .LINE 1563
                           A  5196    
                           A  5197    ; 1564					cs = get_fat(obj, ncl);
                           A  5198    .LINE 1564
                           A  5199    
000FEA DD4EFB              A  5200    	LD	C,(IX+%FFFFFFFB)
000FED 0600                A  5201    	LD	B,%0
000FEF C5                  A  5202    	PUSH	BC
000FF0 DD07F8              A  5203    	LD	BC,(IX+%FFFFFFF8)
000FF3 C5                  A  5204    	PUSH	BC
000FF4 DD0706              A  5205    	LD	BC,(IX+%6)
000FF7 C5                  A  5206    	PUSH	BC
000FF8 CD 64 06 00         A  5207    	CALL	_get_fat
000FFC C1                  A  5208    	POP	BC
000FFD C1                  A  5209    	POP	BC
000FFE C1                  A  5210    	POP	BC
000FFF DD2FFC              A  5211    	LD	(IX+%FFFFFFFC),HL
001002 DD73FF              A  5212    	LD	(IX+%FFFFFFFF),E
                           A  5213    ; 1565					if (cs == 0) break;		
                           A  5214    .LINE 1565
                           A  5215    
001005 DD27FC              A  5216    	LD	HL,(IX+%FFFFFFFC)
001008 DD5EFF              A  5217    	LD	E,(IX+%FFFFFFFF)
00100B 01000000            A  5218    	LD	BC,0
00100F AF                  A  5219    	XOR	A,A
001010 CD 00 00 00         A  5220    	CALL	__lcmpu
001014 28 4A               A  5221    	JR	Z,L_167
                           A  5222    ; 1566					if (cs == 1 || cs == 0x
                           A  5223    .LINE 1566
                           A  5224    
001016 DD27FC              A  5225    	LD	HL,(IX+%FFFFFFFC)
001019 DD5EFF              A  5226    	LD	E,(IX+%FFFFFFFF)
00101C 01010000            A  5227    	LD	BC,1
001020 AF                  A  5228    	XOR	A,A
001021 CD 00 00 00         A  5229    	CALL	__lcmpu
001025 28 12               A  5230    	JR	Z,L_159
001027 DD27FC              A  5231    	LD	HL,(IX+%FFFFFFFC)
00102A DD5EFF              A  5232    	LD	E,(IX+%FFFFFFFF)
00102D 01FFFFFF            A  5233    	LD	BC,16777215
001031 3EFF                A  5234    	LD	A,%FF
001033 CD 00 00 00         A  5235    	CALL	__lcmpu
001037 20 0A               A  5236    	JR	NZ,L_162
001039                     A  5237    L_159:
001039 DD27FC              A  5238    	LD	HL,(IX+%FFFFFFFC)
00103C DD5EFF              A  5239    	LD	E,(IX+%FFFFFFFF)
00103F C3 5B 11 00         A  5240    	JR	L_182
001043                     A  5241    L_162:
                           A  5242    ; 1567					if (ncl == scl) return 
                           A  5243    .LINE 1567
                           A  5244    
001043 DD27F8              A  5245    	LD	HL,(IX+%FFFFFFF8)
001046 DD5EFB              A  5246    	LD	E,(IX+%FFFFFFFB)
001049 DD07F1              A  5247    	LD	BC,(IX+%FFFFFFF1)
00104C DD7EF4              A  5248    	LD	A,(IX+%FFFFFFF4)
00104F CD 00 00 00         A  5249    	CALL	__lcmpu
001053 C2 A2 0F 00         A  5250    	JR	NZ,L_163
001057 B7                  A  5251    	OR	A,A
001058 ED62                A  5252    	SBC	HL,HL
00105A 1E00                A  5253    	LD	E,%0
00105C C3 5B 11 00         A  5254    	JR	L_182
                           A  5255    ; 1568				}
                           A  5256    .LINE 1568
                           A  5257    
                           A  5258    ; 1569			}
001060                     A  5259    L_167:
                           A  5260    .LINE 1569
                           A  5261    
                           A  5262    ; 1570			res = put_fat(fs, ncl, 0xFFFFFF
                           A  5263    .LINE 1570
                           A  5264    
001060 01FF0000            A  5265    	LD	BC,255
001064 C5                  A  5266    	PUSH	BC
001065 01FFFFFF            A  5267    	LD	BC,16777215
001069 C5                  A  5268    	PUSH	BC
00106A DD4EFB              A  5269    	LD	C,(IX+%FFFFFFFB)
00106D 0600                A  5270    	LD	B,%0
00106F C5                  A  5271    	PUSH	BC
001070 DD07F8              A  5272    	LD	BC,(IX+%FFFFFFF8)
001073 C5                  A  5273    	PUSH	BC
001074 DD07F5              A  5274    	LD	BC,(IX+%FFFFFFF5)
001077 C5                  A  5275    	PUSH	BC
001078 CD D6 08 00         A  5276    	CALL	_put_fat
00107C C1                  A  5277    	POP	BC
00107D C1                  A  5278    	POP	BC
00107E C1                  A  5279    	POP	BC
00107F C1                  A  5280    	POP	BC
001080 C1                  A  5281    	POP	BC
001081 DD2FEE              A  5282    	LD	(IX+%FFFFFFEE),HL
                           A  5283    ; 1571			if (res == FR_OK && clst != 0) 
                           A  5284    .LINE 1571
                           A  5285    
001084 01000000            A  5286    	LD	BC,0
001088 DD27EE              A  5287    	LD	HL,(IX+%FFFFFFEE)
00108B B7                  A  5288    	OR	A,A
00108C ED42                A  5289    	SBC	HL,BC
00108E 20 31               A  5290    	JR	NZ,L_180
001090 DD2709              A  5291    	LD	HL,(IX+%9)
001093 DD5E0C              A  5292    	LD	E,(IX+%C)
001096 AF                  A  5293    	XOR	A,A
001097 CD 00 00 00         A  5294    	CALL	__lcmpu
00109B 28 24               A  5295    	JR	Z,L_180
                           A  5296    ; 1572				res = put_fat(fs, clst, ncl
                           A  5297    .LINE 1572
                           A  5298    
00109D DD4EFB              A  5299    	LD	C,(IX+%FFFFFFFB)
0010A0 0600                A  5300    	LD	B,%0
0010A2 C5                  A  5301    	PUSH	BC
0010A3 DD07F8              A  5302    	LD	BC,(IX+%FFFFFFF8)
0010A6 C5                  A  5303    	PUSH	BC
0010A7 DD4E0C              A  5304    	LD	C,(IX+%C)
0010AA 0600                A  5305    	LD	B,%0
0010AC C5                  A  5306    	PUSH	BC
0010AD DD0709              A  5307    	LD	BC,(IX+%9)
0010B0 C5                  A  5308    	PUSH	BC
0010B1 DD07F5              A  5309    	LD	BC,(IX+%FFFFFFF5)
0010B4 C5                  A  5310    	PUSH	BC
0010B5 CD D6 08 00         A  5311    	CALL	_put_fat
0010B9 C1                  A  5312    	POP	BC
0010BA C1                  A  5313    	POP	BC
0010BB C1                  A  5314    	POP	BC
0010BC C1                  A  5315    	POP	BC
0010BD C1                  A  5316    	POP	BC
0010BE DD2FEE              A  5317    	LD	(IX+%FFFFFFEE),HL
                           A  5318    ; 1573			}
                           A  5319    ; 1574		}
0010C1                     A  5320    L_180:
                           A  5321    .LINE 1574
                           A  5322    
                           A  5323    ; 1575	
                           A  5324    ; 1576		if (res == FR_OK) {			/* Upda
                           A  5325    .LINE 1576
                           A  5326    
0010C1 01000000            A  5327    	LD	BC,0
0010C5 DD27EE              A  5328    	LD	HL,(IX+%FFFFFFEE)
0010C8 B7                  A  5329    	OR	A,A
0010C9 ED42                A  5330    	SBC	HL,BC
0010CB 20 5B               A  5331    	JR	NZ,L_179
                           A  5332    ; 1577			fs->last_clst = ncl;
                           A  5333    .LINE 1577
                           A  5334    
0010CD DD07F8              A  5335    	LD	BC,(IX+%FFFFFFF8)
0010D0 DD7EFB              A  5336    	LD	A,(IX+%FFFFFFFB)
0010D3 DD31F5              A  5337    	LD	IY,(IX+%FFFFFFF5)
0010D6 FD0F0E              A  5338    	LD	(IY+%E),BC
0010D9 FD7711              A  5339    	LD	(IY+%11),A
                           A  5340    ; 1578			if (fs->free_clst <= fs->n_fate
                           A  5341    .LINE 1578
                           A  5342    
0010DC FD0712              A  5343    	LD	BC,(IY+%12)
0010DF FD7E15              A  5344    	LD	A,(IY+%15)
0010E2 DD0FEA              A  5345    	LD	(IX+%FFFFFFEA),BC
0010E5 DD77ED              A  5346    	LD	(IX+%FFFFFFED),A
0010E8 FD271A              A  5347    	LD	HL,(IY+%1A)
0010EB FD5E1D              A  5348    	LD	E,(IY+%1D)
0010EE 01020000            A  5349    	LD	BC,2
0010F2 AF                  A  5350    	XOR	A,A
0010F3 CD 00 00 00         A  5351    	CALL	__lsub
0010F7 DD07EA              A  5352    	LD	BC,(IX+%FFFFFFEA)
0010FA DD7EED              A  5353    	LD	A,(IX+%FFFFFFED)
0010FD CD 00 00 00         A  5354    	CALL	__lcmpu
001101 38 18               A  5355    	JR	C,L_173
001103 DD27EA              A  5356    	LD	HL,(IX+%FFFFFFEA)
001106 DD5EED              A  5357    	LD	E,(IX+%FFFFFFED)
001109 01010000            A  5358    	LD	BC,1
00110D AF                  A  5359    	XOR	A,A
00110E CD 00 00 00         A  5360    	CALL	__lsub
001112 DD31F5              A  5361    	LD	IY,(IX+%FFFFFFF5)
001115 FD2F12              A  5362    	LD	(IY+%12),HL
001118 FD7315              A  5363    	LD	(IY+%15),E
00111B                     A  5364    L_173:
                           A  5365    ; 1579			fs->fsi_flag |= 1;
                           A  5366    .LINE 1579
                           A  5367    
00111B DD31F5              A  5368    	LD	IY,(IX+%FFFFFFF5)
00111E FD7E04              A  5369    	LD	A,(IY+%4)
001121 CBC7                A  5370    	SET	%0,A
001123 FD7704              A  5371    	LD	(IY+%4),A
                           A  5372    ; 1580		} else {
                           A  5373    .LINE 1580
                           A  5374    
001126 18 2D               A  5375    	JR	L_181
001128                     A  5376    L_179:
                           A  5377    ; 1581			ncl = (res == FR_DISK_ERR) ? 0x
                           A  5378    .LINE 1581
                           A  5379    
001128 01010000            A  5380    	LD	BC,1
00112C DD27EE              A  5381    	LD	HL,(IX+%FFFFFFEE)
00112F B7                  A  5382    	OR	A,A
001130 ED42                A  5383    	SBC	HL,BC
001132 20 0E               A  5384    	JR	NZ,L_176
001134 01FFFFFF            A  5385    	LD	BC,16777215
001138 3EFF                A  5386    	LD	A,%FF
00113A DD0FE6              A  5387    	LD	(IX+%FFFFFFE6),BC
00113D DD77E9              A  5388    	LD	(IX+%FFFFFFE9),A
001140 18 07               A  5389    	JR	L_177
001142                     A  5390    L_176:
001142 AF                  A  5391    	XOR	A,A
001143 DD0FE6              A  5392    	LD	(IX+%FFFFFFE6),BC
001146 DD77E9              A  5393    	LD	(IX+%FFFFFFE9),A
001149                     A  5394    L_177:
001149 DD07E6              A  5395    	LD	BC,(IX+%FFFFFFE6)
00114C DD7EE9              A  5396    	LD	A,(IX+%FFFFFFE9)
00114F DD0FF8              A  5397    	LD	(IX+%FFFFFFF8),BC
001152 DD77FB              A  5398    	LD	(IX+%FFFFFFFB),A
                           A  5399    ; 1582		}
001155                     A  5400    L_181:
                           A  5401    .LINE 1582
                           A  5402    
                           A  5403    ; 1583	
                           A  5404    ; 1584		return ncl;		/* Return new clust
                           A  5405    .LINE 1584
                           A  5406    
001155 DD27F8              A  5407    	LD	HL,(IX+%FFFFFFF8)
001158 DD5EFB              A  5408    	LD	E,(IX+%FFFFFFFB)
                           A  5409    ; 1585	}
00115B                     A  5410    L_182:
                           A  5411    .LINE 1585
                           A  5412    
00115B DDF9                A  5413    	LD	SP,IX
00115D DDE1                A  5414    	POP	IX
00115F C9                  A  5415    	RET	
                           A  5416    
                           A  5417    
                           A  5418    ;**************************** _create_chain ***
                           A  5419    ;Name                         Addr/Register   S
                           A  5420    ;temp174                              IX-26    
                           A  5421    ;G_10                                 IX-22    
                           A  5422    ;res                                  IX-18    
                           A  5423    ;scl                                  IX-15    
                           A  5424    ;fs                                   IX-11    
                           A  5425    ;ncl                                   IX-8    
                           A  5426    ;cs                                    IX-4    
                           A  5427    ;clst                                  IX+9    
                           A  5428    ;obj                                   IX+6    
                           A  5429    
                           A  5430    
                           A  5431    ; Stack Frame Size: 41 (bytes)
                           A  5432    ;       Spill Code: -1 (instruction)
                           A  5433    
                           A  5434    
                           A  5435    .ENDFUNC "create_chain",1585,"_create_chain"
                           A  5436    ; 1586	
                           A  5437    ; 1587	#endif /* !FF_FS_READONLY */
                           A  5438    ; 1588	
                           A  5439    ; 1589	
                           A  5440    ; 1590	
                           A  5441    ; 1591	
                           A  5442    ; 1592	#if FF_USE_FASTSEEK
                           A  5443    ; 1593	/*-------------------------------------
                           A  5444    ; 1594	/* FAT handling - Convert offset into c
                           A  5445    ; 1595	/*-------------------------------------
                           A  5446    ; 1596	
                           A  5447    ; 1597	static DWORD clmt_clust (	/* <2:Error
                           A  5448    ; 1598		FIL* fp,		/* Pointer to the f
                           A  5449    ; 1599		FSIZE_t ofs		/* File offset to b
                           A  5450    ; 1600	)
                           A  5451    ; 1601	{
                           A  5452    ; 1602		DWORD cl, ncl, *tbl;
                           A  5453    ; 1603		FATFS *fs = fp->obj.fs;
                           A  5454    ; 1604	
                           A  5455    ; 1605	
                           A  5456    ; 1606		tbl = fp->cltbl + 1;	/* Top of C
                           A  5457    ; 1607		cl = (DWORD)(ofs / SS(fs) / fs->csi
                           A  5458    ; 1608		for (;;) {
                           A  5459    ; 1609			ncl = *tbl++;			/* Numb
                           A  5460    ; 1610			if (ncl == 0) return 0;	/* End 
                           A  5461    ; 1611			if (cl < ncl) break;	/* In t
                           A  5462    ; 1612			cl -= ncl; tbl++;		/* Next
                           A  5463    ; 1613		}
                           A  5464    ; 1614		return cl + *tbl;	/* Return the c
                           A  5465    ; 1615	}
                           A  5466    ; 1616	
                           A  5467    ; 1617	#endif	/* FF_USE_FASTSEEK */
                           A  5468    ; 1618	
                           A  5469    ; 1619	
                           A  5470    ; 1620	
                           A  5471    ; 1621	
                           A  5472    ; 1622	/*-------------------------------------
                           A  5473    ; 1623	/* Directory handling - Fill a cluster 
                           A  5474    ; 1624	/*-------------------------------------
                           A  5475    ; 1625	
                           A  5476    ; 1626	#if !FF_FS_READONLY
                           A  5477    ; 1627	static FRESULT dir_clear (	/* Returns 
                           A  5478    ; 1628		FATFS *fs,		/* Filesystem objec
                           A  5479    ; 1629		DWORD clst		/* Directory table 
                           A  5480    ; 1630	)
                           A  5481    ; 1631	{
001160                     A  5482    _dir_clear:
                           A  5483    .DEFINE "_dir_clear"
                           A  5484    
                           A  5485    .VALUE _dir_clear
                           A  5486    
                           A  5487    .CLASS 3
                           A  5488    
                           A  5489    .TYPE 68
                           A  5490    
                           A  5491    .ENDEF
                           A  5492    
                           A  5493    .BEGFUNC "dir_clear",1631,"_dir_clear"
                           A  5494    
                           A  5495    .LINE 1631
                           A  5496    
                           A  5497    .DEFINE "fs"
                           A  5498    
                           A  5499    .CLASS 65
                           A  5500    
                           A  5501    .VALUE 6
                           A  5502    
                           A  5503    .TAG "NONAME0"
                           A  5504    
                           A  5505    .TYPE 40
                           A  5506    
                           A  5507    .ENDEF
                           A  5508    
                           A  5509    .DEFINE "clst"
                           A  5510    
                           A  5511    .CLASS 65
                           A  5512    
                           A  5513    .VALUE 9
                           A  5514    
                           A  5515    .TYPE 15
                           A  5516    
                           A  5517    .ENDEF
                           A  5518    
                           A  5519    .DEFINE "n"
                           A  5520    
                           A  5521    .CLASS 65
                           A  5522    
                           A  5523    .VALUE -3
                           A  5524    
                           A  5525    .TYPE 14
                           A  5526    
                           A  5527    .ENDEF
                           A  5528    
                           A  5529    .DEFINE "ibuf"
                           A  5530    
                           A  5531    .CLASS 65
                           A  5532    
                           A  5533    .VALUE -9
                           A  5534    
                           A  5535    .TYPE 44
                           A  5536    
                           A  5537    .ENDEF
                           A  5538    
                           A  5539    .DEFINE "sect"
                           A  5540    
                           A  5541    .CLASS 65
                           A  5542    
                           A  5543    .VALUE -13
                           A  5544    
                           A  5545    .TYPE 15
                           A  5546    
                           A  5547    .ENDEF
                           A  5548    
001160 DDE5                A  5549    	PUSH	IX
001162 DD210000 00         A  5550    	LD	IX,0
001167 DD39                A  5551    	ADD	IX,SP
001169 ED22F3              A  5552    	LEA	HL,IX+%FFFFFFF3
00116C F9                  A  5553    	LD	SP,HL
                           A  5554    ; 1632		LBA_t sect;
                           A  5555    ; 1633		UINT n, szb;
                           A  5556    ; 1634		BYTE *ibuf;
                           A  5557    ; 1635	
                           A  5558    ; 1636	
                           A  5559    ; 1637		if (sync_window(fs) != FR_OK) retur
                           A  5560    .LINE 1637
                           A  5561    
00116D DD0706              A  5562    	LD	BC,(IX+%6)
001170 C5                  A  5563    	PUSH	BC
001171 CD 4E 03 00         A  5564    	CALL	_sync_window
001175 C1                  A  5565    	POP	BC
001176 01000000            A  5566    	LD	BC,0
00117A B7                  A  5567    	OR	A,A
00117B ED42                A  5568    	SBC	HL,BC
00117D 28 08               A  5569    	JR	Z,L_184
00117F 21010000            A  5570    	LD	HL,1
001183 C3 4B 12 00         A  5571    	JR	L_194
001187                     A  5572    L_184:
                           A  5573    ; 1638		sect = clst2sect(fs, clst);		/* 
                           A  5574    .LINE 1638
                           A  5575    
001187 DD4E0C              A  5576    	LD	C,(IX+%C)
00118A 0600                A  5577    	LD	B,%0
00118C C5                  A  5578    	PUSH	BC
00118D DD0709              A  5579    	LD	BC,(IX+%9)
001190 C5                  A  5580    	PUSH	BC
001191 DD0706              A  5581    	LD	BC,(IX+%6)
001194 C5                  A  5582    	PUSH	BC
001195 CD F9 05 00         A  5583    	CALL	_clst2sect
001199 C1                  A  5584    	POP	BC
00119A C1                  A  5585    	POP	BC
00119B C1                  A  5586    	POP	BC
00119C DD2FF3              A  5587    	LD	(IX+%FFFFFFF3),HL
00119F DD73F6              A  5588    	LD	(IX+%FFFFFFF6),E
                           A  5589    ; 1639		fs->winsect = sect;				/* 
                           A  5590    .LINE 1639
                           A  5591    
0011A2 DD7EF6              A  5592    	LD	A,(IX+%FFFFFFF6)
0011A5 DD3106              A  5593    	LD	IY,(IX+%6)
0011A8 FD2F32              A  5594    	LD	(IY+%32),HL
0011AB FD7735              A  5595    	LD	(IY+%35),A
                           A  5596    ; 1640		memset(fs->win, 0, sizeof fs->win);
                           A  5597    .LINE 1640
                           A  5598    
0011AE 01000200            A  5599    	LD	BC,512
0011B2 C5                  A  5600    	PUSH	BC
0011B3 01000000            A  5601    	LD	BC,0
0011B7 C5                  A  5602    	PUSH	BC
0011B8 ED6636              A  5603    	PEA	IY+%36
0011BB CD 00 00 00         A  5604    	CALL	_memset
0011BF C1                  A  5605    	POP	BC
0011C0 C1                  A  5606    	POP	BC
0011C1 C1                  A  5607    	POP	BC
                           A  5608    ; 1641	#if FF_USE_LFN == 3		/* Quick table 
                           A  5609    ; 1642		/* Allocate a temporary buffer */
                           A  5610    ; 1643		for (szb = ((DWORD)fs->csize * SS(f
                           A  5611    ; 1644		if (szb > SS(fs)) {		/* Buffer a
                           A  5612    ; 1645			memset(ibuf, 0, szb);
                           A  5613    ; 1646			szb /= SS(fs);		/* Bytes ->
                           A  5614    ; 1647			for (n = 0; n < fs->csize && di
                           A  5615    ; 1648			ff_memfree(ibuf);
                           A  5616    ; 1649		} else
                           A  5617    ; 1650	#endif
                           A  5618    ; 1651		{
                           A  5619    ; 1652			ibuf = fs->win; szb = 1;	/* 
                           A  5620    .LINE 1652
                           A  5621    
0011C2 DD3106              A  5622    	LD	IY,(IX+%6)
0011C5 ED0336              A  5623    	LEA	BC,IY+%36
0011C8 DD0FF7              A  5624    	LD	(IX+%FFFFFFF7),BC
                           A  5625    ; 1653			for (n = 0; n < fs->csize && di
                           A  5626    .LINE 1653
                           A  5627    
0011CB 01000000            A  5628    	LD	BC,0
0011CF DD0FFD              A  5629    	LD	(IX+%FFFFFFFD),BC
0011D2 18 07               A  5630    	JR	L_188
0011D4                     A  5631    L_186:
0011D4 DD07FD              A  5632    	LD	BC,(IX+%FFFFFFFD)
0011D7 03                  A  5633    	INC	BC
0011D8 DD0FFD              A  5634    	LD	(IX+%FFFFFFFD),BC
0011DB                     A  5635    L_188:
0011DB DD3106              A  5636    	LD	IY,(IX+%6)
0011DE FD0709              A  5637    	LD	BC,(IY+%9)
0011E1 CD 00 00 00         A  5638    	CALL	__stoiu
0011E5 E5C1                A  5639    	LD	BC,HL
0011E7 DD27FD              A  5640    	LD	HL,(IX+%FFFFFFFD)
0011EA B7                  A  5641    	OR	A,A
0011EB ED42                A  5642    	SBC	HL,BC
0011ED 30 37               A  5643    	JR	NC,L_193
0011EF 01010000            A  5644    	LD	BC,1
0011F3 C5                  A  5645    	PUSH	BC
0011F4 DD07FD              A  5646    	LD	BC,(IX+%FFFFFFFD)
0011F7 AF                  A  5647    	XOR	A,A
0011F8 DD27F3              A  5648    	LD	HL,(IX+%FFFFFFF3)
0011FB DD5EF6              A  5649    	LD	E,(IX+%FFFFFFF6)
0011FE CD 00 00 00         A  5650    	CALL	__ladd
001202 4B                  A  5651    	LD	C,E
001203 0600                A  5652    	LD	B,%0
001205 C5                  A  5653    	PUSH	BC
001206 E5                  A  5654    	PUSH	HL
001207 DD07F7              A  5655    	LD	BC,(IX+%FFFFFFF7)
00120A C5                  A  5656    	PUSH	BC
00120B DD3106              A  5657    	LD	IY,(IX+%6)
00120E FD4E01              A  5658    	LD	C,(IY+%1)
001211 0600                A  5659    	LD	B,%0
001213 C5                  A  5660    	PUSH	BC
001214 CD 00 00 00         A  5661    	CALL	_disk_write
001218 C1                  A  5662    	POP	BC
001219 C1                  A  5663    	POP	BC
00121A C1                  A  5664    	POP	BC
00121B C1                  A  5665    	POP	BC
00121C C1                  A  5666    	POP	BC
00121D 01000000            A  5667    	LD	BC,0
001221 B7                  A  5668    	OR	A,A
001222 ED42                A  5669    	SBC	HL,BC
001224 28 AE               A  5670    	JR	Z,L_186
                           A  5671    ; 1654		}
001226                     A  5672    L_193:
                           A  5673    .LINE 1654
                           A  5674    
                           A  5675    ; 1655		return (n == fs->csize) ? FR_OK : F
                           A  5676    .LINE 1655
                           A  5677    
001226 DD3106              A  5678    	LD	IY,(IX+%6)
001229 FD0709              A  5679    	LD	BC,(IY+%9)
00122C CD 00 00 00         A  5680    	CALL	__stoiu
001230 DD07FD              A  5681    	LD	BC,(IX+%FFFFFFFD)
001233 B7                  A  5682    	OR	A,A
001234 ED42                A  5683    	SBC	HL,BC
001236 20 09               A  5684    	JR	NZ,L_191
001238 01000000            A  5685    	LD	BC,0
00123C DD0FFA              A  5686    	LD	(IX+%FFFFFFFA),BC
00123F 18 07               A  5687    	JR	L_192
001241                     A  5688    L_191:
001241 01010000            A  5689    	LD	BC,1
001245 DD0FFA              A  5690    	LD	(IX+%FFFFFFFA),BC
001248                     A  5691    L_192:
001248 DD27FA              A  5692    	LD	HL,(IX+%FFFFFFFA)
                           A  5693    ; 1656	}
00124B                     A  5694    L_194:
                           A  5695    .LINE 1656
                           A  5696    
00124B DDF9                A  5697    	LD	SP,IX
00124D DDE1                A  5698    	POP	IX
00124F C9                  A  5699    	RET	
                           A  5700    
                           A  5701    
                           A  5702    ;**************************** _dir_clear ******
                           A  5703    ;Name                         Addr/Register   S
                           A  5704    ;_disk_write                         IMPORT  --
                           A  5705    ;_memset                             IMPORT  --
                           A  5706    ;sect                                 IX-13    
                           A  5707    ;ibuf                                  IX-9    
                           A  5708    ;temp189                               IX-6    
                           A  5709    ;n                                     IX-3    
                           A  5710    ;clst                                  IX+9    
                           A  5711    ;fs                                    IX+6    
                           A  5712    
                           A  5713    
                           A  5714    ; Stack Frame Size: 28 (bytes)
                           A  5715    ;       Spill Code: -1 (instruction)
                           A  5716    
                           A  5717    
                           A  5718    .ENDFUNC "dir_clear",1656,"_dir_clear"
                           A  5719    ; 1657	#endif	/* !FF_FS_READONLY */
                           A  5720    ; 1658	
                           A  5721    ; 1659	
                           A  5722    ; 1660	
                           A  5723    ; 1661	
                           A  5724    ; 1662	/*-------------------------------------
                           A  5725    ; 1663	/* Directory handling - Set directory i
                           A  5726    ; 1664	/*-------------------------------------
                           A  5727    ; 1665	
                           A  5728    ; 1666	static FRESULT dir_sdi (	/* FR_OK(0)
                           A  5729    ; 1667		DIR* dp,		/* Pointer to direc
                           A  5730    ; 1668		DWORD ofs		/* Offset of direct
                           A  5731    ; 1669	)
                           A  5732    ; 1670	{
001250                     A  5733    _dir_sdi:
                           A  5734    .DEFINE "_dir_sdi"
                           A  5735    
                           A  5736    .VALUE _dir_sdi
                           A  5737    
                           A  5738    .CLASS 3
                           A  5739    
                           A  5740    .TYPE 68
                           A  5741    
                           A  5742    .ENDEF
                           A  5743    
                           A  5744    .BEGFUNC "dir_sdi",1670,"_dir_sdi"
                           A  5745    
                           A  5746    .LINE 1670
                           A  5747    
                           A  5748    .DEFINE "dp"
                           A  5749    
                           A  5750    .CLASS 65
                           A  5751    
                           A  5752    .VALUE 6
                           A  5753    
                           A  5754    .TAG "NONAME3"
                           A  5755    
                           A  5756    .TYPE 40
                           A  5757    
                           A  5758    .ENDEF
                           A  5759    
                           A  5760    .DEFINE "ofs"
                           A  5761    
                           A  5762    .CLASS 65
                           A  5763    
                           A  5764    .VALUE 9
                           A  5765    
                           A  5766    .TYPE 15
                           A  5767    
                           A  5768    .ENDEF
                           A  5769    
                           A  5770    .DEFINE "clst"
                           A  5771    
                           A  5772    .CLASS 65
                           A  5773    
                           A  5774    .VALUE -4
                           A  5775    
                           A  5776    .TYPE 15
                           A  5777    
                           A  5778    .ENDEF
                           A  5779    
                           A  5780    .DEFINE "fs"
                           A  5781    
                           A  5782    .CLASS 65
                           A  5783    
                           A  5784    .VALUE -7
                           A  5785    
                           A  5786    .TAG "NONAME0"
                           A  5787    
                           A  5788    .TYPE 40
                           A  5789    
                           A  5790    .ENDEF
                           A  5791    
                           A  5792    .DEFINE "csz"
                           A  5793    
                           A  5794    .CLASS 65
                           A  5795    
                           A  5796    .VALUE -11
                           A  5797    
                           A  5798    .TYPE 15
                           A  5799    
                           A  5800    .ENDEF
                           A  5801    
001250 DDE5                A  5802    	PUSH	IX
001252 DD210000 00         A  5803    	LD	IX,0
001257 DD39                A  5804    	ADD	IX,SP
001259 ED22F0              A  5805    	LEA	HL,IX+%FFFFFFF0
00125C F9                  A  5806    	LD	SP,HL
                           A  5807    ; 1671		DWORD csz, clst;
                           A  5808    ; 1672		FATFS *fs = dp->obj.fs;
                           A  5809    .LINE 1672
                           A  5810    
00125D DD3106              A  5811    	LD	IY,(IX+%6)
001260 FD0700              A  5812    	LD	BC,(IY+%0)
001263 DD0FF9              A  5813    	LD	(IX+%FFFFFFF9),BC
                           A  5814    ; 1673	
                           A  5815    ; 1674	
                           A  5816    ; 1675		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  5817    .LINE 1675
                           A  5818    
001266 DD2709              A  5819    	LD	HL,(IX+%9)
001269 DD5E0C              A  5820    	LD	E,(IX+%C)
00126C 01000020            A  5821    	LD	BC,2097152
001270 AF                  A  5822    	XOR	A,A
001271 CD 00 00 00         A  5823    	CALL	__lcmpu
001275 30 15               A  5824    	JR	NC,L_196
001277 DD7E09              A  5825    	LD	A,(IX+%9)
00127A E61F                A  5826    	AND	A,%1F
00127C B7ED62              A  5827    	UEXT	HL
00127F 6F                  A  5828    	LD	L,A
001280 5C                  A  5829    	LD	E,H
001281 01000000            A  5830    	LD	BC,0
001285 AF                  A  5831    	XOR	A,A
001286 CD 00 00 00         A  5832    	CALL	__lcmpu
00128A 28 08               A  5833    	JR	Z,L_197
00128C                     A  5834    L_196:
                           A  5835    ; 1676			return FR_INT_ERR;
                           A  5836    .LINE 1676
                           A  5837    
00128C 21020000            A  5838    	LD	HL,2
001290 C3 65 14 00         A  5839    	JR	L_217
                           A  5840    ; 1677		}
001294                     A  5841    L_197:
                           A  5842    .LINE 1677
                           A  5843    
                           A  5844    ; 1678		dp->dptr = ofs;				/* Set 
                           A  5845    .LINE 1678
                           A  5846    
001294 DD0709              A  5847    	LD	BC,(IX+%9)
001297 DD7E0C              A  5848    	LD	A,(IX+%C)
00129A DD3106              A  5849    	LD	IY,(IX+%6)
00129D FD0F0F              A  5850    	LD	(IY+%F),BC
0012A0 FD7712              A  5851    	LD	(IY+%12),A
                           A  5852    ; 1679		clst = dp->obj.sclust;		/* Tabl
                           A  5853    .LINE 1679
                           A  5854    
0012A3 FD0707              A  5855    	LD	BC,(IY+%7)
0012A6 FD7E0A              A  5856    	LD	A,(IY+%A)
0012A9 DD0FFC              A  5857    	LD	(IX+%FFFFFFFC),BC
0012AC DD77FF              A  5858    	LD	(IX+%FFFFFFFF),A
                           A  5859    ; 1680		if (clst == 0 && fs->fs_type >= FS_
                           A  5860    .LINE 1680
                           A  5861    
0012AF C5E1                A  5862    	LD	HL,BC
0012B1 DD5EFF              A  5863    	LD	E,(IX+%FFFFFFFF)
0012B4 01000000            A  5864    	LD	BC,0
0012B8 AF                  A  5865    	XOR	A,A
0012B9 CD 00 00 00         A  5866    	CALL	__lcmpu
0012BD 20 19               A  5867    	JR	NZ,L_213
0012BF DD31F9              A  5868    	LD	IY,(IX+%FFFFFFF9)
0012C2 FD7E00              A  5869    	LD	A,(IY+%0)
0012C5 FE03                A  5870    	CP	A,%3
0012C7 38 0F               A  5871    	JR	C,L_213
                           A  5872    ; 1681			clst = (DWORD)fs->dirbase;
                           A  5873    .LINE 1681
                           A  5874    
0012C9 DD31F9              A  5875    	LD	IY,(IX+%FFFFFFF9)
0012CC FD072A              A  5876    	LD	BC,(IY+%2A)
0012CF FD7E2D              A  5877    	LD	A,(IY+%2D)
0012D2 DD0FFC              A  5878    	LD	(IX+%FFFFFFFC),BC
0012D5 DD77FF              A  5879    	LD	(IX+%FFFFFFFF),A
                           A  5880    ; 1682			if (FF_FS_EXFAT) dp->obj.stat =
                           A  5881    ; 1683		}
0012D8                     A  5882    L_213:
                           A  5883    .LINE 1683
                           A  5884    
                           A  5885    ; 1684	
                           A  5886    ; 1685		if (clst == 0) {	/* Static table
                           A  5887    .LINE 1685
                           A  5888    
0012D8 DD27FC              A  5889    	LD	HL,(IX+%FFFFFFFC)
0012DB DD5EFF              A  5890    	LD	E,(IX+%FFFFFFFF)
0012DE 01000000            A  5891    	LD	BC,0
0012E2 AF                  A  5892    	XOR	A,A
0012E3 CD 00 00 00         A  5893    	CALL	__lcmpu
0012E7 20 4C               A  5894    	JR	NZ,L_212
                           A  5895    ; 1686			if (ofs / SZDIRE >= fs->n_rootd
                           A  5896    .LINE 1686
                           A  5897    
0012E9 DD31F9              A  5898    	LD	IY,(IX+%FFFFFFF9)
0012EC FD0707              A  5899    	LD	BC,(IY+%7)
0012EF CD 00 00 00         A  5900    	CALL	__stoiu
0012F3 DD2FF2              A  5901    	LD	(IX+%FFFFFFF2),HL
0012F6 0600                A  5902    	LD	B,%0
0012F8 DD70F0              A  5903    	LD	(IX+%FFFFFFF0),B	; spill
0012FB DD0709              A  5904    	LD	BC,(IX+%9)
0012FE DD7E0C              A  5905    	LD	A,(IX+%C)
001301 2E05                A  5906    	LD	L,%5
001303 CD 00 00 00         A  5907    	CALL	__lshru
001307 5F                  A  5908    	LD	E,A
001308 C5E1                A  5909    	LD	HL,BC
00130A DD46F0              A  5910    	LD	B,(IX+%FFFFFFF0)	; unspill
00130D 78                  A  5911    	LD	A,B
00130E DD07F2              A  5912    	LD	BC,(IX+%FFFFFFF2)
001311 CD 00 00 00         A  5913    	CALL	__lcmpu
001315 38 08               A  5914    	JR	C,L_202
001317 21020000            A  5915    	LD	HL,2
00131B C3 65 14 00         A  5916    	JR	L_217
00131F                     A  5917    L_202:
                           A  5918    ; 1687			dp->sect = fs->dirbase;
                           A  5919    .LINE 1687
                           A  5920    
00131F DD31F9              A  5921    	LD	IY,(IX+%FFFFFFF9)
001322 FD072A              A  5922    	LD	BC,(IY+%2A)
001325 FD7E2D              A  5923    	LD	A,(IY+%2D)
001328 DD3106              A  5924    	LD	IY,(IX+%6)
00132B FD0F17              A  5925    	LD	(IY+%17),BC
00132E FD771A              A  5926    	LD	(IY+%1A),A
                           A  5927    ; 1688	
                           A  5928    ; 1689		} else {			/* Dynamic tabl
                           A  5929    .LINE 1689
                           A  5930    
001331 C3 FF 13 00         A  5931    	JR	L_214
001335                     A  5932    L_212:
                           A  5933    ; 1690			csz = (DWORD)fs->csize * SS(fs)
                           A  5934    .LINE 1690
                           A  5935    
001335 DD31F9              A  5936    	LD	IY,(IX+%FFFFFFF9)
001338 FD0709              A  5937    	LD	BC,(IY+%9)
00133B CD 00 00 00         A  5938    	CALL	__stoiu
00133F 1E00                A  5939    	LD	E,%0
001341 01000200            A  5940    	LD	BC,512
001345 AF                  A  5941    	XOR	A,A
001346 CD 00 00 00         A  5942    	CALL	__lmulu
00134A DD2FF5              A  5943    	LD	(IX+%FFFFFFF5),HL
00134D DD73F8              A  5944    	LD	(IX+%FFFFFFF8),E
                           A  5945    ; 1691			while (ofs >= csz) {			
                           A  5946    .LINE 1691
                           A  5947    
001350 18 7B               A  5948    	JR	L_208
001352                     A  5949    L_209:
                           A  5950    ; 1692				clst = get_fat(&dp->obj, cl
                           A  5951    .LINE 1692
                           A  5952    
001352 DD4EFF              A  5953    	LD	C,(IX+%FFFFFFFF)
001355 0600                A  5954    	LD	B,%0
001357 C5                  A  5955    	PUSH	BC
001358 DD07FC              A  5956    	LD	BC,(IX+%FFFFFFFC)
00135B C5                  A  5957    	PUSH	BC
00135C DD3106              A  5958    	LD	IY,(IX+%6)
00135F ED6600              A  5959    	PEA	IY+%0
001362 CD 64 06 00         A  5960    	CALL	_get_fat
001366 C1                  A  5961    	POP	BC
001367 C1                  A  5962    	POP	BC
001368 C1                  A  5963    	POP	BC
001369 DD2FFC              A  5964    	LD	(IX+%FFFFFFFC),HL
00136C DD73FF              A  5965    	LD	(IX+%FFFFFFFF),E
                           A  5966    ; 1693				if (clst == 0xFFFFFFFF) ret
                           A  5967    .LINE 1693
                           A  5968    
00136F DD27FC              A  5969    	LD	HL,(IX+%FFFFFFFC)
001372 DD5EFF              A  5970    	LD	E,(IX+%FFFFFFFF)
001375 01FFFFFF            A  5971    	LD	BC,16777215
001379 3EFF                A  5972    	LD	A,%FF
00137B CD 00 00 00         A  5973    	CALL	__lcmpu
00137F 20 08               A  5974    	JR	NZ,L_206
001381 21010000            A  5975    	LD	HL,1
001385 C3 65 14 00         A  5976    	JR	L_217
001389                     A  5977    L_206:
                           A  5978    ; 1694				if (clst < 2 || clst >= fs-
                           A  5979    .LINE 1694
                           A  5980    
001389 DD27FC              A  5981    	LD	HL,(IX+%FFFFFFFC)
00138C DD5EFF              A  5982    	LD	E,(IX+%FFFFFFFF)
00138F 01020000            A  5983    	LD	BC,2
001393 AF                  A  5984    	XOR	A,A
001394 CD 00 00 00         A  5985    	CALL	__lcmpu
001398 38 15               A  5986    	JR	C,L_205
00139A DD27FC              A  5987    	LD	HL,(IX+%FFFFFFFC)
00139D DD5EFF              A  5988    	LD	E,(IX+%FFFFFFFF)
0013A0 DD31F9              A  5989    	LD	IY,(IX+%FFFFFFF9)
0013A3 FD071A              A  5990    	LD	BC,(IY+%1A)
0013A6 FD7E1D              A  5991    	LD	A,(IY+%1D)
0013A9 CD 00 00 00         A  5992    	CALL	__lcmpu
0013AD 38 08               A  5993    	JR	C,L_207
0013AF                     A  5994    L_205:
0013AF 21020000            A  5995    	LD	HL,2
0013B3 C3 65 14 00         A  5996    	JR	L_217
0013B7                     A  5997    L_207:
                           A  5998    ; 1695				ofs -= csz;
                           A  5999    .LINE 1695
                           A  6000    
0013B7 DD2709              A  6001    	LD	HL,(IX+%9)
0013BA DD5E0C              A  6002    	LD	E,(IX+%C)
0013BD DD07F5              A  6003    	LD	BC,(IX+%FFFFFFF5)
0013C0 DD7EF8              A  6004    	LD	A,(IX+%FFFFFFF8)
0013C3 CD 00 00 00         A  6005    	CALL	__lsub
0013C7 DD2F09              A  6006    	LD	(IX+%9),HL
0013CA DD730C              A  6007    	LD	(IX+%C),E
                           A  6008    ; 1696			}
0013CD                     A  6009    L_208:
                           A  6010    .LINE 1696
                           A  6011    
0013CD DD2709              A  6012    	LD	HL,(IX+%9)
0013D0 DD5E0C              A  6013    	LD	E,(IX+%C)
0013D3 DD07F5              A  6014    	LD	BC,(IX+%FFFFFFF5)
0013D6 DD7EF8              A  6015    	LD	A,(IX+%FFFFFFF8)
0013D9 CD 00 00 00         A  6016    	CALL	__lcmpu
0013DD D2 52 13 00         A  6017    	JR	NC,L_209
                           A  6018    ; 1697			dp->sect = clst2sect(fs, clst);
                           A  6019    .LINE 1697
                           A  6020    
0013E1 DD4EFF              A  6021    	LD	C,(IX+%FFFFFFFF)
0013E4 0600                A  6022    	LD	B,%0
0013E6 C5                  A  6023    	PUSH	BC
0013E7 DD07FC              A  6024    	LD	BC,(IX+%FFFFFFFC)
0013EA C5                  A  6025    	PUSH	BC
0013EB DD07F9              A  6026    	LD	BC,(IX+%FFFFFFF9)
0013EE C5                  A  6027    	PUSH	BC
0013EF CD F9 05 00         A  6028    	CALL	_clst2sect
0013F3 C1                  A  6029    	POP	BC
0013F4 C1                  A  6030    	POP	BC
0013F5 C1                  A  6031    	POP	BC
0013F6 DD3106              A  6032    	LD	IY,(IX+%6)
0013F9 FD2F17              A  6033    	LD	(IY+%17),HL
0013FC FD731A              A  6034    	LD	(IY+%1A),E
                           A  6035    ; 1698		}
0013FF                     A  6036    L_214:
                           A  6037    .LINE 1698
                           A  6038    
                           A  6039    ; 1699		dp->clust = clst;					
                           A  6040    .LINE 1699
                           A  6041    
0013FF DD07FC              A  6042    	LD	BC,(IX+%FFFFFFFC)
001402 DD7EFF              A  6043    	LD	A,(IX+%FFFFFFFF)
001405 DD3106              A  6044    	LD	IY,(IX+%6)
001408 FD0F13              A  6045    	LD	(IY+%13),BC
00140B FD7716              A  6046    	LD	(IY+%16),A
                           A  6047    ; 1700		if (dp->sect == 0) return FR_INT_ER
                           A  6048    .LINE 1700
                           A  6049    
00140E FD2717              A  6050    	LD	HL,(IY+%17)
001411 FD5E1A              A  6051    	LD	E,(IY+%1A)
001414 01000000            A  6052    	LD	BC,0
001418 AF                  A  6053    	XOR	A,A
001419 CD 00 00 00         A  6054    	CALL	__lcmpu
00141D 20 06               A  6055    	JR	NZ,L_216
00141F 21020000            A  6056    	LD	HL,2
001423 18 40               A  6057    	JR	L_217
001425                     A  6058    L_216:
                           A  6059    ; 1701		dp->sect += ofs / SS(fs);			
                           A  6060    .LINE 1701
                           A  6061    
001425 DD0709              A  6062    	LD	BC,(IX+%9)
001428 DD7E0C              A  6063    	LD	A,(IX+%C)
00142B 2E09                A  6064    	LD	L,%9
00142D CD 00 00 00         A  6065    	CALL	__lshru
001431 DD3106              A  6066    	LD	IY,(IX+%6)
001434 FD2717              A  6067    	LD	HL,(IY+%17)
001437 FD5E1A              A  6068    	LD	E,(IY+%1A)
00143A CD 00 00 00         A  6069    	CALL	__ladd
00143E FD2F17              A  6070    	LD	(IY+%17),HL
001441 FD731A              A  6071    	LD	(IY+%1A),E
                           A  6072    ; 1702		dp->dir = fs->win + (ofs % SS(fs));
                           A  6073    .LINE 1702
                           A  6074    
001444 DD2709              A  6075    	LD	HL,(IX+%9)
001447 DD5E0C              A  6076    	LD	E,(IX+%C)
00144A 01FF0100            A  6077    	LD	BC,511
00144E AF                  A  6078    	XOR	A,A
00144F CD 00 00 00         A  6079    	CALL	__land
001453 E5C1                A  6080    	LD	BC,HL
001455 DD31F9              A  6081    	LD	IY,(IX+%FFFFFFF9)
001458 ED2336              A  6082    	LEA	HL,IY+%36
00145B 09                  A  6083    	ADD	HL,BC
00145C DD3106              A  6084    	LD	IY,(IX+%6)
00145F FD2F1B              A  6085    	LD	(IY+%1B),HL
                           A  6086    ; 1703	
                           A  6087    ; 1704		return FR_OK;
                           A  6088    .LINE 1704
                           A  6089    
001462 B7                  A  6090    	OR	A,A
001463 ED62                A  6091    	SBC	HL,HL
                           A  6092    ; 1705	}
001465                     A  6093    L_217:
                           A  6094    .LINE 1705
                           A  6095    
001465 DDF9                A  6096    	LD	SP,IX
001467 DDE1                A  6097    	POP	IX
001469 C9                  A  6098    	RET	
                           A  6099    
                           A  6100    
                           A  6101    ;**************************** _dir_sdi ********
                           A  6102    ;Name                         Addr/Register   S
                           A  6103    ;csz                                  IX-11    
                           A  6104    ;fs                                    IX-7    
                           A  6105    ;clst                                  IX-4    
                           A  6106    ;ofs                                   IX+9    
                           A  6107    ;dp                                    IX+6    
                           A  6108    
                           A  6109    
                           A  6110    ; Stack Frame Size: 31 (bytes)
                           A  6111    ;       Spill Code: -1 (instruction)
                           A  6112    
                           A  6113    
                           A  6114    .ENDFUNC "dir_sdi",1705,"_dir_sdi"
                           A  6115    ; 1706	
                           A  6116    ; 1707	
                           A  6117    ; 1708	
                           A  6118    ; 1709	
                           A  6119    ; 1710	/*-------------------------------------
                           A  6120    ; 1711	/* Directory handling - Move directory 
                           A  6121    ; 1712	/*-------------------------------------
                           A  6122    ; 1713	
                           A  6123    ; 1714	static FRESULT dir_next (	/* FR_OK(0)
                           A  6124    ; 1715		DIR* dp,				/* Pointer 
                           A  6125    ; 1716		int stretch				/* 0: Do no
                           A  6126    ; 1717	)
                           A  6127    ; 1718	{
00146A                     A  6128    _dir_next:
                           A  6129    .DEFINE "_dir_next"
                           A  6130    
                           A  6131    .VALUE _dir_next
                           A  6132    
                           A  6133    .CLASS 3
                           A  6134    
                           A  6135    .TYPE 68
                           A  6136    
                           A  6137    .ENDEF
                           A  6138    
                           A  6139    .BEGFUNC "dir_next",1718,"_dir_next"
                           A  6140    
                           A  6141    .LINE 1718
                           A  6142    
                           A  6143    .DEFINE "dp"
                           A  6144    
                           A  6145    .CLASS 65
                           A  6146    
                           A  6147    .VALUE 6
                           A  6148    
                           A  6149    .TAG "NONAME3"
                           A  6150    
                           A  6151    .TYPE 40
                           A  6152    
                           A  6153    .ENDEF
                           A  6154    
                           A  6155    .DEFINE "stretch"
                           A  6156    
                           A  6157    .CLASS 65
                           A  6158    
                           A  6159    .VALUE 9
                           A  6160    
                           A  6161    .TYPE 4
                           A  6162    
                           A  6163    .ENDEF
                           A  6164    
                           A  6165    .DEFINE "clst"
                           A  6166    
                           A  6167    .CLASS 65
                           A  6168    
                           A  6169    .VALUE -4
                           A  6170    
                           A  6171    .TYPE 15
                           A  6172    
                           A  6173    .ENDEF
                           A  6174    
                           A  6175    .DEFINE "fs"
                           A  6176    
                           A  6177    .CLASS 65
                           A  6178    
                           A  6179    .VALUE -7
                           A  6180    
                           A  6181    .TAG "NONAME0"
                           A  6182    
                           A  6183    .TYPE 40
                           A  6184    
                           A  6185    .ENDEF
                           A  6186    
                           A  6187    .DEFINE "ofs"
                           A  6188    
                           A  6189    .CLASS 65
                           A  6190    
                           A  6191    .VALUE -11
                           A  6192    
                           A  6193    .TYPE 15
                           A  6194    
                           A  6195    .ENDEF
                           A  6196    
00146A DDE5                A  6197    	PUSH	IX
00146C DD210000 00         A  6198    	LD	IX,0
001471 DD39                A  6199    	ADD	IX,SP
001473 ED22E5              A  6200    	LEA	HL,IX+%FFFFFFE5
001476 F9                  A  6201    	LD	SP,HL
                           A  6202    ; 1719		DWORD ofs, clst;
                           A  6203    ; 1720		FATFS *fs = dp->obj.fs;
                           A  6204    .LINE 1720
                           A  6205    
001477 DD3106              A  6206    	LD	IY,(IX+%6)
00147A FD0700              A  6207    	LD	BC,(IY+%0)
00147D DD0FF9              A  6208    	LD	(IX+%FFFFFFF9),BC
                           A  6209    ; 1721	
                           A  6210    ; 1722	
                           A  6211    ; 1723		ofs = dp->dptr + SZDIRE;	/* Next
                           A  6212    .LINE 1723
                           A  6213    
001480 FD270F              A  6214    	LD	HL,(IY+%F)
001483 FD5E12              A  6215    	LD	E,(IY+%12)
001486 3E20                A  6216    	LD	A,%20
001488 CD 00 00 00         A  6217    	CALL	__ladd_b
00148C DD2FF5              A  6218    	LD	(IX+%FFFFFFF5),HL
00148F DD73F8              A  6219    	LD	(IX+%FFFFFFF8),E
                           A  6220    ; 1724		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  6221    .LINE 1724
                           A  6222    
001492 DD27F5              A  6223    	LD	HL,(IX+%FFFFFFF5)
001495 DD5EF8              A  6224    	LD	E,(IX+%FFFFFFF8)
001498 01000020            A  6225    	LD	BC,2097152
00149C AF                  A  6226    	XOR	A,A
00149D CD 00 00 00         A  6227    	CALL	__lcmpu
0014A1 38 0E               A  6228    	JR	C,L_220
0014A3 01000000            A  6229    	LD	BC,0
0014A7 DD3106              A  6230    	LD	IY,(IX+%6)
0014AA FD0F17              A  6231    	LD	(IY+%17),BC
0014AD FD361A00            A  6232    	LD	(IY+%1A),%0
0014B1                     A  6233    L_220:
                           A  6234    ; 1725		if (dp->sect == 0) return FR_NO_FIL
                           A  6235    .LINE 1725
                           A  6236    
0014B1 DD3106              A  6237    	LD	IY,(IX+%6)
0014B4 FD0717              A  6238    	LD	BC,(IY+%17)
0014B7 FD7E1A              A  6239    	LD	A,(IY+%1A)
0014BA DD0FF1              A  6240    	LD	(IX+%FFFFFFF1),BC
0014BD DD77F4              A  6241    	LD	(IX+%FFFFFFF4),A
0014C0 C5E1                A  6242    	LD	HL,BC
0014C2 DD5EF4              A  6243    	LD	E,(IX+%FFFFFFF4)
0014C5 01000000            A  6244    	LD	BC,0
0014C9 AF                  A  6245    	XOR	A,A
0014CA CD 00 00 00         A  6246    	CALL	__lcmpu
0014CE 20 08               A  6247    	JR	NZ,L_244
0014D0 21040000            A  6248    	LD	HL,4
0014D4 C3 10 17 00         A  6249    	JR	L_246
0014D8                     A  6250    L_244:
                           A  6251    ; 1726	
                           A  6252    ; 1727		if (ofs % SS(fs) == 0) {	/* Sect
                           A  6253    .LINE 1727
                           A  6254    
0014D8 DD27F5              A  6255    	LD	HL,(IX+%FFFFFFF5)
0014DB DD5EF8              A  6256    	LD	E,(IX+%FFFFFFF8)
0014DE 01FF0100            A  6257    	LD	BC,511
0014E2 AF                  A  6258    	XOR	A,A
0014E3 CD 00 00 00         A  6259    	CALL	__land
0014E7 01000000            A  6260    	LD	BC,0
0014EB AF                  A  6261    	XOR	A,A
0014EC CD 00 00 00         A  6262    	CALL	__lcmpu
0014F0 C2 E0 16 00         A  6263    	JR	NZ,L_245
                           A  6264    ; 1728			dp->sect++;				/* Next
                           A  6265    .LINE 1728
                           A  6266    
0014F4 DD27F1              A  6267    	LD	HL,(IX+%FFFFFFF1)
0014F7 DD5EF4              A  6268    	LD	E,(IX+%FFFFFFF4)
0014FA 3E01                A  6269    	LD	A,%1
0014FC CD 00 00 00         A  6270    	CALL	__ladd_b
001500 DD3106              A  6271    	LD	IY,(IX+%6)
001503 FD2F17              A  6272    	LD	(IY+%17),HL
001506 FD731A              A  6273    	LD	(IY+%1A),E
                           A  6274    ; 1729	
                           A  6275    ; 1730			if (dp->clust == 0) {	/* Stat
                           A  6276    .LINE 1730
                           A  6277    
001509 FD0713              A  6278    	LD	BC,(IY+%13)
00150C FD7E16              A  6279    	LD	A,(IY+%16)
00150F DD0FED              A  6280    	LD	(IX+%FFFFFFED),BC
001512 DD77F0              A  6281    	LD	(IX+%FFFFFFF0),A
001515 C5E1                A  6282    	LD	HL,BC
001517 DD5EF0              A  6283    	LD	E,(IX+%FFFFFFF0)
00151A 01000000            A  6284    	LD	BC,0
00151E AF                  A  6285    	XOR	A,A
00151F CD 00 00 00         A  6286    	CALL	__lcmpu
001523 20 46               A  6287    	JR	NZ,L_242
                           A  6288    ; 1731				if (ofs / SZDIRE >= fs->n_r
                           A  6289    .LINE 1731
                           A  6290    
001525 DD31F9              A  6291    	LD	IY,(IX+%FFFFFFF9)
001528 FD0707              A  6292    	LD	BC,(IY+%7)
00152B CD 00 00 00         A  6293    	CALL	__stoiu
00152F DD2FE7              A  6294    	LD	(IX+%FFFFFFE7),HL
001532 0600                A  6295    	LD	B,%0
001534 DD70E5              A  6296    	LD	(IX+%FFFFFFE5),B	; spill
001537 DD07F5              A  6297    	LD	BC,(IX+%FFFFFFF5)
00153A DD7EF8              A  6298    	LD	A,(IX+%FFFFFFF8)
00153D 2E05                A  6299    	LD	L,%5
00153F CD 00 00 00         A  6300    	CALL	__lshru
001543 5F                  A  6301    	LD	E,A
001544 C5E1                A  6302    	LD	HL,BC
001546 DD46E5              A  6303    	LD	B,(IX+%FFFFFFE5)	; unspill
001549 78                  A  6304    	LD	A,B
00154A DD07E7              A  6305    	LD	BC,(IX+%FFFFFFE7)
00154D CD 00 00 00         A  6306    	CALL	__lcmpu
001551 DA E0 16 00         A  6307    	JR	C,L_245
                           A  6308    ; 1732					dp->sect = 0; return FR
                           A  6309    .LINE 1732
                           A  6310    
001555 01000000            A  6311    	LD	BC,0
001559 DD3106              A  6312    	LD	IY,(IX+%6)
00155C FD0F17              A  6313    	LD	(IY+%17),BC
00155F FD361A00            A  6314    	LD	(IY+%1A),%0
001563 21040000            A  6315    	LD	HL,4
001567 C3 10 17 00         A  6316    	JR	L_246
                           A  6317    ; 1733				}
                           A  6318    ; 1734			}
                           A  6319    ; 1735			else {					/* Dyna
00156B                     A  6320    L_242:
                           A  6321    .LINE 1735
                           A  6322    
                           A  6323    ; 1736				if ((ofs / SS(fs) & (fs->cs
                           A  6324    .LINE 1736
                           A  6325    
00156B DD31F9              A  6326    	LD	IY,(IX+%FFFFFFF9)
00156E FD0709              A  6327    	LD	BC,(IY+%9)
001571 CD 00 00 00         A  6328    	CALL	__stoiu
001575 2B                  A  6329    	DEC	HL
001576 E5C1                A  6330    	LD	BC,HL
001578 CD 00 00 00         A  6331    	CALL	__itol
00157C DD0FEA              A  6332    	LD	(IX+%FFFFFFEA),BC
00157F 5F                  A  6333    	LD	E,A
001580 DD07F5              A  6334    	LD	BC,(IX+%FFFFFFF5)
001583 DD7EF8              A  6335    	LD	A,(IX+%FFFFFFF8)
001586 2E09                A  6336    	LD	L,%9
001588 CD 00 00 00         A  6337    	CALL	__lshru
00158C DD27EA              A  6338    	LD	HL,(IX+%FFFFFFEA)
00158F CD 00 00 00         A  6339    	CALL	__land
001593 01000000            A  6340    	LD	BC,0
001597 AF                  A  6341    	XOR	A,A
001598 CD 00 00 00         A  6342    	CALL	__lcmpu
00159C C2 E0 16 00         A  6343    	JR	NZ,L_245
                           A  6344    ; 1737					clst = get_fat(&dp->obj
                           A  6345    .LINE 1737
                           A  6346    
0015A0 DD4EF0              A  6347    	LD	C,(IX+%FFFFFFF0)
0015A3 0600                A  6348    	LD	B,%0
0015A5 C5                  A  6349    	PUSH	BC
0015A6 DD07ED              A  6350    	LD	BC,(IX+%FFFFFFED)
0015A9 C5                  A  6351    	PUSH	BC
0015AA DD3106              A  6352    	LD	IY,(IX+%6)
0015AD ED6600              A  6353    	PEA	IY+%0
0015B0 CD 64 06 00         A  6354    	CALL	_get_fat
0015B4 C1                  A  6355    	POP	BC
0015B5 C1                  A  6356    	POP	BC
0015B6 C1                  A  6357    	POP	BC
0015B7 E5C1                A  6358    	LD	BC,HL
0015B9 DD0FFC              A  6359    	LD	(IX+%FFFFFFFC),BC
0015BC DD73FF              A  6360    	LD	(IX+%FFFFFFFF),E
                           A  6361    ; 1738					if (clst <= 1) return F
                           A  6362    .LINE 1738
                           A  6363    
0015BF 21010000            A  6364    	LD	HL,1
0015C3 1E00                A  6365    	LD	E,%0
0015C5 DD7EFF              A  6366    	LD	A,(IX+%FFFFFFFF)
0015C8 CD 00 00 00         A  6367    	CALL	__lcmpu
0015CC 38 08               A  6368    	JR	C,L_225
0015CE 21020000            A  6369    	LD	HL,2
0015D2 C3 10 17 00         A  6370    	JR	L_246
0015D6                     A  6371    L_225:
                           A  6372    ; 1739					if (clst == 0xFFFFFFFF)
                           A  6373    .LINE 1739
                           A  6374    
0015D6 DD27FC              A  6375    	LD	HL,(IX+%FFFFFFFC)
0015D9 DD5EFF              A  6376    	LD	E,(IX+%FFFFFFFF)
0015DC 01FFFFFF            A  6377    	LD	BC,16777215
0015E0 3EFF                A  6378    	LD	A,%FF
0015E2 CD 00 00 00         A  6379    	CALL	__lcmpu
0015E6 20 08               A  6380    	JR	NZ,L_238
0015E8 21010000            A  6381    	LD	HL,1
0015EC C3 10 17 00         A  6382    	JR	L_246
0015F0                     A  6383    L_238:
                           A  6384    ; 1740					if (clst >= fs->n_faten
                           A  6385    .LINE 1740
                           A  6386    
0015F0 DD27FC              A  6387    	LD	HL,(IX+%FFFFFFFC)
0015F3 DD5EFF              A  6388    	LD	E,(IX+%FFFFFFFF)
0015F6 DD31F9              A  6389    	LD	IY,(IX+%FFFFFFF9)
0015F9 FD071A              A  6390    	LD	BC,(IY+%1A)
0015FC FD7E1D              A  6391    	LD	A,(IY+%1D)
0015FF CD 00 00 00         A  6392    	CALL	__lcmpu
001603 DA B3 16 00         A  6393    	JR	C,L_239
                           A  6394    ; 1741	#if !FF_FS_READONLY
                           A  6395    ; 1742						if (!stretch) {		
                           A  6396    .LINE 1742
                           A  6397    
001607 01000000            A  6398    	LD	BC,0
00160B DD2709              A  6399    	LD	HL,(IX+%9)
00160E B7                  A  6400    	OR	A,A
00160F ED42                A  6401    	SBC	HL,BC
001611 20 12               A  6402    	JR	NZ,L_227
                           A  6403    ; 1743							dp->sect = 0; r
                           A  6404    .LINE 1743
                           A  6405    
001613 DD3106              A  6406    	LD	IY,(IX+%6)
001616 FD0F17              A  6407    	LD	(IY+%17),BC
001619 FD361A00            A  6408    	LD	(IY+%1A),%0
00161D 21040000            A  6409    	LD	HL,4
001621 C3 10 17 00         A  6410    	JR	L_246
                           A  6411    ; 1744						}
001625                     A  6412    L_227:
                           A  6413    .LINE 1744
                           A  6414    
                           A  6415    ; 1745						clst = create_chain
                           A  6416    .LINE 1745
                           A  6417    
001625 DD3106              A  6418    	LD	IY,(IX+%6)
001628 FD0713              A  6419    	LD	BC,(IY+%13)
00162B FD7E16              A  6420    	LD	A,(IY+%16)
00162E 2600                A  6421    	LD	H,%0
001630 6F                  A  6422    	LD	L,A
001631 E5                  A  6423    	PUSH	HL
001632 C5                  A  6424    	PUSH	BC
001633 ED6600              A  6425    	PEA	IY+%0
001636 CD 8E 0D 00         A  6426    	CALL	_create_chain
00163A C1                  A  6427    	POP	BC
00163B C1                  A  6428    	POP	BC
00163C C1                  A  6429    	POP	BC
00163D DD2FFC              A  6430    	LD	(IX+%FFFFFFFC),HL
001640 DD73FF              A  6431    	LD	(IX+%FFFFFFFF),E
                           A  6432    ; 1746						if (clst == 0) retu
                           A  6433    .LINE 1746
                           A  6434    
001643 DD27FC              A  6435    	LD	HL,(IX+%FFFFFFFC)
001646 DD5EFF              A  6436    	LD	E,(IX+%FFFFFFFF)
001649 01000000            A  6437    	LD	BC,0
00164D AF                  A  6438    	XOR	A,A
00164E CD 00 00 00         A  6439    	CALL	__lcmpu
001652 20 08               A  6440    	JR	NZ,L_230
001654 21070000            A  6441    	LD	HL,7
001658 C3 10 17 00         A  6442    	JR	L_246
00165C                     A  6443    L_230:
                           A  6444    ; 1747						if (clst == 1) retu
                           A  6445    .LINE 1747
                           A  6446    
00165C DD27FC              A  6447    	LD	HL,(IX+%FFFFFFFC)
00165F DD5EFF              A  6448    	LD	E,(IX+%FFFFFFFF)
001662 01010000            A  6449    	LD	BC,1
001666 AF                  A  6450    	XOR	A,A
001667 CD 00 00 00         A  6451    	CALL	__lcmpu
00166B 20 08               A  6452    	JR	NZ,L_232
00166D 21020000            A  6453    	LD	HL,2
001671 C3 10 17 00         A  6454    	JR	L_246
001675                     A  6455    L_232:
                           A  6456    ; 1748						if (clst == 0xFFFFF
                           A  6457    .LINE 1748
                           A  6458    
001675 DD27FC              A  6459    	LD	HL,(IX+%FFFFFFFC)
001678 DD5EFF              A  6460    	LD	E,(IX+%FFFFFFFF)
00167B 01FFFFFF            A  6461    	LD	BC,16777215
00167F 3EFF                A  6462    	LD	A,%FF
001681 CD 00 00 00         A  6463    	CALL	__lcmpu
001685 20 08               A  6464    	JR	NZ,L_234
001687 21010000            A  6465    	LD	HL,1
00168B C3 10 17 00         A  6466    	JR	L_246
00168F                     A  6467    L_234:
                           A  6468    ; 1749						if (dir_clear(fs, c
                           A  6469    .LINE 1749
                           A  6470    
00168F DD4EFF              A  6471    	LD	C,(IX+%FFFFFFFF)
001692 0600                A  6472    	LD	B,%0
001694 C5                  A  6473    	PUSH	BC
001695 DD07FC              A  6474    	LD	BC,(IX+%FFFFFFFC)
001698 C5                  A  6475    	PUSH	BC
001699 DD07F9              A  6476    	LD	BC,(IX+%FFFFFFF9)
00169C C5                  A  6477    	PUSH	BC
00169D CD 60 11 00         A  6478    	CALL	_dir_clear
0016A1 C1                  A  6479    	POP	BC
0016A2 C1                  A  6480    	POP	BC
0016A3 C1                  A  6481    	POP	BC
0016A4 01000000            A  6482    	LD	BC,0
0016A8 B7                  A  6483    	OR	A,A
0016A9 ED42                A  6484    	SBC	HL,BC
0016AB 28 06               A  6485    	JR	Z,L_239
0016AD 21010000            A  6486    	LD	HL,1
0016B1 18 5D               A  6487    	JR	L_246
                           A  6488    ; 1750						if (FF_FS_EXFAT) dp
                           A  6489    ; 1751	#else
                           A  6490    ; 1752						if (!stretch) dp->s
                           A  6491    ; 1753						dp->sect = 0; retur
                           A  6492    ; 1754	#endif
                           A  6493    ; 1755					}
0016B3                     A  6494    L_239:
                           A  6495    .LINE 1755
                           A  6496    
                           A  6497    ; 1756					dp->clust = clst;		
                           A  6498    .LINE 1756
                           A  6499    
0016B3 DD07FC              A  6500    	LD	BC,(IX+%FFFFFFFC)
0016B6 DD7EFF              A  6501    	LD	A,(IX+%FFFFFFFF)
0016B9 DD3106              A  6502    	LD	IY,(IX+%6)
0016BC FD0F13              A  6503    	LD	(IY+%13),BC
0016BF FD7716              A  6504    	LD	(IY+%16),A
                           A  6505    ; 1757					dp->sect = clst2sect(fs
                           A  6506    .LINE 1757
                           A  6507    
0016C2 DD4EFF              A  6508    	LD	C,(IX+%FFFFFFFF)
0016C5 0600                A  6509    	LD	B,%0
0016C7 C5                  A  6510    	PUSH	BC
0016C8 DD07FC              A  6511    	LD	BC,(IX+%FFFFFFFC)
0016CB C5                  A  6512    	PUSH	BC
0016CC DD07F9              A  6513    	LD	BC,(IX+%FFFFFFF9)
0016CF C5                  A  6514    	PUSH	BC
0016D0 CD F9 05 00         A  6515    	CALL	_clst2sect
0016D4 C1                  A  6516    	POP	BC
0016D5 C1                  A  6517    	POP	BC
0016D6 C1                  A  6518    	POP	BC
0016D7 DD3106              A  6519    	LD	IY,(IX+%6)
0016DA FD2F17              A  6520    	LD	(IY+%17),HL
0016DD FD731A              A  6521    	LD	(IY+%1A),E
                           A  6522    ; 1758				}
                           A  6523    ; 1759			}
                           A  6524    ; 1760		}
0016E0                     A  6525    L_245:
                           A  6526    .LINE 1760
                           A  6527    
                           A  6528    ; 1761		dp->dptr = ofs;						
                           A  6529    .LINE 1761
                           A  6530    
0016E0 DD07F5              A  6531    	LD	BC,(IX+%FFFFFFF5)
0016E3 DD7EF8              A  6532    	LD	A,(IX+%FFFFFFF8)
0016E6 DD3106              A  6533    	LD	IY,(IX+%6)
0016E9 FD0F0F              A  6534    	LD	(IY+%F),BC
0016EC FD7712              A  6535    	LD	(IY+%12),A
                           A  6536    ; 1762		dp->dir = fs->win + ofs % SS(fs);	
                           A  6537    .LINE 1762
                           A  6538    
0016EF DD27F5              A  6539    	LD	HL,(IX+%FFFFFFF5)
0016F2 DD5EF8              A  6540    	LD	E,(IX+%FFFFFFF8)
0016F5 01FF0100            A  6541    	LD	BC,511
0016F9 AF                  A  6542    	XOR	A,A
0016FA CD 00 00 00         A  6543    	CALL	__land
0016FE E5C1                A  6544    	LD	BC,HL
001700 DD31F9              A  6545    	LD	IY,(IX+%FFFFFFF9)
001703 ED2336              A  6546    	LEA	HL,IY+%36
001706 09                  A  6547    	ADD	HL,BC
001707 DD3106              A  6548    	LD	IY,(IX+%6)
00170A FD2F1B              A  6549    	LD	(IY+%1B),HL
                           A  6550    ; 1763	
                           A  6551    ; 1764		return FR_OK;
                           A  6552    .LINE 1764
                           A  6553    
00170D B7                  A  6554    	OR	A,A
00170E ED62                A  6555    	SBC	HL,HL
                           A  6556    ; 1765	}
001710                     A  6557    L_246:
                           A  6558    .LINE 1765
                           A  6559    
001710 DDF9                A  6560    	LD	SP,IX
001712 DDE1                A  6561    	POP	IX
001714 C9                  A  6562    	RET	
                           A  6563    
                           A  6564    
                           A  6565    ;**************************** _dir_next *******
                           A  6566    ;Name                         Addr/Register   S
                           A  6567    ;G_12                                 IX-19    
                           A  6568    ;G_11                                 IX-15    
                           A  6569    ;ofs                                  IX-11    
                           A  6570    ;fs                                    IX-7    
                           A  6571    ;clst                                  IX-4    
                           A  6572    ;stretch                               IX+9    
                           A  6573    ;dp                                    IX+6    
                           A  6574    
                           A  6575    
                           A  6576    ; Stack Frame Size: 39 (bytes)
                           A  6577    ;       Spill Code: -1 (instruction)
                           A  6578    
                           A  6579    
                           A  6580    .ENDFUNC "dir_next",1765,"_dir_next"
                           A  6581    ; 1766	
                           A  6582    ; 1767	
                           A  6583    ; 1768	
                           A  6584    ; 1769	
                           A  6585    ; 1770	#if !FF_FS_READONLY
                           A  6586    ; 1771	/*-------------------------------------
                           A  6587    ; 1772	/* Directory handling - Reserve a block
                           A  6588    ; 1773	/*-------------------------------------
                           A  6589    ; 1774	
                           A  6590    ; 1775	static FRESULT dir_alloc (	/* FR_OK(0)
                           A  6591    ; 1776		DIR* dp,				/* Pointer 
                           A  6592    ; 1777		UINT n_ent				/* Number o
                           A  6593    ; 1778	)
                           A  6594    ; 1779	{
001715                     A  6595    _dir_alloc:
                           A  6596    .DEFINE "_dir_alloc"
                           A  6597    
                           A  6598    .VALUE _dir_alloc
                           A  6599    
                           A  6600    .CLASS 3
                           A  6601    
                           A  6602    .TYPE 68
                           A  6603    
                           A  6604    .ENDEF
                           A  6605    
                           A  6606    .BEGFUNC "dir_alloc",1779,"_dir_alloc"
                           A  6607    
                           A  6608    .LINE 1779
                           A  6609    
                           A  6610    .DEFINE "dp"
                           A  6611    
                           A  6612    .CLASS 65
                           A  6613    
                           A  6614    .VALUE 6
                           A  6615    
                           A  6616    .TAG "NONAME3"
                           A  6617    
                           A  6618    .TYPE 40
                           A  6619    
                           A  6620    .ENDEF
                           A  6621    
                           A  6622    .DEFINE "n_ent"
                           A  6623    
                           A  6624    .CLASS 65
                           A  6625    
                           A  6626    .VALUE 9
                           A  6627    
                           A  6628    .TYPE 14
                           A  6629    
                           A  6630    .ENDEF
                           A  6631    
                           A  6632    .DEFINE "res"
                           A  6633    
                           A  6634    .CLASS 65
                           A  6635    
                           A  6636    .VALUE -3
                           A  6637    
                           A  6638    .TYPE 4
                           A  6639    
                           A  6640    .ENDEF
                           A  6641    
                           A  6642    .DEFINE "n"
                           A  6643    
                           A  6644    .CLASS 65
                           A  6645    
                           A  6646    .VALUE -6
                           A  6647    
                           A  6648    .TYPE 14
                           A  6649    
                           A  6650    .ENDEF
                           A  6651    
                           A  6652    .DEFINE "fs"
                           A  6653    
                           A  6654    .CLASS 65
                           A  6655    
                           A  6656    .VALUE -12
                           A  6657    
                           A  6658    .TAG "NONAME0"
                           A  6659    
                           A  6660    .TYPE 40
                           A  6661    
                           A  6662    .ENDEF
                           A  6663    
001715 DDE5                A  6664    	PUSH	IX
001717 DD210000 00         A  6665    	LD	IX,0
00171C DD39                A  6666    	ADD	IX,SP
00171E ED22F4              A  6667    	LEA	HL,IX+%FFFFFFF4
001721 F9                  A  6668    	LD	SP,HL
                           A  6669    ; 1780		FRESULT res;
                           A  6670    ; 1781		UINT n;
                           A  6671    ; 1782		FATFS *fs = dp->obj.fs;
                           A  6672    .LINE 1782
                           A  6673    
001722 DD3106              A  6674    	LD	IY,(IX+%6)
001725 FD0700              A  6675    	LD	BC,(IY+%0)
001728 DD0FF4              A  6676    	LD	(IX+%FFFFFFF4),BC
                           A  6677    ; 1783	
                           A  6678    ; 1784	
                           A  6679    ; 1785		res = dir_sdi(dp, 0);
                           A  6680    .LINE 1785
                           A  6681    
00172B 01000000            A  6682    	LD	BC,0
00172F C5                  A  6683    	PUSH	BC
001730 C5                  A  6684    	PUSH	BC
001731 DD0706              A  6685    	LD	BC,(IX+%6)
001734 C5                  A  6686    	PUSH	BC
001735 CD 50 12 00         A  6687    	CALL	_dir_sdi
001739 C1                  A  6688    	POP	BC
00173A C1                  A  6689    	POP	BC
00173B C1                  A  6690    	POP	BC
00173C DD2FFD              A  6691    	LD	(IX+%FFFFFFFD),HL
                           A  6692    ; 1786		if (res == FR_OK) {
                           A  6693    .LINE 1786
                           A  6694    
00173F 01000000            A  6695    	LD	BC,0
001743 DD27FD              A  6696    	LD	HL,(IX+%FFFFFFFD)
001746 B7                  A  6697    	OR	A,A
001747 ED42                A  6698    	SBC	HL,BC
001749 C2 D3 17 00         A  6699    	JR	NZ,L_258
                           A  6700    ; 1787			n = 0;
                           A  6701    .LINE 1787
                           A  6702    
00174D DD0FFA              A  6703    	LD	(IX+%FFFFFFFA),BC
                           A  6704    ; 1788			do {
001750                     A  6705    L_254:
                           A  6706    .LINE 1788
                           A  6707    
                           A  6708    ; 1789				res = move_window(fs, dp->s
                           A  6709    .LINE 1789
                           A  6710    
001750 DD3106              A  6711    	LD	IY,(IX+%6)
001753 FD0717              A  6712    	LD	BC,(IY+%17)
001756 FD7E1A              A  6713    	LD	A,(IY+%1A)
001759 2600                A  6714    	LD	H,%0
00175B 6F                  A  6715    	LD	L,A
00175C E5                  A  6716    	PUSH	HL
00175D C5                  A  6717    	PUSH	BC
00175E DD07F4              A  6718    	LD	BC,(IX+%FFFFFFF4)
001761 C5                  A  6719    	PUSH	BC
001762 CD 1E 04 00         A  6720    	CALL	_move_window
001766 C1                  A  6721    	POP	BC
001767 C1                  A  6722    	POP	BC
001768 C1                  A  6723    	POP	BC
001769 DD2FFD              A  6724    	LD	(IX+%FFFFFFFD),HL
                           A  6725    ; 1790				if (res != FR_OK) break;
                           A  6726    .LINE 1790
                           A  6727    
00176C 01000000            A  6728    	LD	BC,0
001770 DD27FD              A  6729    	LD	HL,(IX+%FFFFFFFD)
001773 B7                  A  6730    	OR	A,A
001774 ED42                A  6731    	SBC	HL,BC
001776 20 5B               A  6732    	JR	NZ,L_258
                           A  6733    ; 1791	#if FF_FS_EXFAT
                           A  6734    ; 1792				if ((fs->fs_type == FS_EXFA
                           A  6735    ; 1793	#else
                           A  6736    ; 1794				if (dp->dir[DIR_Name] == DD
                           A  6737    .LINE 1794
                           A  6738    
001778 DD3106              A  6739    	LD	IY,(IX+%6)
00177B FD071B              A  6740    	LD	BC,(IY+%1B)
00177E DD0FF7              A  6741    	LD	(IX+%FFFFFFF7),BC
001781 C5E1                A  6742    	LD	HL,BC
001783 7E                  A  6743    	LD	A,(HL)
001784 B7ED62              A  6744    	UEXT	HL
001787 6F                  A  6745    	LD	L,A
001788 01E50000            A  6746    	LD	BC,229
00178C B7                  A  6747    	OR	A,A
00178D ED42                A  6748    	SBC	HL,BC
00178F 28 07               A  6749    	JR	Z,L_250
001791 DD27F7              A  6750    	LD	HL,(IX+%FFFFFFF7)
001794 7E                  A  6751    	LD	A,(HL)
001795 B7                  A  6752    	OR	A,A
001796 20 14               A  6753    	JR	NZ,L_251
001798                     A  6754    L_250:
                           A  6755    ; 1795	#endif
                           A  6756    ; 1796					if (++n == n_ent) break
                           A  6757    .LINE 1796
                           A  6758    
001798 DD07FA              A  6759    	LD	BC,(IX+%FFFFFFFA)
00179B 03                  A  6760    	INC	BC
00179C DD0FFA              A  6761    	LD	(IX+%FFFFFFFA),BC
00179F DD0709              A  6762    	LD	BC,(IX+%9)
0017A2 DD27FA              A  6763    	LD	HL,(IX+%FFFFFFFA)
0017A5 B7                  A  6764    	OR	A,A
0017A6 ED42                A  6765    	SBC	HL,BC
0017A8 28 29               A  6766    	JR	Z,L_258
0017AA 18 07               A  6767    	JR	L_253
                           A  6768    ; 1797				} else {
0017AC                     A  6769    L_251:
                           A  6770    .LINE 1797
                           A  6771    
                           A  6772    ; 1798					n = 0;				/* 
                           A  6773    .LINE 1798
                           A  6774    
0017AC 01000000            A  6775    	LD	BC,0
0017B0 DD0FFA              A  6776    	LD	(IX+%FFFFFFFA),BC
                           A  6777    ; 1799				}
0017B3                     A  6778    L_253:
                           A  6779    .LINE 1799
                           A  6780    
                           A  6781    ; 1800				res = dir_next(dp, 1);	/* 
                           A  6782    .LINE 1800
                           A  6783    
0017B3 01010000            A  6784    	LD	BC,1
0017B7 C5                  A  6785    	PUSH	BC
0017B8 DD0706              A  6786    	LD	BC,(IX+%6)
0017BB C5                  A  6787    	PUSH	BC
0017BC CD 6A 14 00         A  6788    	CALL	_dir_next
0017C0 C1                  A  6789    	POP	BC
0017C1 C1                  A  6790    	POP	BC
0017C2 DD2FFD              A  6791    	LD	(IX+%FFFFFFFD),HL
                           A  6792    ; 1801			} while (res == FR_OK);
                           A  6793    .LINE 1801
                           A  6794    
0017C5 01000000            A  6795    	LD	BC,0
0017C9 DD27FD              A  6796    	LD	HL,(IX+%FFFFFFFD)
0017CC B7                  A  6797    	OR	A,A
0017CD ED42                A  6798    	SBC	HL,BC
0017CF CA 50 17 00         A  6799    	JR	Z,L_254
                           A  6800    ; 1802		}
0017D3                     A  6801    L_258:
                           A  6802    .LINE 1802
                           A  6803    
                           A  6804    ; 1803	
                           A  6805    ; 1804		if (res == FR_NO_FILE) res = FR_DEN
                           A  6806    .LINE 1804
                           A  6807    
0017D3 01040000            A  6808    	LD	BC,4
0017D7 DD27FD              A  6809    	LD	HL,(IX+%FFFFFFFD)
0017DA B7                  A  6810    	OR	A,A
0017DB ED42                A  6811    	SBC	HL,BC
0017DD 20 07               A  6812    	JR	NZ,L_259
0017DF 01070000            A  6813    	LD	BC,7
0017E3 DD0FFD              A  6814    	LD	(IX+%FFFFFFFD),BC
0017E6                     A  6815    L_259:
                           A  6816    ; 1805		return res;
                           A  6817    .LINE 1805
                           A  6818    
0017E6 DD27FD              A  6819    	LD	HL,(IX+%FFFFFFFD)
                           A  6820    ; 1806	}
                           A  6821    .LINE 1806
                           A  6822    
0017E9 DDF9                A  6823    	LD	SP,IX
0017EB DDE1                A  6824    	POP	IX
0017ED C9                  A  6825    	RET	
                           A  6826    
                           A  6827    
                           A  6828    ;**************************** _dir_alloc ******
                           A  6829    ;Name                         Addr/Register   S
                           A  6830    ;fs                                   IX-12    
                           A  6831    ;G_13                                  IX-9    
                           A  6832    ;n                                     IX-6    
                           A  6833    ;res                                   IX-3    
                           A  6834    ;n_ent                                 IX+9    
                           A  6835    ;dp                                    IX+6    
                           A  6836    
                           A  6837    
                           A  6838    ; Stack Frame Size: 24 (bytes)
                           A  6839    ;       Spill Code: -1 (instruction)
                           A  6840    
                           A  6841    
                           A  6842    .ENDFUNC "dir_alloc",1806,"_dir_alloc"
                           A  6843    ; 1807	
                           A  6844    ; 1808	#endif	/* !FF_FS_READONLY */
                           A  6845    ; 1809	
                           A  6846    ; 1810	
                           A  6847    ; 1811	
                           A  6848    ; 1812	
                           A  6849    ; 1813	/*-------------------------------------
                           A  6850    ; 1814	/* FAT: Directory handling - Load/Store
                           A  6851    ; 1815	/*-------------------------------------
                           A  6852    ; 1816	
                           A  6853    ; 1817	static DWORD ld_clust (	/* Returns the 
                           A  6854    ; 1818		FATFS* fs,			/* Pointer to t
                           A  6855    ; 1819		const BYTE* dir		/* Pointer to t
                           A  6856    ; 1820	)
                           A  6857    ; 1821	{
0017EE                     A  6858    _ld_clust:
                           A  6859    .DEFINE "_ld_clust"
                           A  6860    
                           A  6861    .VALUE _ld_clust
                           A  6862    
                           A  6863    .CLASS 3
                           A  6864    
                           A  6865    .TYPE 79
                           A  6866    
                           A  6867    .ENDEF
                           A  6868    
                           A  6869    .BEGFUNC "ld_clust",1821,"_ld_clust"
                           A  6870    
                           A  6871    .LINE 1821
                           A  6872    
                           A  6873    .DEFINE "fs"
                           A  6874    
                           A  6875    .CLASS 65
                           A  6876    
                           A  6877    .VALUE 6
                           A  6878    
                           A  6879    .TAG "NONAME0"
                           A  6880    
                           A  6881    .TYPE 40
                           A  6882    
                           A  6883    .ENDEF
                           A  6884    
                           A  6885    .DEFINE "dir"
                           A  6886    
                           A  6887    .CLASS 65
                           A  6888    
                           A  6889    .VALUE 9
                           A  6890    
                           A  6891    .TYPE 204
                           A  6892    
                           A  6893    .ENDEF
                           A  6894    
                           A  6895    .DEFINE "cl"
                           A  6896    
                           A  6897    .CLASS 65
                           A  6898    
                           A  6899    .VALUE -4
                           A  6900    
                           A  6901    .TYPE 15
                           A  6902    
                           A  6903    .ENDEF
                           A  6904    
0017EE DDE5                A  6905    	PUSH	IX
0017F0 DD210000 00         A  6906    	LD	IX,0
0017F5 DD39                A  6907    	ADD	IX,SP
0017F7 C5                  A  6908    	PUSH	BC
0017F8 3B                  A  6909    	DEC	SP
0017F9 3B                  A  6910    	DEC	SP
                           A  6911    ; 1822		DWORD cl;
                           A  6912    ; 1823	
                           A  6913    ; 1824		cl = ld_word(dir + DIR_FstClusLO);
                           A  6914    .LINE 1824
                           A  6915    
0017FA DD3109              A  6916    	LD	IY,(IX+%9)
0017FD ED031A              A  6917    	LEA	BC,IY+%1A
001800 C5                  A  6918    	PUSH	BC
001801 CD 00 00 00         A  6919    	CALL	_ld_word
001805 C1                  A  6920    	POP	BC
001806 E5C1                A  6921    	LD	BC,HL
001808 CD 00 00 00         A  6922    	CALL	__stoiu
00180C AF                  A  6923    	XOR	A,A
00180D DD2FFC              A  6924    	LD	(IX+%FFFFFFFC),HL
001810 DD77FF              A  6925    	LD	(IX+%FFFFFFFF),A
                           A  6926    ; 1825		if (fs->fs_type == FS_FAT32) {
                           A  6927    .LINE 1825
                           A  6928    
001813 DD3106              A  6929    	LD	IY,(IX+%6)
001816 FD7E00              A  6930    	LD	A,(IY+%0)
001819 FE03                A  6931    	CP	A,%3
00181B 20 34               A  6932    	JR	NZ,L_262
                           A  6933    ; 1826			cl |= (DWORD)ld_word(dir + DIR_
                           A  6934    .LINE 1826
                           A  6935    
00181D DD3109              A  6936    	LD	IY,(IX+%9)
001820 ED0314              A  6937    	LEA	BC,IY+%14
001823 C5                  A  6938    	PUSH	BC
001824 DD77FB              A  6939    	LD	(IX+%FFFFFFFB),A
001827 CD 00 00 00         A  6940    	CALL	_ld_word
00182B DD7EFB              A  6941    	LD	A,(IX+%FFFFFFFB)
00182E C1                  A  6942    	POP	BC
00182F E5C1                A  6943    	LD	BC,HL
001831 CD 00 00 00         A  6944    	CALL	__stoiu
001835 E5                  A  6945    	PUSH	HL
001836 E5                  A  6946    	PUSH	HL
001837 B7ED62              A  6947    	UEXT	HL
00183A E5                  A  6948    	PUSH	HL
00183B 33                  A  6949    	INC	SP
00183C E1                  A  6950    	POP	HL
00183D C1                  A  6951    	POP	BC
00183E 33                  A  6952    	INC	SP
00183F 33                  A  6953    	INC	SP
001840 59                  A  6954    	LD	E,C
001841 DD07FC              A  6955    	LD	BC,(IX+%FFFFFFFC)
001844 DD7EFF              A  6956    	LD	A,(IX+%FFFFFFFF)
001847 CD 00 00 00         A  6957    	CALL	__lor
00184B DD2FFC              A  6958    	LD	(IX+%FFFFFFFC),HL
00184E DD73FF              A  6959    	LD	(IX+%FFFFFFFF),E
                           A  6960    ; 1827		}
001851                     A  6961    L_262:
                           A  6962    .LINE 1827
                           A  6963    
                           A  6964    ; 1828	
                           A  6965    ; 1829		return cl;
                           A  6966    .LINE 1829
                           A  6967    
001851 DD27FC              A  6968    	LD	HL,(IX+%FFFFFFFC)
001854 DD5EFF              A  6969    	LD	E,(IX+%FFFFFFFF)
                           A  6970    ; 1830	}
                           A  6971    .LINE 1830
                           A  6972    
001857 DDF9                A  6973    	LD	SP,IX
001859 DDE1                A  6974    	POP	IX
00185B C9                  A  6975    	RET	
                           A  6976    
                           A  6977    
                           A  6978    ;**************************** _ld_clust *******
                           A  6979    ;Name                         Addr/Register   S
                           A  6980    ;cl                                    IX-4    
                           A  6981    ;dir                                   IX+9    
                           A  6982    ;fs                                    IX+6    
                           A  6983    
                           A  6984    
                           A  6985    ; Stack Frame Size: 17 (bytes)
                           A  6986    ;       Spill Code: -1 (instruction)
                           A  6987    
                           A  6988    
                           A  6989    .ENDFUNC "ld_clust",1830,"_ld_clust"
                           A  6990    ; 1831	
                           A  6991    ; 1832	
                           A  6992    ; 1833	#if !FF_FS_READONLY
                           A  6993    ; 1834	static void st_clust (
                           A  6994    ; 1835		FATFS* fs,	/* Pointer to the fs ob
                           A  6995    ; 1836		BYTE* dir,	/* Pointer to the key e
                           A  6996    ; 1837		DWORD cl	/* Value to be set */
                           A  6997    ; 1838	)
                           A  6998    ; 1839	{
00185C                     A  6999    _st_clust:
                           A  7000    .DEFINE "_st_clust"
                           A  7001    
                           A  7002    .VALUE _st_clust
                           A  7003    
                           A  7004    .CLASS 3
                           A  7005    
                           A  7006    .TYPE 65
                           A  7007    
                           A  7008    .ENDEF
                           A  7009    
                           A  7010    .BEGFUNC "st_clust",1839,"_st_clust"
                           A  7011    
                           A  7012    .LINE 1839
                           A  7013    
                           A  7014    .DEFINE "fs"
                           A  7015    
                           A  7016    .CLASS 65
                           A  7017    
                           A  7018    .VALUE 6
                           A  7019    
                           A  7020    .TAG "NONAME0"
                           A  7021    
                           A  7022    .TYPE 40
                           A  7023    
                           A  7024    .ENDEF
                           A  7025    
                           A  7026    .DEFINE "dir"
                           A  7027    
                           A  7028    .CLASS 65
                           A  7029    
                           A  7030    .VALUE 9
                           A  7031    
                           A  7032    .TYPE 44
                           A  7033    
                           A  7034    .ENDEF
                           A  7035    
                           A  7036    .DEFINE "cl"
                           A  7037    
                           A  7038    .CLASS 65
                           A  7039    
                           A  7040    .VALUE 12
                           A  7041    
                           A  7042    .TYPE 15
                           A  7043    
                           A  7044    .ENDEF
                           A  7045    
00185C DDE5                A  7046    	PUSH	IX
00185E DD210000 00         A  7047    	LD	IX,0
001863 DD39                A  7048    	ADD	IX,SP
                           A  7049    ; 1840		st_word(dir + DIR_FstClusLO, (WORD)
                           A  7050    .LINE 1840
                           A  7051    
001865 DD070C              A  7052    	LD	BC,(IX+%C)
001868 C5                  A  7053    	PUSH	BC
001869 DD3109              A  7054    	LD	IY,(IX+%9)
00186C ED031A              A  7055    	LEA	BC,IY+%1A
00186F C5                  A  7056    	PUSH	BC
001870 CD 06 01 00         A  7057    	CALL	_st_word
001874 C1                  A  7058    	POP	BC
001875 C1                  A  7059    	POP	BC
                           A  7060    ; 1841		if (fs->fs_type == FS_FAT32) {
                           A  7061    .LINE 1841
                           A  7062    
001876 DD3106              A  7063    	LD	IY,(IX+%6)
001879 FD7E00              A  7064    	LD	A,(IY+%0)
00187C FE03                A  7065    	CP	A,%3
00187E 20 1A               A  7066    	JR	NZ,L_265
                           A  7067    ; 1842			st_word(dir + DIR_FstClusHI, (W
                           A  7068    .LINE 1842
                           A  7069    
001880 B7ED62              A  7070    	UEXT	HL
001883 E5                  A  7071    	PUSH	HL
001884 DD070D              A  7072    	LD	BC,(IX+%D)
001887 C5                  A  7073    	PUSH	BC
001888 33                  A  7074    	INC	SP
001889 C1                  A  7075    	POP	BC
00188A 33                  A  7076    	INC	SP
00188B 33                  A  7077    	INC	SP
00188C C5                  A  7078    	PUSH	BC
00188D DD3109              A  7079    	LD	IY,(IX+%9)
001890 ED0314              A  7080    	LEA	BC,IY+%14
001893 C5                  A  7081    	PUSH	BC
001894 CD 06 01 00         A  7082    	CALL	_st_word
001898 C1                  A  7083    	POP	BC
001899 C1                  A  7084    	POP	BC
                           A  7085    ; 1843		}
                           A  7086    ; 1844	}
00189A                     A  7087    L_265:
                           A  7088    .LINE 1844
                           A  7089    
00189A DDF9                A  7090    	LD	SP,IX
00189C DDE1                A  7091    	POP	IX
00189E C9                  A  7092    	RET	
                           A  7093    
                           A  7094    
                           A  7095    ;**************************** _st_clust *******
                           A  7096    ;Name                         Addr/Register   S
                           A  7097    ;cl                                   IX+12    
                           A  7098    ;dir                                   IX+9    
                           A  7099    ;fs                                    IX+6    
                           A  7100    
                           A  7101    
                           A  7102    ; Stack Frame Size: 18 (bytes)
                           A  7103    ;       Spill Code: -1 (instruction)
                           A  7104    
                           A  7105    
                           A  7106    .ENDFUNC "st_clust",1844,"_st_clust"
                           A  7107    ; 1845	#endif
                           A  7108    ; 1846	
                           A  7109    ; 1847	
                           A  7110    ; 1848	
                           A  7111    ; 1849	#if FF_USE_LFN
                           A  7112    ; 1850	/*-------------------------------------
                           A  7113    ; 1851	/* FAT-LFN: Compare a part of file name
                           A  7114    ; 1852	/*-------------------------------------
                           A  7115    ; 1853	
                           A  7116    ; 1854	static int cmp_lfn (		/* 1:matche
                           A  7117    ; 1855		const WCHAR* lfnbuf,	/* Pointer 
                           A  7118    ; 1856		BYTE* dir				/* Pointer 
                           A  7119    ; 1857	)
                           A  7120    ; 1858	{
00189F                     A  7121    _cmp_lfn:
                           A  7122    .DEFINE "_cmp_lfn"
                           A  7123    
                           A  7124    .VALUE _cmp_lfn
                           A  7125    
                           A  7126    .CLASS 3
                           A  7127    
                           A  7128    .TYPE 68
                           A  7129    
                           A  7130    .ENDEF
                           A  7131    
                           A  7132    .BEGFUNC "cmp_lfn",1858,"_cmp_lfn"
                           A  7133    
                           A  7134    .LINE 1858
                           A  7135    
                           A  7136    .DEFINE "lfnbuf"
                           A  7137    
                           A  7138    .CLASS 65
                           A  7139    
                           A  7140    .VALUE 6
                           A  7141    
                           A  7142    .TYPE 205
                           A  7143    
                           A  7144    .ENDEF
                           A  7145    
                           A  7146    .DEFINE "dir"
                           A  7147    
                           A  7148    .CLASS 65
                           A  7149    
                           A  7150    .VALUE 9
                           A  7151    
                           A  7152    .TYPE 44
                           A  7153    
                           A  7154    .ENDEF
                           A  7155    
                           A  7156    .DEFINE "i"
                           A  7157    
                           A  7158    .CLASS 65
                           A  7159    
                           A  7160    .VALUE -3
                           A  7161    
                           A  7162    .TYPE 14
                           A  7163    
                           A  7164    .ENDEF
                           A  7165    
                           A  7166    .DEFINE "s"
                           A  7167    
                           A  7168    .CLASS 65
                           A  7169    
                           A  7170    .VALUE -6
                           A  7171    
                           A  7172    .TYPE 14
                           A  7173    
                           A  7174    .ENDEF
                           A  7175    
                           A  7176    .DEFINE "wc"
                           A  7177    
                           A  7178    .CLASS 65
                           A  7179    
                           A  7180    .VALUE -8
                           A  7181    
                           A  7182    .TYPE 13
                           A  7183    
                           A  7184    .ENDEF
                           A  7185    
                           A  7186    .DEFINE "uc"
                           A  7187    
                           A  7188    .CLASS 65
                           A  7189    
                           A  7190    .VALUE -10
                           A  7191    
                           A  7192    .TYPE 13
                           A  7193    
                           A  7194    .ENDEF
                           A  7195    
00189F DDE5                A  7196    	PUSH	IX
0018A1 DD210000 00         A  7197    	LD	IX,0
0018A6 DD39                A  7198    	ADD	IX,SP
0018A8 ED22F2              A  7199    	LEA	HL,IX+%FFFFFFF2
0018AB F9                  A  7200    	LD	SP,HL
                           A  7201    ; 1859		UINT i, s;
                           A  7202    ; 1860		WCHAR wc, uc;
                           A  7203    ; 1861	
                           A  7204    ; 1862	
                           A  7205    ; 1863		if (ld_word(dir + LDIR_FstClusLO) !
                           A  7206    .LINE 1863
                           A  7207    
0018AC DD3109              A  7208    	LD	IY,(IX+%9)
0018AF ED031A              A  7209    	LEA	BC,IY+%1A
0018B2 C5                  A  7210    	PUSH	BC
0018B3 CD 00 00 00         A  7211    	CALL	_ld_word
0018B7 C1                  A  7212    	POP	BC
0018B8 49010000            A  7213    	LD.LIS	BC,0
0018BC B7                  A  7214    	OR	A,A
0018BD 40ED42              A  7215    	SBC.SIS	HL,BC
0018C0 28 07               A  7216    	JR	Z,L_267
0018C2 B7                  A  7217    	OR	A,A
0018C3 ED62                A  7218    	SBC	HL,HL
0018C5 C3 D8 19 00         A  7219    	JR	L_284
0018C9                     A  7220    L_267:
                           A  7221    ; 1864	
                           A  7222    ; 1865		i = ((dir[LDIR_Ord] & 0x3F) - 1) * 
                           A  7223    .LINE 1865
                           A  7224    
0018C9 DD2709              A  7225    	LD	HL,(IX+%9)
0018CC 7E                  A  7226    	LD	A,(HL)
0018CD E63F                A  7227    	AND	A,%3F
0018CF B7ED62              A  7228    	UEXT	HL
0018D2 6F                  A  7229    	LD	L,A
0018D3 2B                  A  7230    	DEC	HL
0018D4 3E0D                A  7231    	LD	A,%D
0018D6 CD 00 00 00         A  7232    	CALL	__imul_b
0018DA DD2FFD              A  7233    	LD	(IX+%FFFFFFFD),HL
                           A  7234    ; 1866	
                           A  7235    ; 1867		for (wc = 1, s = 0; s < 13; s++) {	
                           A  7236    .LINE 1867
                           A  7237    
0018DD DD36F801            A  7238    	LD	(IX+%FFFFFFF8),%1
0018E1 DD36F900            A  7239    	LD	(IX+%FFFFFFF9),%0
0018E5 01000000            A  7240    	LD	BC,0
0018E9 DD0FFA              A  7241    	LD	(IX+%FFFFFFFA),BC
0018EC C3 98 19 00         A  7242    	JR	L_278
0018F0                     A  7243    L_276:
                           A  7244    ; 1868			uc = ld_word(dir + LfnOfs[s]);	
                           A  7245    .LINE 1868
                           A  7246    
0018F0 01 00 00 00         A  7247    	LD	BC,_LfnOfs
0018F4 DD27FA              A  7248    	LD	HL,(IX+%FFFFFFFA)
0018F7 09                  A  7249    	ADD	HL,BC
0018F8 7E                  A  7250    	LD	A,(HL)
0018F9 B7ED62              A  7251    	UEXT	HL
0018FC 6F                  A  7252    	LD	L,A
0018FD DD0709              A  7253    	LD	BC,(IX+%9)
001900 09                  A  7254    	ADD	HL,BC
001901 E5                  A  7255    	PUSH	HL
001902 CD 00 00 00         A  7256    	CALL	_ld_word
001906 C1                  A  7257    	POP	BC
001907 DD75F6              A  7258    	LD	(IX+%FFFFFFF6),L
00190A DD74F7              A  7259    	LD	(IX+%FFFFFFF7),H
                           A  7260    ; 1869			if (wc != 0) {
                           A  7261    .LINE 1869
                           A  7262    
00190D 49010000            A  7263    	LD.LIS	BC,0
001911 DD27F8              A  7264    	LD	HL,(IX+%FFFFFFF8)
001914 B7                  A  7265    	OR	A,A
001915 40ED42              A  7266    	SBC.SIS	HL,BC
001918 28 65               A  7267    	JR	Z,L_275
                           A  7268    ; 1870				if (i >= FF_MAX_LFN + 1 || 
                           A  7269    .LINE 1870
                           A  7270    
00191A 01000100            A  7271    	LD	BC,256
00191E DD27FD              A  7272    	LD	HL,(IX+%FFFFFFFD)
001921 B7                  A  7273    	OR	A,A
001922 ED42                A  7274    	SBC	HL,BC
001924 30 49               A  7275    	JR	NC,L_271
001926 DD27FD              A  7276    	LD	HL,(IX+%FFFFFFFD)
001929 DD07FD              A  7277    	LD	BC,(IX+%FFFFFFFD)
00192C 03                  A  7278    	INC	BC
00192D DD0FFD              A  7279    	LD	(IX+%FFFFFFFD),BC
001930 29                  A  7280    	ADD	HL,HL
001931 DD0706              A  7281    	LD	BC,(IX+%6)
001934 09                  A  7282    	ADD	HL,BC
001935 ED07                A  7283    	LD	BC,(HL)
001937 CD 00 00 00         A  7284    	CALL	__stoiu
00193B 0E00                A  7285    	LD	C,%0
00193D 0600                A  7286    	LD	B,%0
00193F C5                  A  7287    	PUSH	BC
001940 E5                  A  7288    	PUSH	HL
001941 CD 00 00 00         A  7289    	CALL	_ff_wtoupper
001945 C1                  A  7290    	POP	BC
001946 C1                  A  7291    	POP	BC
001947 DD73F5              A  7292    	LD	(IX+%FFFFFFF5),E
00194A DD2FF2              A  7293    	LD	(IX+%FFFFFFF2),HL
00194D DD07F6              A  7294    	LD	BC,(IX+%FFFFFFF6)
001950 CD 00 00 00         A  7295    	CALL	__stoiu
001954 0E00                A  7296    	LD	C,%0
001956 0600                A  7297    	LD	B,%0
001958 C5                  A  7298    	PUSH	BC
001959 E5                  A  7299    	PUSH	HL
00195A CD 00 00 00         A  7300    	CALL	_ff_wtoupper
00195E C1                  A  7301    	POP	BC
00195F C1                  A  7302    	POP	BC
001960 7B                  A  7303    	LD	A,E
001961 E5C1                A  7304    	LD	BC,HL
001963 DD5EF5              A  7305    	LD	E,(IX+%FFFFFFF5)
001966 DD27F2              A  7306    	LD	HL,(IX+%FFFFFFF2)
001969 CD 00 00 00         A  7307    	CALL	__lcmpu
00196D 28 05               A  7308    	JR	Z,L_272
00196F                     A  7309    L_271:
                           A  7310    ; 1871					return 0;				
                           A  7311    .LINE 1871
                           A  7312    
00196F B7                  A  7313    	OR	A,A
001970 ED62                A  7314    	SBC	HL,HL
001972 18 64               A  7315    	JR	L_284
                           A  7316    ; 1872				}
001974                     A  7317    L_272:
                           A  7318    .LINE 1872
                           A  7319    
                           A  7320    ; 1873				wc = uc;
                           A  7321    .LINE 1873
                           A  7322    
001974 DD07F6              A  7323    	LD	BC,(IX+%FFFFFFF6)
001977 DD71F8              A  7324    	LD	(IX+%FFFFFFF8),C
00197A DD70F9              A  7325    	LD	(IX+%FFFFFFF9),B
                           A  7326    ; 1874			} else {
                           A  7327    .LINE 1874
                           A  7328    
00197D 18 12               A  7329    	JR	L_277
00197F                     A  7330    L_275:
                           A  7331    ; 1875				if (uc != 0xFFFF) return 0;
                           A  7332    .LINE 1875
                           A  7333    
00197F 4901FFFF            A  7334    	LD.LIS	BC,65535
001983 DD27F6              A  7335    	LD	HL,(IX+%FFFFFFF6)
001986 B7                  A  7336    	OR	A,A
001987 40ED42              A  7337    	SBC.SIS	HL,BC
00198A 28 05               A  7338    	JR	Z,L_277
00198C B7                  A  7339    	OR	A,A
00198D ED62                A  7340    	SBC	HL,HL
00198F 18 47               A  7341    	JR	L_284
                           A  7342    ; 1876			}
                           A  7343    ; 1877		}
001991                     A  7344    L_277:
                           A  7345    .LINE 1877
                           A  7346    
001991 DD07FA              A  7347    	LD	BC,(IX+%FFFFFFFA)
001994 03                  A  7348    	INC	BC
001995 DD0FFA              A  7349    	LD	(IX+%FFFFFFFA),BC
001998                     A  7350    L_278:
001998 010D0000            A  7351    	LD	BC,13
00199C DD27FA              A  7352    	LD	HL,(IX+%FFFFFFFA)
00199F B7                  A  7353    	OR	A,A
0019A0 ED42                A  7354    	SBC	HL,BC
0019A2 DA F0 18 00         A  7355    	JR	C,L_276
                           A  7356    ; 1878	
                           A  7357    ; 1879		if ((dir[LDIR_Ord] & LLEF) && wc &&
                           A  7358    .LINE 1879
                           A  7359    
0019A6 DD2709              A  7360    	LD	HL,(IX+%9)
0019A9 7E                  A  7361    	LD	A,(HL)
0019AA E640                A  7362    	AND	A,%40
0019AC 28 26               A  7363    	JR	Z,L_283
0019AE 49010000            A  7364    	LD.LIS	BC,0
0019B2 DD27F8              A  7365    	LD	HL,(IX+%FFFFFFF8)
0019B5 B7                  A  7366    	OR	A,A
0019B6 40ED42              A  7367    	SBC.SIS	HL,BC
0019B9 28 19               A  7368    	JR	Z,L_283
0019BB DD27FD              A  7369    	LD	HL,(IX+%FFFFFFFD)
0019BE 29                  A  7370    	ADD	HL,HL
0019BF DD0706              A  7371    	LD	BC,(IX+%6)
0019C2 09                  A  7372    	ADD	HL,BC
0019C3 49010000            A  7373    	LD.LIS	BC,0
0019C7 ED27                A  7374    	LD	HL,(HL)
0019C9 B7                  A  7375    	OR	A,A
0019CA 40ED42              A  7376    	SBC.SIS	HL,BC
0019CD 28 05               A  7377    	JR	Z,L_283
0019CF B7                  A  7378    	OR	A,A
0019D0 ED62                A  7379    	SBC	HL,HL
0019D2 18 04               A  7380    	JR	L_284
0019D4                     A  7381    L_283:
                           A  7382    ; 1880	
                           A  7383    ; 1881		return 1;		/* The part of LFN 
                           A  7384    .LINE 1881
                           A  7385    
0019D4 21010000            A  7386    	LD	HL,1
                           A  7387    ; 1882	}
0019D8                     A  7388    L_284:
                           A  7389    .LINE 1882
                           A  7390    
0019D8 DDF9                A  7391    	LD	SP,IX
0019DA DDE1                A  7392    	POP	IX
0019DC C9                  A  7393    	RET	
                           A  7394    
                           A  7395    
                           A  7396    ;**************************** _cmp_lfn ********
                           A  7397    ;Name                         Addr/Register   S
                           A  7398    ;_ff_wtoupper                        IMPORT  --
                           A  7399    ;_LfnOfs                             STATIC    
                           A  7400    ;uc                                   IX-10    
                           A  7401    ;wc                                    IX-8    
                           A  7402    ;s                                     IX-6    
                           A  7403    ;i                                     IX-3    
                           A  7404    ;dir                                   IX+9    
                           A  7405    ;lfnbuf                                IX+6    
                           A  7406    
                           A  7407    
                           A  7408    ; Stack Frame Size: 26 (bytes)
                           A  7409    ;       Spill Code: -1 (instruction)
                           A  7410    
                           A  7411    
                           A  7412    .ENDFUNC "cmp_lfn",1882,"_cmp_lfn"
                           A  7413    ; 1883	
                           A  7414    ; 1884	
                           A  7415    ; 1885	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  7416    ; 1886	/*-------------------------------------
                           A  7417    ; 1887	/* FAT-LFN: Pick a part of file name fr
                           A  7418    ; 1888	/*-------------------------------------
                           A  7419    ; 1889	
                           A  7420    ; 1890	static int pick_lfn (	/* 1:succeeded,
                           A  7421    ; 1891		WCHAR* lfnbuf,		/* Pointer to t
                           A  7422    ; 1892		BYTE* dir			/* Pointer to t
                           A  7423    ; 1893	)
                           A  7424    ; 1894	{
0019DD                     A  7425    _pick_lfn:
                           A  7426    .DEFINE "_pick_lfn"
                           A  7427    
                           A  7428    .VALUE _pick_lfn
                           A  7429    
                           A  7430    .CLASS 3
                           A  7431    
                           A  7432    .TYPE 68
                           A  7433    
                           A  7434    .ENDEF
                           A  7435    
                           A  7436    .BEGFUNC "pick_lfn",1894,"_pick_lfn"
                           A  7437    
                           A  7438    .LINE 1894
                           A  7439    
                           A  7440    .DEFINE "lfnbuf"
                           A  7441    
                           A  7442    .CLASS 65
                           A  7443    
                           A  7444    .VALUE 6
                           A  7445    
                           A  7446    .TYPE 45
                           A  7447    
                           A  7448    .ENDEF
                           A  7449    
                           A  7450    .DEFINE "dir"
                           A  7451    
                           A  7452    .CLASS 65
                           A  7453    
                           A  7454    .VALUE 9
                           A  7455    
                           A  7456    .TYPE 44
                           A  7457    
                           A  7458    .ENDEF
                           A  7459    
                           A  7460    .DEFINE "i"
                           A  7461    
                           A  7462    .CLASS 65
                           A  7463    
                           A  7464    .VALUE -3
                           A  7465    
                           A  7466    .TYPE 14
                           A  7467    
                           A  7468    .ENDEF
                           A  7469    
                           A  7470    .DEFINE "s"
                           A  7471    
                           A  7472    .CLASS 65
                           A  7473    
                           A  7474    .VALUE -6
                           A  7475    
                           A  7476    .TYPE 14
                           A  7477    
                           A  7478    .ENDEF
                           A  7479    
                           A  7480    .DEFINE "wc"
                           A  7481    
                           A  7482    .CLASS 65
                           A  7483    
                           A  7484    .VALUE -8
                           A  7485    
                           A  7486    .TYPE 13
                           A  7487    
                           A  7488    .ENDEF
                           A  7489    
                           A  7490    .DEFINE "uc"
                           A  7491    
                           A  7492    .CLASS 65
                           A  7493    
                           A  7494    .VALUE -10
                           A  7495    
                           A  7496    .TYPE 13
                           A  7497    
                           A  7498    .ENDEF
                           A  7499    
0019DD DDE5                A  7500    	PUSH	IX
0019DF DD210000 00         A  7501    	LD	IX,0
0019E4 DD39                A  7502    	ADD	IX,SP
0019E6 C5                  A  7503    	PUSH	BC
0019E7 C5                  A  7504    	PUSH	BC
0019E8 C5                  A  7505    	PUSH	BC
0019E9 3B                  A  7506    	DEC	SP
                           A  7507    ; 1895		UINT i, s;
                           A  7508    ; 1896		WCHAR wc, uc;
                           A  7509    ; 1897	
                           A  7510    ; 1898	
                           A  7511    ; 1899		if (ld_word(dir + LDIR_FstClusLO) !
                           A  7512    .LINE 1899
                           A  7513    
0019EA DD3109              A  7514    	LD	IY,(IX+%9)
0019ED ED031A              A  7515    	LEA	BC,IY+%1A
0019F0 C5                  A  7516    	PUSH	BC
0019F1 CD 00 00 00         A  7517    	CALL	_ld_word
0019F5 C1                  A  7518    	POP	BC
0019F6 49010000            A  7519    	LD.LIS	BC,0
0019FA B7                  A  7520    	OR	A,A
0019FB 40ED42              A  7521    	SBC.SIS	HL,BC
0019FE 28 07               A  7522    	JR	Z,L_286
001A00 B7                  A  7523    	OR	A,A
001A01 ED62                A  7524    	SBC	HL,HL
001A03 C3 EA 1A 00         A  7525    	JR	L_303
001A07                     A  7526    L_286:
                           A  7527    ; 1900	
                           A  7528    ; 1901		i = ((dir[LDIR_Ord] & ~LLEF) - 1) *
                           A  7529    .LINE 1901
                           A  7530    
001A07 DD2709              A  7531    	LD	HL,(IX+%9)
001A0A 7E                  A  7532    	LD	A,(HL)
001A0B CBB7                A  7533    	RES	%6,A
001A0D B7ED62              A  7534    	UEXT	HL
001A10 6F                  A  7535    	LD	L,A
001A11 2B                  A  7536    	DEC	HL
001A12 3E0D                A  7537    	LD	A,%D
001A14 CD 00 00 00         A  7538    	CALL	__imul_b
001A18 DD2FFD              A  7539    	LD	(IX+%FFFFFFFD),HL
                           A  7540    ; 1902	
                           A  7541    ; 1903		for (wc = 1, s = 0; s < 13; s++) {	
                           A  7542    .LINE 1903
                           A  7543    
001A1B DD36F801            A  7544    	LD	(IX+%FFFFFFF8),%1
001A1F DD36F900            A  7545    	LD	(IX+%FFFFFFF9),%0
001A23 01000000            A  7546    	LD	BC,0
001A27 DD0FFA              A  7547    	LD	(IX+%FFFFFFFA),BC
001A2A 18 79               A  7548    	JR	L_296
001A2C                     A  7549    L_294:
                           A  7550    ; 1904			uc = ld_word(dir + LfnOfs[s]);	
                           A  7551    .LINE 1904
                           A  7552    
001A2C 01 00 00 00         A  7553    	LD	BC,_LfnOfs
001A30 DD27FA              A  7554    	LD	HL,(IX+%FFFFFFFA)
001A33 09                  A  7555    	ADD	HL,BC
001A34 7E                  A  7556    	LD	A,(HL)
001A35 B7ED62              A  7557    	UEXT	HL
001A38 6F                  A  7558    	LD	L,A
001A39 DD0709              A  7559    	LD	BC,(IX+%9)
001A3C 09                  A  7560    	ADD	HL,BC
001A3D E5                  A  7561    	PUSH	HL
001A3E CD 00 00 00         A  7562    	CALL	_ld_word
001A42 C1                  A  7563    	POP	BC
001A43 DD75F6              A  7564    	LD	(IX+%FFFFFFF6),L
001A46 DD74F7              A  7565    	LD	(IX+%FFFFFFF7),H
                           A  7566    ; 1905			if (wc != 0) {
                           A  7567    .LINE 1905
                           A  7568    
001A49 49010000            A  7569    	LD.LIS	BC,0
001A4D DD27F8              A  7570    	LD	HL,(IX+%FFFFFFF8)
001A50 B7                  A  7571    	OR	A,A
001A51 40ED42              A  7572    	SBC.SIS	HL,BC
001A54 28 36               A  7573    	JR	Z,L_293
                           A  7574    ; 1906				if (i >= FF_MAX_LFN + 1) re
                           A  7575    .LINE 1906
                           A  7576    
001A56 01000100            A  7577    	LD	BC,256
001A5A DD27FD              A  7578    	LD	HL,(IX+%FFFFFFFD)
001A5D B7                  A  7579    	OR	A,A
001A5E ED42                A  7580    	SBC	HL,BC
001A60 38 07               A  7581    	JR	C,L_290
001A62 B7                  A  7582    	OR	A,A
001A63 ED62                A  7583    	SBC	HL,HL
001A65 C3 EA 1A 00         A  7584    	JR	L_303
001A69                     A  7585    L_290:
                           A  7586    ; 1907				lfnbuf[i++] = wc = uc;		
                           A  7587    .LINE 1907
                           A  7588    
001A69 DD07F6              A  7589    	LD	BC,(IX+%FFFFFFF6)
001A6C DD71F8              A  7590    	LD	(IX+%FFFFFFF8),C
001A6F DD70F9              A  7591    	LD	(IX+%FFFFFFF9),B
001A72 DD27FD              A  7592    	LD	HL,(IX+%FFFFFFFD)
001A75 29                  A  7593    	ADD	HL,HL
001A76 DD0706              A  7594    	LD	BC,(IX+%6)
001A79 09                  A  7595    	ADD	HL,BC
001A7A DD7EF6              A  7596    	LD	A,(IX+%FFFFFFF6)
001A7D 77                  A  7597    	LD	(HL),A
001A7E 23                  A  7598    	INC	HL
001A7F DD7EF7              A  7599    	LD	A,(IX+%FFFFFFF7)
001A82 77                  A  7600    	LD	(HL),A
001A83 DD07FD              A  7601    	LD	BC,(IX+%FFFFFFFD)
001A86 03                  A  7602    	INC	BC
001A87 DD0FFD              A  7603    	LD	(IX+%FFFFFFFD),BC
                           A  7604    ; 1908			} else {
                           A  7605    .LINE 1908
                           A  7606    
001A8A 18 12               A  7607    	JR	L_295
001A8C                     A  7608    L_293:
                           A  7609    ; 1909				if (uc != 0xFFFF) return 0;
                           A  7610    .LINE 1909
                           A  7611    
001A8C 4901FFFF            A  7612    	LD.LIS	BC,65535
001A90 DD27F6              A  7613    	LD	HL,(IX+%FFFFFFF6)
001A93 B7                  A  7614    	OR	A,A
001A94 40ED42              A  7615    	SBC.SIS	HL,BC
001A97 28 05               A  7616    	JR	Z,L_295
001A99 B7                  A  7617    	OR	A,A
001A9A ED62                A  7618    	SBC	HL,HL
001A9C 18 4C               A  7619    	JR	L_303
                           A  7620    ; 1910			}
                           A  7621    ; 1911		}
001A9E                     A  7622    L_295:
                           A  7623    .LINE 1911
                           A  7624    
001A9E DD07FA              A  7625    	LD	BC,(IX+%FFFFFFFA)
001AA1 03                  A  7626    	INC	BC
001AA2 DD0FFA              A  7627    	LD	(IX+%FFFFFFFA),BC
001AA5                     A  7628    L_296:
001AA5 010D0000            A  7629    	LD	BC,13
001AA9 DD27FA              A  7630    	LD	HL,(IX+%FFFFFFFA)
001AAC B7                  A  7631    	OR	A,A
001AAD ED42                A  7632    	SBC	HL,BC
001AAF DA 2C 1A 00         A  7633    	JR	C,L_294
                           A  7634    ; 1912	
                           A  7635    ; 1913		if (dir[LDIR_Ord] & LLEF && wc != 0
                           A  7636    .LINE 1913
                           A  7637    
001AB3 DD2709              A  7638    	LD	HL,(IX+%9)
001AB6 7E                  A  7639    	LD	A,(HL)
001AB7 E640                A  7640    	AND	A,%40
001AB9 28 2B               A  7641    	JR	Z,L_302
001ABB 49010000            A  7642    	LD.LIS	BC,0
001ABF DD27F8              A  7643    	LD	HL,(IX+%FFFFFFF8)
001AC2 B7                  A  7644    	OR	A,A
001AC3 40ED42              A  7645    	SBC.SIS	HL,BC
001AC6 28 1E               A  7646    	JR	Z,L_302
                           A  7647    ; 1914			if (i >= FF_MAX_LFN + 1) return
                           A  7648    .LINE 1914
                           A  7649    
001AC8 01000100            A  7650    	LD	BC,256
001ACC DD27FD              A  7651    	LD	HL,(IX+%FFFFFFFD)
001ACF B7                  A  7652    	OR	A,A
001AD0 ED42                A  7653    	SBC	HL,BC
001AD2 38 05               A  7654    	JR	C,L_299
001AD4 B7                  A  7655    	OR	A,A
001AD5 ED62                A  7656    	SBC	HL,HL
001AD7 18 11               A  7657    	JR	L_303
001AD9                     A  7658    L_299:
                           A  7659    ; 1915			lfnbuf[i] = 0;
                           A  7660    .LINE 1915
                           A  7661    
001AD9 DD27FD              A  7662    	LD	HL,(IX+%FFFFFFFD)
001ADC 29                  A  7663    	ADD	HL,HL
001ADD DD0706              A  7664    	LD	BC,(IX+%6)
001AE0 09                  A  7665    	ADD	HL,BC
001AE1 3600                A  7666    	LD	(HL),%0
001AE3 23                  A  7667    	INC	HL
001AE4 3600                A  7668    	LD	(HL),%0
                           A  7669    ; 1916		}
001AE6                     A  7670    L_302:
                           A  7671    .LINE 1916
                           A  7672    
                           A  7673    ; 1917	
                           A  7674    ; 1918		return 1;		/* The part of LFN 
                           A  7675    .LINE 1918
                           A  7676    
001AE6 21010000            A  7677    	LD	HL,1
                           A  7678    ; 1919	}
001AEA                     A  7679    L_303:
                           A  7680    .LINE 1919
                           A  7681    
001AEA DDF9                A  7682    	LD	SP,IX
001AEC DDE1                A  7683    	POP	IX
001AEE C9                  A  7684    	RET	
                           A  7685    
                           A  7686    
                           A  7687    ;**************************** _pick_lfn *******
                           A  7688    ;Name                         Addr/Register   S
                           A  7689    ;_LfnOfs                             STATIC    
                           A  7690    ;uc                                   IX-10    
                           A  7691    ;wc                                    IX-8    
                           A  7692    ;s                                     IX-6    
                           A  7693    ;i                                     IX-3    
                           A  7694    ;dir                                   IX+9    
                           A  7695    ;lfnbuf                                IX+6    
                           A  7696    
                           A  7697    
                           A  7698    ; Stack Frame Size: 22 (bytes)
                           A  7699    ;       Spill Code: -1 (instruction)
                           A  7700    
                           A  7701    
                           A  7702    .ENDFUNC "pick_lfn",1919,"_pick_lfn"
                           A  7703    ; 1920	#endif
                           A  7704    ; 1921	
                           A  7705    ; 1922	
                           A  7706    ; 1923	#if !FF_FS_READONLY
                           A  7707    ; 1924	/*-------------------------------------
                           A  7708    ; 1925	/* FAT-LFN: Create an entry of LFN entr
                           A  7709    ; 1926	/*-------------------------------------
                           A  7710    ; 1927	
                           A  7711    ; 1928	static void put_lfn (
                           A  7712    ; 1929		const WCHAR* lfn,	/* Pointer to t
                           A  7713    ; 1930		BYTE* dir,			/* Pointer to t
                           A  7714    ; 1931		BYTE ord,			/* LFN order (1
                           A  7715    ; 1932		BYTE sum			/* Checksum of 
                           A  7716    ; 1933	)
                           A  7717    ; 1934	{
001AEF                     A  7718    _put_lfn:
                           A  7719    .DEFINE "_put_lfn"
                           A  7720    
                           A  7721    .VALUE _put_lfn
                           A  7722    
                           A  7723    .CLASS 3
                           A  7724    
                           A  7725    .TYPE 65
                           A  7726    
                           A  7727    .ENDEF
                           A  7728    
                           A  7729    .BEGFUNC "put_lfn",1934,"_put_lfn"
                           A  7730    
                           A  7731    .LINE 1934
                           A  7732    
                           A  7733    .DEFINE "lfn"
                           A  7734    
                           A  7735    .CLASS 65
                           A  7736    
                           A  7737    .VALUE 6
                           A  7738    
                           A  7739    .TYPE 205
                           A  7740    
                           A  7741    .ENDEF
                           A  7742    
                           A  7743    .DEFINE "dir"
                           A  7744    
                           A  7745    .CLASS 65
                           A  7746    
                           A  7747    .VALUE 9
                           A  7748    
                           A  7749    .TYPE 44
                           A  7750    
                           A  7751    .ENDEF
                           A  7752    
                           A  7753    .DEFINE "ord"
                           A  7754    
                           A  7755    .CLASS 65
                           A  7756    
                           A  7757    .VALUE 12
                           A  7758    
                           A  7759    .TYPE 12
                           A  7760    
                           A  7761    .ENDEF
                           A  7762    
                           A  7763    .DEFINE "sum"
                           A  7764    
                           A  7765    .CLASS 65
                           A  7766    
                           A  7767    .VALUE 15
                           A  7768    
                           A  7769    .TYPE 12
                           A  7770    
                           A  7771    .ENDEF
                           A  7772    
                           A  7773    .DEFINE "wc"
                           A  7774    
                           A  7775    .CLASS 65
                           A  7776    
                           A  7777    .VALUE -2
                           A  7778    
                           A  7779    .TYPE 13
                           A  7780    
                           A  7781    .ENDEF
                           A  7782    
                           A  7783    .DEFINE "s"
                           A  7784    
                           A  7785    .CLASS 65
                           A  7786    
                           A  7787    .VALUE -5
                           A  7788    
                           A  7789    .TYPE 14
                           A  7790    
                           A  7791    .ENDEF
                           A  7792    
                           A  7793    .DEFINE "i"
                           A  7794    
                           A  7795    .CLASS 65
                           A  7796    
                           A  7797    .VALUE -8
                           A  7798    
                           A  7799    .TYPE 14
                           A  7800    
                           A  7801    .ENDEF
                           A  7802    
001AEF DDE5                A  7803    	PUSH	IX
001AF1 DD210000 00         A  7804    	LD	IX,0
001AF6 DD39                A  7805    	ADD	IX,SP
001AF8 C5                  A  7806    	PUSH	BC
001AF9 C5                  A  7807    	PUSH	BC
001AFA 3B                  A  7808    	DEC	SP
001AFB 3B                  A  7809    	DEC	SP
                           A  7810    ; 1935		UINT i, s;
                           A  7811    ; 1936		WCHAR wc;
                           A  7812    ; 1937	
                           A  7813    ; 1938	
                           A  7814    ; 1939		dir[LDIR_Chksum] = sum;			/* 
                           A  7815    .LINE 1939
                           A  7816    
001AFC DD3109              A  7817    	LD	IY,(IX+%9)
001AFF ED230D              A  7818    	LEA	HL,IY+%D
001B02 DD7E0F              A  7819    	LD	A,(IX+%F)
001B05 77                  A  7820    	LD	(HL),A
                           A  7821    ; 1940		dir[LDIR_Attr] = AM_LFN;		/* 
                           A  7822    .LINE 1940
                           A  7823    
001B06 ED230B              A  7824    	LEA	HL,IY+%B
001B09 360F                A  7825    	LD	(HL),%F
                           A  7826    ; 1941		dir[LDIR_Type] = 0;
                           A  7827    .LINE 1941
                           A  7828    
001B0B ED230C              A  7829    	LEA	HL,IY+%C
001B0E 3600                A  7830    	LD	(HL),%0
                           A  7831    ; 1942		st_word(dir + LDIR_FstClusLO, 0);
                           A  7832    .LINE 1942
                           A  7833    
001B10 01000000            A  7834    	LD	BC,0
001B14 C5                  A  7835    	PUSH	BC
001B15 ED031A              A  7836    	LEA	BC,IY+%1A
001B18 C5                  A  7837    	PUSH	BC
001B19 CD 06 01 00         A  7838    	CALL	_st_word
001B1D C1                  A  7839    	POP	BC
001B1E C1                  A  7840    	POP	BC
                           A  7841    ; 1943	
                           A  7842    ; 1944		i = (ord - 1) * 13;				/* 
                           A  7843    .LINE 1944
                           A  7844    
001B1F DD7E0C              A  7845    	LD	A,(IX+%C)
001B22 B7ED62              A  7846    	UEXT	HL
001B25 6F                  A  7847    	LD	L,A
001B26 2B                  A  7848    	DEC	HL
001B27 3E0D                A  7849    	LD	A,%D
001B29 CD 00 00 00         A  7850    	CALL	__imul_b
001B2D DD2FF8              A  7851    	LD	(IX+%FFFFFFF8),HL
                           A  7852    ; 1945		s = wc = 0;
                           A  7853    .LINE 1945
                           A  7854    
001B30 DD36FE00            A  7855    	LD	(IX+%FFFFFFFE),%0
001B34 DD36FF00            A  7856    	LD	(IX+%FFFFFFFF),%0
001B38 01000000            A  7857    	LD	BC,0
001B3C DD0FFB              A  7858    	LD	(IX+%FFFFFFFB),BC
                           A  7859    ; 1946		do {
001B3F                     A  7860    L_308:
                           A  7861    .LINE 1946
                           A  7862    
                           A  7863    ; 1947			if (wc != 0xFFFF) wc = lfn[i++]
                           A  7864    .LINE 1947
                           A  7865    
001B3F 4901FFFF            A  7866    	LD.LIS	BC,65535
001B43 DD27FE              A  7867    	LD	HL,(IX+%FFFFFFFE)
001B46 B7                  A  7868    	OR	A,A
001B47 40ED42              A  7869    	SBC.SIS	HL,BC
001B4A 28 17               A  7870    	JR	Z,L_306
001B4C DD27F8              A  7871    	LD	HL,(IX+%FFFFFFF8)
001B4F 29                  A  7872    	ADD	HL,HL
001B50 DD0706              A  7873    	LD	BC,(IX+%6)
001B53 09                  A  7874    	ADD	HL,BC
001B54 ED07                A  7875    	LD	BC,(HL)
001B56 DD71FE              A  7876    	LD	(IX+%FFFFFFFE),C
001B59 DD70FF              A  7877    	LD	(IX+%FFFFFFFF),B
001B5C DD07F8              A  7878    	LD	BC,(IX+%FFFFFFF8)
001B5F 03                  A  7879    	INC	BC
001B60 DD0FF8              A  7880    	LD	(IX+%FFFFFFF8),BC
001B63                     A  7881    L_306:
                           A  7882    ; 1948			st_word(dir + LfnOfs[s], wc);	
                           A  7883    .LINE 1948
                           A  7884    
001B63 DD07FE              A  7885    	LD	BC,(IX+%FFFFFFFE)
001B66 C5                  A  7886    	PUSH	BC
001B67 01 00 00 00         A  7887    	LD	BC,_LfnOfs
001B6B DD27FB              A  7888    	LD	HL,(IX+%FFFFFFFB)
001B6E 09                  A  7889    	ADD	HL,BC
001B6F 7E                  A  7890    	LD	A,(HL)
001B70 B7ED62              A  7891    	UEXT	HL
001B73 6F                  A  7892    	LD	L,A
001B74 DD0709              A  7893    	LD	BC,(IX+%9)
001B77 09                  A  7894    	ADD	HL,BC
001B78 E5                  A  7895    	PUSH	HL
001B79 CD 06 01 00         A  7896    	CALL	_st_word
001B7D C1                  A  7897    	POP	BC
001B7E C1                  A  7898    	POP	BC
                           A  7899    ; 1949			if (wc == 0) wc = 0xFFFF;		
                           A  7900    .LINE 1949
                           A  7901    
001B7F 49010000            A  7902    	LD.LIS	BC,0
001B83 DD27FE              A  7903    	LD	HL,(IX+%FFFFFFFE)
001B86 B7                  A  7904    	OR	A,A
001B87 40ED42              A  7905    	SBC.SIS	HL,BC
001B8A 20 08               A  7906    	JR	NZ,L_309
001B8C DD36FEFF            A  7907    	LD	(IX+%FFFFFFFE),%FF
001B90 DD36FFFF            A  7908    	LD	(IX+%FFFFFFFF),%FF
                           A  7909    ; 1950		} while (++s < 13);
001B94                     A  7910    L_309:
                           A  7911    .LINE 1950
                           A  7912    
001B94 DD07FB              A  7913    	LD	BC,(IX+%FFFFFFFB)
001B97 03                  A  7914    	INC	BC
001B98 DD0FFB              A  7915    	LD	(IX+%FFFFFFFB),BC
001B9B 010D0000            A  7916    	LD	BC,13
001B9F DD27FB              A  7917    	LD	HL,(IX+%FFFFFFFB)
001BA2 B7                  A  7918    	OR	A,A
001BA3 ED42                A  7919    	SBC	HL,BC
001BA5 38 98               A  7920    	JR	C,L_308
                           A  7921    ; 1951		if (wc == 0xFFFF || !lfn[i]) ord |=
                           A  7922    .LINE 1951
                           A  7923    
001BA7 4901FFFF            A  7924    	LD.LIS	BC,65535
001BAB DD27FE              A  7925    	LD	HL,(IX+%FFFFFFFE)
001BAE B7                  A  7926    	OR	A,A
001BAF 40ED42              A  7927    	SBC.SIS	HL,BC
001BB2 28 14               A  7928    	JR	Z,L_311
001BB4 DD27F8              A  7929    	LD	HL,(IX+%FFFFFFF8)
001BB7 29                  A  7930    	ADD	HL,HL
001BB8 DD0706              A  7931    	LD	BC,(IX+%6)
001BBB 09                  A  7932    	ADD	HL,BC
001BBC 49010000            A  7933    	LD.LIS	BC,0
001BC0 ED27                A  7934    	LD	HL,(HL)
001BC2 B7                  A  7935    	OR	A,A
001BC3 40ED42              A  7936    	SBC.SIS	HL,BC
001BC6 20 08               A  7937    	JR	NZ,L_313
001BC8                     A  7938    L_311:
001BC8 DD7E0C              A  7939    	LD	A,(IX+%C)
001BCB CBF7                A  7940    	SET	%6,A
001BCD DD770C              A  7941    	LD	(IX+%C),A
001BD0                     A  7942    L_313:
                           A  7943    ; 1952		dir[LDIR_Ord] = ord;			/* 
                           A  7944    .LINE 1952
                           A  7945    
001BD0 DD2709              A  7946    	LD	HL,(IX+%9)
001BD3 DD7E0C              A  7947    	LD	A,(IX+%C)
001BD6 77                  A  7948    	LD	(HL),A
                           A  7949    ; 1953	}
                           A  7950    .LINE 1953
                           A  7951    
001BD7 DDF9                A  7952    	LD	SP,IX
001BD9 DDE1                A  7953    	POP	IX
001BDB C9                  A  7954    	RET	
                           A  7955    
                           A  7956    
                           A  7957    ;**************************** _put_lfn ********
                           A  7958    ;Name                         Addr/Register   S
                           A  7959    ;_LfnOfs                             STATIC    
                           A  7960    ;i                                     IX-8    
                           A  7961    ;s                                     IX-5    
                           A  7962    ;wc                                    IX-2    
                           A  7963    ;sum                                  IX+15    
                           A  7964    ;ord                                  IX+12    
                           A  7965    ;dir                                   IX+9    
                           A  7966    ;lfn                                   IX+6    
                           A  7967    
                           A  7968    
                           A  7969    ; Stack Frame Size: 26 (bytes)
                           A  7970    ;       Spill Code: -1 (instruction)
                           A  7971    
                           A  7972    
                           A  7973    .ENDFUNC "put_lfn",1953,"_put_lfn"
                           A  7974    ; 1954	
                           A  7975    ; 1955	#endif	/* !FF_FS_READONLY */
                           A  7976    ; 1956	#endif	/* FF_USE_LFN */
                           A  7977    ; 1957	
                           A  7978    ; 1958	
                           A  7979    ; 1959	
                           A  7980    ; 1960	#if FF_USE_LFN && !FF_FS_READONLY
                           A  7981    ; 1961	/*-------------------------------------
                           A  7982    ; 1962	/* FAT-LFN: Create a Numbered SFN      
                           A  7983    ; 1963	/*-------------------------------------
                           A  7984    ; 1964	
                           A  7985    ; 1965	static void gen_numname (
                           A  7986    ; 1966		BYTE* dst,			/* Pointer to t
                           A  7987    ; 1967		const BYTE* src,	/* Pointer to S
                           A  7988    ; 1968		const WCHAR* lfn,	/* Pointer to L
                           A  7989    ; 1969		UINT seq			/* Sequence num
                           A  7990    ; 1970	)
                           A  7991    ; 1971	{
001BDC                     A  7992    _gen_numname:
                           A  7993    .DEFINE "_gen_numname"
                           A  7994    
                           A  7995    .VALUE _gen_numname
                           A  7996    
                           A  7997    .CLASS 3
                           A  7998    
                           A  7999    .TYPE 65
                           A  8000    
                           A  8001    .ENDEF
                           A  8002    
                           A  8003    .BEGFUNC "gen_numname",1971,"_gen_numname"
                           A  8004    
                           A  8005    .LINE 1971
                           A  8006    
                           A  8007    .DEFINE "dst"
                           A  8008    
                           A  8009    .CLASS 65
                           A  8010    
                           A  8011    .VALUE 6
                           A  8012    
                           A  8013    .TYPE 44
                           A  8014    
                           A  8015    .ENDEF
                           A  8016    
                           A  8017    .DEFINE "src"
                           A  8018    
                           A  8019    .CLASS 65
                           A  8020    
                           A  8021    .VALUE 9
                           A  8022    
                           A  8023    .TYPE 204
                           A  8024    
                           A  8025    .ENDEF
                           A  8026    
                           A  8027    .DEFINE "lfn"
                           A  8028    
                           A  8029    .CLASS 65
                           A  8030    
                           A  8031    .VALUE 12
                           A  8032    
                           A  8033    .TYPE 205
                           A  8034    
                           A  8035    .ENDEF
                           A  8036    
                           A  8037    .DEFINE "seq"
                           A  8038    
                           A  8039    .CLASS 65
                           A  8040    
                           A  8041    .VALUE 15
                           A  8042    
                           A  8043    .TYPE 14
                           A  8044    
                           A  8045    .ENDEF
                           A  8046    
                           A  8047    .DEFINE "i"
                           A  8048    
                           A  8049    .CLASS 65
                           A  8050    
                           A  8051    .VALUE -3
                           A  8052    
                           A  8053    .TYPE 14
                           A  8054    
                           A  8055    .ENDEF
                           A  8056    
                           A  8057    .DEFINE "j"
                           A  8058    
                           A  8059    .CLASS 65
                           A  8060    
                           A  8061    .VALUE -6
                           A  8062    
                           A  8063    .TYPE 14
                           A  8064    
                           A  8065    .ENDEF
                           A  8066    
                           A  8067    .DEFINE "c"
                           A  8068    
                           A  8069    .CLASS 65
                           A  8070    
                           A  8071    .VALUE -7
                           A  8072    
                           A  8073    .TYPE 12
                           A  8074    
                           A  8075    .ENDEF
                           A  8076    
                           A  8077    .DEFINE "sreg"
                           A  8078    
                           A  8079    .CLASS 65
                           A  8080    
                           A  8081    .VALUE -11
                           A  8082    
                           A  8083    .TYPE 15
                           A  8084    
                           A  8085    .ENDEF
                           A  8086    
                           A  8087    .DEFINE "wc"
                           A  8088    
                           A  8089    .CLASS 65
                           A  8090    
                           A  8091    .VALUE -13
                           A  8092    
                           A  8093    .TYPE 13
                           A  8094    
                           A  8095    .ENDEF
                           A  8096    
                           A  8097    .DEFINE "ns"
                           A  8098    
                           A  8099    .CLASS 65
                           A  8100    
                           A  8101    .VALUE -33
                           A  8102    
                           A  8103    .DIM 8
                           A  8104    
                           A  8105    .TYPE 108
                           A  8106    
                           A  8107    .ENDEF
                           A  8108    
001BDC DDE5                A  8109    	PUSH	IX
001BDE DD210000 00         A  8110    	LD	IX,0
001BE3 DD39                A  8111    	ADD	IX,SP
001BE5 ED22DC              A  8112    	LEA	HL,IX+%FFFFFFDC
001BE8 F9                  A  8113    	LD	SP,HL
                           A  8114    ; 1972		BYTE ns[8], c;
                           A  8115    ; 1973		UINT i, j;
                           A  8116    ; 1974		WCHAR wc;
                           A  8117    ; 1975		DWORD sreg;
                           A  8118    ; 1976	
                           A  8119    ; 1977	
                           A  8120    ; 1978		memcpy(dst, src, 11);	/* Prepare 
                           A  8121    .LINE 1978
                           A  8122    
001BE9 010B0000            A  8123    	LD	BC,11
001BED C5                  A  8124    	PUSH	BC
001BEE DD0709              A  8125    	LD	BC,(IX+%9)
001BF1 C5                  A  8126    	PUSH	BC
001BF2 DD0706              A  8127    	LD	BC,(IX+%6)
001BF5 C5                  A  8128    	PUSH	BC
001BF6 CD 00 00 00         A  8129    	CALL	_memcpy
001BFA C1                  A  8130    	POP	BC
001BFB C1                  A  8131    	POP	BC
001BFC C1                  A  8132    	POP	BC
                           A  8133    ; 1979	
                           A  8134    ; 1980		if (seq > 5) {	/* In case of many 
                           A  8135    .LINE 1980
                           A  8136    
001BFD DD070F              A  8137    	LD	BC,(IX+%F)
001C00 21050000            A  8138    	LD	HL,5
001C04 B7                  A  8139    	OR	A,A
001C05 ED42                A  8140    	SBC	HL,BC
001C07 D2 D0 1C 00         A  8141    	JR	NC,L_325
                           A  8142    ; 1981			sreg = seq;
                           A  8143    .LINE 1981
                           A  8144    
001C0B DD070F              A  8145    	LD	BC,(IX+%F)
001C0E AF                  A  8146    	XOR	A,A
001C0F DD0FF5              A  8147    	LD	(IX+%FFFFFFF5),BC
001C12 DD77F8              A  8148    	LD	(IX+%FFFFFFF8),A
                           A  8149    ; 1982			while (*lfn) {	/* Create a CRC
                           A  8150    .LINE 1982
                           A  8151    
001C15 C3 B9 1C 00         A  8152    	JR	L_321
001C19                     A  8153    L_322:
                           A  8154    ; 1983				wc = *lfn++;
                           A  8155    .LINE 1983
                           A  8156    
001C19 DD270C              A  8157    	LD	HL,(IX+%C)
001C1C ED07                A  8158    	LD	BC,(HL)
001C1E DD71F3              A  8159    	LD	(IX+%FFFFFFF3),C
001C21 DD70F4              A  8160    	LD	(IX+%FFFFFFF4),B
001C24 DD310C              A  8161    	LD	IY,(IX+%C)
001C27 ED3302              A  8162    	LEA	IY,IY+%2
001C2A DD3E0C              A  8163    	LD	(IX+%C),IY
                           A  8164    ; 1984				for (i = 0; i < 16; i++) {
                           A  8165    .LINE 1984
                           A  8166    
001C2D 01000000            A  8167    	LD	BC,0
001C31 DD0FFD              A  8168    	LD	(IX+%FFFFFFFD),BC
001C34 18 75               A  8169    	JR	L_320
001C36                     A  8170    L_318:
                           A  8171    ; 1985					sreg = (sreg << 1) + (w
                           A  8172    .LINE 1985
                           A  8173    
001C36 DD07F5              A  8174    	LD	BC,(IX+%FFFFFFF5)
001C39 DD7EF8              A  8175    	LD	A,(IX+%FFFFFFF8)
001C3C 2E01                A  8176    	LD	L,%1
001C3E CD 00 00 00         A  8177    	CALL	__lshl
001C42 DD0FDC              A  8178    	LD	(IX+%FFFFFFDC),BC
001C45 5F                  A  8179    	LD	E,A
001C46 DD7EF3              A  8180    	LD	A,(IX+%FFFFFFF3)
001C49 E601                A  8181    	AND	A,%1
001C4B 4F                  A  8182    	LD	C,A
001C4C 0600                A  8183    	LD	B,%0
001C4E CD 00 00 00         A  8184    	CALL	__stoiu
001C52 E5C1                A  8185    	LD	BC,HL
001C54 AF                  A  8186    	XOR	A,A
001C55 DD27DC              A  8187    	LD	HL,(IX+%FFFFFFDC)
001C58 CD 00 00 00         A  8188    	CALL	__ladd
001C5C DD2FF5              A  8189    	LD	(IX+%FFFFFFF5),HL
001C5F DD73F8              A  8190    	LD	(IX+%FFFFFFF8),E
                           A  8191    ; 1986					wc >>= 1;
                           A  8192    .LINE 1986
                           A  8193    
001C62 DD07F3              A  8194    	LD	BC,(IX+%FFFFFFF3)
001C65 CD 00 00 00         A  8195    	CALL	__stoiu
001C69 3E01                A  8196    	LD	A,%1
001C6B CD 00 00 00         A  8197    	CALL	__ishrs_b
001C6F DD75F3              A  8198    	LD	(IX+%FFFFFFF3),L
001C72 DD74F4              A  8199    	LD	(IX+%FFFFFFF4),H
                           A  8200    ; 1987					if (sreg & 0x10000) sre
                           A  8201    .LINE 1987
                           A  8202    
001C75 DD27F5              A  8203    	LD	HL,(IX+%FFFFFFF5)
001C78 DD5EF8              A  8204    	LD	E,(IX+%FFFFFFF8)
001C7B 01000001            A  8205    	LD	BC,65536
001C7F AF                  A  8206    	XOR	A,A
001C80 CD 00 00 00         A  8207    	CALL	__land
001C84 01000000            A  8208    	LD	BC,0
001C88 AF                  A  8209    	XOR	A,A
001C89 CD 00 00 00         A  8210    	CALL	__lcmpu
001C8D 28 15               A  8211    	JR	Z,L_319
001C8F DD27F5              A  8212    	LD	HL,(IX+%FFFFFFF5)
001C92 DD5EF8              A  8213    	LD	E,(IX+%FFFFFFF8)
001C95 01211001            A  8214    	LD	BC,69665
001C99 AF                  A  8215    	XOR	A,A
001C9A CD 00 00 00         A  8216    	CALL	__lxor
001C9E DD2FF5              A  8217    	LD	(IX+%FFFFFFF5),HL
001CA1 DD73F8              A  8218    	LD	(IX+%FFFFFFF8),E
                           A  8219    ; 1988				}
001CA4                     A  8220    L_319:
                           A  8221    .LINE 1988
                           A  8222    
001CA4 DD07FD              A  8223    	LD	BC,(IX+%FFFFFFFD)
001CA7 03                  A  8224    	INC	BC
001CA8 DD0FFD              A  8225    	LD	(IX+%FFFFFFFD),BC
001CAB                     A  8226    L_320:
001CAB 01100000            A  8227    	LD	BC,16
001CAF DD27FD              A  8228    	LD	HL,(IX+%FFFFFFFD)
001CB2 B7                  A  8229    	OR	A,A
001CB3 ED42                A  8230    	SBC	HL,BC
001CB5 DA 36 1C 00         A  8231    	JR	C,L_318
                           A  8232    ; 1989			}
001CB9                     A  8233    L_321:
                           A  8234    .LINE 1989
                           A  8235    
001CB9 DD270C              A  8236    	LD	HL,(IX+%C)
001CBC 49010000            A  8237    	LD.LIS	BC,0
001CC0 ED27                A  8238    	LD	HL,(HL)
001CC2 B7                  A  8239    	OR	A,A
001CC3 40ED42              A  8240    	SBC.SIS	HL,BC
001CC6 C2 19 1C 00         A  8241    	JR	NZ,L_322
                           A  8242    ; 1990			seq = (UINT)sreg;
                           A  8243    .LINE 1990
                           A  8244    
001CCA DD07F5              A  8245    	LD	BC,(IX+%FFFFFFF5)
001CCD DD0F0F              A  8246    	LD	(IX+%F),BC
                           A  8247    ; 1991		}
001CD0                     A  8248    L_325:
                           A  8249    .LINE 1991
                           A  8250    
                           A  8251    ; 1992	
                           A  8252    ; 1993		/* Make suffix (~ + hexdecimal) */
                           A  8253    ; 1994		i = 7;
                           A  8254    .LINE 1994
                           A  8255    
001CD0 01070000            A  8256    	LD	BC,7
001CD4 DD0FFD              A  8257    	LD	(IX+%FFFFFFFD),BC
                           A  8258    ; 1995		do {
001CD7                     A  8259    L_330:
                           A  8260    .LINE 1995
                           A  8261    
                           A  8262    ; 1996			c = (BYTE)((seq % 16) + '0'); s
                           A  8263    .LINE 1996
                           A  8264    
001CD7 DD7E0F              A  8265    	LD	A,(IX+%F)
001CDA E60F                A  8266    	AND	A,%F
001CDC B7ED62              A  8267    	UEXT	HL
001CDF 6F                  A  8268    	LD	L,A
001CE0 E5FDE1              A  8269    	LD	IY,HL
001CE3 ED2330              A  8270    	LEA	HL,IY+%30
001CE6 DD75F9              A  8271    	LD	(IX+%FFFFFFF9),L
001CE9 DD270F              A  8272    	LD	HL,(IX+%F)
001CEC 3E04                A  8273    	LD	A,%4
001CEE CD 00 00 00         A  8274    	CALL	__ishru_b
001CF2 DD2F0F              A  8275    	LD	(IX+%F),HL
                           A  8276    ; 1997			if (c > '9') c += 7;
                           A  8277    .LINE 1997
                           A  8278    
001CF5 3E39                A  8279    	LD	A,%39
001CF7 DDBEF9              A  8280    	CP	A,(IX+%FFFFFFF9)
001CFA 30 08               A  8281    	JR	NC,L_328
001CFC DD7EF9              A  8282    	LD	A,(IX+%FFFFFFF9)
001CFF C607                A  8283    	ADD	A,%7
001D01 DD77F9              A  8284    	LD	(IX+%FFFFFFF9),A
001D04                     A  8285    L_328:
                           A  8286    ; 1998			ns[i--] = c;
                           A  8287    .LINE 1998
                           A  8288    
001D04 DD07FD              A  8289    	LD	BC,(IX+%FFFFFFFD)
001D07 ED22DF              A  8290    	LEA	HL,IX+%FFFFFFDF
001D0A 09                  A  8291    	ADD	HL,BC
001D0B DD7EF9              A  8292    	LD	A,(IX+%FFFFFFF9)
001D0E 77                  A  8293    	LD	(HL),A
001D0F DD31FD              A  8294    	LD	IY,(IX+%FFFFFFFD)
001D12 ED33FF              A  8295    	LEA	IY,IY+%FFFFFFFF
001D15 DD3EFD              A  8296    	LD	(IX+%FFFFFFFD),IY
                           A  8297    ; 1999		} while (i && seq);
                           A  8298    .LINE 1999
                           A  8299    
001D18 01000000            A  8300    	LD	BC,0
001D1C DD27FD              A  8301    	LD	HL,(IX+%FFFFFFFD)
001D1F B7                  A  8302    	OR	A,A
001D20 ED42                A  8303    	SBC	HL,BC
001D22 28 08               A  8304    	JR	Z,L_332
001D24 DD270F              A  8305    	LD	HL,(IX+%F)
001D27 B7                  A  8306    	OR	A,A
001D28 ED42                A  8307    	SBC	HL,BC
001D2A 20 AB               A  8308    	JR	NZ,L_330
001D2C                     A  8309    L_332:
                           A  8310    ; 2000		ns[i] = '~';
                           A  8311    .LINE 2000
                           A  8312    
001D2C DD07FD              A  8313    	LD	BC,(IX+%FFFFFFFD)
001D2F ED22DF              A  8314    	LEA	HL,IX+%FFFFFFDF
001D32 09                  A  8315    	ADD	HL,BC
001D33 367E                A  8316    	LD	(HL),%7E
                           A  8317    ; 2001	
                           A  8318    ; 2002		/* Append the suffix to the SFN bod
                           A  8319    ; 2003		for (j = 0; j < i && dst[j] != ' ';
                           A  8320    .LINE 2003
                           A  8321    
001D35 01000000            A  8322    	LD	BC,0
001D39 DD0FFA              A  8323    	LD	(IX+%FFFFFFFA),BC
001D3C 18 31               A  8324    	JR	L_341
001D3E                     A  8325    L_339:
                           A  8326    ; 2004			if (dbc_1st(dst[j])) {	/* To a
                           A  8327    .LINE 2004
                           A  8328    
001D3E DD27ED              A  8329    	LD	HL,(IX+%FFFFFFED)
001D41 4E                  A  8330    	LD	C,(HL)
001D42 0600                A  8331    	LD	B,%0
001D44 C5                  A  8332    	PUSH	BC
001D45 CD A2 01 00         A  8333    	CALL	_dbc_1st
001D49 C1                  A  8334    	POP	BC
001D4A 01000000            A  8335    	LD	BC,0
001D4E B7                  A  8336    	OR	A,A
001D4F ED42                A  8337    	SBC	HL,BC
001D51 28 15               A  8338    	JR	Z,L_340
                           A  8339    ; 2005				if (j == i - 1) break;
                           A  8340    .LINE 2005
                           A  8341    
001D53 DD31FD              A  8342    	LD	IY,(IX+%FFFFFFFD)
001D56 ED23FF              A  8343    	LEA	HL,IY+%FFFFFFFF
001D59 DD07FA              A  8344    	LD	BC,(IX+%FFFFFFFA)
001D5C B7                  A  8345    	OR	A,A
001D5D ED42                A  8346    	SBC	HL,BC
001D5F 28 31               A  8347    	JR	Z,L_348
                           A  8348    ; 2006				j++;
                           A  8349    .LINE 2006
                           A  8350    
001D61 DD07FA              A  8351    	LD	BC,(IX+%FFFFFFFA)
001D64 03                  A  8352    	INC	BC
001D65 DD0FFA              A  8353    	LD	(IX+%FFFFFFFA),BC
                           A  8354    ; 2007			}
                           A  8355    ; 2008		}
001D68                     A  8356    L_340:
                           A  8357    .LINE 2008
                           A  8358    
001D68 DD07FA              A  8359    	LD	BC,(IX+%FFFFFFFA)
001D6B 03                  A  8360    	INC	BC
001D6C DD0FFA              A  8361    	LD	(IX+%FFFFFFFA),BC
001D6F                     A  8362    L_341:
001D6F DD07FD              A  8363    	LD	BC,(IX+%FFFFFFFD)
001D72 DD27FA              A  8364    	LD	HL,(IX+%FFFFFFFA)
001D75 B7                  A  8365    	OR	A,A
001D76 ED42                A  8366    	SBC	HL,BC
001D78 30 18               A  8367    	JR	NC,L_348
001D7A DD07FA              A  8368    	LD	BC,(IX+%FFFFFFFA)
001D7D DD2706              A  8369    	LD	HL,(IX+%6)
001D80 09                  A  8370    	ADD	HL,BC
001D81 DD2FED              A  8371    	LD	(IX+%FFFFFFED),HL
001D84 7E                  A  8372    	LD	A,(HL)
001D85 B7ED62              A  8373    	UEXT	HL
001D88 6F                  A  8374    	LD	L,A
001D89 01200000            A  8375    	LD	BC,32
001D8D B7                  A  8376    	OR	A,A
001D8E ED42                A  8377    	SBC	HL,BC
001D90 20 AC               A  8378    	JR	NZ,L_339
                           A  8379    ; 2009		do {	/* Append the suffix */
001D92                     A  8380    L_348:
                           A  8381    .LINE 2009
                           A  8382    
                           A  8383    ; 2010			dst[j++] = (i < 8) ? ns[i++] : 
                           A  8384    .LINE 2010
                           A  8385    
001D92 01080000            A  8386    	LD	BC,8
001D96 DD27FD              A  8387    	LD	HL,(IX+%FFFFFFFD)
001D99 B7                  A  8388    	OR	A,A
001D9A ED42                A  8389    	SBC	HL,BC
001D9C 30 1E               A  8390    	JR	NC,L_346
001D9E DD07FD              A  8391    	LD	BC,(IX+%FFFFFFFD)
001DA1 DD0FE7              A  8392    	LD	(IX+%FFFFFFE7),BC
001DA4 DD07FD              A  8393    	LD	BC,(IX+%FFFFFFFD)
001DA7 03                  A  8394    	INC	BC
001DA8 DD0FFD              A  8395    	LD	(IX+%FFFFFFFD),BC
001DAB DD07E7              A  8396    	LD	BC,(IX+%FFFFFFE7)
001DAE ED22DF              A  8397    	LEA	HL,IX+%FFFFFFDF
001DB1 09                  A  8398    	ADD	HL,BC
001DB2 7E                  A  8399    	LD	A,(HL)
001DB3 B7ED62              A  8400    	UEXT	HL
001DB6 6F                  A  8401    	LD	L,A
001DB7 DD2FF0              A  8402    	LD	(IX+%FFFFFFF0),HL
001DBA 18 07               A  8403    	JR	L_347
001DBC                     A  8404    L_346:
001DBC 01200000            A  8405    	LD	BC,32
001DC0 DD0FF0              A  8406    	LD	(IX+%FFFFFFF0),BC
001DC3                     A  8407    L_347:
001DC3 DD07FA              A  8408    	LD	BC,(IX+%FFFFFFFA)
001DC6 DD0FEA              A  8409    	LD	(IX+%FFFFFFEA),BC
001DC9 DD7EF0              A  8410    	LD	A,(IX+%FFFFFFF0)
001DCC DD07EA              A  8411    	LD	BC,(IX+%FFFFFFEA)
001DCF DD2706              A  8412    	LD	HL,(IX+%6)
001DD2 09                  A  8413    	ADD	HL,BC
001DD3 77                  A  8414    	LD	(HL),A
001DD4 DD07FA              A  8415    	LD	BC,(IX+%FFFFFFFA)
001DD7 03                  A  8416    	INC	BC
001DD8 DD0FFA              A  8417    	LD	(IX+%FFFFFFFA),BC
                           A  8418    ; 2011		} while (j < 8);
                           A  8419    .LINE 2011
                           A  8420    
001DDB 01080000            A  8421    	LD	BC,8
001DDF DD27FA              A  8422    	LD	HL,(IX+%FFFFFFFA)
001DE2 B7                  A  8423    	OR	A,A
001DE3 ED42                A  8424    	SBC	HL,BC
001DE5 38 AB               A  8425    	JR	C,L_348
                           A  8426    ; 2012	}
                           A  8427    .LINE 2012
                           A  8428    
001DE7 DDF9                A  8429    	LD	SP,IX
001DE9 DDE1                A  8430    	POP	IX
001DEB C9                  A  8431    	RET	
                           A  8432    
                           A  8433    
                           A  8434    ;**************************** _gen_numname ****
                           A  8435    ;Name                         Addr/Register   S
                           A  8436    ;_memcpy                             IMPORT  --
                           A  8437    ;ns                                   IX-33    
                           A  8438    ;temp343                              IX-25    
                           A  8439    ;temp342                              IX-22    
                           A  8440    ;G_14                                 IX-19    
                           A  8441    ;temp344                              IX-16    
                           A  8442    ;wc                                   IX-13    
                           A  8443    ;sreg                                 IX-11    
                           A  8444    ;c                                     IX-7    
                           A  8445    ;j                                     IX-6    
                           A  8446    ;i                                     IX-3    
                           A  8447    ;seq                                  IX+15    
                           A  8448    ;lfn                                  IX+12    
                           A  8449    ;src                                   IX+9    
                           A  8450    ;dst                                   IX+6    
                           A  8451    
                           A  8452    
                           A  8453    ; Stack Frame Size: 54 (bytes)
                           A  8454    ;       Spill Code: -1 (instruction)
                           A  8455    
                           A  8456    
                           A  8457    .ENDFUNC "gen_numname",2012,"_gen_numname"
                           A  8458    ; 2013	#endif	/* FF_USE_LFN && !FF_FS_READONL
                           A  8459    ; 2014	
                           A  8460    ; 2015	
                           A  8461    ; 2016	
                           A  8462    ; 2017	#if FF_USE_LFN
                           A  8463    ; 2018	/*-------------------------------------
                           A  8464    ; 2019	/* FAT-LFN: Calculate checksum of an SF
                           A  8465    ; 2020	/*-------------------------------------
                           A  8466    ; 2021	
                           A  8467    ; 2022	static BYTE sum_sfn (
                           A  8468    ; 2023		const BYTE* dir		/* Pointer to t
                           A  8469    ; 2024	)
                           A  8470    ; 2025	{
001DEC                     A  8471    _sum_sfn:
                           A  8472    .DEFINE "_sum_sfn"
                           A  8473    
                           A  8474    .VALUE _sum_sfn
                           A  8475    
                           A  8476    .CLASS 3
                           A  8477    
                           A  8478    .TYPE 76
                           A  8479    
                           A  8480    .ENDEF
                           A  8481    
                           A  8482    .BEGFUNC "sum_sfn",2025,"_sum_sfn"
                           A  8483    
                           A  8484    .LINE 2025
                           A  8485    
                           A  8486    .DEFINE "dir"
                           A  8487    
                           A  8488    .CLASS 65
                           A  8489    
                           A  8490    .VALUE 6
                           A  8491    
                           A  8492    .TYPE 204
                           A  8493    
                           A  8494    .ENDEF
                           A  8495    
                           A  8496    .DEFINE "sum"
                           A  8497    
                           A  8498    .CLASS 65
                           A  8499    
                           A  8500    .VALUE -1
                           A  8501    
                           A  8502    .TYPE 12
                           A  8503    
                           A  8504    .ENDEF
                           A  8505    
                           A  8506    .DEFINE "n"
                           A  8507    
                           A  8508    .CLASS 65
                           A  8509    
                           A  8510    .VALUE -4
                           A  8511    
                           A  8512    .TYPE 14
                           A  8513    
                           A  8514    .ENDEF
                           A  8515    
001DEC DDE5                A  8516    	PUSH	IX
001DEE DD210000 00         A  8517    	LD	IX,0
001DF3 DD39                A  8518    	ADD	IX,SP
001DF5 C5                  A  8519    	PUSH	BC
001DF6 3B                  A  8520    	DEC	SP
                           A  8521    ; 2026		BYTE sum = 0;
                           A  8522    .LINE 2026
                           A  8523    
001DF7 DD36FF00            A  8524    	LD	(IX+%FFFFFFFF),%0
                           A  8525    ; 2027		UINT n = 11;
                           A  8526    .LINE 2027
                           A  8527    
001DFB 010B0000            A  8528    	LD	BC,11
001DFF DD0FFC              A  8529    	LD	(IX+%FFFFFFFC),BC
                           A  8530    ; 2028	
                           A  8531    ; 2029		do {
001E02                     A  8532    L_353:
                           A  8533    .LINE 2029
                           A  8534    
                           A  8535    ; 2030			sum = (sum >> 1) + (sum << 7) +
                           A  8536    .LINE 2030
                           A  8537    
001E02 DD7EFF              A  8538    	LD	A,(IX+%FFFFFFFF)
001E05 B7ED62              A  8539    	UEXT	HL
001E08 6F                  A  8540    	LD	L,A
001E09 3E01                A  8541    	LD	A,%1
001E0B CD 00 00 00         A  8542    	CALL	__ishrs_b
001E0F 0607                A  8543    	LD	B,%7
001E11 DD7EFF              A  8544    	LD	A,(IX+%FFFFFFFF)
001E14 CD 00 00 00         A  8545    	CALL	__bshl
001E18 47                  A  8546    	LD	B,A
001E19 7D                  A  8547    	LD	A,L
001E1A 80                  A  8548    	ADD	A,B
001E1B DD2706              A  8549    	LD	HL,(IX+%6)
001E1E 86                  A  8550    	ADD	A,(HL)
001E1F DD77FF              A  8551    	LD	(IX+%FFFFFFFF),A
001E22 DD0706              A  8552    	LD	BC,(IX+%6)
001E25 03                  A  8553    	INC	BC
001E26 DD0F06              A  8554    	LD	(IX+%6),BC
                           A  8555    ; 2031		} while (--n);
                           A  8556    .LINE 2031
                           A  8557    
001E29 DD31FC              A  8558    	LD	IY,(IX+%FFFFFFFC)
001E2C ED33FF              A  8559    	LEA	IY,IY+%FFFFFFFF
001E2F DD3EFC              A  8560    	LD	(IX+%FFFFFFFC),IY
001E32 01000000            A  8561    	LD	BC,0
001E36 DD27FC              A  8562    	LD	HL,(IX+%FFFFFFFC)
001E39 B7                  A  8563    	OR	A,A
001E3A ED42                A  8564    	SBC	HL,BC
001E3C 20 C4               A  8565    	JR	NZ,L_353
                           A  8566    ; 2032		return sum;
                           A  8567    .LINE 2032
                           A  8568    
001E3E DD7EFF              A  8569    	LD	A,(IX+%FFFFFFFF)
                           A  8570    ; 2033	}
                           A  8571    .LINE 2033
                           A  8572    
001E41 DDF9                A  8573    	LD	SP,IX
001E43 DDE1                A  8574    	POP	IX
001E45 C9                  A  8575    	RET	
                           A  8576    
                           A  8577    
                           A  8578    ;**************************** _sum_sfn ********
                           A  8579    ;Name                         Addr/Register   S
                           A  8580    ;n                                     IX-4    
                           A  8581    ;sum                                   IX-1    
                           A  8582    ;dir                                   IX+6    
                           A  8583    
                           A  8584    
                           A  8585    ; Stack Frame Size: 13 (bytes)
                           A  8586    ;       Spill Code: -1 (instruction)
                           A  8587    
                           A  8588    
                           A  8589    .ENDFUNC "sum_sfn",2033,"_sum_sfn"
                           A  8590    ; 2034	
                           A  8591    ; 2035	#endif	/* FF_USE_LFN */
                           A  8592    ; 2036	
                           A  8593    ; 2037	
                           A  8594    ; 2038	
                           A  8595    ; 2039	#if FF_FS_EXFAT
                           A  8596    ; 2040	/*-------------------------------------
                           A  8597    ; 2041	/* exFAT: Checksum                     
                           A  8598    ; 2042	/*-------------------------------------
                           A  8599    ; 2043	
                           A  8600    ; 2044	static WORD xdir_sum (	/* Get checksum
                           A  8601    ; 2045		const BYTE* dir		/* Directory en
                           A  8602    ; 2046	)
                           A  8603    ; 2047	{
                           A  8604    ; 2048		UINT i, szblk;
                           A  8605    ; 2049		WORD sum;
                           A  8606    ; 2050	
                           A  8607    ; 2051	
                           A  8608    ; 2052		szblk = (dir[XDIR_NumSec] + 1) * SZ
                           A  8609    ; 2053		for (i = sum = 0; i < szblk; i++) {
                           A  8610    ; 2054			if (i == XDIR_SetSum) {	/* Skip
                           A  8611    ; 2055				i++;
                           A  8612    ; 2056			} else {
                           A  8613    ; 2057				sum = ((sum & 1) ? 0x8000 :
                           A  8614    ; 2058			}
                           A  8615    ; 2059		}
                           A  8616    ; 2060		return sum;
                           A  8617    ; 2061	}
                           A  8618    ; 2062	
                           A  8619    ; 2063	
                           A  8620    ; 2064	
                           A  8621    ; 2065	static WORD xname_sum (	/* Get check su
                           A  8622    ; 2066		const WCHAR* name	/* File name to
                           A  8623    ; 2067	)
                           A  8624    ; 2068	{
                           A  8625    ; 2069		WCHAR chr;
                           A  8626    ; 2070		WORD sum = 0;
                           A  8627    ; 2071	
                           A  8628    ; 2072	
                           A  8629    ; 2073		while ((chr = *name++) != 0) {
                           A  8630    ; 2074			chr = (WCHAR)ff_wtoupper(chr);	
                           A  8631    ; 2075			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  8632    ; 2076			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  8633    ; 2077		}
                           A  8634    ; 2078		return sum;
                           A  8635    ; 2079	}
                           A  8636    ; 2080	
                           A  8637    ; 2081	
                           A  8638    ; 2082	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  8639    ; 2083	static DWORD xsum32 (	/* Returns 32-b
                           A  8640    ; 2084		BYTE  dat,			/* Byte to be c
                           A  8641    ; 2085		DWORD sum			/* Previous sum
                           A  8642    ; 2086	)
                           A  8643    ; 2087	{
                           A  8644    ; 2088		sum = ((sum & 1) ? 0x80000000 : 0) 
                           A  8645    ; 2089		return sum;
                           A  8646    ; 2090	}
                           A  8647    ; 2091	#endif
                           A  8648    ; 2092	
                           A  8649    ; 2093	
                           A  8650    ; 2094	
                           A  8651    ; 2095	/*-----------------------------------*/
                           A  8652    ; 2096	/* exFAT: Get a directry entry block */
                           A  8653    ; 2097	/*-----------------------------------*/
                           A  8654    ; 2098	
                           A  8655    ; 2099	static FRESULT load_xdir (	/* FR_INT_E
                           A  8656    ; 2100		DIR* dp					/* Reading 
                           A  8657    ; 2101	)
                           A  8658    ; 2102	{
                           A  8659    ; 2103		FRESULT res;
                           A  8660    ; 2104		UINT i, sz_ent;
                           A  8661    ; 2105		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  8662    ; 2106	
                           A  8663    ; 2107	
                           A  8664    ; 2108		/* Load file directory entry */
                           A  8665    ; 2109		res = move_window(dp->obj.fs, dp->s
                           A  8666    ; 2110		if (res != FR_OK) return res;
                           A  8667    ; 2111		if (dp->dir[XDIR_Type] != ET_FILEDI
                           A  8668    ; 2112		memcpy(dirb + 0 * SZDIRE, dp->dir, 
                           A  8669    ; 2113		sz_ent = (dirb[XDIR_NumSec] + 1) * 
                           A  8670    ; 2114		if (sz_ent < 3 * SZDIRE || sz_ent >
                           A  8671    ; 2115	
                           A  8672    ; 2116		/* Load stream extension entry */
                           A  8673    ; 2117		res = dir_next(dp, 0);
                           A  8674    ; 2118		if (res == FR_NO_FILE) res = FR_INT
                           A  8675    ; 2119		if (res != FR_OK) return res;
                           A  8676    ; 2120		res = move_window(dp->obj.fs, dp->s
                           A  8677    ; 2121		if (res != FR_OK) return res;
                           A  8678    ; 2122		if (dp->dir[XDIR_Type] != ET_STREAM
                           A  8679    ; 2123		memcpy(dirb + 1 * SZDIRE, dp->dir, 
                           A  8680    ; 2124		if (MAXDIRB(dirb[XDIR_NumName]) > s
                           A  8681    ; 2125	
                           A  8682    ; 2126		/* Load file name entries */
                           A  8683    ; 2127		i = 2 * SZDIRE;	/* Name offset to l
                           A  8684    ; 2128		do {
                           A  8685    ; 2129			res = dir_next(dp, 0);
                           A  8686    ; 2130			if (res == FR_NO_FILE) res = FR
                           A  8687    ; 2131			if (res != FR_OK) return res;
                           A  8688    ; 2132			res = move_window(dp->obj.fs, d
                           A  8689    ; 2133			if (res != FR_OK) return res;
                           A  8690    ; 2134			if (dp->dir[XDIR_Type] != ET_FI
                           A  8691    ; 2135			if (i < MAXDIRB(FF_MAX_LFN)) me
                           A  8692    ; 2136		} while ((i += SZDIRE) < sz_ent);
                           A  8693    ; 2137	
                           A  8694    ; 2138		/* Sanity check (do it for only acc
                           A  8695    ; 2139		if (i <= MAXDIRB(FF_MAX_LFN)) {
                           A  8696    ; 2140			if (xdir_sum(dirb) != ld_word(d
                           A  8697    ; 2141		}
                           A  8698    ; 2142		return FR_OK;
                           A  8699    ; 2143	}
                           A  8700    ; 2144	
                           A  8701    ; 2145	
                           A  8702    ; 2146	/*-------------------------------------
                           A  8703    ; 2147	/* exFAT: Initialize object allocation 
                           A  8704    ; 2148	/*-------------------------------------
                           A  8705    ; 2149	
                           A  8706    ; 2150	static void init_alloc_info (
                           A  8707    ; 2151		FATFS* fs,		/* Filesystem objec
                           A  8708    ; 2152		FFOBJID* obj	/* Object allocatio
                           A  8709    ; 2153	)
                           A  8710    ; 2154	{
                           A  8711    ; 2155		obj->sclust = ld_dword(fs->dirbuf +
                           A  8712    ; 2156		obj->objsize = ld_qword(fs->dirbuf 
                           A  8713    ; 2157		obj->stat = fs->dirbuf[XDIR_GenFlag
                           A  8714    ; 2158		obj->n_frag = 0;					
                           A  8715    ; 2159	}
                           A  8716    ; 2160	
                           A  8717    ; 2161	
                           A  8718    ; 2162	
                           A  8719    ; 2163	#if !FF_FS_READONLY || FF_FS_RPATH != 0
                           A  8720    ; 2164	/*-------------------------------------
                           A  8721    ; 2165	/* exFAT: Load the object's directory e
                           A  8722    ; 2166	/*-------------------------------------
                           A  8723    ; 2167	
                           A  8724    ; 2168	static FRESULT load_obj_xdir (
                           A  8725    ; 2169		DIR* dp,			/* Blank direct
                           A  8726    ; 2170		const FFOBJID* obj	/* Object with 
                           A  8727    ; 2171	)
                           A  8728    ; 2172	{
                           A  8729    ; 2173		FRESULT res;
                           A  8730    ; 2174	
                           A  8731    ; 2175		/* Open object containing directory
                           A  8732    ; 2176		dp->obj.fs = obj->fs;
                           A  8733    ; 2177		dp->obj.sclust = obj->c_scl;
                           A  8734    ; 2178		dp->obj.stat = (BYTE)obj->c_size;
                           A  8735    ; 2179		dp->obj.objsize = obj->c_size & 0xF
                           A  8736    ; 2180		dp->obj.n_frag = 0;
                           A  8737    ; 2181		dp->blk_ofs = obj->c_ofs;
                           A  8738    ; 2182	
                           A  8739    ; 2183		res = dir_sdi(dp, dp->blk_ofs);	/* 
                           A  8740    ; 2184		if (res == FR_OK) {
                           A  8741    ; 2185			res = load_xdir(dp);		/* 
                           A  8742    ; 2186		}
                           A  8743    ; 2187		return res;
                           A  8744    ; 2188	}
                           A  8745    ; 2189	#endif
                           A  8746    ; 2190	
                           A  8747    ; 2191	
                           A  8748    ; 2192	#if !FF_FS_READONLY
                           A  8749    ; 2193	/*-------------------------------------
                           A  8750    ; 2194	/* exFAT: Store the directory entry blo
                           A  8751    ; 2195	/*-------------------------------------
                           A  8752    ; 2196	
                           A  8753    ; 2197	static FRESULT store_xdir (
                           A  8754    ; 2198		DIR* dp				/* Pointer to t
                           A  8755    ; 2199	)
                           A  8756    ; 2200	{
                           A  8757    ; 2201		FRESULT res;
                           A  8758    ; 2202		UINT nent;
                           A  8759    ; 2203		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  8760    ; 2204	
                           A  8761    ; 2205		/* Create set sum */
                           A  8762    ; 2206		st_word(dirb + XDIR_SetSum, xdir_su
                           A  8763    ; 2207		nent = dirb[XDIR_NumSec] + 1;
                           A  8764    ; 2208	
                           A  8765    ; 2209		/* Store the direcotry entry block 
                           A  8766    ; 2210		res = dir_sdi(dp, dp->blk_ofs);
                           A  8767    ; 2211		while (res == FR_OK) {
                           A  8768    ; 2212			res = move_window(dp->obj.fs, d
                           A  8769    ; 2213			if (res != FR_OK) break;
                           A  8770    ; 2214			memcpy(dp->dir, dirb, SZDIRE);
                           A  8771    ; 2215			dp->obj.fs->wflag = 1;
                           A  8772    ; 2216			if (--nent == 0) break;
                           A  8773    ; 2217			dirb += SZDIRE;
                           A  8774    ; 2218			res = dir_next(dp, 0);
                           A  8775    ; 2219		}
                           A  8776    ; 2220		return (res == FR_OK || res == FR_D
                           A  8777    ; 2221	}
                           A  8778    ; 2222	
                           A  8779    ; 2223	
                           A  8780    ; 2224	
                           A  8781    ; 2225	/*-------------------------------------
                           A  8782    ; 2226	/* exFAT: Create a new directory enrty 
                           A  8783    ; 2227	/*-------------------------------------
                           A  8784    ; 2228	
                           A  8785    ; 2229	static void create_xdir (
                           A  8786    ; 2230		BYTE* dirb,			/* Pointer to t
                           A  8787    ; 2231		const WCHAR* lfn	/* Pointer to t
                           A  8788    ; 2232	)
                           A  8789    ; 2233	{
                           A  8790    ; 2234		UINT i;
                           A  8791    ; 2235		BYTE nc1, nlen;
                           A  8792    ; 2236		WCHAR wc;
                           A  8793    ; 2237	
                           A  8794    ; 2238	
                           A  8795    ; 2239		/* Create file-directory and stream
                           A  8796    ; 2240		memset(dirb, 0, 2 * SZDIRE);
                           A  8797    ; 2241		dirb[0 * SZDIRE + XDIR_Type] = ET_F
                           A  8798    ; 2242		dirb[1 * SZDIRE + XDIR_Type] = ET_S
                           A  8799    ; 2243	
                           A  8800    ; 2244		/* Create file-name entries */
                           A  8801    ; 2245		i = SZDIRE * 2;	/* Top of file_name
                           A  8802    ; 2246		nlen = nc1 = 0; wc = 1;
                           A  8803    ; 2247		do {
                           A  8804    ; 2248			dirb[i++] = ET_FILENAME; dirb[i
                           A  8805    ; 2249			do {	/* Fill name field */
                           A  8806    ; 2250				if (wc != 0 && (wc = lfn[nl
                           A  8807    ; 2251				st_word(dirb + i, wc); 	/* 
                           A  8808    ; 2252				i += 2;
                           A  8809    ; 2253			} while (i % SZDIRE != 0);
                           A  8810    ; 2254			nc1++;
                           A  8811    ; 2255		} while (lfn[nlen]);	/* Fill nex
                           A  8812    ; 2256	
                           A  8813    ; 2257		dirb[XDIR_NumName] = nlen;		/* 
                           A  8814    ; 2258		dirb[XDIR_NumSec] = 1 + nc1;	/* 
                           A  8815    ; 2259		st_word(dirb + XDIR_NameHash, xname
                           A  8816    ; 2260	}
                           A  8817    ; 2261	
                           A  8818    ; 2262	#endif	/* !FF_FS_READONLY */
                           A  8819    ; 2263	#endif	/* FF_FS_EXFAT */
                           A  8820    ; 2264	
                           A  8821    ; 2265	
                           A  8822    ; 2266	
                           A  8823    ; 2267	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  8824    ; 2268	/*-------------------------------------
                           A  8825    ; 2269	/* Read an object from the directory   
                           A  8826    ; 2270	/*-------------------------------------
                           A  8827    ; 2271	
                           A  8828    ; 2272	#define DIR_READ_FILE(dp) dir_read(dp, 
                           A  8829    ; 2273	#define DIR_READ_LABEL(dp) dir_read(dp,
                           A  8830    ; 2274	
                           A  8831    ; 2275	static FRESULT dir_read (
                           A  8832    ; 2276		DIR* dp,		/* Pointer to the d
                           A  8833    ; 2277		int vol			/* Filtered by 0:fi
                           A  8834    ; 2278	)
                           A  8835    ; 2279	{
001E46                     A  8836    _dir_read:
                           A  8837    .DEFINE "_dir_read"
                           A  8838    
                           A  8839    .VALUE _dir_read
                           A  8840    
                           A  8841    .CLASS 3
                           A  8842    
                           A  8843    .TYPE 68
                           A  8844    
                           A  8845    .ENDEF
                           A  8846    
                           A  8847    .BEGFUNC "dir_read",2279,"_dir_read"
                           A  8848    
                           A  8849    .LINE 2279
                           A  8850    
                           A  8851    .DEFINE "dp"
                           A  8852    
                           A  8853    .CLASS 65
                           A  8854    
                           A  8855    .VALUE 6
                           A  8856    
                           A  8857    .TAG "NONAME3"
                           A  8858    
                           A  8859    .TYPE 40
                           A  8860    
                           A  8861    .ENDEF
                           A  8862    
                           A  8863    .DEFINE "vol"
                           A  8864    
                           A  8865    .CLASS 65
                           A  8866    
                           A  8867    .VALUE 9
                           A  8868    
                           A  8869    .TYPE 4
                           A  8870    
                           A  8871    .ENDEF
                           A  8872    
                           A  8873    .DEFINE "b"
                           A  8874    
                           A  8875    .CLASS 65
                           A  8876    
                           A  8877    .VALUE -1
                           A  8878    
                           A  8879    .TYPE 12
                           A  8880    
                           A  8881    .ENDEF
                           A  8882    
                           A  8883    .DEFINE "ord"
                           A  8884    
                           A  8885    .CLASS 65
                           A  8886    
                           A  8887    .VALUE -2
                           A  8888    
                           A  8889    .TYPE 12
                           A  8890    
                           A  8891    .ENDEF
                           A  8892    
                           A  8893    .DEFINE "res"
                           A  8894    
                           A  8895    .CLASS 65
                           A  8896    
                           A  8897    .VALUE -5
                           A  8898    
                           A  8899    .TYPE 4
                           A  8900    
                           A  8901    .ENDEF
                           A  8902    
                           A  8903    .DEFINE "attr"
                           A  8904    
                           A  8905    .CLASS 65
                           A  8906    
                           A  8907    .VALUE -6
                           A  8908    
                           A  8909    .TYPE 12
                           A  8910    
                           A  8911    .ENDEF
                           A  8912    
                           A  8913    .DEFINE "sum"
                           A  8914    
                           A  8915    .CLASS 65
                           A  8916    
                           A  8917    .VALUE -7
                           A  8918    
                           A  8919    .TYPE 12
                           A  8920    
                           A  8921    .ENDEF
                           A  8922    
                           A  8923    .DEFINE "fs"
                           A  8924    
                           A  8925    .CLASS 65
                           A  8926    
                           A  8927    .VALUE -10
                           A  8928    
                           A  8929    .TAG "NONAME0"
                           A  8930    
                           A  8931    .TYPE 40
                           A  8932    
                           A  8933    .ENDEF
                           A  8934    
001E46 DDE5                A  8935    	PUSH	IX
001E48 DD210000 00         A  8936    	LD	IX,0
001E4D DD39                A  8937    	ADD	IX,SP
001E4F ED22E9              A  8938    	LEA	HL,IX+%FFFFFFE9
001E52 F9                  A  8939    	LD	SP,HL
                           A  8940    ; 2280		FRESULT res = FR_NO_FILE;
                           A  8941    .LINE 2280
                           A  8942    
001E53 01040000            A  8943    	LD	BC,4
001E57 DD0FFB              A  8944    	LD	(IX+%FFFFFFFB),BC
                           A  8945    ; 2281		FATFS *fs = dp->obj.fs;
                           A  8946    .LINE 2281
                           A  8947    
001E5A DD3106              A  8948    	LD	IY,(IX+%6)
001E5D FD0700              A  8949    	LD	BC,(IY+%0)
001E60 DD0FF6              A  8950    	LD	(IX+%FFFFFFF6),BC
                           A  8951    ; 2282		BYTE attr, b;
                           A  8952    ; 2283	#if FF_USE_LFN
                           A  8953    ; 2284		BYTE ord = 0xFF, sum = 0xFF;
                           A  8954    .LINE 2284
                           A  8955    
001E63 DD36FEFF            A  8956    	LD	(IX+%FFFFFFFE),%FF
001E67 DD36F9FF            A  8957    	LD	(IX+%FFFFFFF9),%FF
                           A  8958    ; 2285	#endif
                           A  8959    ; 2286	
                           A  8960    ; 2287		while (dp->sect) {
                           A  8961    .LINE 2287
                           A  8962    
001E6B C3 C0 1F 00         A  8963    	JR	L_380
001E6F                     A  8964    L_381:
                           A  8965    ; 2288			res = move_window(fs, dp->sect)
                           A  8966    .LINE 2288
                           A  8967    
001E6F DD4EEC              A  8968    	LD	C,(IX+%FFFFFFEC)
001E72 0600                A  8969    	LD	B,%0
001E74 C5                  A  8970    	PUSH	BC
001E75 DD07E9              A  8971    	LD	BC,(IX+%FFFFFFE9)
001E78 C5                  A  8972    	PUSH	BC
001E79 DD07F6              A  8973    	LD	BC,(IX+%FFFFFFF6)
001E7C C5                  A  8974    	PUSH	BC
001E7D CD 1E 04 00         A  8975    	CALL	_move_window
001E81 C1                  A  8976    	POP	BC
001E82 C1                  A  8977    	POP	BC
001E83 C1                  A  8978    	POP	BC
001E84 DD2FFB              A  8979    	LD	(IX+%FFFFFFFB),HL
                           A  8980    ; 2289			if (res != FR_OK) break;
                           A  8981    .LINE 2289
                           A  8982    
001E87 01000000            A  8983    	LD	BC,0
001E8B DD27FB              A  8984    	LD	HL,(IX+%FFFFFFFB)
001E8E B7                  A  8985    	OR	A,A
001E8F ED42                A  8986    	SBC	HL,BC
001E91 C2 E1 1F 00         A  8987    	JR	NZ,L_383
                           A  8988    ; 2290			b = dp->dir[DIR_Name];	/* Test
                           A  8989    .LINE 2290
                           A  8990    
001E95 DD3106              A  8991    	LD	IY,(IX+%6)
001E98 FD071B              A  8992    	LD	BC,(IY+%1B)
001E9B DD0FF0              A  8993    	LD	(IX+%FFFFFFF0),BC
001E9E C5E1                A  8994    	LD	HL,BC
001EA0 7E                  A  8995    	LD	A,(HL)
001EA1 DD77FF              A  8996    	LD	(IX+%FFFFFFFF),A
                           A  8997    ; 2291			if (b == 0) {
                           A  8998    .LINE 2291
                           A  8999    
001EA4 B7                  A  9000    	OR	A,A
001EA5 20 0B               A  9001    	JR	NZ,L_377
                           A  9002    ; 2292				res = FR_NO_FILE; break; /*
                           A  9003    .LINE 2292
                           A  9004    
001EA7 01040000            A  9005    	LD	BC,4
001EAB DD0FFB              A  9006    	LD	(IX+%FFFFFFFB),BC
001EAE C3 E1 1F 00         A  9007    	JR	L_383
                           A  9008    ; 2293			}
001EB2                     A  9009    L_377:
                           A  9010    .LINE 2293
                           A  9011    
                           A  9012    ; 2294	#if FF_FS_EXFAT
                           A  9013    ; 2295			if (fs->fs_type == FS_EXFAT) {	
                           A  9014    ; 2296				if (FF_USE_LABEL && vol) {
                           A  9015    ; 2297					if (b == ET_VLABEL) bre
                           A  9016    ; 2298				} else {
                           A  9017    ; 2299					if (b == ET_FILEDIR) {	
                           A  9018    ; 2300						dp->blk_ofs = dp->d
                           A  9019    ; 2301						res = load_xdir(dp)
                           A  9020    ; 2302						if (res == FR_OK) {
                           A  9021    ; 2303							dp->obj.attr = 
                           A  9022    ; 2304						}
                           A  9023    ; 2305						break;
                           A  9024    ; 2306					}
                           A  9025    ; 2307				}
                           A  9026    ; 2308			} else
                           A  9027    ; 2309	#endif
                           A  9028    ; 2310			{	/* On the FAT/FAT32 volume 
                           A  9029    ; 2311				dp->obj.attr = attr = dp->d
                           A  9030    .LINE 2311
                           A  9031    
001EB2 DD31F0              A  9032    	LD	IY,(IX+%FFFFFFF0)
001EB5 FD7E0B              A  9033    	LD	A,(IY+%B)
001EB8 E63F                A  9034    	AND	A,%3F
001EBA DD77FA              A  9035    	LD	(IX+%FFFFFFFA),A
001EBD DD3106              A  9036    	LD	IY,(IX+%6)
001EC0 FD7705              A  9037    	LD	(IY+%5),A
                           A  9038    ; 2312	#if FF_USE_LFN		/* LFN configuratio
                           A  9039    ; 2313				if (b == DDEM || b == '.' |
                           A  9040    .LINE 2313
                           A  9041    
001EC3 DD7EFF              A  9042    	LD	A,(IX+%FFFFFFFF)
001EC6 FEE5                A  9043    	CP	A,%E5
001EC8 28 23               A  9044    	JR	Z,L_375
001ECA DD7EFF              A  9045    	LD	A,(IX+%FFFFFFFF)
001ECD FE2E                A  9046    	CP	A,%2E
001ECF 28 1C               A  9047    	JR	Z,L_375
001ED1 DD7EFA              A  9048    	LD	A,(IX+%FFFFFFFA)
001ED4 CBAF                A  9049    	RES	%5,A
001ED6 FE08                A  9050    	CP	A,%8
001ED8 20 04               A  9051    	JR	NZ,L__190
001EDA 0601                A  9052    	LD	B,%1
001EDC 18 02               A  9053    	JR	L__191
001EDE                     A  9054    L__190:
001EDE 0600                A  9055    	LD	B,%0
001EE0                     A  9056    L__191:
001EE0 78                  A  9057    	LD	A,B
001EE1 17ED62              A  9058    	SEXT	HL
001EE4 68                  A  9059    	LD	L,B
001EE5 DD0709              A  9060    	LD	BC,(IX+%9)
001EE8 B7                  A  9061    	OR	A,A
001EE9 ED42                A  9062    	SBC	HL,BC
001EEB 28 08               A  9063    	JR	Z,L_376
001EED                     A  9064    L_375:
                           A  9065    ; 2314					ord = 0xFF;
                           A  9066    .LINE 2314
                           A  9067    
001EED DD36FEFF            A  9068    	LD	(IX+%FFFFFFFE),%FF
                           A  9069    ; 2315				} else {
                           A  9070    .LINE 2315
                           A  9071    
001EF1 C3 A2 1F 00         A  9072    	JR	L_378
001EF5                     A  9073    L_376:
                           A  9074    ; 2316					if (attr == AM_LFN) {	
                           A  9075    .LINE 2316
                           A  9076    
001EF5 DD7EFA              A  9077    	LD	A,(IX+%FFFFFFFA)
001EF8 FE0F                A  9078    	CP	A,%F
001EFA 20 7F               A  9079    	JR	NZ,L_374
                           A  9080    ; 2317						if (b & LLEF) {		
                           A  9081    .LINE 2317
                           A  9082    
001EFC DD7EFF              A  9083    	LD	A,(IX+%FFFFFFFF)
001EFF E640                A  9084    	AND	A,%40
001F01 28 26               A  9085    	JR	Z,L_369
                           A  9086    ; 2318							sum = dp->dir[L
                           A  9087    .LINE 2318
                           A  9088    
001F03 DD3106              A  9089    	LD	IY,(IX+%6)
001F06 FD371B              A  9090    	LD	IY,(IY+%1B)
001F09 FD7E0D              A  9091    	LD	A,(IY+%D)
001F0C DD77F9              A  9092    	LD	(IX+%FFFFFFF9),A
                           A  9093    ; 2319							b &= (BYTE)~LLE
                           A  9094    .LINE 2319
                           A  9095    
001F0F DD7EFF              A  9096    	LD	A,(IX+%FFFFFFFF)
001F12 CBB7                A  9097    	RES	%6,A
001F14 DD77FF              A  9098    	LD	(IX+%FFFFFFFF),A
001F17 DD77FE              A  9099    	LD	(IX+%FFFFFFFE),A
                           A  9100    ; 2320							dp->blk_ofs = d
                           A  9101    .LINE 2320
                           A  9102    
001F1A DD3106              A  9103    	LD	IY,(IX+%6)
001F1D FD070F              A  9104    	LD	BC,(IY+%F)
001F20 FD7E12              A  9105    	LD	A,(IY+%12)
001F23 FD0F2A              A  9106    	LD	(IY+%2A),BC
001F26 FD772D              A  9107    	LD	(IY+%2D),A
                           A  9108    ; 2321						}
001F29                     A  9109    L_369:
                           A  9110    .LINE 2321
                           A  9111    
                           A  9112    ; 2322						/* Check LFN validi
                           A  9113    ; 2323						ord = (b == ord && 
                           A  9114    .LINE 2323
                           A  9115    
001F29 DD7EFF              A  9116    	LD	A,(IX+%FFFFFFFF)
001F2C DDBEFE              A  9117    	CP	A,(IX+%FFFFFFFE)
001F2F 20 3B               A  9118    	JR	NZ,L_367
001F31 DD3106              A  9119    	LD	IY,(IX+%6)
001F34 FD071B              A  9120    	LD	BC,(IY+%1B)
001F37 DD0FED              A  9121    	LD	(IX+%FFFFFFED),BC
001F3A DD31ED              A  9122    	LD	IY,(IX+%FFFFFFED)
001F3D FD7E0D              A  9123    	LD	A,(IY+%D)
001F40 DDBEF9              A  9124    	CP	A,(IX+%FFFFFFF9)
001F43 20 27               A  9125    	JR	NZ,L_367
001F45 DD07ED              A  9126    	LD	BC,(IX+%FFFFFFED)
001F48 C5                  A  9127    	PUSH	BC
001F49 DD31F6              A  9128    	LD	IY,(IX+%FFFFFFF6)
001F4C FD070B              A  9129    	LD	BC,(IY+%B)
001F4F C5                  A  9130    	PUSH	BC
001F50 CD DD 19 00         A  9131    	CALL	_pick_lfn
001F54 C1                  A  9132    	POP	BC
001F55 C1                  A  9133    	POP	BC
001F56 01000000            A  9134    	LD	BC,0
001F5A B7                  A  9135    	OR	A,A
001F5B ED42                A  9136    	SBC	HL,BC
001F5D 28 0D               A  9137    	JR	Z,L_367
001F5F DD7EFE              A  9138    	LD	A,(IX+%FFFFFFFE)
001F62 B7ED62              A  9139    	UEXT	HL
001F65 6F                  A  9140    	LD	L,A
001F66 2B                  A  9141    	DEC	HL
001F67 DD2FF3              A  9142    	LD	(IX+%FFFFFFF3),HL
001F6A 18 07               A  9143    	JR	L_368
001F6C                     A  9144    L_367:
001F6C 01FF0000            A  9145    	LD	BC,255
001F70 DD0FF3              A  9146    	LD	(IX+%FFFFFFF3),BC
001F73                     A  9147    L_368:
001F73 DD7EF3              A  9148    	LD	A,(IX+%FFFFFFF3)
001F76 DD77FE              A  9149    	LD	(IX+%FFFFFFFE),A
                           A  9150    ; 2324					} else {				
                           A  9151    .LINE 2324
                           A  9152    
001F79 18 27               A  9153    	JR	L_378
001F7B                     A  9154    L_374:
                           A  9155    ; 2325						if (ord != 0 || sum
                           A  9156    .LINE 2325
                           A  9157    
001F7B DD7EFE              A  9158    	LD	A,(IX+%FFFFFFFE)
001F7E B7                  A  9159    	OR	A,A
001F7F 20 11               A  9160    	JR	NZ,L_371
001F81 DD3106              A  9161    	LD	IY,(IX+%6)
001F84 FD071B              A  9162    	LD	BC,(IY+%1B)
001F87 C5                  A  9163    	PUSH	BC
001F88 CD EC 1D 00         A  9164    	CALL	_sum_sfn
001F8C C1                  A  9165    	POP	BC
001F8D DDBEF9              A  9166    	CP	A,(IX+%FFFFFFF9)
001F90 28 4F               A  9167    	JR	Z,L_383
001F92                     A  9168    L_371:
                           A  9169    ; 2326							dp->blk_ofs = 0
                           A  9170    .LINE 2326
                           A  9171    
001F92 01FFFFFF            A  9172    	LD	BC,16777215
001F96 DD3106              A  9173    	LD	IY,(IX+%6)
001F99 FD0F2A              A  9174    	LD	(IY+%2A),BC
001F9C FD362DFF            A  9175    	LD	(IY+%2D),%FF
                           A  9176    ; 2327						}
                           A  9177    .LINE 2327
                           A  9178    
                           A  9179    ; 2328						break;
                           A  9180    .LINE 2328
                           A  9181    
001FA0 18 3F               A  9182    	JR	L_383
                           A  9183    ; 2329					}
                           A  9184    ; 2330				}
                           A  9185    ; 2331	#else		/* Non LFN configuration */
                           A  9186    ; 2332				if (b != DDEM && b != '.' &
                           A  9187    ; 2333					break;
                           A  9188    ; 2334				}
                           A  9189    ; 2335	#endif
                           A  9190    ; 2336			}
001FA2                     A  9191    L_378:
                           A  9192    .LINE 2336
                           A  9193    
                           A  9194    ; 2337			res = dir_next(dp, 0);		/* 
                           A  9195    .LINE 2337
                           A  9196    
001FA2 01000000            A  9197    	LD	BC,0
001FA6 C5                  A  9198    	PUSH	BC
001FA7 DD0706              A  9199    	LD	BC,(IX+%6)
001FAA C5                  A  9200    	PUSH	BC
001FAB CD 6A 14 00         A  9201    	CALL	_dir_next
001FAF C1                  A  9202    	POP	BC
001FB0 C1                  A  9203    	POP	BC
001FB1 DD2FFB              A  9204    	LD	(IX+%FFFFFFFB),HL
                           A  9205    ; 2338			if (res != FR_OK) break;
                           A  9206    .LINE 2338
                           A  9207    
001FB4 01000000            A  9208    	LD	BC,0
001FB8 DD27FB              A  9209    	LD	HL,(IX+%FFFFFFFB)
001FBB B7                  A  9210    	OR	A,A
001FBC ED42                A  9211    	SBC	HL,BC
001FBE 20 21               A  9212    	JR	NZ,L_383
                           A  9213    ; 2339		}
001FC0                     A  9214    L_380:
                           A  9215    .LINE 2339
                           A  9216    
001FC0 DD3106              A  9217    	LD	IY,(IX+%6)
001FC3 FD0717              A  9218    	LD	BC,(IY+%17)
001FC6 FD7E1A              A  9219    	LD	A,(IY+%1A)
001FC9 DD0FE9              A  9220    	LD	(IX+%FFFFFFE9),BC
001FCC DD77EC              A  9221    	LD	(IX+%FFFFFFEC),A
001FCF C5E1                A  9222    	LD	HL,BC
001FD1 DD5EEC              A  9223    	LD	E,(IX+%FFFFFFEC)
001FD4 01000000            A  9224    	LD	BC,0
001FD8 AF                  A  9225    	XOR	A,A
001FD9 CD 00 00 00         A  9226    	CALL	__lcmpu
001FDD C2 6F 1E 00         A  9227    	JR	NZ,L_381
001FE1                     A  9228    L_383:
                           A  9229    ; 2340	
                           A  9230    ; 2341		if (res != FR_OK) dp->sect = 0;		
                           A  9231    .LINE 2341
                           A  9232    
001FE1 01000000            A  9233    	LD	BC,0
001FE5 DD27FB              A  9234    	LD	HL,(IX+%FFFFFFFB)
001FE8 B7                  A  9235    	OR	A,A
001FE9 ED42                A  9236    	SBC	HL,BC
001FEB 28 0A               A  9237    	JR	Z,L_384
001FED DD3106              A  9238    	LD	IY,(IX+%6)
001FF0 FD0F17              A  9239    	LD	(IY+%17),BC
001FF3 FD361A00            A  9240    	LD	(IY+%1A),%0
001FF7                     A  9241    L_384:
                           A  9242    ; 2342		return res;
                           A  9243    .LINE 2342
                           A  9244    
001FF7 DD27FB              A  9245    	LD	HL,(IX+%FFFFFFFB)
                           A  9246    ; 2343	}
                           A  9247    .LINE 2343
                           A  9248    
001FFA DDF9                A  9249    	LD	SP,IX
001FFC DDE1                A  9250    	POP	IX
001FFE C9                  A  9251    	RET	
                           A  9252    
                           A  9253    
                           A  9254    ;**************************** _dir_read *******
                           A  9255    ;Name                         Addr/Register   S
                           A  9256    ;G_15                                 IX-23    
                           A  9257    ;G_17                                 IX-19    
                           A  9258    ;G_16                                 IX-16    
                           A  9259    ;temp365                              IX-13    
                           A  9260    ;fs                                   IX-10    
                           A  9261    ;sum                                   IX-7    
                           A  9262    ;attr                                  IX-6    
                           A  9263    ;res                                   IX-5    
                           A  9264    ;ord                                   IX-2    
                           A  9265    ;b                                     IX-1    
                           A  9266    ;vol                                   IX+9    
                           A  9267    ;dp                                    IX+6    
                           A  9268    
                           A  9269    
                           A  9270    ; Stack Frame Size: 35 (bytes)
                           A  9271    ;       Spill Code: -1 (instruction)
                           A  9272    
                           A  9273    
                           A  9274    .ENDFUNC "dir_read",2343,"_dir_read"
                           A  9275    ; 2344	
                           A  9276    ; 2345	#endif	/* FF_FS_MINIMIZE <= 1 || FF_US
                           A  9277    ; 2346	
                           A  9278    ; 2347	
                           A  9279    ; 2348	
                           A  9280    ; 2349	/*-------------------------------------
                           A  9281    ; 2350	/* Directory handling - Find an object 
                           A  9282    ; 2351	/*-------------------------------------
                           A  9283    ; 2352	
                           A  9284    ; 2353	static FRESULT dir_find (	/* FR_OK(0)
                           A  9285    ; 2354		DIR* dp					/* Pointer 
                           A  9286    ; 2355	)
                           A  9287    ; 2356	{
001FFF                     A  9288    _dir_find:
                           A  9289    .DEFINE "_dir_find"
                           A  9290    
                           A  9291    .VALUE _dir_find
                           A  9292    
                           A  9293    .CLASS 3
                           A  9294    
                           A  9295    .TYPE 68
                           A  9296    
                           A  9297    .ENDEF
                           A  9298    
                           A  9299    .BEGFUNC "dir_find",2356,"_dir_find"
                           A  9300    
                           A  9301    .LINE 2356
                           A  9302    
                           A  9303    .DEFINE "dp"
                           A  9304    
                           A  9305    .CLASS 65
                           A  9306    
                           A  9307    .VALUE 6
                           A  9308    
                           A  9309    .TAG "NONAME3"
                           A  9310    
                           A  9311    .TYPE 40
                           A  9312    
                           A  9313    .ENDEF
                           A  9314    
                           A  9315    .DEFINE "c"
                           A  9316    
                           A  9317    .CLASS 65
                           A  9318    
                           A  9319    .VALUE -1
                           A  9320    
                           A  9321    .TYPE 12
                           A  9322    
                           A  9323    .ENDEF
                           A  9324    
                           A  9325    .DEFINE "ord"
                           A  9326    
                           A  9327    .CLASS 65
                           A  9328    
                           A  9329    .VALUE -2
                           A  9330    
                           A  9331    .TYPE 12
                           A  9332    
                           A  9333    .ENDEF
                           A  9334    
                           A  9335    .DEFINE "res"
                           A  9336    
                           A  9337    .CLASS 65
                           A  9338    
                           A  9339    .VALUE -5
                           A  9340    
                           A  9341    .TYPE 4
                           A  9342    
                           A  9343    .ENDEF
                           A  9344    
                           A  9345    .DEFINE "a"
                           A  9346    
                           A  9347    .CLASS 65
                           A  9348    
                           A  9349    .VALUE -6
                           A  9350    
                           A  9351    .TYPE 12
                           A  9352    
                           A  9353    .ENDEF
                           A  9354    
                           A  9355    .DEFINE "sum"
                           A  9356    
                           A  9357    .CLASS 65
                           A  9358    
                           A  9359    .VALUE -7
                           A  9360    
                           A  9361    .TYPE 12
                           A  9362    
                           A  9363    .ENDEF
                           A  9364    
                           A  9365    .DEFINE "fs"
                           A  9366    
                           A  9367    .CLASS 65
                           A  9368    
                           A  9369    .VALUE -10
                           A  9370    
                           A  9371    .TAG "NONAME0"
                           A  9372    
                           A  9373    .TYPE 40
                           A  9374    
                           A  9375    .ENDEF
                           A  9376    
001FFF DDE5                A  9377    	PUSH	IX
002001 DD210000 00         A  9378    	LD	IX,0
002006 DD39                A  9379    	ADD	IX,SP
002008 ED22EA              A  9380    	LEA	HL,IX+%FFFFFFEA
00200B F9                  A  9381    	LD	SP,HL
                           A  9382    ; 2357		FRESULT res;
                           A  9383    ; 2358		FATFS *fs = dp->obj.fs;
                           A  9384    .LINE 2358
                           A  9385    
00200C DD3106              A  9386    	LD	IY,(IX+%6)
00200F FD0700              A  9387    	LD	BC,(IY+%0)
002012 DD0FF6              A  9388    	LD	(IX+%FFFFFFF6),BC
                           A  9389    ; 2359		BYTE c;
                           A  9390    ; 2360	#if FF_USE_LFN
                           A  9391    ; 2361		BYTE a, ord, sum;
                           A  9392    ; 2362	#endif
                           A  9393    ; 2363	
                           A  9394    ; 2364		res = dir_sdi(dp, 0);			/* 
                           A  9395    .LINE 2364
                           A  9396    
002015 01000000            A  9397    	LD	BC,0
002019 C5                  A  9398    	PUSH	BC
00201A C5                  A  9399    	PUSH	BC
00201B DD0706              A  9400    	LD	BC,(IX+%6)
00201E C5                  A  9401    	PUSH	BC
00201F CD 50 12 00         A  9402    	CALL	_dir_sdi
002023 C1                  A  9403    	POP	BC
002024 C1                  A  9404    	POP	BC
002025 C1                  A  9405    	POP	BC
002026 DD2FFB              A  9406    	LD	(IX+%FFFFFFFB),HL
                           A  9407    ; 2365		if (res != FR_OK) return res;
                           A  9408    .LINE 2365
                           A  9409    
002029 01000000            A  9410    	LD	BC,0
00202D DD27FB              A  9411    	LD	HL,(IX+%FFFFFFFB)
002030 B7                  A  9412    	OR	A,A
002031 ED42                A  9413    	SBC	HL,BC
002033 28 07               A  9414    	JR	Z,L_387
002035 DD27FB              A  9415    	LD	HL,(IX+%FFFFFFFB)
002038 C3 E8 21 00         A  9416    	JR	L_417
00203C                     A  9417    L_387:
                           A  9418    ; 2366	#if FF_FS_EXFAT
                           A  9419    ; 2367		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  9420    ; 2368			BYTE nc;
                           A  9421    ; 2369			UINT di, ni;
                           A  9422    ; 2370			WORD hash = xname_sum(fs->lfnbu
                           A  9423    ; 2371	
                           A  9424    ; 2372			while ((res = DIR_READ_FILE(dp)
                           A  9425    ; 2373	#if FF_MAX_LFN < 255
                           A  9426    ; 2374				if (fs->dirbuf[XDIR_NumName
                           A  9427    ; 2375	#endif
                           A  9428    ; 2376				if (ld_word(fs->dirbuf + XD
                           A  9429    ; 2377				for (nc = fs->dirbuf[XDIR_N
                           A  9430    ; 2378					if ((di % SZDIRE) == 0)
                           A  9431    ; 2379					if (ff_wtoupper(ld_word
                           A  9432    ; 2380				}
                           A  9433    ; 2381				if (nc == 0 && !fs->lfnbuf[
                           A  9434    ; 2382			}
                           A  9435    ; 2383			return res;
                           A  9436    ; 2384		}
                           A  9437    ; 2385	#endif
                           A  9438    ; 2386		/* On the FAT/FAT32 volume */
                           A  9439    ; 2387	#if FF_USE_LFN
                           A  9440    ; 2388		ord = sum = 0xFF; dp->blk_ofs = 0xF
                           A  9441    .LINE 2388
                           A  9442    
00203C DD36F9FF            A  9443    	LD	(IX+%FFFFFFF9),%FF
002040 DD36FEFF            A  9444    	LD	(IX+%FFFFFFFE),%FF
002044 01FFFFFF            A  9445    	LD	BC,16777215
002048 DD3106              A  9446    	LD	IY,(IX+%6)
00204B FD0F2A              A  9447    	LD	(IY+%2A),BC
00204E FD362DFF            A  9448    	LD	(IY+%2D),%FF
                           A  9449    ; 2389	#endif
                           A  9450    ; 2390		do {
002052                     A  9451    L_414:
                           A  9452    .LINE 2390
                           A  9453    
                           A  9454    ; 2391			res = move_window(fs, dp->sect)
                           A  9455    .LINE 2391
                           A  9456    
002052 DD3106              A  9457    	LD	IY,(IX+%6)
002055 FD0717              A  9458    	LD	BC,(IY+%17)
002058 FD7E1A              A  9459    	LD	A,(IY+%1A)
00205B 2600                A  9460    	LD	H,%0
00205D 6F                  A  9461    	LD	L,A
00205E E5                  A  9462    	PUSH	HL
00205F C5                  A  9463    	PUSH	BC
002060 DD07F6              A  9464    	LD	BC,(IX+%FFFFFFF6)
002063 C5                  A  9465    	PUSH	BC
002064 CD 1E 04 00         A  9466    	CALL	_move_window
002068 C1                  A  9467    	POP	BC
002069 C1                  A  9468    	POP	BC
00206A C1                  A  9469    	POP	BC
00206B DD2FFB              A  9470    	LD	(IX+%FFFFFFFB),HL
                           A  9471    ; 2392			if (res != FR_OK) break;
                           A  9472    .LINE 2392
                           A  9473    
00206E 01000000            A  9474    	LD	BC,0
002072 DD27FB              A  9475    	LD	HL,(IX+%FFFFFFFB)
002075 B7                  A  9476    	OR	A,A
002076 ED42                A  9477    	SBC	HL,BC
002078 C2 E5 21 00         A  9478    	JR	NZ,L_416
                           A  9479    ; 2393			c = dp->dir[DIR_Name];
                           A  9480    .LINE 2393
                           A  9481    
00207C DD3106              A  9482    	LD	IY,(IX+%6)
00207F FD071B              A  9483    	LD	BC,(IY+%1B)
002082 DD0FF0              A  9484    	LD	(IX+%FFFFFFF0),BC
002085 C5E1                A  9485    	LD	HL,BC
002087 7E                  A  9486    	LD	A,(HL)
002088 DD77FF              A  9487    	LD	(IX+%FFFFFFFF),A
                           A  9488    ; 2394			if (c == 0) { res = FR_NO_FILE;
                           A  9489    .LINE 2394
                           A  9490    
00208B B7                  A  9491    	OR	A,A
00208C 20 0B               A  9492    	JR	NZ,L_391
00208E 01040000            A  9493    	LD	BC,4
002092 DD0FFB              A  9494    	LD	(IX+%FFFFFFFB),BC
002095 C3 E5 21 00         A  9495    	JR	L_416
002099                     A  9496    L_391:
                           A  9497    ; 2395	#if FF_USE_LFN		/* LFN configuratio
                           A  9498    ; 2396			dp->obj.attr = a = dp->dir[DIR_
                           A  9499    .LINE 2396
                           A  9500    
002099 DD31F0              A  9501    	LD	IY,(IX+%FFFFFFF0)
00209C FD7E0B              A  9502    	LD	A,(IY+%B)
00209F E63F                A  9503    	AND	A,%3F
0020A1 DD77FA              A  9504    	LD	(IX+%FFFFFFFA),A
0020A4 DD3106              A  9505    	LD	IY,(IX+%6)
0020A7 FD7705              A  9506    	LD	(IY+%5),A
                           A  9507    ; 2397			if (c == DDEM || ((a & AM_VOL) 
                           A  9508    .LINE 2397
                           A  9509    
0020AA DD7EFF              A  9510    	LD	A,(IX+%FFFFFFFF)
0020AD FEE5                A  9511    	CP	A,%E5
0020AF 28 0E               A  9512    	JR	Z,L_411
0020B1 DD7EFA              A  9513    	LD	A,(IX+%FFFFFFFA)
0020B4 E608                A  9514    	AND	A,%8
0020B6 28 1D               A  9515    	JR	Z,L_412
0020B8 DD7EFA              A  9516    	LD	A,(IX+%FFFFFFFA)
0020BB FE0F                A  9517    	CP	A,%F
0020BD 28 16               A  9518    	JR	Z,L_412
0020BF                     A  9519    L_411:
                           A  9520    ; 2398				ord = 0xFF; dp->blk_ofs = 0
                           A  9521    .LINE 2398
                           A  9522    
0020BF DD36FEFF            A  9523    	LD	(IX+%FFFFFFFE),%FF
0020C3 01FFFFFF            A  9524    	LD	BC,16777215
0020C7 DD3106              A  9525    	LD	IY,(IX+%6)
0020CA FD0F2A              A  9526    	LD	(IY+%2A),BC
0020CD FD362DFF            A  9527    	LD	(IY+%2D),%FF
                           A  9528    ; 2399			} else {
                           A  9529    .LINE 2399
                           A  9530    
0020D1 C3 C5 21 00         A  9531    	JR	L_413
0020D5                     A  9532    L_412:
                           A  9533    ; 2400				if (a == AM_LFN) {			
                           A  9534    .LINE 2400
                           A  9535    
0020D5 DD7EFA              A  9536    	LD	A,(IX+%FFFFFFFA)
0020D8 FE0F                A  9537    	CP	A,%F
0020DA C2 69 21 00         A  9538    	JR	NZ,L_410
                           A  9539    ; 2401					if (!(dp->fn[NSFLAG] & 
                           A  9540    .LINE 2401
                           A  9541    
0020DE DD3106              A  9542    	LD	IY,(IX+%6)
0020E1 FD7E29              A  9543    	LD	A,(IY+%29)
0020E4 E640                A  9544    	AND	A,%40
0020E6 C2 C5 21 00         A  9545    	JR	NZ,L_413
                           A  9546    ; 2402						if (c & LLEF) {		
                           A  9547    .LINE 2402
                           A  9548    
0020EA DD7EFF              A  9549    	LD	A,(IX+%FFFFFFFF)
0020ED E640                A  9550    	AND	A,%40
0020EF 28 26               A  9551    	JR	Z,L_401
                           A  9552    ; 2403							sum = dp->dir[L
                           A  9553    .LINE 2403
                           A  9554    
0020F1 DD3106              A  9555    	LD	IY,(IX+%6)
0020F4 FD371B              A  9556    	LD	IY,(IY+%1B)
0020F7 FD7E0D              A  9557    	LD	A,(IY+%D)
0020FA DD77F9              A  9558    	LD	(IX+%FFFFFFF9),A
                           A  9559    ; 2404							c &= (BYTE)~LLE
                           A  9560    .LINE 2404
                           A  9561    
0020FD DD7EFF              A  9562    	LD	A,(IX+%FFFFFFFF)
002100 CBB7                A  9563    	RES	%6,A
002102 DD77FF              A  9564    	LD	(IX+%FFFFFFFF),A
002105 DD77FE              A  9565    	LD	(IX+%FFFFFFFE),A
                           A  9566    ; 2405							dp->blk_ofs = d
                           A  9567    .LINE 2405
                           A  9568    
002108 DD3106              A  9569    	LD	IY,(IX+%6)
00210B FD070F              A  9570    	LD	BC,(IY+%F)
00210E FD7E12              A  9571    	LD	A,(IY+%12)
002111 FD0F2A              A  9572    	LD	(IY+%2A),BC
002114 FD772D              A  9573    	LD	(IY+%2D),A
                           A  9574    ; 2406						}
002117                     A  9575    L_401:
                           A  9576    .LINE 2406
                           A  9577    
                           A  9578    ; 2407						/* Check validity o
                           A  9579    ; 2408						ord = (c == ord && 
                           A  9580    .LINE 2408
                           A  9581    
002117 DD7EFF              A  9582    	LD	A,(IX+%FFFFFFFF)
00211A DDBEFE              A  9583    	CP	A,(IX+%FFFFFFFE)
00211D 20 3B               A  9584    	JR	NZ,L_399
00211F DD3106              A  9585    	LD	IY,(IX+%6)
002122 FD071B              A  9586    	LD	BC,(IY+%1B)
002125 DD0FED              A  9587    	LD	(IX+%FFFFFFED),BC
002128 DD31ED              A  9588    	LD	IY,(IX+%FFFFFFED)
00212B FD7E0D              A  9589    	LD	A,(IY+%D)
00212E DDBEF9              A  9590    	CP	A,(IX+%FFFFFFF9)
002131 20 27               A  9591    	JR	NZ,L_399
002133 DD07ED              A  9592    	LD	BC,(IX+%FFFFFFED)
002136 C5                  A  9593    	PUSH	BC
002137 DD31F6              A  9594    	LD	IY,(IX+%FFFFFFF6)
00213A FD070B              A  9595    	LD	BC,(IY+%B)
00213D C5                  A  9596    	PUSH	BC
00213E CD 9F 18 00         A  9597    	CALL	_cmp_lfn
002142 C1                  A  9598    	POP	BC
002143 C1                  A  9599    	POP	BC
002144 01000000            A  9600    	LD	BC,0
002148 B7                  A  9601    	OR	A,A
002149 ED42                A  9602    	SBC	HL,BC
00214B 28 0D               A  9603    	JR	Z,L_399
00214D DD7EFE              A  9604    	LD	A,(IX+%FFFFFFFE)
002150 B7ED62              A  9605    	UEXT	HL
002153 6F                  A  9606    	LD	L,A
002154 2B                  A  9607    	DEC	HL
002155 DD2FF3              A  9608    	LD	(IX+%FFFFFFF3),HL
002158 18 07               A  9609    	JR	L_400
00215A                     A  9610    L_399:
00215A 01FF0000            A  9611    	LD	BC,255
00215E DD0FF3              A  9612    	LD	(IX+%FFFFFFF3),BC
002161                     A  9613    L_400:
002161 DD7EF3              A  9614    	LD	A,(IX+%FFFFFFF3)
002164 DD77FE              A  9615    	LD	(IX+%FFFFFFFE),A
                           A  9616    ; 2409					}
                           A  9617    ; 2410				} else {					
                           A  9618    .LINE 2410
                           A  9619    
002167 18 5C               A  9620    	JR	L_413
002169                     A  9621    L_410:
                           A  9622    ; 2411					if (ord == 0 && sum == 
                           A  9623    .LINE 2411
                           A  9624    
002169 DD7EFE              A  9625    	LD	A,(IX+%FFFFFFFE)
00216C B7                  A  9626    	OR	A,A
00216D 20 11               A  9627    	JR	NZ,L_407
00216F DD3106              A  9628    	LD	IY,(IX+%6)
002172 FD071B              A  9629    	LD	BC,(IY+%1B)
002175 C5                  A  9630    	PUSH	BC
002176 CD EC 1D 00         A  9631    	CALL	_sum_sfn
00217A C1                  A  9632    	POP	BC
00217B DDBEF9              A  9633    	CP	A,(IX+%FFFFFFF9)
00217E 28 65               A  9634    	JR	Z,L_416
002180                     A  9635    L_407:
                           A  9636    ; 2412					if (!(dp->fn[NSFLAG] & 
                           A  9637    .LINE 2412
                           A  9638    
002180 DD3106              A  9639    	LD	IY,(IX+%6)
002183 ED031E              A  9640    	LEA	BC,IY+%1E
002186 DD0FEA              A  9641    	LD	(IX+%FFFFFFEA),BC
002189 DD31EA              A  9642    	LD	IY,(IX+%FFFFFFEA)
00218C FD7E0B              A  9643    	LD	A,(IY+%B)
00218F E601                A  9644    	AND	A,%1
002191 20 20               A  9645    	JR	NZ,L_408
002193 010B0000            A  9646    	LD	BC,11
002197 C5                  A  9647    	PUSH	BC
002198 DD07EA              A  9648    	LD	BC,(IX+%FFFFFFEA)
00219B C5                  A  9649    	PUSH	BC
00219C DD3106              A  9650    	LD	IY,(IX+%6)
00219F FD071B              A  9651    	LD	BC,(IY+%1B)
0021A2 C5                  A  9652    	PUSH	BC
0021A3 CD 00 00 00         A  9653    	CALL	_memcmp
0021A7 C1                  A  9654    	POP	BC
0021A8 C1                  A  9655    	POP	BC
0021A9 C1                  A  9656    	POP	BC
0021AA 01000000            A  9657    	LD	BC,0
0021AE B7                  A  9658    	OR	A,A
0021AF ED42                A  9659    	SBC	HL,BC
0021B1 28 32               A  9660    	JR	Z,L_416
0021B3                     A  9661    L_408:
                           A  9662    ; 2413					ord = 0xFF; dp->blk_ofs
                           A  9663    .LINE 2413
                           A  9664    
0021B3 DD36FEFF            A  9665    	LD	(IX+%FFFFFFFE),%FF
0021B7 01FFFFFF            A  9666    	LD	BC,16777215
0021BB DD3106              A  9667    	LD	IY,(IX+%6)
0021BE FD0F2A              A  9668    	LD	(IY+%2A),BC
0021C1 FD362DFF            A  9669    	LD	(IY+%2D),%FF
                           A  9670    ; 2414				}
                           A  9671    ; 2415			}
0021C5                     A  9672    L_413:
                           A  9673    .LINE 2415
                           A  9674    
                           A  9675    ; 2416	#else		/* Non LFN configuration */
                           A  9676    ; 2417			dp->obj.attr = dp->dir[DIR_Attr
                           A  9677    ; 2418			if (!(dp->dir[DIR_Attr] & AM_VO
                           A  9678    ; 2419	#endif
                           A  9679    ; 2420			res = dir_next(dp, 0);	/* Next
                           A  9680    .LINE 2420
                           A  9681    
0021C5 01000000            A  9682    	LD	BC,0
0021C9 C5                  A  9683    	PUSH	BC
0021CA DD0706              A  9684    	LD	BC,(IX+%6)
0021CD C5                  A  9685    	PUSH	BC
0021CE CD 6A 14 00         A  9686    	CALL	_dir_next
0021D2 C1                  A  9687    	POP	BC
0021D3 C1                  A  9688    	POP	BC
0021D4 DD2FFB              A  9689    	LD	(IX+%FFFFFFFB),HL
                           A  9690    ; 2421		} while (res == FR_OK);
                           A  9691    .LINE 2421
                           A  9692    
0021D7 01000000            A  9693    	LD	BC,0
0021DB DD27FB              A  9694    	LD	HL,(IX+%FFFFFFFB)
0021DE B7                  A  9695    	OR	A,A
0021DF ED42                A  9696    	SBC	HL,BC
0021E1 CA 52 20 00         A  9697    	JR	Z,L_414
0021E5                     A  9698    L_416:
                           A  9699    ; 2422	
                           A  9700    ; 2423		return res;
                           A  9701    .LINE 2423
                           A  9702    
0021E5 DD27FB              A  9703    	LD	HL,(IX+%FFFFFFFB)
                           A  9704    ; 2424	}
0021E8                     A  9705    L_417:
                           A  9706    .LINE 2424
                           A  9707    
0021E8 DDF9                A  9708    	LD	SP,IX
0021EA DDE1                A  9709    	POP	IX
0021EC C9                  A  9710    	RET	
                           A  9711    
                           A  9712    
                           A  9713    ;**************************** _dir_find *******
                           A  9714    ;Name                         Addr/Register   S
                           A  9715    ;_memcmp                             IMPORT  --
                           A  9716    ;G_20                                 IX-22    
                           A  9717    ;G_19                                 IX-19    
                           A  9718    ;G_18                                 IX-16    
                           A  9719    ;temp397                              IX-13    
                           A  9720    ;fs                                   IX-10    
                           A  9721    ;sum                                   IX-7    
                           A  9722    ;a                                     IX-6    
                           A  9723    ;res                                   IX-5    
                           A  9724    ;ord                                   IX-2    
                           A  9725    ;c                                     IX-1    
                           A  9726    ;dp                                    IX+6    
                           A  9727    
                           A  9728    
                           A  9729    ; Stack Frame Size: 31 (bytes)
                           A  9730    ;       Spill Code: -1 (instruction)
                           A  9731    
                           A  9732    
                           A  9733    .ENDFUNC "dir_find",2424,"_dir_find"
                           A  9734    ; 2425	
                           A  9735    ; 2426	
                           A  9736    ; 2427	
                           A  9737    ; 2428	
                           A  9738    ; 2429	#if !FF_FS_READONLY
                           A  9739    ; 2430	/*-------------------------------------
                           A  9740    ; 2431	/* Register an object to the directory 
                           A  9741    ; 2432	/*-------------------------------------
                           A  9742    ; 2433	
                           A  9743    ; 2434	static FRESULT dir_register (	/* FR_O
                           A  9744    ; 2435		DIR* dp						/* Targ
                           A  9745    ; 2436	)
                           A  9746    ; 2437	{
0021ED                     A  9747    _dir_register:
                           A  9748    .DEFINE "_dir_register"
                           A  9749    
                           A  9750    .VALUE _dir_register
                           A  9751    
                           A  9752    .CLASS 3
                           A  9753    
                           A  9754    .TYPE 68
                           A  9755    
                           A  9756    .ENDEF
                           A  9757    
                           A  9758    .BEGFUNC "dir_register",2437,"_dir_register"
                           A  9759    
                           A  9760    .LINE 2437
                           A  9761    
                           A  9762    .DEFINE "dp"
                           A  9763    
                           A  9764    .CLASS 65
                           A  9765    
                           A  9766    .VALUE 6
                           A  9767    
                           A  9768    .TAG "NONAME3"
                           A  9769    
                           A  9770    .TYPE 40
                           A  9771    
                           A  9772    .ENDEF
                           A  9773    
                           A  9774    .DEFINE "res"
                           A  9775    
                           A  9776    .CLASS 65
                           A  9777    
                           A  9778    .VALUE -3
                           A  9779    
                           A  9780    .TYPE 4
                           A  9781    
                           A  9782    .ENDEF
                           A  9783    
                           A  9784    .DEFINE "n_ent"
                           A  9785    
                           A  9786    .CLASS 65
                           A  9787    
                           A  9788    .VALUE -6
                           A  9789    
                           A  9790    .TYPE 14
                           A  9791    
                           A  9792    .ENDEF
                           A  9793    
                           A  9794    .DEFINE "fs"
                           A  9795    
                           A  9796    .CLASS 65
                           A  9797    
                           A  9798    .VALUE -9
                           A  9799    
                           A  9800    .TAG "NONAME0"
                           A  9801    
                           A  9802    .TYPE 40
                           A  9803    
                           A  9804    .ENDEF
                           A  9805    
                           A  9806    .DEFINE "n"
                           A  9807    
                           A  9808    .CLASS 65
                           A  9809    
                           A  9810    .VALUE -12
                           A  9811    
                           A  9812    .TYPE 14
                           A  9813    
                           A  9814    .ENDEF
                           A  9815    
                           A  9816    .DEFINE "len"
                           A  9817    
                           A  9818    .CLASS 65
                           A  9819    
                           A  9820    .VALUE -15
                           A  9821    
                           A  9822    .TYPE 14
                           A  9823    
                           A  9824    .ENDEF
                           A  9825    
                           A  9826    .DEFINE "sum"
                           A  9827    
                           A  9828    .CLASS 65
                           A  9829    
                           A  9830    .VALUE -16
                           A  9831    
                           A  9832    .TYPE 12
                           A  9833    
                           A  9834    .ENDEF
                           A  9835    
                           A  9836    .DEFINE "sn"
                           A  9837    
                           A  9838    .CLASS 65
                           A  9839    
                           A  9840    .VALUE -34
                           A  9841    
                           A  9842    .DIM 12
                           A  9843    
                           A  9844    .TYPE 108
                           A  9845    
                           A  9846    .ENDEF
                           A  9847    
0021ED DDE5                A  9848    	PUSH	IX
0021EF DD210000 00         A  9849    	LD	IX,0
0021F4 DD39                A  9850    	ADD	IX,SP
0021F6 ED22DE              A  9851    	LEA	HL,IX+%FFFFFFDE
0021F9 F9                  A  9852    	LD	SP,HL
                           A  9853    ; 2438		FRESULT res=FR_OK;
                           A  9854    .LINE 2438
                           A  9855    
0021FA 01000000            A  9856    	LD	BC,0
0021FE DD0FFD              A  9857    	LD	(IX+%FFFFFFFD),BC
                           A  9858    ; 2439		FATFS *fs = dp->obj.fs;
                           A  9859    .LINE 2439
                           A  9860    
002201 DD3106              A  9861    	LD	IY,(IX+%6)
002204 FD0700              A  9862    	LD	BC,(IY+%0)
002207 DD0FF7              A  9863    	LD	(IX+%FFFFFFF7),BC
                           A  9864    ; 2440	#if FF_USE_LFN		/* LFN configuratio
                           A  9865    ; 2441		UINT n, len, n_ent;
                           A  9866    ; 2442		BYTE sn[12], sum;
                           A  9867    ; 2443	
                           A  9868    ; 2444	
                           A  9869    ; 2445		if (dp->fn[NSFLAG] & (NS_DOT | NS_N
                           A  9870    .LINE 2445
                           A  9871    
00220A FD7E29              A  9872    	LD	A,(IY+%29)
00220D E6A0                A  9873    	AND	A,%A0
00220F 28 08               A  9874    	JR	Z,L_423
002211 21060000            A  9875    	LD	HL,6
002215 C3 8B 24 00         A  9876    	JR	L_453
002219                     A  9877    L_423:
                           A  9878    ; 2446		for (len = 0; fs->lfnbuf[len]; len+
                           A  9879    .LINE 2446
                           A  9880    
002219 01000000            A  9881    	LD	BC,0
00221D DD0FF1              A  9882    	LD	(IX+%FFFFFFF1),BC
002220 18 07               A  9883    	JR	L_422
002222                     A  9884    L_420:
002222 DD07F1              A  9885    	LD	BC,(IX+%FFFFFFF1)
002225 03                  A  9886    	INC	BC
002226 DD0FF1              A  9887    	LD	(IX+%FFFFFFF1),BC
002229                     A  9888    L_422:
002229 DD27F1              A  9889    	LD	HL,(IX+%FFFFFFF1)
00222C 29                  A  9890    	ADD	HL,HL
00222D DD31F7              A  9891    	LD	IY,(IX+%FFFFFFF7)
002230 FD070B              A  9892    	LD	BC,(IY+%B)
002233 09                  A  9893    	ADD	HL,BC
002234 49010000            A  9894    	LD.LIS	BC,0
002238 ED27                A  9895    	LD	HL,(HL)
00223A B7                  A  9896    	OR	A,A
00223B 40ED42              A  9897    	SBC.SIS	HL,BC
00223E 20 E2               A  9898    	JR	NZ,L_420
                           A  9899    ; 2447	
                           A  9900    ; 2448	#if FF_FS_EXFAT
                           A  9901    ; 2449		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  9902    ; 2450			n_ent = (len + 14) / 15 + 2;	
                           A  9903    ; 2451			res = dir_alloc(dp, n_ent);		
                           A  9904    ; 2452			if (res != FR_OK) return res;
                           A  9905    ; 2453			dp->blk_ofs = dp->dptr - SZDIRE
                           A  9906    ; 2454	
                           A  9907    ; 2455			if (dp->obj.stat & 4) {			
                           A  9908    ; 2456				dp->obj.stat &= ~4;
                           A  9909    ; 2457				res = fill_first_frag(&dp->
                           A  9910    ; 2458				if (res != FR_OK) return re
                           A  9911    ; 2459				res = fill_last_frag(&dp->o
                           A  9912    ; 2460				if (res != FR_OK) return re
                           A  9913    ; 2461				if (dp->obj.sclust != 0) {	
                           A  9914    ; 2462					DIR dj;
                           A  9915    ; 2463	
                           A  9916    ; 2464					res = load_obj_xdir(&dj
                           A  9917    ; 2465					if (res != FR_OK) retur
                           A  9918    ; 2466					dp->obj.objsize += (DWO
                           A  9919    ; 2467					st_qword(fs->dirbuf + X
                           A  9920    ; 2468					st_qword(fs->dirbuf + X
                           A  9921    ; 2469					fs->dirbuf[XDIR_GenFlag
                           A  9922    ; 2470					res = store_xdir(&dj);	
                           A  9923    ; 2471					if (res != FR_OK) retur
                           A  9924    ; 2472				}
                           A  9925    ; 2473			}
                           A  9926    ; 2474	
                           A  9927    ; 2475			create_xdir(fs->dirbuf, fs->lfn
                           A  9928    ; 2476			return FR_OK;
                           A  9929    ; 2477		}
                           A  9930    ; 2478	#endif
                           A  9931    ; 2479		/* On the FAT/FAT32 volume */
                           A  9932    ; 2480		memcpy(sn, dp->fn, 12);
                           A  9933    .LINE 2480
                           A  9934    
002240 010C0000            A  9935    	LD	BC,12
002244 C5                  A  9936    	PUSH	BC
002245 DD3106              A  9937    	LD	IY,(IX+%6)
002248 ED661E              A  9938    	PEA	IY+%1E
00224B ED65DE              A  9939    	PEA	IX+%FFFFFFDE
00224E CD 00 00 00         A  9940    	CALL	_memcpy
002252 C1                  A  9941    	POP	BC
002253 C1                  A  9942    	POP	BC
002254 C1                  A  9943    	POP	BC
                           A  9944    ; 2481		if (sn[NSFLAG] & NS_LOSS) {			
                           A  9945    .LINE 2481
                           A  9946    
002255 ED55DE              A  9947    	LEA	IY,IX+%FFFFFFDE
002258 ED030B              A  9948    	LEA	BC,IY+%B
00225B DD0FEA              A  9949    	LD	(IX+%FFFFFFEA),BC
00225E FD7E0B              A  9950    	LD	A,(IY+%B)
002261 E601                A  9951    	AND	A,%1
002263 CA F6 22 00         A  9952    	JR	Z,L_440
                           A  9953    ; 2482			dp->fn[NSFLAG] = NS_NOLFN;		
                           A  9954    .LINE 2482
                           A  9955    
002267 DD3106              A  9956    	LD	IY,(IX+%6)
00226A ED2329              A  9957    	LEA	HL,IY+%29
00226D 3640                A  9958    	LD	(HL),%40
                           A  9959    ; 2483			for (n = 1; n < 100; n++) {
                           A  9960    .LINE 2483
                           A  9961    
00226F 01010000            A  9962    	LD	BC,1
002273 DD0FF4              A  9963    	LD	(IX+%FFFFFFF4),BC
002276 18 3B               A  9964    	JR	L_429
002278                     A  9965    L_427:
                           A  9966    ; 2484				gen_numname(dp->fn, sn, fs-
                           A  9967    .LINE 2484
                           A  9968    
002278 DD07F4              A  9969    	LD	BC,(IX+%FFFFFFF4)
00227B C5                  A  9970    	PUSH	BC
00227C DD31F7              A  9971    	LD	IY,(IX+%FFFFFFF7)
00227F FD070B              A  9972    	LD	BC,(IY+%B)
002282 C5                  A  9973    	PUSH	BC
002283 ED65DE              A  9974    	PEA	IX+%FFFFFFDE
002286 DD3106              A  9975    	LD	IY,(IX+%6)
002289 ED661E              A  9976    	PEA	IY+%1E
00228C CD DC 1B 00         A  9977    	CALL	_gen_numname
002290 C1                  A  9978    	POP	BC
002291 C1                  A  9979    	POP	BC
002292 C1                  A  9980    	POP	BC
002293 C1                  A  9981    	POP	BC
                           A  9982    ; 2485				res = dir_find(dp);			
                           A  9983    .LINE 2485
                           A  9984    
002294 DD0706              A  9985    	LD	BC,(IX+%6)
002297 C5                  A  9986    	PUSH	BC
002298 CD FF 1F 00         A  9987    	CALL	_dir_find
00229C C1                  A  9988    	POP	BC
00229D DD2FFD              A  9989    	LD	(IX+%FFFFFFFD),HL
                           A  9990    ; 2486				if (res != FR_OK) break;
                           A  9991    .LINE 2486
                           A  9992    
0022A0 01000000            A  9993    	LD	BC,0
0022A4 DD27FD              A  9994    	LD	HL,(IX+%FFFFFFFD)
0022A7 B7                  A  9995    	OR	A,A
0022A8 ED42                A  9996    	SBC	HL,BC
0022AA 20 13               A  9997    	JR	NZ,L_431
0022AC DD07F4              A  9998    	LD	BC,(IX+%FFFFFFF4)
0022AF 03                  A  9999    	INC	BC
0022B0 DD0FF4              A 10000    	LD	(IX+%FFFFFFF4),BC
                           A 10001    ; 2487			}
0022B3                     A 10002    L_429:
                           A 10003    .LINE 2487
                           A 10004    
0022B3 01640000            A 10005    	LD	BC,100
0022B7 DD27F4              A 10006    	LD	HL,(IX+%FFFFFFF4)
0022BA B7                  A 10007    	OR	A,A
0022BB ED42                A 10008    	SBC	HL,BC
0022BD 38 B9               A 10009    	JR	C,L_427
0022BF                     A 10010    L_431:
                           A 10011    ; 2488			if (n == 100) return FR_DENIED;
                           A 10012    .LINE 2488
                           A 10013    
0022BF 01640000            A 10014    	LD	BC,100
0022C3 DD27F4              A 10015    	LD	HL,(IX+%FFFFFFF4)
0022C6 B7                  A 10016    	OR	A,A
0022C7 ED42                A 10017    	SBC	HL,BC
0022C9 20 08               A 10018    	JR	NZ,L_433
0022CB 21070000            A 10019    	LD	HL,7
0022CF C3 8B 24 00         A 10020    	JR	L_453
0022D3                     A 10021    L_433:
                           A 10022    ; 2489			if (res != FR_NO_FILE) return r
                           A 10023    .LINE 2489
                           A 10024    
0022D3 01040000            A 10025    	LD	BC,4
0022D7 DD27FD              A 10026    	LD	HL,(IX+%FFFFFFFD)
0022DA B7                  A 10027    	OR	A,A
0022DB ED42                A 10028    	SBC	HL,BC
0022DD 28 07               A 10029    	JR	Z,L_434
0022DF DD27FD              A 10030    	LD	HL,(IX+%FFFFFFFD)
0022E2 C3 8B 24 00         A 10031    	JR	L_453
0022E6                     A 10032    L_434:
                           A 10033    ; 2490			dp->fn[NSFLAG] = sn[NSFLAG];
                           A 10034    .LINE 2490
                           A 10035    
0022E6 ED02E9              A 10036    	LEA	BC,IX+%FFFFFFE9
0022E9 DD0FEA              A 10037    	LD	(IX+%FFFFFFEA),BC
0022EC ED22E9              A 10038    	LEA	HL,IX+%FFFFFFE9
0022EF DD3106              A 10039    	LD	IY,(IX+%6)
0022F2 7E                  A 10040    	LD	A,(HL)
0022F3 FD7729              A 10041    	LD	(IY+%29),A
                           A 10042    ; 2491		}
0022F6                     A 10043    L_440:
                           A 10044    .LINE 2491
                           A 10045    
                           A 10046    ; 2492	
                           A 10047    ; 2493		/* Create an SFN with/without LFNs.
                           A 10048    ; 2494		n_ent = (sn[NSFLAG] & NS_LFN) ? (le
                           A 10049    .LINE 2494
                           A 10050    
0022F6 DD27EA              A 10051    	LD	HL,(IX+%FFFFFFEA)
0022F9 7E                  A 10052    	LD	A,(HL)
0022FA E602                A 10053    	AND	A,%2
0022FC 28 14               A 10054    	JR	Z,L_438
0022FE DD31F1              A 10055    	LD	IY,(IX+%FFFFFFF1)
002301 ED230C              A 10056    	LEA	HL,IY+%C
002304 010D0000            A 10057    	LD	BC,13
002308 CD 00 00 00         A 10058    	CALL	__idivu
00230C 23                  A 10059    	INC	HL
00230D DD2FED              A 10060    	LD	(IX+%FFFFFFED),HL
002310 18 07               A 10061    	JR	L_439
002312                     A 10062    L_438:
002312 01010000            A 10063    	LD	BC,1
002316 DD0FED              A 10064    	LD	(IX+%FFFFFFED),BC
002319                     A 10065    L_439:
002319 DD07ED              A 10066    	LD	BC,(IX+%FFFFFFED)
00231C DD0FFA              A 10067    	LD	(IX+%FFFFFFFA),BC
                           A 10068    ; 2495		res = dir_alloc(dp, n_ent);		/* 
                           A 10069    .LINE 2495
                           A 10070    
00231F C5                  A 10071    	PUSH	BC
002320 DD0706              A 10072    	LD	BC,(IX+%6)
002323 C5                  A 10073    	PUSH	BC
002324 CD 15 17 00         A 10074    	CALL	_dir_alloc
002328 C1                  A 10075    	POP	BC
002329 C1                  A 10076    	POP	BC
00232A DD2FFD              A 10077    	LD	(IX+%FFFFFFFD),HL
                           A 10078    ; 2496		if (res == FR_OK && --n_ent) {	/* 
                           A 10079    .LINE 2496
                           A 10080    
00232D 01000000            A 10081    	LD	BC,0
002331 DD27FD              A 10082    	LD	HL,(IX+%FFFFFFFD)
002334 B7                  A 10083    	OR	A,A
002335 ED42                A 10084    	SBC	HL,BC
002337 C2 13 24 00         A 10085    	JR	NZ,L_451
00233B DD31FA              A 10086    	LD	IY,(IX+%FFFFFFFA)
00233E ED33FF              A 10087    	LEA	IY,IY+%FFFFFFFF
002341 DD3EFA              A 10088    	LD	(IX+%FFFFFFFA),IY
002344 DD27FA              A 10089    	LD	HL,(IX+%FFFFFFFA)
002347 B7                  A 10090    	OR	A,A
002348 ED42                A 10091    	SBC	HL,BC
00234A CA 13 24 00         A 10092    	JR	Z,L_451
                           A 10093    ; 2497			res = dir_sdi(dp, dp->dptr - n_
                           A 10094    .LINE 2497
                           A 10095    
00234E DD27FA              A 10096    	LD	HL,(IX+%FFFFFFFA)
002351 29                  A 10097    	ADD	HL,HL
002352 29                  A 10098    	ADD	HL,HL
002353 29                  A 10099    	ADD	HL,HL
002354 29                  A 10100    	ADD	HL,HL
002355 29                  A 10101    	ADD	HL,HL
002356 E5C1                A 10102    	LD	BC,HL
002358 AF                  A 10103    	XOR	A,A
002359 DD3106              A 10104    	LD	IY,(IX+%6)
00235C FD270F              A 10105    	LD	HL,(IY+%F)
00235F FD5E12              A 10106    	LD	E,(IY+%12)
002362 CD 00 00 00         A 10107    	CALL	__lsub
002366 4B                  A 10108    	LD	C,E
002367 0600                A 10109    	LD	B,%0
002369 C5                  A 10110    	PUSH	BC
00236A E5                  A 10111    	PUSH	HL
00236B DD0706              A 10112    	LD	BC,(IX+%6)
00236E C5                  A 10113    	PUSH	BC
00236F CD 50 12 00         A 10114    	CALL	_dir_sdi
002373 C1                  A 10115    	POP	BC
002374 C1                  A 10116    	POP	BC
002375 C1                  A 10117    	POP	BC
002376 DD2FFD              A 10118    	LD	(IX+%FFFFFFFD),HL
                           A 10119    ; 2498			if (res == FR_OK) {
                           A 10120    .LINE 2498
                           A 10121    
002379 01000000            A 10122    	LD	BC,0
00237D DD27FD              A 10123    	LD	HL,(IX+%FFFFFFFD)
002380 B7                  A 10124    	OR	A,A
002381 ED42                A 10125    	SBC	HL,BC
002383 C2 13 24 00         A 10126    	JR	NZ,L_451
                           A 10127    ; 2499				sum = sum_sfn(dp->fn);	/* 
                           A 10128    .LINE 2499
                           A 10129    
002387 DD3106              A 10130    	LD	IY,(IX+%6)
00238A ED661E              A 10131    	PEA	IY+%1E
00238D CD EC 1D 00         A 10132    	CALL	_sum_sfn
002391 C1                  A 10133    	POP	BC
002392 DD77F0              A 10134    	LD	(IX+%FFFFFFF0),A
                           A 10135    ; 2500				do {					/* 
002395                     A 10136    L_445:
                           A 10137    .LINE 2500
                           A 10138    
                           A 10139    ; 2501					res = move_window(fs, d
                           A 10140    .LINE 2501
                           A 10141    
002395 DD3106              A 10142    	LD	IY,(IX+%6)
002398 FD0717              A 10143    	LD	BC,(IY+%17)
00239B FD7E1A              A 10144    	LD	A,(IY+%1A)
00239E 2600                A 10145    	LD	H,%0
0023A0 6F                  A 10146    	LD	L,A
0023A1 E5                  A 10147    	PUSH	HL
0023A2 C5                  A 10148    	PUSH	BC
0023A3 DD07F7              A 10149    	LD	BC,(IX+%FFFFFFF7)
0023A6 C5                  A 10150    	PUSH	BC
0023A7 CD 1E 04 00         A 10151    	CALL	_move_window
0023AB C1                  A 10152    	POP	BC
0023AC C1                  A 10153    	POP	BC
0023AD C1                  A 10154    	POP	BC
0023AE DD2FFD              A 10155    	LD	(IX+%FFFFFFFD),HL
                           A 10156    ; 2502					if (res != FR_OK) break
                           A 10157    .LINE 2502
                           A 10158    
0023B1 01000000            A 10159    	LD	BC,0
0023B5 DD27FD              A 10160    	LD	HL,(IX+%FFFFFFFD)
0023B8 B7                  A 10161    	OR	A,A
0023B9 ED42                A 10162    	SBC	HL,BC
0023BB 20 56               A 10163    	JR	NZ,L_451
                           A 10164    ; 2503					put_lfn(fs->lfnbuf, dp-
                           A 10165    .LINE 2503
                           A 10166    
0023BD DD4EF0              A 10167    	LD	C,(IX+%FFFFFFF0)
0023C0 0600                A 10168    	LD	B,%0
0023C2 C5                  A 10169    	PUSH	BC
0023C3 DD4EFA              A 10170    	LD	C,(IX+%FFFFFFFA)
0023C6 C5                  A 10171    	PUSH	BC
0023C7 DD3106              A 10172    	LD	IY,(IX+%6)
0023CA FD071B              A 10173    	LD	BC,(IY+%1B)
0023CD C5                  A 10174    	PUSH	BC
0023CE DD31F7              A 10175    	LD	IY,(IX+%FFFFFFF7)
0023D1 FD070B              A 10176    	LD	BC,(IY+%B)
0023D4 C5                  A 10177    	PUSH	BC
0023D5 CD EF 1A 00         A 10178    	CALL	_put_lfn
0023D9 C1                  A 10179    	POP	BC
0023DA C1                  A 10180    	POP	BC
0023DB C1                  A 10181    	POP	BC
0023DC C1                  A 10182    	POP	BC
                           A 10183    ; 2504					fs->wflag = 1;
                           A 10184    .LINE 2504
                           A 10185    
0023DD DD31F7              A 10186    	LD	IY,(IX+%FFFFFFF7)
0023E0 FD360301            A 10187    	LD	(IY+%3),%1
                           A 10188    ; 2505					res = dir_next(dp, 0);	
                           A 10189    .LINE 2505
                           A 10190    
0023E4 01000000            A 10191    	LD	BC,0
0023E8 C5                  A 10192    	PUSH	BC
0023E9 DD0706              A 10193    	LD	BC,(IX+%6)
0023EC C5                  A 10194    	PUSH	BC
0023ED CD 6A 14 00         A 10195    	CALL	_dir_next
0023F1 C1                  A 10196    	POP	BC
0023F2 C1                  A 10197    	POP	BC
0023F3 DD2FFD              A 10198    	LD	(IX+%FFFFFFFD),HL
                           A 10199    ; 2506				} while (res == FR_OK && --
                           A 10200    .LINE 2506
                           A 10201    
0023F6 01000000            A 10202    	LD	BC,0
0023FA DD27FD              A 10203    	LD	HL,(IX+%FFFFFFFD)
0023FD B7                  A 10204    	OR	A,A
0023FE ED42                A 10205    	SBC	HL,BC
002400 20 11               A 10206    	JR	NZ,L_451
002402 DD31FA              A 10207    	LD	IY,(IX+%FFFFFFFA)
002405 ED33FF              A 10208    	LEA	IY,IY+%FFFFFFFF
002408 DD3EFA              A 10209    	LD	(IX+%FFFFFFFA),IY
00240B DD27FA              A 10210    	LD	HL,(IX+%FFFFFFFA)
00240E B7                  A 10211    	OR	A,A
00240F ED42                A 10212    	SBC	HL,BC
002411 20 82               A 10213    	JR	NZ,L_445
                           A 10214    ; 2507			}
                           A 10215    ; 2508		}
002413                     A 10216    L_451:
                           A 10217    .LINE 2508
                           A 10218    
                           A 10219    ; 2509	
                           A 10220    ; 2510	#else	/* Non LFN configuration */
                           A 10221    ; 2511		res = dir_alloc(dp, 1);		/* Allo
                           A 10222    ; 2512	
                           A 10223    ; 2513	#endif
                           A 10224    ; 2514	
                           A 10225    ; 2515		/* Set SFN entry */
                           A 10226    ; 2516		if (res == FR_OK) {
                           A 10227    .LINE 2516
                           A 10228    
002413 DD27FD              A 10229    	LD	HL,(IX+%FFFFFFFD)
002416 B7                  A 10230    	OR	A,A
002417 ED42                A 10231    	SBC	HL,BC
002419 20 6D               A 10232    	JR	NZ,L_452
                           A 10233    ; 2517			res = move_window(fs, dp->sect)
                           A 10234    .LINE 2517
                           A 10235    
00241B DD3106              A 10236    	LD	IY,(IX+%6)
00241E FD0717              A 10237    	LD	BC,(IY+%17)
002421 FD7E1A              A 10238    	LD	A,(IY+%1A)
002424 2600                A 10239    	LD	H,%0
002426 6F                  A 10240    	LD	L,A
002427 E5                  A 10241    	PUSH	HL
002428 C5                  A 10242    	PUSH	BC
002429 DD07F7              A 10243    	LD	BC,(IX+%FFFFFFF7)
00242C C5                  A 10244    	PUSH	BC
00242D CD 1E 04 00         A 10245    	CALL	_move_window
002431 C1                  A 10246    	POP	BC
002432 C1                  A 10247    	POP	BC
002433 C1                  A 10248    	POP	BC
002434 DD2FFD              A 10249    	LD	(IX+%FFFFFFFD),HL
                           A 10250    ; 2518			if (res == FR_OK) {
                           A 10251    .LINE 2518
                           A 10252    
002437 01000000            A 10253    	LD	BC,0
00243B DD27FD              A 10254    	LD	HL,(IX+%FFFFFFFD)
00243E B7                  A 10255    	OR	A,A
00243F ED42                A 10256    	SBC	HL,BC
002441 20 45               A 10257    	JR	NZ,L_452
                           A 10258    ; 2519				memset(dp->dir, 0, SZDIRE);
                           A 10259    .LINE 2519
                           A 10260    
002443 01200000            A 10261    	LD	BC,32
002447 C5                  A 10262    	PUSH	BC
002448 01000000            A 10263    	LD	BC,0
00244C C5                  A 10264    	PUSH	BC
00244D DD3106              A 10265    	LD	IY,(IX+%6)
002450 FD071B              A 10266    	LD	BC,(IY+%1B)
002453 C5                  A 10267    	PUSH	BC
002454 CD 00 00 00         A 10268    	CALL	_memset
002458 C1                  A 10269    	POP	BC
002459 C1                  A 10270    	POP	BC
00245A C1                  A 10271    	POP	BC
                           A 10272    ; 2520				memcpy(dp->dir + DIR_Name, 
                           A 10273    .LINE 2520
                           A 10274    
00245B 010B0000            A 10275    	LD	BC,11
00245F C5                  A 10276    	PUSH	BC
002460 DD3106              A 10277    	LD	IY,(IX+%6)
002463 ED661E              A 10278    	PEA	IY+%1E
002466 FD071B              A 10279    	LD	BC,(IY+%1B)
002469 C5                  A 10280    	PUSH	BC
00246A CD 00 00 00         A 10281    	CALL	_memcpy
00246E C1                  A 10282    	POP	BC
00246F C1                  A 10283    	POP	BC
002470 C1                  A 10284    	POP	BC
                           A 10285    ; 2521	#if FF_USE_LFN
                           A 10286    ; 2522				dp->dir[DIR_NTres] = dp->fn
                           A 10287    .LINE 2522
                           A 10288    
002471 DD3106              A 10289    	LD	IY,(IX+%6)
002474 ED2329              A 10290    	LEA	HL,IY+%29
002477 7E                  A 10291    	LD	A,(HL)
002478 E618                A 10292    	AND	A,%18
00247A FD371B              A 10293    	LD	IY,(IY+%1B)
00247D ED230C              A 10294    	LEA	HL,IY+%C
002480 77                  A 10295    	LD	(HL),A
                           A 10296    ; 2523	#endif
                           A 10297    ; 2524				fs->wflag = 1;
                           A 10298    .LINE 2524
                           A 10299    
002481 DD31F7              A 10300    	LD	IY,(IX+%FFFFFFF7)
002484 FD360301            A 10301    	LD	(IY+%3),%1
                           A 10302    ; 2525			}
                           A 10303    ; 2526		}
002488                     A 10304    L_452:
                           A 10305    .LINE 2526
                           A 10306    
                           A 10307    ; 2527	
                           A 10308    ; 2528		return res;
                           A 10309    .LINE 2528
                           A 10310    
002488 DD27FD              A 10311    	LD	HL,(IX+%FFFFFFFD)
                           A 10312    ; 2529	}
00248B                     A 10313    L_453:
                           A 10314    .LINE 2529
                           A 10315    
00248B DDF9                A 10316    	LD	SP,IX
00248D DDE1                A 10317    	POP	IX
00248F C9                  A 10318    	RET	
                           A 10319    
                           A 10320    
                           A 10321    ;**************************** _dir_register ***
                           A 10322    ;Name                         Addr/Register   S
                           A 10323    ;_memset                             IMPORT  --
                           A 10324    ;_memcpy                             IMPORT  --
                           A 10325    ;sn                                   IX-34    
                           A 10326    ;G_21                                 IX-22    
                           A 10327    ;temp436                              IX-19    
                           A 10328    ;sum                                  IX-16    
                           A 10329    ;len                                  IX-15    
                           A 10330    ;n                                    IX-12    
                           A 10331    ;fs                                    IX-9    
                           A 10332    ;n_ent                                 IX-6    
                           A 10333    ;res                                   IX-3    
                           A 10334    ;dp                                    IX+6    
                           A 10335    
                           A 10336    
                           A 10337    ; Stack Frame Size: 43 (bytes)
                           A 10338    ;       Spill Code: -1 (instruction)
                           A 10339    
                           A 10340    
                           A 10341    .ENDFUNC "dir_register",2529,"_dir_register"
                           A 10342    ; 2530	
                           A 10343    ; 2531	#endif /* !FF_FS_READONLY */
                           A 10344    ; 2532	
                           A 10345    ; 2533	
                           A 10346    ; 2534	
                           A 10347    ; 2535	#if !FF_FS_READONLY && FF_FS_MINIMIZE =
                           A 10348    ; 2536	/*-------------------------------------
                           A 10349    ; 2537	/* Remove an object from the directory 
                           A 10350    ; 2538	/*-------------------------------------
                           A 10351    ; 2539	
                           A 10352    ; 2540	static FRESULT dir_remove (	/* FR_OK:Su
                           A 10353    ; 2541		DIR* dp					/* Director
                           A 10354    ; 2542	)
                           A 10355    ; 2543	{
002490                     A 10356    _dir_remove:
                           A 10357    .DEFINE "_dir_remove"
                           A 10358    
                           A 10359    .VALUE _dir_remove
                           A 10360    
                           A 10361    .CLASS 3
                           A 10362    
                           A 10363    .TYPE 68
                           A 10364    
                           A 10365    .ENDEF
                           A 10366    
                           A 10367    .BEGFUNC "dir_remove",2543,"_dir_remove"
                           A 10368    
                           A 10369    .LINE 2543
                           A 10370    
                           A 10371    .DEFINE "dp"
                           A 10372    
                           A 10373    .CLASS 65
                           A 10374    
                           A 10375    .VALUE 6
                           A 10376    
                           A 10377    .TAG "NONAME3"
                           A 10378    
                           A 10379    .TYPE 40
                           A 10380    
                           A 10381    .ENDEF
                           A 10382    
                           A 10383    .DEFINE "res"
                           A 10384    
                           A 10385    .CLASS 65
                           A 10386    
                           A 10387    .VALUE -3
                           A 10388    
                           A 10389    .TYPE 4
                           A 10390    
                           A 10391    .ENDEF
                           A 10392    
                           A 10393    .DEFINE "fs"
                           A 10394    
                           A 10395    .CLASS 65
                           A 10396    
                           A 10397    .VALUE -6
                           A 10398    
                           A 10399    .TAG "NONAME0"
                           A 10400    
                           A 10401    .TYPE 40
                           A 10402    
                           A 10403    .ENDEF
                           A 10404    
                           A 10405    .DEFINE "last"
                           A 10406    
                           A 10407    .CLASS 65
                           A 10408    
                           A 10409    .VALUE -17
                           A 10410    
                           A 10411    .TYPE 15
                           A 10412    
                           A 10413    .ENDEF
                           A 10414    
002490 DDE5                A 10415    	PUSH	IX
002492 DD210000 00         A 10416    	LD	IX,0
002497 DD39                A 10417    	ADD	IX,SP
002499 ED22EF              A 10418    	LEA	HL,IX+%FFFFFFEF
00249C F9                  A 10419    	LD	SP,HL
                           A 10420    ; 2544		FRESULT res;
                           A 10421    ; 2545		FATFS *fs = dp->obj.fs;
                           A 10422    .LINE 2545
                           A 10423    
00249D DD3106              A 10424    	LD	IY,(IX+%6)
0024A0 FD0700              A 10425    	LD	BC,(IY+%0)
0024A3 DD0FFA              A 10426    	LD	(IX+%FFFFFFFA),BC
                           A 10427    ; 2546	#if FF_USE_LFN		/* LFN configuratio
                           A 10428    ; 2547		DWORD last = dp->dptr;
                           A 10429    .LINE 2547
                           A 10430    
0024A6 FD070F              A 10431    	LD	BC,(IY+%F)
0024A9 FD7E12              A 10432    	LD	A,(IY+%12)
0024AC DD0FEF              A 10433    	LD	(IX+%FFFFFFEF),BC
0024AF DD77F2              A 10434    	LD	(IX+%FFFFFFF2),A
                           A 10435    ; 2548	
                           A 10436    ; 2549		res = (dp->blk_ofs == 0xFFFFFFFF) ?
                           A 10437    .LINE 2549
                           A 10438    
0024B2 FD072A              A 10439    	LD	BC,(IY+%2A)
0024B5 FD7E2D              A 10440    	LD	A,(IY+%2D)
0024B8 DD0FF3              A 10441    	LD	(IX+%FFFFFFF3),BC
0024BB DD77F6              A 10442    	LD	(IX+%FFFFFFF6),A
0024BE C5E1                A 10443    	LD	HL,BC
0024C0 DD5EF6              A 10444    	LD	E,(IX+%FFFFFFF6)
0024C3 01FFFFFF            A 10445    	LD	BC,16777215
0024C7 3EFF                A 10446    	LD	A,%FF
0024C9 CD 00 00 00         A 10447    	CALL	__lcmpu
0024CD 20 09               A 10448    	JR	NZ,L_456
0024CF 01000000            A 10449    	LD	BC,0
0024D3 DD0FF7              A 10450    	LD	(IX+%FFFFFFF7),BC
0024D6 18 18               A 10451    	JR	L_457
0024D8                     A 10452    L_456:
0024D8 DD4EF6              A 10453    	LD	C,(IX+%FFFFFFF6)
0024DB 0600                A 10454    	LD	B,%0
0024DD C5                  A 10455    	PUSH	BC
0024DE DD07F3              A 10456    	LD	BC,(IX+%FFFFFFF3)
0024E1 C5                  A 10457    	PUSH	BC
0024E2 DD0706              A 10458    	LD	BC,(IX+%6)
0024E5 C5                  A 10459    	PUSH	BC
0024E6 CD 50 12 00         A 10460    	CALL	_dir_sdi
0024EA C1                  A 10461    	POP	BC
0024EB C1                  A 10462    	POP	BC
0024EC C1                  A 10463    	POP	BC
0024ED DD2FF7              A 10464    	LD	(IX+%FFFFFFF7),HL
0024F0                     A 10465    L_457:
0024F0 DD07F7              A 10466    	LD	BC,(IX+%FFFFFFF7)
0024F3 DD0FFD              A 10467    	LD	(IX+%FFFFFFFD),BC
                           A 10468    ; 2550		if (res == FR_OK) {
                           A 10469    .LINE 2550
                           A 10470    
0024F6 01000000            A 10471    	LD	BC,0
0024FA DD27FD              A 10472    	LD	HL,(IX+%FFFFFFFD)
0024FD B7                  A 10473    	OR	A,A
0024FE ED42                A 10474    	SBC	HL,BC
002500 20 7D               A 10475    	JR	NZ,L_470
                           A 10476    ; 2551			do {
002502                     A 10477    L_465:
                           A 10478    .LINE 2551
                           A 10479    
                           A 10480    ; 2552				res = move_window(fs, dp->s
                           A 10481    .LINE 2552
                           A 10482    
002502 DD3106              A 10483    	LD	IY,(IX+%6)
002505 FD0717              A 10484    	LD	BC,(IY+%17)
002508 FD7E1A              A 10485    	LD	A,(IY+%1A)
00250B 2600                A 10486    	LD	H,%0
00250D 6F                  A 10487    	LD	L,A
00250E E5                  A 10488    	PUSH	HL
00250F C5                  A 10489    	PUSH	BC
002510 DD07FA              A 10490    	LD	BC,(IX+%FFFFFFFA)
002513 C5                  A 10491    	PUSH	BC
002514 CD 1E 04 00         A 10492    	CALL	_move_window
002518 C1                  A 10493    	POP	BC
002519 C1                  A 10494    	POP	BC
00251A C1                  A 10495    	POP	BC
00251B DD2FFD              A 10496    	LD	(IX+%FFFFFFFD),HL
                           A 10497    ; 2553				if (res != FR_OK) break;
                           A 10498    .LINE 2553
                           A 10499    
00251E 01000000            A 10500    	LD	BC,0
002522 DD27FD              A 10501    	LD	HL,(IX+%FFFFFFFD)
002525 B7                  A 10502    	OR	A,A
002526 ED42                A 10503    	SBC	HL,BC
002528 20 42               A 10504    	JR	NZ,L_468
                           A 10505    ; 2554				if (FF_FS_EXFAT && fs->fs_t
                           A 10506    ; 2555					dp->dir[XDIR_Type] &= 0
                           A 10507    ; 2556				} else {					
                           A 10508    ; 2557					dp->dir[DIR_Name] = DDE
                           A 10509    .LINE 2557
                           A 10510    
00252A DD3106              A 10511    	LD	IY,(IX+%6)
00252D FD271B              A 10512    	LD	HL,(IY+%1B)
002530 36E5                A 10513    	LD	(HL),%E5
                           A 10514    ; 2558				}
                           A 10515    ; 2559				fs->wflag = 1;
                           A 10516    .LINE 2559
                           A 10517    
002532 DD31FA              A 10518    	LD	IY,(IX+%FFFFFFFA)
002535 FD360301            A 10519    	LD	(IY+%3),%1
                           A 10520    ; 2560				if (dp->dptr >= last) break
                           A 10521    .LINE 2560
                           A 10522    
002539 DD3106              A 10523    	LD	IY,(IX+%6)
00253C FD270F              A 10524    	LD	HL,(IY+%F)
00253F FD5E12              A 10525    	LD	E,(IY+%12)
002542 DD07EF              A 10526    	LD	BC,(IX+%FFFFFFEF)
002545 DD7EF2              A 10527    	LD	A,(IX+%FFFFFFF2)
002548 CD 00 00 00         A 10528    	CALL	__lcmpu
00254C 30 1E               A 10529    	JR	NC,L_468
                           A 10530    ; 2561				res = dir_next(dp, 0);	/* 
                           A 10531    .LINE 2561
                           A 10532    
00254E 01000000            A 10533    	LD	BC,0
002552 C5                  A 10534    	PUSH	BC
002553 DD0706              A 10535    	LD	BC,(IX+%6)
002556 C5                  A 10536    	PUSH	BC
002557 CD 6A 14 00         A 10537    	CALL	_dir_next
00255B C1                  A 10538    	POP	BC
00255C C1                  A 10539    	POP	BC
00255D DD2FFD              A 10540    	LD	(IX+%FFFFFFFD),HL
                           A 10541    ; 2562			} while (res == FR_OK);
                           A 10542    .LINE 2562
                           A 10543    
002560 01000000            A 10544    	LD	BC,0
002564 DD27FD              A 10545    	LD	HL,(IX+%FFFFFFFD)
002567 B7                  A 10546    	OR	A,A
002568 ED42                A 10547    	SBC	HL,BC
00256A 28 96               A 10548    	JR	Z,L_465
00256C                     A 10549    L_468:
                           A 10550    ; 2563			if (res == FR_NO_FILE) res = FR
                           A 10551    .LINE 2563
                           A 10552    
00256C 01040000            A 10553    	LD	BC,4
002570 DD27FD              A 10554    	LD	HL,(IX+%FFFFFFFD)
002573 B7                  A 10555    	OR	A,A
002574 ED42                A 10556    	SBC	HL,BC
002576 20 07               A 10557    	JR	NZ,L_470
002578 01020000            A 10558    	LD	BC,2
00257C DD0FFD              A 10559    	LD	(IX+%FFFFFFFD),BC
                           A 10560    ; 2564		}
00257F                     A 10561    L_470:
                           A 10562    .LINE 2564
                           A 10563    
                           A 10564    ; 2565	#else			/* Non LFN configuratio
                           A 10565    ; 2566	
                           A 10566    ; 2567		res = move_window(fs, dp->sect);
                           A 10567    ; 2568		if (res == FR_OK) {
                           A 10568    ; 2569			dp->dir[DIR_Name] = DDEM;	/* 
                           A 10569    ; 2570			fs->wflag = 1;
                           A 10570    ; 2571		}
                           A 10571    ; 2572	#endif
                           A 10572    ; 2573	
                           A 10573    ; 2574		return res;
                           A 10574    .LINE 2574
                           A 10575    
00257F DD27FD              A 10576    	LD	HL,(IX+%FFFFFFFD)
                           A 10577    ; 2575	}
                           A 10578    .LINE 2575
                           A 10579    
002582 DDF9                A 10580    	LD	SP,IX
002584 DDE1                A 10581    	POP	IX
002586 C9                  A 10582    	RET	
                           A 10583    
                           A 10584    
                           A 10585    ;**************************** _dir_remove *****
                           A 10586    ;Name                         Addr/Register   S
                           A 10587    ;last                                 IX-17    
                           A 10588    ;G_22                                 IX-13    
                           A 10589    ;temp454                               IX-9    
                           A 10590    ;fs                                    IX-6    
                           A 10591    ;res                                   IX-3    
                           A 10592    ;dp                                    IX+6    
                           A 10593    
                           A 10594    
                           A 10595    ; Stack Frame Size: 26 (bytes)
                           A 10596    ;       Spill Code: -1 (instruction)
                           A 10597    
                           A 10598    
                           A 10599    .ENDFUNC "dir_remove",2575,"_dir_remove"
                           A 10600    ; 2576	
                           A 10601    ; 2577	#endif /* !FF_FS_READONLY && FF_FS_MINI
                           A 10602    ; 2578	
                           A 10603    ; 2579	
                           A 10604    ; 2580	
                           A 10605    ; 2581	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A 10606    ; 2582	/*-------------------------------------
                           A 10607    ; 2583	/* Get file information from directory 
                           A 10608    ; 2584	/*-------------------------------------
                           A 10609    ; 2585	
                           A 10610    ; 2586	static void get_fileinfo (
                           A 10611    ; 2587		DIR* dp,			/* Pointer to t
                           A 10612    ; 2588		FILINFO* fno		/* Pointer to t
                           A 10613    ; 2589	)
                           A 10614    ; 2590	{
002587                     A 10615    _get_fileinfo:
                           A 10616    .DEFINE "_get_fileinfo"
                           A 10617    
                           A 10618    .VALUE _get_fileinfo
                           A 10619    
                           A 10620    .CLASS 3
                           A 10621    
                           A 10622    .TYPE 65
                           A 10623    
                           A 10624    .ENDEF
                           A 10625    
                           A 10626    .BEGFUNC "get_fileinfo",2590,"_get_fileinfo"
                           A 10627    
                           A 10628    .LINE 2590
                           A 10629    
                           A 10630    .DEFINE "dp"
                           A 10631    
                           A 10632    .CLASS 65
                           A 10633    
                           A 10634    .VALUE 6
                           A 10635    
                           A 10636    .TAG "NONAME3"
                           A 10637    
                           A 10638    .TYPE 40
                           A 10639    
                           A 10640    .ENDEF
                           A 10641    
                           A 10642    .DEFINE "fno"
                           A 10643    
                           A 10644    .CLASS 65
                           A 10645    
                           A 10646    .VALUE 9
                           A 10647    
                           A 10648    .TAG "NONAME4"
                           A 10649    
                           A 10650    .TYPE 40
                           A 10651    
                           A 10652    .ENDEF
                           A 10653    
                           A 10654    .DEFINE "di"
                           A 10655    
                           A 10656    .CLASS 65
                           A 10657    
                           A 10658    .VALUE -3
                           A 10659    
                           A 10660    .TYPE 14
                           A 10661    
                           A 10662    .ENDEF
                           A 10663    
                           A 10664    .DEFINE "wc"
                           A 10665    
                           A 10666    .CLASS 65
                           A 10667    
                           A 10668    .VALUE -5
                           A 10669    
                           A 10670    .TYPE 13
                           A 10671    
                           A 10672    .ENDEF
                           A 10673    
                           A 10674    .DEFINE "si"
                           A 10675    
                           A 10676    .CLASS 65
                           A 10677    
                           A 10678    .VALUE -8
                           A 10679    
                           A 10680    .TYPE 14
                           A 10681    
                           A 10682    .ENDEF
                           A 10683    
                           A 10684    .DEFINE "hs"
                           A 10685    
                           A 10686    .CLASS 65
                           A 10687    
                           A 10688    .VALUE -10
                           A 10689    
                           A 10690    .TYPE 13
                           A 10691    
                           A 10692    .ENDEF
                           A 10693    
                           A 10694    .DEFINE "lcf"
                           A 10695    
                           A 10696    .CLASS 65
                           A 10697    
                           A 10698    .VALUE -11
                           A 10699    
                           A 10700    .TYPE 12
                           A 10701    
                           A 10702    .ENDEF
                           A 10703    
                           A 10704    .DEFINE "nw"
                           A 10705    
                           A 10706    .CLASS 65
                           A 10707    
                           A 10708    .VALUE -23
                           A 10709    
                           A 10710    .TYPE 14
                           A 10711    
                           A 10712    .ENDEF
                           A 10713    
                           A 10714    .DEFINE "fs"
                           A 10715    
                           A 10716    .CLASS 65
                           A 10717    
                           A 10718    .VALUE -29
                           A 10719    
                           A 10720    .TAG "NONAME0"
                           A 10721    
                           A 10722    .TYPE 40
                           A 10723    
                           A 10724    .ENDEF
                           A 10725    
002587 DDE5                A 10726    	PUSH	IX
002589 DD210000 00         A 10727    	LD	IX,0
00258E DD39                A 10728    	ADD	IX,SP
002590 ED22DC              A 10729    	LEA	HL,IX+%FFFFFFDC
002593 F9                  A 10730    	LD	SP,HL
                           A 10731    ; 2591		UINT si, di;
                           A 10732    ; 2592	#if FF_USE_LFN
                           A 10733    ; 2593		BYTE lcf;
                           A 10734    ; 2594		WCHAR wc, hs;
                           A 10735    ; 2595		FATFS *fs = dp->obj.fs;
                           A 10736    .LINE 2595
                           A 10737    
002594 DD3106              A 10738    	LD	IY,(IX+%6)
002597 FD0700              A 10739    	LD	BC,(IY+%0)
00259A DD0FE3              A 10740    	LD	(IX+%FFFFFFE3),BC
                           A 10741    ; 2596		UINT nw;
                           A 10742    ; 2597	#else
                           A 10743    ; 2598		TCHAR c;
                           A 10744    ; 2599	#endif
                           A 10745    ; 2600	
                           A 10746    ; 2601	
                           A 10747    ; 2602		fno->fname[0] = 0;			/* Inva
                           A 10748    .LINE 2602
                           A 10749    
00259D DD3109              A 10750    	LD	IY,(IX+%9)
0025A0 FD361600            A 10751    	LD	(IY+%16),%0
                           A 10752    ; 2603		if (dp->sect == 0) return;	/* Exit
                           A 10753    .LINE 2603
                           A 10754    
0025A4 DD3106              A 10755    	LD	IY,(IX+%6)
0025A7 FD2717              A 10756    	LD	HL,(IY+%17)
0025AA FD5E1A              A 10757    	LD	E,(IY+%1A)
0025AD 01000000            A 10758    	LD	BC,0
0025B1 AF                  A 10759    	XOR	A,A
0025B2 CD 00 00 00         A 10760    	CALL	__lcmpu
0025B6 CA DB 28 00         A 10761    	JR	Z,L_519
                           A 10762    ; 2604	
                           A 10763    ; 2605	#if FF_USE_LFN		/* LFN configuratio
                           A 10764    ; 2606	#if FF_FS_EXFAT
                           A 10765    ; 2607		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 10766    ; 2608			UINT nc = 0;
                           A 10767    ; 2609	
                           A 10768    ; 2610			si = SZDIRE * 2; di = 0;	/* 
                           A 10769    ; 2611			hs = 0;
                           A 10770    ; 2612			while (nc < fs->dirbuf[XDIR_Num
                           A 10771    ; 2613				if (si >= MAXDIRB(FF_MAX_LF
                           A 10772    ; 2614				if ((si % SZDIRE) == 0) si 
                           A 10773    ; 2615				wc = ld_word(fs->dirbuf + s
                           A 10774    ; 2616				if (hs == 0 && IsSurrogate(
                           A 10775    ; 2617					hs = wc; continue;		
                           A 10776    ; 2618				}
                           A 10777    ; 2619				nw = put_utf((DWORD)hs << 1
                           A 10778    ; 2620				if (nw == 0) { di = 0; brea
                           A 10779    ; 2621				di += nw;
                           A 10780    ; 2622				hs = 0;
                           A 10781    ; 2623			}
                           A 10782    ; 2624			if (hs != 0) di = 0;			
                           A 10783    ; 2625			if (di == 0) fno->fname[di++] =
                           A 10784    ; 2626			fno->fname[di] = 0;				
                           A 10785    ; 2627			fno->altname[0] = 0;			
                           A 10786    ; 2628	
                           A 10787    ; 2629			fno->fattrib = fs->dirbuf[XDIR_
                           A 10788    ; 2630			fno->fsize = (fno->fattrib & AM
                           A 10789    ; 2631			fno->ftime = ld_word(fs->dirbuf
                           A 10790    ; 2632			fno->fdate = ld_word(fs->dirbuf
                           A 10791    ; 2633			return;
                           A 10792    ; 2634		} else
                           A 10793    ; 2635	#endif
                           A 10794    ; 2636		{	/* FAT/FAT32 volume */
                           A 10795    ; 2637			if (dp->blk_ofs != 0xFFFFFFFF) 
                           A 10796    .LINE 2637
                           A 10797    
0025BA DD3106              A 10798    	LD	IY,(IX+%6)
0025BD FD272A              A 10799    	LD	HL,(IY+%2A)
0025C0 FD5E2D              A 10800    	LD	E,(IY+%2D)
0025C3 01FFFFFF            A 10801    	LD	BC,16777215
0025C7 3EFF                A 10802    	LD	A,%FF
0025C9 CD 00 00 00         A 10803    	CALL	__lcmpu
0025CD CA E8 26 00         A 10804    	JR	Z,L_487
                           A 10805    ; 2638				si = di = 0;
                           A 10806    .LINE 2638
                           A 10807    
0025D1 01000000            A 10808    	LD	BC,0
0025D5 DD0FFD              A 10809    	LD	(IX+%FFFFFFFD),BC
0025D8 DD0FF8              A 10810    	LD	(IX+%FFFFFFF8),BC
                           A 10811    ; 2639				hs = 0;
                           A 10812    .LINE 2639
                           A 10813    
0025DB DD36F600            A 10814    	LD	(IX+%FFFFFFF6),%0
0025DF DD36F700            A 10815    	LD	(IX+%FFFFFFF7),%0
                           A 10816    ; 2640				while (fs->lfnbuf[si] != 0)
                           A 10817    .LINE 2640
                           A 10818    
0025E3 C3 A9 26 00         A 10819    	JR	L_480
0025E7                     A 10820    L_481:
                           A 10821    ; 2641					wc = fs->lfnbuf[si++];	
                           A 10822    .LINE 2641
                           A 10823    
0025E7 DD27F8              A 10824    	LD	HL,(IX+%FFFFFFF8)
0025EA 29                  A 10825    	ADD	HL,HL
0025EB DD07EF              A 10826    	LD	BC,(IX+%FFFFFFEF)
0025EE 09                  A 10827    	ADD	HL,BC
0025EF ED07                A 10828    	LD	BC,(HL)
0025F1 DD71FB              A 10829    	LD	(IX+%FFFFFFFB),C
0025F4 DD70FC              A 10830    	LD	(IX+%FFFFFFFC),B
0025F7 DD07F8              A 10831    	LD	BC,(IX+%FFFFFFF8)
0025FA 03                  A 10832    	INC	BC
0025FB DD0FF8              A 10833    	LD	(IX+%FFFFFFF8),BC
                           A 10834    ; 2642					if (hs == 0 && IsSurrog
                           A 10835    .LINE 2642
                           A 10836    
0025FE 49010000            A 10837    	LD.LIS	BC,0
002602 DD27F6              A 10838    	LD	HL,(IX+%FFFFFFF6)
002605 B7                  A 10839    	OR	A,A
002606 40ED42              A 10840    	SBC.SIS	HL,BC
002609 20 25               A 10841    	JR	NZ,L_477
00260B 490100D8            A 10842    	LD.LIS	BC,55296
00260F DD27FB              A 10843    	LD	HL,(IX+%FFFFFFFB)
002612 B7                  A 10844    	OR	A,A
002613 40ED42              A 10845    	SBC.SIS	HL,BC
002616 38 18               A 10846    	JR	C,L_477
002618 DD07FB              A 10847    	LD	BC,(IX+%FFFFFFFB)
00261B 4921FFDF            A 10848    	LD.LIS	HL,57343
00261F B7                  A 10849    	OR	A,A
002620 40ED42              A 10850    	SBC.SIS	HL,BC
002623 38 0B               A 10851    	JR	C,L_477
                           A 10852    ; 2643						hs = wc; continue;	
                           A 10853    .LINE 2643
                           A 10854    
002625 DD07FB              A 10855    	LD	BC,(IX+%FFFFFFFB)
002628 DD71F6              A 10856    	LD	(IX+%FFFFFFF6),C
00262B DD70F7              A 10857    	LD	(IX+%FFFFFFF7),B
00262E 18 79               A 10858    	JR	L_480
                           A 10859    ; 2644					}
002630                     A 10860    L_477:
                           A 10861    .LINE 2644
                           A 10862    
                           A 10863    ; 2645					nw = put_utf((DWORD)hs 
                           A 10864    .LINE 2645
                           A 10865    
002630 21FF0000            A 10866    	LD	HL,255
002634 DD07FD              A 10867    	LD	BC,(IX+%FFFFFFFD)
002637 B7                  A 10868    	OR	A,A
002638 ED42                A 10869    	SBC	HL,BC
00263A E5                  A 10870    	PUSH	HL
00263B DD07FD              A 10871    	LD	BC,(IX+%FFFFFFFD)
00263E DD3109              A 10872    	LD	IY,(IX+%9)
002641 ED2316              A 10873    	LEA	HL,IY+%16
002644 09                  A 10874    	ADD	HL,BC
002645 E5                  A 10875    	PUSH	HL
002646 DD07F6              A 10876    	LD	BC,(IX+%FFFFFFF6)
002649 CD 00 00 00         A 10877    	CALL	__stoiu
00264D E5                  A 10878    	PUSH	HL
00264E E5                  A 10879    	PUSH	HL
00264F B7ED62              A 10880    	UEXT	HL
002652 E5                  A 10881    	PUSH	HL
002653 33                  A 10882    	INC	SP
002654 C1                  A 10883    	POP	BC
002655 DD0FDD              A 10884    	LD	(IX+%FFFFFFDD),BC	; spill
002658 D1                  A 10885    	POP	DE
002659 33                  A 10886    	INC	SP
00265A 33                  A 10887    	INC	SP
00265B DD07FB              A 10888    	LD	BC,(IX+%FFFFFFFB)
00265E CD 00 00 00         A 10889    	CALL	__stoiu
002662 AF                  A 10890    	XOR	A,A
002663 DD2FE0              A 10891    	LD	(IX+%FFFFFFE0),HL	; spill
002666 DD27DD              A 10892    	LD	HL,(IX+%FFFFFFDD)
002669 DD07E0              A 10893    	LD	BC,(IX+%FFFFFFE0)	; unspill
00266C CD 00 00 00         A 10894    	CALL	__lor
002670 4B                  A 10895    	LD	C,E
002671 0600                A 10896    	LD	B,%0
002673 C5                  A 10897    	PUSH	BC
002674 E5                  A 10898    	PUSH	HL
002675 DD77DC              A 10899    	LD	(IX+%FFFFFFDC),A
002678 CD AC 02 00         A 10900    	CALL	_put_utf
00267C DD7EDC              A 10901    	LD	A,(IX+%FFFFFFDC)
00267F C1                  A 10902    	POP	BC
002680 C1                  A 10903    	POP	BC
002681 C1                  A 10904    	POP	BC
002682 C1                  A 10905    	POP	BC
002683 DD2FE9              A 10906    	LD	(IX+%FFFFFFE9),HL
                           A 10907    ; 2646					if (nw == 0) { di = 0; 
                           A 10908    .LINE 2646
                           A 10909    
002686 01000000            A 10910    	LD	BC,0
00268A DD27E9              A 10911    	LD	HL,(IX+%FFFFFFE9)
00268D B7                  A 10912    	OR	A,A
00268E ED42                A 10913    	SBC	HL,BC
002690 20 05               A 10914    	JR	NZ,L_479
002692 DD0FFD              A 10915    	LD	(IX+%FFFFFFFD),BC
002695 18 31               A 10916    	JR	L_483
002697                     A 10917    L_479:
                           A 10918    ; 2647					di += nw;
                           A 10919    .LINE 2647
                           A 10920    
002697 DD07E9              A 10921    	LD	BC,(IX+%FFFFFFE9)
00269A DD27FD              A 10922    	LD	HL,(IX+%FFFFFFFD)
00269D 09                  A 10923    	ADD	HL,BC
00269E DD2FFD              A 10924    	LD	(IX+%FFFFFFFD),HL
                           A 10925    ; 2648					hs = 0;
                           A 10926    .LINE 2648
                           A 10927    
0026A1 DD36F600            A 10928    	LD	(IX+%FFFFFFF6),%0
0026A5 DD36F700            A 10929    	LD	(IX+%FFFFFFF7),%0
                           A 10930    ; 2649				}
0026A9                     A 10931    L_480:
                           A 10932    .LINE 2649
                           A 10933    
0026A9 DD31E3              A 10934    	LD	IY,(IX+%FFFFFFE3)
0026AC FD070B              A 10935    	LD	BC,(IY+%B)
0026AF DD0FEF              A 10936    	LD	(IX+%FFFFFFEF),BC
0026B2 DD27F8              A 10937    	LD	HL,(IX+%FFFFFFF8)
0026B5 29                  A 10938    	ADD	HL,HL
0026B6 DD07EF              A 10939    	LD	BC,(IX+%FFFFFFEF)
0026B9 09                  A 10940    	ADD	HL,BC
0026BA 49010000            A 10941    	LD.LIS	BC,0
0026BE ED27                A 10942    	LD	HL,(HL)
0026C0 B7                  A 10943    	OR	A,A
0026C1 40ED42              A 10944    	SBC.SIS	HL,BC
0026C4 C2 E7 25 00         A 10945    	JR	NZ,L_481
0026C8                     A 10946    L_483:
                           A 10947    ; 2650				if (hs != 0) di = 0;	/* 
                           A 10948    .LINE 2650
                           A 10949    
0026C8 49010000            A 10950    	LD.LIS	BC,0
0026CC DD27F6              A 10951    	LD	HL,(IX+%FFFFFFF6)
0026CF B7                  A 10952    	OR	A,A
0026D0 40ED42              A 10953    	SBC.SIS	HL,BC
0026D3 28 07               A 10954    	JR	Z,L_484
0026D5 01000000            A 10955    	LD	BC,0
0026D9 DD0FFD              A 10956    	LD	(IX+%FFFFFFFD),BC
0026DC                     A 10957    L_484:
                           A 10958    ; 2651				fno->fname[di] = 0;		/* 
                           A 10959    .LINE 2651
                           A 10960    
0026DC DD07FD              A 10961    	LD	BC,(IX+%FFFFFFFD)
0026DF DD3109              A 10962    	LD	IY,(IX+%9)
0026E2 ED2316              A 10963    	LEA	HL,IY+%16
0026E5 09                  A 10964    	ADD	HL,BC
0026E6 3600                A 10965    	LD	(HL),%0
                           A 10966    ; 2652			}
                           A 10967    ; 2653		}
0026E8                     A 10968    L_487:
                           A 10969    .LINE 2653
                           A 10970    
                           A 10971    ; 2654	
                           A 10972    ; 2655		si = di = 0;
                           A 10973    .LINE 2655
                           A 10974    
0026E8 01000000            A 10975    	LD	BC,0
0026EC DD0FFD              A 10976    	LD	(IX+%FFFFFFFD),BC
0026EF DD0FF8              A 10977    	LD	(IX+%FFFFFFF8),BC
                           A 10978    ; 2656		while (si < 11) {		/* Get SFN 
                           A 10979    .LINE 2656
                           A 10980    
0026F2 18 7E               A 10981    	JR	L_498
0026F4                     A 10982    L_499:
                           A 10983    ; 2657			wc = dp->dir[si++];			/* 
                           A 10984    .LINE 2657
                           A 10985    
0026F4 DD07F8              A 10986    	LD	BC,(IX+%FFFFFFF8)
0026F7 DD3106              A 10987    	LD	IY,(IX+%6)
0026FA FD271B              A 10988    	LD	HL,(IY+%1B)
0026FD 09                  A 10989    	ADD	HL,BC
0026FE 4E                  A 10990    	LD	C,(HL)
0026FF 0600                A 10991    	LD	B,%0
002701 C5E1                A 10992    	LD	HL,BC
002703 DD75FB              A 10993    	LD	(IX+%FFFFFFFB),L
002706 DD74FC              A 10994    	LD	(IX+%FFFFFFFC),H
002709 DD07F8              A 10995    	LD	BC,(IX+%FFFFFFF8)
00270C 03                  A 10996    	INC	BC
00270D DD0FF8              A 10997    	LD	(IX+%FFFFFFF8),BC
                           A 10998    ; 2658			if (wc == ' ') continue;	/* 
                           A 10999    .LINE 2658
                           A 11000    
002710 49012000            A 11001    	LD.LIS	BC,32
002714 DD27FB              A 11002    	LD	HL,(IX+%FFFFFFFB)
002717 B7                  A 11003    	OR	A,A
002718 40ED42              A 11004    	SBC.SIS	HL,BC
00271B 28 55               A 11005    	JR	Z,L_498
                           A 11006    ; 2659			if (wc == RDDEM) wc = DDEM;	/* 
                           A 11007    .LINE 2659
                           A 11008    
00271D 49010500            A 11009    	LD.LIS	BC,5
002721 DD27FB              A 11010    	LD	HL,(IX+%FFFFFFFB)
002724 B7                  A 11011    	OR	A,A
002725 40ED42              A 11012    	SBC.SIS	HL,BC
002728 20 08               A 11013    	JR	NZ,L_495
00272A DD36FBE5            A 11014    	LD	(IX+%FFFFFFFB),%E5
00272E DD36FC00            A 11015    	LD	(IX+%FFFFFFFC),%0
002732                     A 11016    L_495:
                           A 11017    ; 2660			if (si == 9 && di < FF_SFN_BUF)
                           A 11018    .LINE 2660
                           A 11019    
002732 01090000            A 11020    	LD	BC,9
002736 DD27F8              A 11021    	LD	HL,(IX+%FFFFFFF8)
002739 B7                  A 11022    	OR	A,A
00273A ED42                A 11023    	SBC	HL,BC
00273C 20 1F               A 11024    	JR	NZ,L_497
00273E 010C0000            A 11025    	LD	BC,12
002742 DD27FD              A 11026    	LD	HL,(IX+%FFFFFFFD)
002745 B7                  A 11027    	OR	A,A
002746 ED42                A 11028    	SBC	HL,BC
002748 30 13               A 11029    	JR	NC,L_497
00274A DD07FD              A 11030    	LD	BC,(IX+%FFFFFFFD)
00274D DD3109              A 11031    	LD	IY,(IX+%9)
002750 ED2309              A 11032    	LEA	HL,IY+%9
002753 09                  A 11033    	ADD	HL,BC
002754 362E                A 11034    	LD	(HL),%2E
002756 DD07FD              A 11035    	LD	BC,(IX+%FFFFFFFD)
002759 03                  A 11036    	INC	BC
00275A DD0FFD              A 11037    	LD	(IX+%FFFFFFFD),BC
00275D                     A 11038    L_497:
                           A 11039    ; 2661	#if FF_LFN_UNICODE >= 1	/* Unicode outp
                           A 11040    ; 2662			if (dbc_1st((BYTE)wc) && si != 
                           A 11041    ; 2663				wc = wc << 8 | dp->dir[si++
                           A 11042    ; 2664			}
                           A 11043    ; 2665			wc = ff_oem2uni(wc, CODEPAGE);	
                           A 11044    ; 2666			if (wc == 0) { di = 0; break; }
                           A 11045    ; 2667			nw = put_utf(wc, &fno->altname[
                           A 11046    ; 2668			if (nw == 0) { di = 0; break; }
                           A 11047    ; 2669			di += nw;
                           A 11048    ; 2670	#else					/* ANSI/OEM out
                           A 11049    ; 2671			fno->altname[di++] = (TCHAR)wc;
                           A 11050    .LINE 2671
                           A 11051    
00275D DD7EFB              A 11052    	LD	A,(IX+%FFFFFFFB)
002760 DD07FD              A 11053    	LD	BC,(IX+%FFFFFFFD)
002763 DD3109              A 11054    	LD	IY,(IX+%9)
002766 ED2309              A 11055    	LEA	HL,IY+%9
002769 09                  A 11056    	ADD	HL,BC
00276A 77                  A 11057    	LD	(HL),A
00276B DD07FD              A 11058    	LD	BC,(IX+%FFFFFFFD)
00276E 03                  A 11059    	INC	BC
00276F DD0FFD              A 11060    	LD	(IX+%FFFFFFFD),BC
                           A 11061    ; 2672	#endif
                           A 11062    ; 2673		}
002772                     A 11063    L_498:
                           A 11064    .LINE 2673
                           A 11065    
002772 010B0000            A 11066    	LD	BC,11
002776 DD27F8              A 11067    	LD	HL,(IX+%FFFFFFF8)
002779 B7                  A 11068    	OR	A,A
00277A ED42                A 11069    	SBC	HL,BC
00277C DA F4 26 00         A 11070    	JR	C,L_499
                           A 11071    ; 2674		fno->altname[di] = 0;	/* Terminat
                           A 11072    .LINE 2674
                           A 11073    
002780 DD3109              A 11074    	LD	IY,(IX+%9)
002783 ED0309              A 11075    	LEA	BC,IY+%9
002786 DD0FEC              A 11076    	LD	(IX+%FFFFFFEC),BC
002789 DD07FD              A 11077    	LD	BC,(IX+%FFFFFFFD)
00278C ED2309              A 11078    	LEA	HL,IY+%9
00278F 09                  A 11079    	ADD	HL,BC
002790 3600                A 11080    	LD	(HL),%0
                           A 11081    ; 2675	
                           A 11082    ; 2676		if (fno->fname[0] == 0) {	/* If L
                           A 11083    .LINE 2676
                           A 11084    
002792 ED0316              A 11085    	LEA	BC,IY+%16
002795 DD0FF2              A 11086    	LD	(IX+%FFFFFFF2),BC
002798 FD7E16              A 11087    	LD	A,(IY+%16)
00279B B7                  A 11088    	OR	A,A
00279C C2 7D 28 00         A 11089    	JR	NZ,L_518
                           A 11090    ; 2677			if (di == 0) {	/* If LFN and S
                           A 11091    .LINE 2677
                           A 11092    
0027A0 01000000            A 11093    	LD	BC,0
0027A4 DD27FD              A 11094    	LD	HL,(IX+%FFFFFFFD)
0027A7 B7                  A 11095    	OR	A,A
0027A8 ED42                A 11096    	SBC	HL,BC
0027AA 20 1D               A 11097    	JR	NZ,L_514
                           A 11098    ; 2678				fno->fname[di++] = '?';
                           A 11099    .LINE 2678
                           A 11100    
0027AC DD3109              A 11101    	LD	IY,(IX+%9)
0027AF ED0316              A 11102    	LEA	BC,IY+%16
0027B2 DD0FF2              A 11103    	LD	(IX+%FFFFFFF2),BC
0027B5 DD07FD              A 11104    	LD	BC,(IX+%FFFFFFFD)
0027B8 ED2316              A 11105    	LEA	HL,IY+%16
0027BB 09                  A 11106    	ADD	HL,BC
0027BC 363F                A 11107    	LD	(HL),%3F
0027BE DD07FD              A 11108    	LD	BC,(IX+%FFFFFFFD)
0027C1 03                  A 11109    	INC	BC
0027C2 DD0FFD              A 11110    	LD	(IX+%FFFFFFFD),BC
                           A 11111    ; 2679			} else {
                           A 11112    .LINE 2679
                           A 11113    
0027C5 C3 63 28 00         A 11114    	JR	L_515
0027C9                     A 11115    L_514:
                           A 11116    ; 2680				for (si = di = 0, lcf = NS_
                           A 11117    .LINE 2680
                           A 11118    
0027C9 DD0FFD              A 11119    	LD	(IX+%FFFFFFFD),BC
0027CC DD0FF8              A 11120    	LD	(IX+%FFFFFFF8),BC
0027CF DD36F508            A 11121    	LD	(IX+%FFFFFFF5),%8
0027D3 18 75               A 11122    	JR	L_512
0027D5                     A 11123    L_510:
                           A 11124    ; 2681					wc = (WCHAR)fno->altnam
                           A 11125    .LINE 2681
                           A 11126    
0027D5 DD27E6              A 11127    	LD	HL,(IX+%FFFFFFE6)
0027D8 7E                  A 11128    	LD	A,(HL)
0027D9 47                  A 11129    	LD	B,A
0027DA 17ED62              A 11130    	SEXT	HL
0027DD DD70FB              A 11131    	LD	(IX+%FFFFFFFB),B
0027E0 DD74FC              A 11132    	LD	(IX+%FFFFFFFC),H
                           A 11133    ; 2682					if (wc == '.') lcf = NS
                           A 11134    .LINE 2682
                           A 11135    
0027E3 49012E00            A 11136    	LD.LIS	BC,46
0027E7 DD27FB              A 11137    	LD	HL,(IX+%FFFFFFFB)
0027EA B7                  A 11138    	OR	A,A
0027EB 40ED42              A 11139    	SBC.SIS	HL,BC
0027EE 20 04               A 11140    	JR	NZ,L_508
0027F0 DD36F510            A 11141    	LD	(IX+%FFFFFFF5),%10
0027F4                     A 11142    L_508:
                           A 11143    ; 2683					if (IsUpper(wc) && (dp-
                           A 11144    .LINE 2683
                           A 11145    
0027F4 49014100            A 11146    	LD.LIS	BC,65
0027F8 DD27FB              A 11147    	LD	HL,(IX+%FFFFFFFB)
0027FB B7                  A 11148    	OR	A,A
0027FC 40ED42              A 11149    	SBC.SIS	HL,BC
0027FF 38 27               A 11150    	JR	C,L_509
002801 DD07FB              A 11151    	LD	BC,(IX+%FFFFFFFB)
002804 49215A00            A 11152    	LD.LIS	HL,90
002808 B7                  A 11153    	OR	A,A
002809 40ED42              A 11154    	SBC.SIS	HL,BC
00280C 38 1A               A 11155    	JR	C,L_509
00280E DD3106              A 11156    	LD	IY,(IX+%6)
002811 FD371B              A 11157    	LD	IY,(IY+%1B)
002814 FD7E0C              A 11158    	LD	A,(IY+%C)
002817 DDA6F5              A 11159    	AND	A,(IX+%FFFFFFF5)
00281A 28 0C               A 11160    	JR	Z,L_509
00281C DD31FB              A 11161    	LD	IY,(IX+%FFFFFFFB)
00281F ED2320              A 11162    	LEA	HL,IY+%20
002822 DD75FB              A 11163    	LD	(IX+%FFFFFFFB),L
002825 DD74FC              A 11164    	LD	(IX+%FFFFFFFC),H
002828                     A 11165    L_509:
                           A 11166    ; 2684					fno->fname[di] = (TCHAR
                           A 11167    .LINE 2684
                           A 11168    
002828 DD3109              A 11169    	LD	IY,(IX+%9)
00282B ED0316              A 11170    	LEA	BC,IY+%16
00282E DD0FF2              A 11171    	LD	(IX+%FFFFFFF2),BC
002831 DD7EFB              A 11172    	LD	A,(IX+%FFFFFFFB)
002834 DD07FD              A 11173    	LD	BC,(IX+%FFFFFFFD)
002837 ED2316              A 11174    	LEA	HL,IY+%16
00283A 09                  A 11175    	ADD	HL,BC
00283B 77                  A 11176    	LD	(HL),A
00283C DD07F8              A 11177    	LD	BC,(IX+%FFFFFFF8)
00283F 03                  A 11178    	INC	BC
002840 DD0FF8              A 11179    	LD	(IX+%FFFFFFF8),BC
002843 DD07FD              A 11180    	LD	BC,(IX+%FFFFFFFD)
002846 03                  A 11181    	INC	BC
002847 DD0FFD              A 11182    	LD	(IX+%FFFFFFFD),BC
                           A 11183    ; 2685				}
00284A                     A 11184    L_512:
                           A 11185    .LINE 2685
                           A 11186    
00284A DD3109              A 11187    	LD	IY,(IX+%9)
00284D ED0309              A 11188    	LEA	BC,IY+%9
002850 DD0FEC              A 11189    	LD	(IX+%FFFFFFEC),BC
002853 DD07F8              A 11190    	LD	BC,(IX+%FFFFFFF8)
002856 ED2309              A 11191    	LEA	HL,IY+%9
002859 09                  A 11192    	ADD	HL,BC
00285A DD2FE6              A 11193    	LD	(IX+%FFFFFFE6),HL
00285D 7E                  A 11194    	LD	A,(HL)
00285E B7                  A 11195    	OR	A,A
00285F C2 D5 27 00         A 11196    	JR	NZ,L_510
                           A 11197    ; 2686			}
002863                     A 11198    L_515:
                           A 11199    .LINE 2686
                           A 11200    
                           A 11201    ; 2687			fno->fname[di] = 0;	/* Terminat
                           A 11202    .LINE 2687
                           A 11203    
002863 DD07FD              A 11204    	LD	BC,(IX+%FFFFFFFD)
002866 DD27F2              A 11205    	LD	HL,(IX+%FFFFFFF2)
002869 09                  A 11206    	ADD	HL,BC
00286A 3600                A 11207    	LD	(HL),%0
                           A 11208    ; 2688			if (!dp->dir[DIR_NTres]) fno->a
                           A 11209    .LINE 2688
                           A 11210    
00286C DD3106              A 11211    	LD	IY,(IX+%6)
00286F FD371B              A 11212    	LD	IY,(IY+%1B)
002872 FD7E0C              A 11213    	LD	A,(IY+%C)
002875 B7                  A 11214    	OR	A,A
002876 20 05               A 11215    	JR	NZ,L_518
002878 DD27EC              A 11216    	LD	HL,(IX+%FFFFFFEC)
00287B 3600                A 11217    	LD	(HL),%0
                           A 11218    ; 2689		}
00287D                     A 11219    L_518:
                           A 11220    .LINE 2689
                           A 11221    
                           A 11222    ; 2690	
                           A 11223    ; 2691	#else	/* Non-LFN configuration */
                           A 11224    ; 2692		si = di = 0;
                           A 11225    ; 2693		while (si < 11) {		/* Copy nam
                           A 11226    ; 2694			c = (TCHAR)dp->dir[si++];
                           A 11227    ; 2695			if (c == ' ') continue;		/* 
                           A 11228    ; 2696			if (c == RDDEM) c = DDEM;	/* 
                           A 11229    ; 2697			if (si == 9) fno->fname[di++] =
                           A 11230    ; 2698			fno->fname[di++] = c;
                           A 11231    ; 2699		}
                           A 11232    ; 2700		fno->fname[di] = 0;		/* Terminat
                           A 11233    ; 2701	#endif
                           A 11234    ; 2702	
                           A 11235    ; 2703		fno->fattrib = dp->dir[DIR_Attr] & 
                           A 11236    .LINE 2703
                           A 11237    
00287D DD3106              A 11238    	LD	IY,(IX+%6)
002880 FD371B              A 11239    	LD	IY,(IY+%1B)
002883 ED230B              A 11240    	LEA	HL,IY+%B
002886 7E                  A 11241    	LD	A,(HL)
002887 E63F                A 11242    	AND	A,%3F
002889 DD3109              A 11243    	LD	IY,(IX+%9)
00288C FD7708              A 11244    	LD	(IY+%8),A
                           A 11245    ; 2704		fno->fsize = ld_dword(dp->dir + DIR
                           A 11246    .LINE 2704
                           A 11247    
00288F DD3106              A 11248    	LD	IY,(IX+%6)
002892 FD371B              A 11249    	LD	IY,(IY+%1B)
002895 ED031C              A 11250    	LEA	BC,IY+%1C
002898 C5                  A 11251    	PUSH	BC
002899 CD 3C 00 00         A 11252    	CALL	_ld_dword
00289D C1                  A 11253    	POP	BC
00289E DD3109              A 11254    	LD	IY,(IX+%9)
0028A1 FD2F00              A 11255    	LD	(IY+%0),HL
0028A4 FD7303              A 11256    	LD	(IY+%3),E
                           A 11257    ; 2705		fno->ftime = ld_word(dp->dir + DIR_
                           A 11258    .LINE 2705
                           A 11259    
0028A7 DD3106              A 11260    	LD	IY,(IX+%6)
0028AA FD371B              A 11261    	LD	IY,(IY+%1B)
0028AD ED0316              A 11262    	LEA	BC,IY+%16
0028B0 C5                  A 11263    	PUSH	BC
0028B1 CD 00 00 00         A 11264    	CALL	_ld_word
0028B5 C1                  A 11265    	POP	BC
0028B6 DD3109              A 11266    	LD	IY,(IX+%9)
0028B9 E5C1                A 11267    	LD	BC,HL
0028BB FD7106              A 11268    	LD	(IY+%6),C
0028BE FD7007              A 11269    	LD	(IY+%7),B
                           A 11270    ; 2706		fno->fdate = ld_word(dp->dir + DIR_
                           A 11271    .LINE 2706
                           A 11272    
0028C1 DD3106              A 11273    	LD	IY,(IX+%6)
0028C4 FD371B              A 11274    	LD	IY,(IY+%1B)
0028C7 ED0318              A 11275    	LEA	BC,IY+%18
0028CA C5                  A 11276    	PUSH	BC
0028CB CD 00 00 00         A 11277    	CALL	_ld_word
0028CF C1                  A 11278    	POP	BC
0028D0 DD3109              A 11279    	LD	IY,(IX+%9)
0028D3 E5C1                A 11280    	LD	BC,HL
0028D5 FD7104              A 11281    	LD	(IY+%4),C
0028D8 FD7005              A 11282    	LD	(IY+%5),B
                           A 11283    ; 2707	}
0028DB                     A 11284    L_519:
                           A 11285    .LINE 2707
                           A 11286    
0028DB DDF9                A 11287    	LD	SP,IX
0028DD DDE1                A 11288    	POP	IX
0028DF C9                  A 11289    	RET	
                           A 11290    
                           A 11291    
                           A 11292    ;**************************** _get_fileinfo ***
                           A 11293    ;Name                         Addr/Register   S
                           A 11294    ;fs                                   IX-29    
                           A 11295    ;G_25                                 IX-26    
                           A 11296    ;nw                                   IX-23    
                           A 11297    ;G_29                                 IX-20    
                           A 11298    ;G_23                                 IX-17    
                           A 11299    ;G_28                                 IX-14    
                           A 11300    ;lcf                                  IX-11    
                           A 11301    ;hs                                   IX-10    
                           A 11302    ;si                                    IX-8    
                           A 11303    ;wc                                    IX-5    
                           A 11304    ;di                                    IX-3    
                           A 11305    ;fno                                   IX+9    
                           A 11306    ;dp                                    IX+6    
                           A 11307    
                           A 11308    
                           A 11309    ; Stack Frame Size: 48 (bytes)
                           A 11310    ;       Spill Code: -2 (instruction)
                           A 11311    
                           A 11312    
                           A 11313    .ENDFUNC "get_fileinfo",2707,"_get_fileinfo"
                           A 11314    ; 2708	
                           A 11315    ; 2709	#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_
                           A 11316    ; 2710	
                           A 11317    ; 2711	
                           A 11318    ; 2712	
                           A 11319    ; 2713	#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
                           A 11320    ; 2714	/*-------------------------------------
                           A 11321    ; 2715	/* Pattern matching                    
                           A 11322    ; 2716	/*-------------------------------------
                           A 11323    ; 2717	
                           A 11324    ; 2718	#define FIND_RECURS	4	/* Maximum numb
                           A 11325    ; 2719	
                           A 11326    ; 2720	
                           A 11327    ; 2721	static DWORD get_achar (	/* Get a ch
                           A 11328    ; 2722		const TCHAR** ptr		/* Pointer 
                           A 11329    ; 2723	)
                           A 11330    ; 2724	{
                           A 11331    ; 2725		DWORD chr;
                           A 11332    ; 2726	
                           A 11333    ; 2727	
                           A 11334    ; 2728	#if FF_USE_LFN && FF_LFN_UNICODE >= 1	
                           A 11335    ; 2729		chr = tchar2uni(ptr);
                           A 11336    ; 2730		if (chr == 0xFFFFFFFF) chr = 0;		
                           A 11337    ; 2731		chr = ff_wtoupper(chr);
                           A 11338    ; 2732	
                           A 11339    ; 2733	#else									
                           A 11340    ; 2734		chr = (BYTE)*(*ptr)++;				
                           A 11341    ; 2735		if (IsLower(chr)) chr -= 0x20;		
                           A 11342    ; 2736	#if FF_CODE_PAGE == 0
                           A 11343    ; 2737		if (ExCvt && chr >= 0x80) chr = ExC
                           A 11344    ; 2738	#elif FF_CODE_PAGE < 900
                           A 11345    ; 2739		if (chr >= 0x80) chr = ExCvt[chr - 
                           A 11346    ; 2740	#endif
                           A 11347    ; 2741	#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >
                           A 11348    ; 2742		if (dbc_1st((BYTE)chr)) {	/* Get 
                           A 11349    ; 2743			chr = dbc_2nd((BYTE)**ptr) ? ch
                           A 11350    ; 2744		}
                           A 11351    ; 2745	#endif
                           A 11352    ; 2746	
                           A 11353    ; 2747	#endif
                           A 11354    ; 2748		return chr;
                           A 11355    ; 2749	}
                           A 11356    ; 2750	
                           A 11357    ; 2751	
                           A 11358    ; 2752	static int pattern_match (	/* 0:mismat
                           A 11359    ; 2753		const TCHAR* pat,	/* Matching pat
                           A 11360    ; 2754		const TCHAR* nam,	/* String to be
                           A 11361    ; 2755		UINT skip,			/* Number of pr
                           A 11362    ; 2756		UINT recur			/* Recursion co
                           A 11363    ; 2757	)
                           A 11364    ; 2758	{
                           A 11365    ; 2759		const TCHAR *pptr, *nptr;
                           A 11366    ; 2760		DWORD pchr, nchr;
                           A 11367    ; 2761		UINT sk;
                           A 11368    ; 2762	
                           A 11369    ; 2763	
                           A 11370    ; 2764		while ((skip & 0xFF) != 0) {		
                           A 11371    ; 2765			if (!get_achar(&nam)) return 0;
                           A 11372    ; 2766			skip--;
                           A 11373    ; 2767		}
                           A 11374    ; 2768		if (*pat == 0 && skip) return 1;	
                           A 11375    ; 2769	
                           A 11376    ; 2770		do {
                           A 11377    ; 2771			pptr = pat; nptr = nam;			
                           A 11378    ; 2772			for (;;) {
                           A 11379    ; 2773				if (*pptr == '?' || *pptr =
                           A 11380    ; 2774					if (recur == 0) return 
                           A 11381    ; 2775					sk = 0;
                           A 11382    ; 2776					do {	/* Analyze the 
                           A 11383    ; 2777						if (*pptr++ == '?')
                           A 11384    ; 2778					} while (*pptr == '?' |
                           A 11385    ; 2779					if (pattern_match(pptr,
                           A 11386    ; 2780					nchr = *nptr; break;	
                           A 11387    ; 2781				}
                           A 11388    ; 2782				pchr = get_achar(&pptr);	
                           A 11389    ; 2783				nchr = get_achar(&nptr);	
                           A 11390    ; 2784				if (pchr != nchr) break;	
                           A 11391    ; 2785				if (pchr == 0) return 1;	
                           A 11392    ; 2786			}
                           A 11393    ; 2787			get_achar(&nam);			/* 
                           A 11394    ; 2788		} while (skip && nchr);		/* Retr
                           A 11395    ; 2789	
                           A 11396    ; 2790		return 0;
                           A 11397    ; 2791	}
                           A 11398    ; 2792	
                           A 11399    ; 2793	#endif /* FF_USE_FIND && FF_FS_MINIMIZE
                           A 11400    ; 2794	
                           A 11401    ; 2795	
                           A 11402    ; 2796	
                           A 11403    ; 2797	/*-------------------------------------
                           A 11404    ; 2798	/* Pick a top segment and create the ob
                           A 11405    ; 2799	/*-------------------------------------
                           A 11406    ; 2800	
                           A 11407    ; 2801	static FRESULT create_name (	/* FR_O
                           A 11408    ; 2802		DIR* dp,					/* Poin
                           A 11409    ; 2803		const TCHAR** path			/* Poin
                           A 11410    ; 2804	)
                           A 11411    ; 2805	{
0028E0                     A 11412    _create_name:
                           A 11413    .DEFINE "_create_name"
                           A 11414    
                           A 11415    .VALUE _create_name
                           A 11416    
                           A 11417    .CLASS 3
                           A 11418    
                           A 11419    .TYPE 68
                           A 11420    
                           A 11421    .ENDEF
                           A 11422    
                           A 11423    .BEGFUNC "create_name",2805,"_create_name"
                           A 11424    
                           A 11425    .LINE 2805
                           A 11426    
                           A 11427    .DEFINE "dp"
                           A 11428    
                           A 11429    .CLASS 65
                           A 11430    
                           A 11431    .VALUE 6
                           A 11432    
                           A 11433    .TAG "NONAME3"
                           A 11434    
                           A 11435    .TYPE 40
                           A 11436    
                           A 11437    .ENDEF
                           A 11438    
                           A 11439    .DEFINE "path"
                           A 11440    
                           A 11441    .CLASS 65
                           A 11442    
                           A 11443    .VALUE 9
                           A 11444    
                           A 11445    .TYPE 1570
                           A 11446    
                           A 11447    .ENDEF
                           A 11448    
                           A 11449    .DEFINE "di"
                           A 11450    
                           A 11451    .CLASS 65
                           A 11452    
                           A 11453    .VALUE -3
                           A 11454    
                           A 11455    .TYPE 14
                           A 11456    
                           A 11457    .ENDEF
                           A 11458    
                           A 11459    .DEFINE "cf"
                           A 11460    
                           A 11461    .CLASS 65
                           A 11462    
                           A 11463    .VALUE -4
                           A 11464    
                           A 11465    .TYPE 12
                           A 11466    
                           A 11467    .ENDEF
                           A 11468    
                           A 11469    .DEFINE "wc"
                           A 11470    
                           A 11471    .CLASS 65
                           A 11472    
                           A 11473    .VALUE -6
                           A 11474    
                           A 11475    .TYPE 13
                           A 11476    
                           A 11477    .ENDEF
                           A 11478    
                           A 11479    .DEFINE "i"
                           A 11480    
                           A 11481    .CLASS 65
                           A 11482    
                           A 11483    .VALUE -9
                           A 11484    
                           A 11485    .TYPE 14
                           A 11486    
                           A 11487    .ENDEF
                           A 11488    
                           A 11489    .DEFINE "b"
                           A 11490    
                           A 11491    .CLASS 65
                           A 11492    
                           A 11493    .VALUE -10
                           A 11494    
                           A 11495    .TYPE 12
                           A 11496    
                           A 11497    .ENDEF
                           A 11498    
                           A 11499    .DEFINE "si"
                           A 11500    
                           A 11501    .CLASS 65
                           A 11502    
                           A 11503    .VALUE -13
                           A 11504    
                           A 11505    .TYPE 14
                           A 11506    
                           A 11507    .ENDEF
                           A 11508    
                           A 11509    .DEFINE "lfn"
                           A 11510    
                           A 11511    .CLASS 65
                           A 11512    
                           A 11513    .VALUE -16
                           A 11514    
                           A 11515    .TYPE 45
                           A 11516    
                           A 11517    .ENDEF
                           A 11518    
                           A 11519    .DEFINE "uc"
                           A 11520    
                           A 11521    .CLASS 65
                           A 11522    
                           A 11523    .VALUE -20
                           A 11524    
                           A 11525    .TYPE 15
                           A 11526    
                           A 11527    .ENDEF
                           A 11528    
                           A 11529    .DEFINE "p"
                           A 11530    
                           A 11531    .CLASS 65
                           A 11532    
                           A 11533    .VALUE -23
                           A 11534    
                           A 11535    .TYPE 194
                           A 11536    
                           A 11537    .ENDEF
                           A 11538    
                           A 11539    .DEFINE "ni"
                           A 11540    
                           A 11541    .CLASS 65
                           A 11542    
                           A 11543    .VALUE -26
                           A 11544    
                           A 11545    .TYPE 14
                           A 11546    
                           A 11547    .ENDEF
                           A 11548    
0028E0 DDE5                A 11549    	PUSH	IX
0028E2 DD210000 00         A 11550    	LD	IX,0
0028E7 DD39                A 11551    	ADD	IX,SP
0028E9 ED22D4              A 11552    	LEA	HL,IX+%FFFFFFD4
0028EC F9                  A 11553    	LD	SP,HL
                           A 11554    ; 2806	#if FF_USE_LFN		/* LFN configuratio
                           A 11555    ; 2807		BYTE b, cf;
                           A 11556    ; 2808		WCHAR wc, *lfn;
                           A 11557    ; 2809		DWORD uc;
                           A 11558    ; 2810		UINT i, ni, si, di;
                           A 11559    ; 2811		const TCHAR *p;
                           A 11560    ; 2812	
                           A 11561    ; 2813	
                           A 11562    ; 2814		/* Create LFN into LFN working buff
                           A 11563    ; 2815		p = *path; lfn = dp->obj.fs->lfnbuf
                           A 11564    .LINE 2815
                           A 11565    
0028ED DD2709              A 11566    	LD	HL,(IX+%9)
0028F0 ED07                A 11567    	LD	BC,(HL)
0028F2 DD0FE9              A 11568    	LD	(IX+%FFFFFFE9),BC
0028F5 DD3106              A 11569    	LD	IY,(IX+%6)
0028F8 FD3700              A 11570    	LD	IY,(IY+%0)
0028FB FD070B              A 11571    	LD	BC,(IY+%B)
0028FE DD0FF0              A 11572    	LD	(IX+%FFFFFFF0),BC
002901 01000000            A 11573    	LD	BC,0
002905 DD0FFD              A 11574    	LD	(IX+%FFFFFFFD),BC
                           A 11575    ; 2816		for (;;) {
002908                     A 11576    L_535:
                           A 11577    .LINE 2816
                           A 11578    
                           A 11579    ; 2817			uc = tchar2uni(&p);			/* 
                           A 11580    .LINE 2817
                           A 11581    
002908 ED65E9              A 11582    	PEA	IX+%FFFFFFE9
00290B CD DA 01 00         A 11583    	CALL	_tchar2uni
00290F C1                  A 11584    	POP	BC
002910 DD2FEC              A 11585    	LD	(IX+%FFFFFFEC),HL
002913 DD73EF              A 11586    	LD	(IX+%FFFFFFEF),E
                           A 11587    ; 2818			if (uc == 0xFFFFFFFF) return FR
                           A 11588    .LINE 2818
                           A 11589    
002916 DD27EC              A 11590    	LD	HL,(IX+%FFFFFFEC)
002919 DD5EEF              A 11591    	LD	E,(IX+%FFFFFFEF)
00291C 01FFFFFF            A 11592    	LD	BC,16777215
002920 3EFF                A 11593    	LD	A,%FF
002922 CD 00 00 00         A 11594    	CALL	__lcmpu
002926 20 08               A 11595    	JR	NZ,L_523
002928 21060000            A 11596    	LD	HL,6
00292C C3 D5 2E 00         A 11597    	JR	L_633
002930                     A 11598    L_523:
                           A 11599    ; 2819			if (uc >= 0x10000) lfn[di++] = 
                           A 11600    .LINE 2819
                           A 11601    
002930 DD27EC              A 11602    	LD	HL,(IX+%FFFFFFEC)
002933 DD5EEF              A 11603    	LD	E,(IX+%FFFFFFEF)
002936 01000001            A 11604    	LD	BC,65536
00293A AF                  A 11605    	XOR	A,A
00293B CD 00 00 00         A 11606    	CALL	__lcmpu
00293F 38 1E               A 11607    	JR	C,L_524
002941 B7ED62              A 11608    	UEXT	HL
002944 E5                  A 11609    	PUSH	HL
002945 DD07ED              A 11610    	LD	BC,(IX+%FFFFFFED)
002948 C5                  A 11611    	PUSH	BC
002949 33                  A 11612    	INC	SP
00294A C1                  A 11613    	POP	BC
00294B 33                  A 11614    	INC	SP
00294C 33                  A 11615    	INC	SP
00294D DD27FD              A 11616    	LD	HL,(IX+%FFFFFFFD)
002950 29                  A 11617    	ADD	HL,HL
002951 DD17F0              A 11618    	LD	DE,(IX+%FFFFFFF0)
002954 19                  A 11619    	ADD	HL,DE
002955 71                  A 11620    	LD	(HL),C
002956 23                  A 11621    	INC	HL
002957 70                  A 11622    	LD	(HL),B
002958 DD07FD              A 11623    	LD	BC,(IX+%FFFFFFFD)
00295B 03                  A 11624    	INC	BC
00295C DD0FFD              A 11625    	LD	(IX+%FFFFFFFD),BC
00295F                     A 11626    L_524:
                           A 11627    ; 2820			wc = (WCHAR)uc;
                           A 11628    ; 2821			if (wc < ' ' || IsSeparator(wc)
                           A 11629    .LINE 2821
                           A 11630    
00295F 49012000            A 11631    	LD.LIS	BC,32
002963 DD27EC              A 11632    	LD	HL,(IX+%FFFFFFEC)
002966 B7                  A 11633    	OR	A,A
002967 40ED42              A 11634    	SBC.SIS	HL,BC
00296A 38 78               A 11635    	JR	C,L_545
00296C 49012F00            A 11636    	LD.LIS	BC,47
002970 DD27EC              A 11637    	LD	HL,(IX+%FFFFFFEC)
002973 B7                  A 11638    	OR	A,A
002974 40ED42              A 11639    	SBC.SIS	HL,BC
002977 28 6B               A 11640    	JR	Z,L_545
002979 49015C00            A 11641    	LD.LIS	BC,92
00297D DD27EC              A 11642    	LD	HL,(IX+%FFFFFFEC)
002980 B7                  A 11643    	OR	A,A
002981 40ED42              A 11644    	SBC.SIS	HL,BC
002984 28 5E               A 11645    	JR	Z,L_545
                           A 11646    ; 2822			if (wc < 0x80 && strchr("*:<>|\
                           A 11647    .LINE 2822
                           A 11648    
002986 49018000            A 11649    	LD.LIS	BC,128
00298A DD27EC              A 11650    	LD	HL,(IX+%FFFFFFEC)
00298D B7                  A 11651    	OR	A,A
00298E 40ED42              A 11652    	SBC.SIS	HL,BC
002991 30 24               A 11653    	JR	NC,L_532
002993 DD07EC              A 11654    	LD	BC,(IX+%FFFFFFEC)
002996 CD 00 00 00         A 11655    	CALL	__stoiu
00299A E5                  A 11656    	PUSH	HL
00299B 01 00 00 00         A 11657    	LD	BC,L__274
00299F C5                  A 11658    	PUSH	BC
0029A0 CD 00 00 00         A 11659    	CALL	_strchr
0029A4 C1                  A 11660    	POP	BC
0029A5 C1                  A 11661    	POP	BC
0029A6 01000000            A 11662    	LD	BC,0
0029AA B7                  A 11663    	OR	A,A
0029AB ED42                A 11664    	SBC	HL,BC
0029AD 28 08               A 11665    	JR	Z,L_532
0029AF 21060000            A 11666    	LD	HL,6
0029B3 C3 D5 2E 00         A 11667    	JR	L_633
0029B7                     A 11668    L_532:
                           A 11669    ; 2823			if (di >= FF_MAX_LFN) return FR
                           A 11670    .LINE 2823
                           A 11671    
0029B7 01FF0000            A 11672    	LD	BC,255
0029BB DD27FD              A 11673    	LD	HL,(IX+%FFFFFFFD)
0029BE B7                  A 11674    	OR	A,A
0029BF ED42                A 11675    	SBC	HL,BC
0029C1 38 08               A 11676    	JR	C,L_534
0029C3 21060000            A 11677    	LD	HL,6
0029C7 C3 D5 2E 00         A 11678    	JR	L_633
0029CB                     A 11679    L_534:
                           A 11680    ; 2824			lfn[di++] = wc;				/* 
                           A 11681    .LINE 2824
                           A 11682    
0029CB DD27FD              A 11683    	LD	HL,(IX+%FFFFFFFD)
0029CE 29                  A 11684    	ADD	HL,HL
0029CF DD07F0              A 11685    	LD	BC,(IX+%FFFFFFF0)
0029D2 09                  A 11686    	ADD	HL,BC
0029D3 DD07EC              A 11687    	LD	BC,(IX+%FFFFFFEC)
0029D6 71                  A 11688    	LD	(HL),C
0029D7 23                  A 11689    	INC	HL
0029D8 70                  A 11690    	LD	(HL),B
0029D9 DD07FD              A 11691    	LD	BC,(IX+%FFFFFFFD)
0029DC 03                  A 11692    	INC	BC
0029DD DD0FFD              A 11693    	LD	(IX+%FFFFFFFD),BC
                           A 11694    ; 2825		}
                           A 11695    .LINE 2825
                           A 11696    
0029E0 C3 08 29 00         A 11697    	JR	L_535
0029E4                     A 11698    L_545:
                           A 11699    ; 2826		if (wc < ' ') {				/* Stop
                           A 11700    .LINE 2826
                           A 11701    
0029E4 49012000            A 11702    	LD.LIS	BC,32
0029E8 DD27EC              A 11703    	LD	HL,(IX+%FFFFFFEC)
0029EB B7                  A 11704    	OR	A,A
0029EC 40ED42              A 11705    	SBC.SIS	HL,BC
0029EF 30 13               A 11706    	JR	NC,L_539
                           A 11707    ; 2827			cf = NS_LAST;			/* Last
                           A 11708    .LINE 2827
                           A 11709    
0029F1 DD36FC04            A 11710    	LD	(IX+%FFFFFFFC),%4
                           A 11711    ; 2828		} else {					/* Stop
                           A 11712    .LINE 2828
                           A 11713    
0029F5 18 4B               A 11714    	JR	L_546
                           A 11715    ; 2829			while (IsSeparator(*p)) p++;	
                           A 11716    .LINE 2829
                           A 11717    
0029F7                     A 11718    L_540:
0029F7 DD07E9              A 11719    	LD	BC,(IX+%FFFFFFE9)
0029FA DD0FD4              A 11720    	LD	(IX+%FFFFFFD4),BC
0029FD DD07E9              A 11721    	LD	BC,(IX+%FFFFFFE9)
002A00 03                  A 11722    	INC	BC
002A01 DD0FE9              A 11723    	LD	(IX+%FFFFFFE9),BC
002A04                     A 11724    L_539:
002A04 DD27E9              A 11725    	LD	HL,(IX+%FFFFFFE9)
002A07 7E                  A 11726    	LD	A,(HL)
002A08 47                  A 11727    	LD	B,A
002A09 17ED62              A 11728    	SEXT	HL
002A0C 68                  A 11729    	LD	L,B
002A0D 012F0000            A 11730    	LD	BC,47
002A11 B7                  A 11731    	OR	A,A
002A12 ED42                A 11732    	SBC	HL,BC
002A14 28 E1               A 11733    	JR	Z,L_540
002A16 DD27E9              A 11734    	LD	HL,(IX+%FFFFFFE9)
002A19 7E                  A 11735    	LD	A,(HL)
002A1A 47                  A 11736    	LD	B,A
002A1B 17ED62              A 11737    	SEXT	HL
002A1E 68                  A 11738    	LD	L,B
002A1F 015C0000            A 11739    	LD	BC,92
002A23 B7                  A 11740    	OR	A,A
002A24 ED42                A 11741    	SBC	HL,BC
002A26 28 CF               A 11742    	JR	Z,L_540
                           A 11743    ; 2830			cf = 0;					/* Next
                           A 11744    .LINE 2830
                           A 11745    
002A28 DD36FC00            A 11746    	LD	(IX+%FFFFFFFC),%0
                           A 11747    ; 2831			if (IsTerminator(*p)) cf = NS_L
                           A 11748    .LINE 2831
                           A 11749    
002A2C DD27E9              A 11750    	LD	HL,(IX+%FFFFFFE9)
002A2F 7E                  A 11751    	LD	A,(HL)
002A30 47                  A 11752    	LD	B,A
002A31 17ED62              A 11753    	SEXT	HL
002A34 68                  A 11754    	LD	L,B
002A35 01200000            A 11755    	LD	BC,32
002A39 B7                  A 11756    	OR	A,A
002A3A ED42                A 11757    	SBC	HL,BC
002A3C 30 04               A 11758    	JR	NC,L_546
002A3E DD36FC04            A 11759    	LD	(IX+%FFFFFFFC),%4
                           A 11760    ; 2832		}
002A42                     A 11761    L_546:
                           A 11762    .LINE 2832
                           A 11763    
                           A 11764    ; 2833		*path = p;					/* Retu
                           A 11765    .LINE 2833
                           A 11766    
002A42 DD2709              A 11767    	LD	HL,(IX+%9)
002A45 DD07E9              A 11768    	LD	BC,(IX+%FFFFFFE9)
002A48 ED0F                A 11769    	LD	(HL),BC
                           A 11770    ; 2834	
                           A 11771    ; 2835	#if FF_FS_RPATH != 0
                           A 11772    ; 2836		if ((di == 1 && lfn[di - 1] == '.')
                           A 11773    .LINE 2836
                           A 11774    
002A4A 01010000            A 11775    	LD	BC,1
002A4E DD27FD              A 11776    	LD	HL,(IX+%FFFFFFFD)
002A51 B7                  A 11777    	OR	A,A
002A52 ED42                A 11778    	SBC	HL,BC
002A54 20 1A               A 11779    	JR	NZ,L_550
002A56 DD31FD              A 11780    	LD	IY,(IX+%FFFFFFFD)
002A59 ED23FF              A 11781    	LEA	HL,IY+%FFFFFFFF
002A5C 29                  A 11782    	ADD	HL,HL
002A5D DD07F0              A 11783    	LD	BC,(IX+%FFFFFFF0)
002A60 09                  A 11784    	ADD	HL,BC
002A61 ED07                A 11785    	LD	BC,(HL)
002A63 CD 00 00 00         A 11786    	CALL	__stoiu
002A67 012E0000            A 11787    	LD	BC,46
002A6B B7                  A 11788    	OR	A,A
002A6C ED42                A 11789    	SBC	HL,BC
002A6E 28 46               A 11790    	JR	Z,L_560
002A70                     A 11791    L_550:
                           A 11792    ; 2837			(di == 2 && lfn[di - 1] == '.' 
                           A 11793    .LINE 2837
                           A 11794    
002A70 01020000            A 11795    	LD	BC,2
002A74 DD27FD              A 11796    	LD	HL,(IX+%FFFFFFFD)
002A77 B7                  A 11797    	OR	A,A
002A78 ED42                A 11798    	SBC	HL,BC
002A7A C2 58 2B 00         A 11799    	JR	NZ,L_565
002A7E DD31FD              A 11800    	LD	IY,(IX+%FFFFFFFD)
002A81 ED23FF              A 11801    	LEA	HL,IY+%FFFFFFFF
002A84 29                  A 11802    	ADD	HL,HL
002A85 DD07F0              A 11803    	LD	BC,(IX+%FFFFFFF0)
002A88 09                  A 11804    	ADD	HL,BC
002A89 ED07                A 11805    	LD	BC,(HL)
002A8B CD 00 00 00         A 11806    	CALL	__stoiu
002A8F 012E0000            A 11807    	LD	BC,46
002A93 B7                  A 11808    	OR	A,A
002A94 ED42                A 11809    	SBC	HL,BC
002A96 C2 58 2B 00         A 11810    	JR	NZ,L_565
002A9A DD31FD              A 11811    	LD	IY,(IX+%FFFFFFFD)
002A9D ED23FE              A 11812    	LEA	HL,IY+%FFFFFFFE
002AA0 29                  A 11813    	ADD	HL,HL
002AA1 DD07F0              A 11814    	LD	BC,(IX+%FFFFFFF0)
002AA4 09                  A 11815    	ADD	HL,BC
002AA5 ED07                A 11816    	LD	BC,(HL)
002AA7 CD 00 00 00         A 11817    	CALL	__stoiu
002AAB 012E0000            A 11818    	LD	BC,46
002AAF B7                  A 11819    	OR	A,A
002AB0 ED42                A 11820    	SBC	HL,BC
002AB2 C2 58 2B 00         A 11821    	JR	NZ,L_565
002AB6                     A 11822    L_560:
                           A 11823    ; 2838			lfn[di] = 0;
                           A 11824    .LINE 2838
                           A 11825    
002AB6 DD27FD              A 11826    	LD	HL,(IX+%FFFFFFFD)
002AB9 29                  A 11827    	ADD	HL,HL
002ABA DD07F0              A 11828    	LD	BC,(IX+%FFFFFFF0)
002ABD 09                  A 11829    	ADD	HL,BC
002ABE 3600                A 11830    	LD	(HL),%0
002AC0 23                  A 11831    	INC	HL
002AC1 3600                A 11832    	LD	(HL),%0
                           A 11833    ; 2839			for (i = 0; i < 11; i++) {	/* 
                           A 11834    .LINE 2839
                           A 11835    
002AC3 01000000            A 11836    	LD	BC,0
002AC7 DD0FF7              A 11837    	LD	(IX+%FFFFFFF7),BC
002ACA 18 30               A 11838    	JR	L_558
002ACC                     A 11839    L_556:
                           A 11840    ; 2840				dp->fn[i] = (i < di) ? '.' 
                           A 11841    .LINE 2840
                           A 11842    
002ACC DD07FD              A 11843    	LD	BC,(IX+%FFFFFFFD)
002ACF DD27F7              A 11844    	LD	HL,(IX+%FFFFFFF7)
002AD2 B7                  A 11845    	OR	A,A
002AD3 ED42                A 11846    	SBC	HL,BC
002AD5 30 09               A 11847    	JR	NC,L_554
002AD7 012E0000            A 11848    	LD	BC,46
002ADB DD0FE3              A 11849    	LD	(IX+%FFFFFFE3),BC
002ADE 18 07               A 11850    	JR	L_555
002AE0                     A 11851    L_554:
002AE0 01200000            A 11852    	LD	BC,32
002AE4 DD0FE3              A 11853    	LD	(IX+%FFFFFFE3),BC
002AE7                     A 11854    L_555:
002AE7 DD7EE3              A 11855    	LD	A,(IX+%FFFFFFE3)
002AEA DD07F7              A 11856    	LD	BC,(IX+%FFFFFFF7)
002AED DD3106              A 11857    	LD	IY,(IX+%6)
002AF0 ED231E              A 11858    	LEA	HL,IY+%1E
002AF3 09                  A 11859    	ADD	HL,BC
002AF4 77                  A 11860    	LD	(HL),A
002AF5 DD07F7              A 11861    	LD	BC,(IX+%FFFFFFF7)
002AF8 03                  A 11862    	INC	BC
002AF9 DD0FF7              A 11863    	LD	(IX+%FFFFFFF7),BC
                           A 11864    ; 2841			}
002AFC                     A 11865    L_558:
                           A 11866    .LINE 2841
                           A 11867    
002AFC 010B0000            A 11868    	LD	BC,11
002B00 DD27F7              A 11869    	LD	HL,(IX+%FFFFFFF7)
002B03 B7                  A 11870    	OR	A,A
002B04 ED42                A 11871    	SBC	HL,BC
002B06 38 C4               A 11872    	JR	C,L_556
                           A 11873    ; 2842			dp->fn[i] = cf | NS_DOT;	/* 
                           A 11874    .LINE 2842
                           A 11875    
002B08 DD7EFC              A 11876    	LD	A,(IX+%FFFFFFFC)
002B0B CBEF                A 11877    	SET	%5,A
002B0D DD07F7              A 11878    	LD	BC,(IX+%FFFFFFF7)
002B10 DD3106              A 11879    	LD	IY,(IX+%6)
002B13 ED231E              A 11880    	LEA	HL,IY+%1E
002B16 09                  A 11881    	ADD	HL,BC
002B17 77                  A 11882    	LD	(HL),A
                           A 11883    ; 2843			return FR_OK;
                           A 11884    .LINE 2843
                           A 11885    
002B18 B7                  A 11886    	OR	A,A
002B19 ED62                A 11887    	SBC	HL,HL
002B1B C3 D5 2E 00         A 11888    	JR	L_633
                           A 11889    ; 2844		}
                           A 11890    .LINE 2844
                           A 11891    
                           A 11892    ; 2845	#endif
                           A 11893    ; 2846		while (di) {					/* 
                           A 11894    .LINE 2846
                           A 11895    
002B1F                     A 11896    L_566:
                           A 11897    ; 2847			wc = lfn[di - 1];
                           A 11898    .LINE 2847
                           A 11899    
002B1F DD31FD              A 11900    	LD	IY,(IX+%FFFFFFFD)
002B22 ED33FF              A 11901    	LEA	IY,IY+%FFFFFFFF
002B25 DD3EE0              A 11902    	LD	(IX+%FFFFFFE0),IY
002B28 DD27E0              A 11903    	LD	HL,(IX+%FFFFFFE0)
002B2B 29                  A 11904    	ADD	HL,HL
002B2C DD07F0              A 11905    	LD	BC,(IX+%FFFFFFF0)
002B2F 09                  A 11906    	ADD	HL,BC
002B30 ED07                A 11907    	LD	BC,(HL)
002B32 DD71FA              A 11908    	LD	(IX+%FFFFFFFA),C
002B35 DD70FB              A 11909    	LD	(IX+%FFFFFFFB),B
                           A 11910    ; 2848			if (wc != ' ' && wc != '.') bre
                           A 11911    .LINE 2848
                           A 11912    
002B38 49012000            A 11913    	LD.LIS	BC,32
002B3C DD27FA              A 11914    	LD	HL,(IX+%FFFFFFFA)
002B3F B7                  A 11915    	OR	A,A
002B40 40ED42              A 11916    	SBC.SIS	HL,BC
002B43 28 0D               A 11917    	JR	Z,L_564
002B45 49012E00            A 11918    	LD.LIS	BC,46
002B49 DD27FA              A 11919    	LD	HL,(IX+%FFFFFFFA)
002B4C B7                  A 11920    	OR	A,A
002B4D 40ED42              A 11921    	SBC.SIS	HL,BC
002B50 20 12               A 11922    	JR	NZ,L_568
002B52                     A 11923    L_564:
                           A 11924    ; 2849			di--;
                           A 11925    .LINE 2849
                           A 11926    
002B52 DD07E0              A 11927    	LD	BC,(IX+%FFFFFFE0)
002B55 DD0FFD              A 11928    	LD	(IX+%FFFFFFFD),BC
                           A 11929    ; 2850		}
002B58                     A 11930    L_565:
                           A 11931    .LINE 2850
                           A 11932    
002B58 01000000            A 11933    	LD	BC,0
002B5C DD27FD              A 11934    	LD	HL,(IX+%FFFFFFFD)
002B5F B7                  A 11935    	OR	A,A
002B60 ED42                A 11936    	SBC	HL,BC
002B62 20 BB               A 11937    	JR	NZ,L_566
002B64                     A 11938    L_568:
                           A 11939    ; 2851		lfn[di] = 0;						
                           A 11940    .LINE 2851
                           A 11941    
002B64 DD27FD              A 11942    	LD	HL,(IX+%FFFFFFFD)
002B67 29                  A 11943    	ADD	HL,HL
002B68 DD07F0              A 11944    	LD	BC,(IX+%FFFFFFF0)
002B6B 09                  A 11945    	ADD	HL,BC
002B6C 3600                A 11946    	LD	(HL),%0
002B6E 23                  A 11947    	INC	HL
002B6F 3600                A 11948    	LD	(HL),%0
                           A 11949    ; 2852		if (di == 0) return FR_INVALID_NAME
                           A 11950    .LINE 2852
                           A 11951    
002B71 01000000            A 11952    	LD	BC,0
002B75 DD27FD              A 11953    	LD	HL,(IX+%FFFFFFFD)
002B78 B7                  A 11954    	OR	A,A
002B79 ED42                A 11955    	SBC	HL,BC
002B7B 20 08               A 11956    	JR	NZ,L_574
002B7D 21060000            A 11957    	LD	HL,6
002B81 C3 D5 2E 00         A 11958    	JR	L_633
002B85                     A 11959    L_574:
                           A 11960    ; 2853	
                           A 11961    ; 2854		/* Create SFN in directory form */
                           A 11962    ; 2855		for (si = 0; lfn[si] == ' '; si++) 
                           A 11963    .LINE 2855
                           A 11964    
002B85 DD0FF3              A 11965    	LD	(IX+%FFFFFFF3),BC
002B88 18 07               A 11966    	JR	L_573
002B8A                     A 11967    L_571:
002B8A DD07F3              A 11968    	LD	BC,(IX+%FFFFFFF3)
002B8D 03                  A 11969    	INC	BC
002B8E DD0FF3              A 11970    	LD	(IX+%FFFFFFF3),BC
002B91                     A 11971    L_573:
002B91 DD27F3              A 11972    	LD	HL,(IX+%FFFFFFF3)
002B94 29                  A 11973    	ADD	HL,HL
002B95 DD07F0              A 11974    	LD	BC,(IX+%FFFFFFF0)
002B98 09                  A 11975    	ADD	HL,BC
002B99 DD2FDD              A 11976    	LD	(IX+%FFFFFFDD),HL
002B9C ED07                A 11977    	LD	BC,(HL)
002B9E CD 00 00 00         A 11978    	CALL	__stoiu
002BA2 01200000            A 11979    	LD	BC,32
002BA6 B7                  A 11980    	OR	A,A
002BA7 ED42                A 11981    	SBC	HL,BC
002BA9 28 DF               A 11982    	JR	Z,L_571
                           A 11983    ; 2856		if (si > 0 || lfn[si] == '.') cf |=
                           A 11984    .LINE 2856
                           A 11985    
002BAB DD07F3              A 11986    	LD	BC,(IX+%FFFFFFF3)
002BAE B7                  A 11987    	OR	A,A
002BAF ED62                A 11988    	SBC	HL,HL
002BB1 B7                  A 11989    	OR	A,A
002BB2 ED42                A 11990    	SBC	HL,BC
002BB4 38 12               A 11991    	JR	C,L_576
002BB6 DD27DD              A 11992    	LD	HL,(IX+%FFFFFFDD)
002BB9 ED07                A 11993    	LD	BC,(HL)
002BBB CD 00 00 00         A 11994    	CALL	__stoiu
002BBF 012E0000            A 11995    	LD	BC,46
002BC3 B7                  A 11996    	OR	A,A
002BC4 ED42                A 11997    	SBC	HL,BC
002BC6 20 10               A 11998    	JR	NZ,L_580
002BC8                     A 11999    L_576:
002BC8 DD7EFC              A 12000    	LD	A,(IX+%FFFFFFFC)
002BCB F603                A 12001    	OR	A,%3
002BCD DD77FC              A 12002    	LD	(IX+%FFFFFFFC),A
                           A 12003    ; 2857		while (di > 0 && lfn[di - 1] != '.'
                           A 12004    .LINE 2857
                           A 12005    
002BD0 18 06               A 12006    	JR	L_580
002BD2                     A 12007    L_581:
002BD2 DD07DA              A 12008    	LD	BC,(IX+%FFFFFFDA)
002BD5 DD0FFD              A 12009    	LD	(IX+%FFFFFFFD),BC
002BD8                     A 12010    L_580:
002BD8 DD07FD              A 12011    	LD	BC,(IX+%FFFFFFFD)
002BDB B7                  A 12012    	OR	A,A
002BDC ED62                A 12013    	SBC	HL,HL
002BDE B7                  A 12014    	OR	A,A
002BDF ED42                A 12015    	SBC	HL,BC
002BE1 30 20               A 12016    	JR	NC,L_583
002BE3 DD31FD              A 12017    	LD	IY,(IX+%FFFFFFFD)
002BE6 ED33FF              A 12018    	LEA	IY,IY+%FFFFFFFF
002BE9 DD3EDA              A 12019    	LD	(IX+%FFFFFFDA),IY
002BEC DD27DA              A 12020    	LD	HL,(IX+%FFFFFFDA)
002BEF 29                  A 12021    	ADD	HL,HL
002BF0 DD07F0              A 12022    	LD	BC,(IX+%FFFFFFF0)
002BF3 09                  A 12023    	ADD	HL,BC
002BF4 ED07                A 12024    	LD	BC,(HL)
002BF6 CD 00 00 00         A 12025    	CALL	__stoiu
002BFA 012E0000            A 12026    	LD	BC,46
002BFE B7                  A 12027    	OR	A,A
002BFF ED42                A 12028    	SBC	HL,BC
002C01 20 CF               A 12029    	JR	NZ,L_581
002C03                     A 12030    L_583:
                           A 12031    ; 2858	
                           A 12032    ; 2859		memset(dp->fn, ' ', 11);
                           A 12033    .LINE 2859
                           A 12034    
002C03 010B0000            A 12035    	LD	BC,11
002C07 C5                  A 12036    	PUSH	BC
002C08 01200000            A 12037    	LD	BC,32
002C0C C5                  A 12038    	PUSH	BC
002C0D DD3106              A 12039    	LD	IY,(IX+%6)
002C10 ED661E              A 12040    	PEA	IY+%1E
002C13 CD 00 00 00         A 12041    	CALL	_memset
002C17 C1                  A 12042    	POP	BC
002C18 C1                  A 12043    	POP	BC
002C19 C1                  A 12044    	POP	BC
                           A 12045    ; 2860		i = b = 0; ni = 8;
                           A 12046    .LINE 2860
                           A 12047    
002C1A DD36F600            A 12048    	LD	(IX+%FFFFFFF6),%0
002C1E 01000000            A 12049    	LD	BC,0
002C22 DD0FF7              A 12050    	LD	(IX+%FFFFFFF7),BC
002C25 01080000            A 12051    	LD	BC,8
002C29 DD0FE6              A 12052    	LD	(IX+%FFFFFFE6),BC
                           A 12053    ; 2861		for (;;) {
002C2C                     A 12054    L_618:
                           A 12055    .LINE 2861
                           A 12056    
                           A 12057    ; 2862			wc = lfn[si++];					
                           A 12058    .LINE 2862
                           A 12059    
002C2C DD27F3              A 12060    	LD	HL,(IX+%FFFFFFF3)
002C2F 29                  A 12061    	ADD	HL,HL
002C30 DD07F0              A 12062    	LD	BC,(IX+%FFFFFFF0)
002C33 09                  A 12063    	ADD	HL,BC
002C34 ED07                A 12064    	LD	BC,(HL)
002C36 DD71FA              A 12065    	LD	(IX+%FFFFFFFA),C
002C39 DD70FB              A 12066    	LD	(IX+%FFFFFFFB),B
002C3C DD07F3              A 12067    	LD	BC,(IX+%FFFFFFF3)
002C3F 03                  A 12068    	INC	BC
002C40 DD0FF3              A 12069    	LD	(IX+%FFFFFFF3),BC
                           A 12070    ; 2863			if (wc == 0) break;				
                           A 12071    .LINE 2863
                           A 12072    
002C43 49010000            A 12073    	LD.LIS	BC,0
002C47 DD27FA              A 12074    	LD	HL,(IX+%FFFFFFFA)
002C4A B7                  A 12075    	OR	A,A
002C4B 40ED42              A 12076    	SBC.SIS	HL,BC
002C4E CA 4F 2E 00         A 12077    	JR	Z,L_621
                           A 12078    ; 2864			if (wc == ' ' || (wc == '.' && 
                           A 12079    .LINE 2864
                           A 12080    
002C52 49012000            A 12081    	LD.LIS	BC,32
002C56 DD27FA              A 12082    	LD	HL,(IX+%FFFFFFFA)
002C59 B7                  A 12083    	OR	A,A
002C5A 40ED42              A 12084    	SBC.SIS	HL,BC
002C5D 28 18               A 12085    	JR	Z,L_588
002C5F 49012E00            A 12086    	LD.LIS	BC,46
002C63 DD27FA              A 12087    	LD	HL,(IX+%FFFFFFFA)
002C66 B7                  A 12088    	OR	A,A
002C67 40ED42              A 12089    	SBC.SIS	HL,BC
002C6A 20 15               A 12090    	JR	NZ,L_598
002C6C DD07FD              A 12091    	LD	BC,(IX+%FFFFFFFD)
002C6F DD27F3              A 12092    	LD	HL,(IX+%FFFFFFF3)
002C72 B7                  A 12093    	OR	A,A
002C73 ED42                A 12094    	SBC	HL,BC
002C75 28 0A               A 12095    	JR	Z,L_598
002C77                     A 12096    L_588:
                           A 12097    ; 2865				cf |= NS_LOSS | NS_LFN;
                           A 12098    .LINE 2865
                           A 12099    
002C77 DD7EFC              A 12100    	LD	A,(IX+%FFFFFFFC)
002C7A F603                A 12101    	OR	A,%3
002C7C DD77FC              A 12102    	LD	(IX+%FFFFFFFC),A
                           A 12103    ; 2866				continue;
                           A 12104    .LINE 2866
                           A 12105    
002C7F 18 AB               A 12106    	JR	L_618
                           A 12107    ; 2867			}
002C81                     A 12108    L_598:
                           A 12109    .LINE 2867
                           A 12110    
                           A 12111    ; 2868	
                           A 12112    ; 2869			if (i >= ni || si == di) {		
                           A 12113    .LINE 2869
                           A 12114    
002C81 DD07E6              A 12115    	LD	BC,(IX+%FFFFFFE6)
002C84 DD27F7              A 12116    	LD	HL,(IX+%FFFFFFF7)
002C87 B7                  A 12117    	OR	A,A
002C88 ED42                A 12118    	SBC	HL,BC
002C8A 30 0B               A 12119    	JR	NC,L_597
002C8C DD07FD              A 12120    	LD	BC,(IX+%FFFFFFFD)
002C8F DD27F3              A 12121    	LD	HL,(IX+%FFFFFFF3)
002C92 B7                  A 12122    	OR	A,A
002C93 ED42                A 12123    	SBC	HL,BC
002C95 20 58               A 12124    	JR	NZ,L_601
002C97                     A 12125    L_597:
                           A 12126    ; 2870				if (ni == 11) {				
                           A 12127    .LINE 2870
                           A 12128    
002C97 010B0000            A 12129    	LD	BC,11
002C9B DD27E6              A 12130    	LD	HL,(IX+%FFFFFFE6)
002C9E B7                  A 12131    	OR	A,A
002C9F ED42                A 12132    	SBC	HL,BC
002CA1 20 0C               A 12133    	JR	NZ,L_593
                           A 12134    ; 2871					cf |= NS_LOSS | NS_LFN;
                           A 12135    .LINE 2871
                           A 12136    
002CA3 DD7EFC              A 12137    	LD	A,(IX+%FFFFFFFC)
002CA6 F603                A 12138    	OR	A,%3
002CA8 DD77FC              A 12139    	LD	(IX+%FFFFFFFC),A
                           A 12140    ; 2872					break;
                           A 12141    .LINE 2872
                           A 12142    
002CAB C3 4F 2E 00         A 12143    	JR	L_621
                           A 12144    ; 2873				}
002CAF                     A 12145    L_593:
                           A 12146    .LINE 2873
                           A 12147    
                           A 12148    ; 2874				if (si != di) cf |= NS_LOSS
                           A 12149    .LINE 2874
                           A 12150    
002CAF DD07FD              A 12151    	LD	BC,(IX+%FFFFFFFD)
002CB2 DD27F3              A 12152    	LD	HL,(IX+%FFFFFFF3)
002CB5 B7                  A 12153    	OR	A,A
002CB6 ED42                A 12154    	SBC	HL,BC
002CB8 28 08               A 12155    	JR	Z,L_595
002CBA DD7EFC              A 12156    	LD	A,(IX+%FFFFFFFC)
002CBD F603                A 12157    	OR	A,%3
002CBF DD77FC              A 12158    	LD	(IX+%FFFFFFFC),A
002CC2                     A 12159    L_595:
                           A 12160    ; 2875				if (si > di) break;			
                           A 12161    .LINE 2875
                           A 12162    
002CC2 DD07F3              A 12163    	LD	BC,(IX+%FFFFFFF3)
002CC5 DD27FD              A 12164    	LD	HL,(IX+%FFFFFFFD)
002CC8 B7                  A 12165    	OR	A,A
002CC9 ED42                A 12166    	SBC	HL,BC
002CCB DA 4F 2E 00         A 12167    	JR	C,L_621
                           A 12168    ; 2876				si = di; i = 8; ni = 11; b 
                           A 12169    .LINE 2876
                           A 12170    
002CCF DD07FD              A 12171    	LD	BC,(IX+%FFFFFFFD)
002CD2 DD0FF3              A 12172    	LD	(IX+%FFFFFFF3),BC
002CD5 01080000            A 12173    	LD	BC,8
002CD9 DD0FF7              A 12174    	LD	(IX+%FFFFFFF7),BC
002CDC 010B0000            A 12175    	LD	BC,11
002CE0 DD0FE6              A 12176    	LD	(IX+%FFFFFFE6),BC
002CE3 DD7EF6              A 12177    	LD	A,(IX+%FFFFFFF6)
002CE6 87                  A 12178    	ADD	A,A
002CE7 87                  A 12179    	ADD	A,A
002CE8 DD77F6              A 12180    	LD	(IX+%FFFFFFF6),A
                           A 12181    ; 2877				continue;
                           A 12182    .LINE 2877
                           A 12183    
002CEB C3 2C 2C 00         A 12184    	JR	L_618
                           A 12185    ; 2878			}
002CEF                     A 12186    L_601:
                           A 12187    .LINE 2878
                           A 12188    
                           A 12189    ; 2879	
                           A 12190    ; 2880			if (wc >= 0x80) {	/* Is this 
                           A 12191    .LINE 2880
                           A 12192    
002CEF 49018000            A 12193    	LD.LIS	BC,128
002CF3 DD27FA              A 12194    	LD	HL,(IX+%FFFFFFFA)
002CF6 B7                  A 12195    	OR	A,A
002CF7 40ED42              A 12196    	SBC.SIS	HL,BC
002CFA 38 55               A 12197    	JR	C,L_615
                           A 12198    ; 2881				cf |= NS_LFN;	/* LFN entr
                           A 12199    .LINE 2881
                           A 12200    
002CFC DD7EFC              A 12201    	LD	A,(IX+%FFFFFFFC)
002CFF CBCF                A 12202    	SET	%1,A
002D01 DD77FC              A 12203    	LD	(IX+%FFFFFFFC),A
                           A 12204    ; 2882	#if FF_CODE_PAGE == 0
                           A 12205    ; 2883				if (ExCvt) {	/* In SBCS 
                           A 12206    ; 2884					wc = ff_uni2oem(wc, COD
                           A 12207    ; 2885					if (wc & 0x80) wc = ExC
                           A 12208    ; 2886				} else {		/* In DBCS 
                           A 12209    ; 2887					wc = ff_uni2oem(ff_wtou
                           A 12210    ; 2888				}
                           A 12211    ; 2889	#elif FF_CODE_PAGE < 900	/* In SBCS 
                           A 12212    ; 2890				wc = ff_uni2oem(wc, CODEPAG
                           A 12213    .LINE 2890
                           A 12214    
002D04 01B50100            A 12215    	LD	BC,437
002D08 C5                  A 12216    	PUSH	BC
002D09 DD07FA              A 12217    	LD	BC,(IX+%FFFFFFFA)
002D0C CD 00 00 00         A 12218    	CALL	__stoiu
002D10 0E00                A 12219    	LD	C,%0
002D12 0600                A 12220    	LD	B,%0
002D14 C5                  A 12221    	PUSH	BC
002D15 E5                  A 12222    	PUSH	HL
002D16 CD 00 00 00         A 12223    	CALL	_ff_uni2oem
002D1A C1                  A 12224    	POP	BC
002D1B C1                  A 12225    	POP	BC
002D1C C1                  A 12226    	POP	BC
002D1D DD75FA              A 12227    	LD	(IX+%FFFFFFFA),L
002D20 DD74FB              A 12228    	LD	(IX+%FFFFFFFB),H
                           A 12229    ; 2891				if (wc & 0x80) wc = ExCvt[w
                           A 12230    .LINE 2891
                           A 12231    
002D23 DD7EFA              A 12232    	LD	A,(IX+%FFFFFFFA)
002D26 E680                A 12233    	AND	A,%80
002D28 4F                  A 12234    	LD	C,A
002D29 0600                A 12235    	LD	B,%0
002D2B 49110000            A 12236    	LD.LIS	DE,0
002D2F C5E1                A 12237    	LD	HL,BC
002D31 B7                  A 12238    	OR	A,A
002D32 40ED52              A 12239    	SBC.SIS	HL,DE
002D35 28 1A               A 12240    	JR	Z,L_615
002D37 DD7EFA              A 12241    	LD	A,(IX+%FFFFFFFA)
002D3A CBBF                A 12242    	RES	%7,A
002D3C 4F                  A 12243    	LD	C,A
002D3D CD 00 00 00         A 12244    	CALL	__stoiu
002D41 01 0D 00 00         A 12245    	LD	BC,_ExCvt
002D45 09                  A 12246    	ADD	HL,BC
002D46 4E                  A 12247    	LD	C,(HL)
002D47 0600                A 12248    	LD	B,%0
002D49 C5E1                A 12249    	LD	HL,BC
002D4B DD75FA              A 12250    	LD	(IX+%FFFFFFFA),L
002D4E DD74FB              A 12251    	LD	(IX+%FFFFFFFB),H
                           A 12252    ; 2892	#else						/* In DBCS 
                           A 12253    ; 2893				wc = ff_uni2oem(ff_wtoupper
                           A 12254    ; 2894	#endif
                           A 12255    ; 2895			}
002D51                     A 12256    L_615:
                           A 12257    .LINE 2895
                           A 12258    
                           A 12259    ; 2896	
                           A 12260    ; 2897			if (wc >= 0x100) {				
                           A 12261    .LINE 2897
                           A 12262    
002D51 49010001            A 12263    	LD.LIS	BC,256
002D55 DD27FA              A 12264    	LD	HL,(IX+%FFFFFFFA)
002D58 B7                  A 12265    	OR	A,A
002D59 40ED42              A 12266    	SBC.SIS	HL,BC
002D5C 38 4D               A 12267    	JR	C,L_614
                           A 12268    ; 2898				if (i >= ni - 1) {			
                           A 12269    .LINE 2898
                           A 12270    
002D5E DD31E6              A 12271    	LD	IY,(IX+%FFFFFFE6)
002D61 ED03FF              A 12272    	LEA	BC,IY+%FFFFFFFF
002D64 DD27F7              A 12273    	LD	HL,(IX+%FFFFFFF7)
002D67 B7                  A 12274    	OR	A,A
002D68 ED42                A 12275    	SBC	HL,BC
002D6A 38 12               A 12276    	JR	C,L_604
                           A 12277    ; 2899					cf |= NS_LOSS | NS_LFN;
                           A 12278    .LINE 2899
                           A 12279    
002D6C DD7EFC              A 12280    	LD	A,(IX+%FFFFFFFC)
002D6F F603                A 12281    	OR	A,%3
002D71 DD77FC              A 12282    	LD	(IX+%FFFFFFFC),A
                           A 12283    ; 2900					i = ni; continue;		
                           A 12284    .LINE 2900
                           A 12285    
002D74 DD07E6              A 12286    	LD	BC,(IX+%FFFFFFE6)
002D77 DD0FF7              A 12287    	LD	(IX+%FFFFFFF7),BC
002D7A C3 2C 2C 00         A 12288    	JR	L_618
                           A 12289    ; 2901				}
002D7E                     A 12290    L_604:
                           A 12291    .LINE 2901
                           A 12292    
                           A 12293    ; 2902				dp->fn[i++] = (BYTE)(wc >> 
                           A 12294    .LINE 2902
                           A 12295    
002D7E DD07FA              A 12296    	LD	BC,(IX+%FFFFFFFA)
002D81 CD 00 00 00         A 12297    	CALL	__stoiu
002D85 E5C1                A 12298    	LD	BC,HL
002D87 3B                  A 12299    	DEC	SP
002D88 C5                  A 12300    	PUSH	BC
002D89 33                  A 12301    	INC	SP
002D8A F1                  A 12302    	POP	AF
002D8B 17ED62              A 12303    	SEXT	HL
002D8E E5                  A 12304    	PUSH	HL
002D8F C5                  A 12305    	PUSH	BC
002D90 33                  A 12306    	INC	SP
002D91 E1                  A 12307    	POP	HL
002D92 33                  A 12308    	INC	SP
002D93 33                  A 12309    	INC	SP
002D94 7D                  A 12310    	LD	A,L
002D95 DD07F7              A 12311    	LD	BC,(IX+%FFFFFFF7)
002D98 DD3106              A 12312    	LD	IY,(IX+%6)
002D9B ED231E              A 12313    	LEA	HL,IY+%1E
002D9E 09                  A 12314    	ADD	HL,BC
002D9F 77                  A 12315    	LD	(HL),A
002DA0 DD07F7              A 12316    	LD	BC,(IX+%FFFFFFF7)
002DA3 03                  A 12317    	INC	BC
002DA4 DD0FF7              A 12318    	LD	(IX+%FFFFFFF7),BC
                           A 12319    ; 2903			} else {						
                           A 12320    .LINE 2903
                           A 12321    
002DA7 C3 36 2E 00         A 12322    	JR	L_617
002DAB                     A 12323    L_614:
                           A 12324    ; 2904				if (wc == 0 || strchr("+,;=
                           A 12325    .LINE 2904
                           A 12326    
002DAB 49010000            A 12327    	LD.LIS	BC,0
002DAF DD27FA              A 12328    	LD	HL,(IX+%FFFFFFFA)
002DB2 B7                  A 12329    	OR	A,A
002DB3 40ED42              A 12330    	SBC.SIS	HL,BC
002DB6 28 1C               A 12331    	JR	Z,L_611
002DB8 DD07FA              A 12332    	LD	BC,(IX+%FFFFFFFA)
002DBB CD 00 00 00         A 12333    	CALL	__stoiu
002DBF E5                  A 12334    	PUSH	HL
002DC0 01 09 00 00         A 12335    	LD	BC,L__311
002DC4 C5                  A 12336    	PUSH	BC
002DC5 CD 00 00 00         A 12337    	CALL	_strchr
002DC9 C1                  A 12338    	POP	BC
002DCA C1                  A 12339    	POP	BC
002DCB 01000000            A 12340    	LD	BC,0
002DCF B7                  A 12341    	OR	A,A
002DD0 ED42                A 12342    	SBC	HL,BC
002DD2 28 12               A 12343    	JR	Z,L_612
002DD4                     A 12344    L_611:
                           A 12345    ; 2905					wc = '_'; cf |= NS_LOSS
                           A 12346    .LINE 2905
                           A 12347    
002DD4 DD36FA5F            A 12348    	LD	(IX+%FFFFFFFA),%5F
002DD8 DD36FB00            A 12349    	LD	(IX+%FFFFFFFB),%0
002DDC DD7EFC              A 12350    	LD	A,(IX+%FFFFFFFC)
002DDF F603                A 12351    	OR	A,%3
002DE1 DD77FC              A 12352    	LD	(IX+%FFFFFFFC),A
                           A 12353    ; 2906				} else {
                           A 12354    .LINE 2906
                           A 12355    
002DE4 18 50               A 12356    	JR	L_617
002DE6                     A 12357    L_612:
                           A 12358    ; 2907					if (IsUpper(wc)) {		
                           A 12359    .LINE 2907
                           A 12360    
002DE6 49014100            A 12361    	LD.LIS	BC,65
002DEA DD27FA              A 12362    	LD	HL,(IX+%FFFFFFFA)
002DED B7                  A 12363    	OR	A,A
002DEE 40ED42              A 12364    	SBC.SIS	HL,BC
002DF1 38 15               A 12365    	JR	C,L_610
002DF3 DD07FA              A 12366    	LD	BC,(IX+%FFFFFFFA)
002DF6 49215A00            A 12367    	LD.LIS	HL,90
002DFA B7                  A 12368    	OR	A,A
002DFB 40ED42              A 12369    	SBC.SIS	HL,BC
002DFE 38 08               A 12370    	JR	C,L_610
                           A 12371    ; 2908						b |= 2;
                           A 12372    .LINE 2908
                           A 12373    
002E00 DD7EF6              A 12374    	LD	A,(IX+%FFFFFFF6)
002E03 CBCF                A 12375    	SET	%1,A
002E05 DD77F6              A 12376    	LD	(IX+%FFFFFFF6),A
                           A 12377    ; 2909					}
002E08                     A 12378    L_610:
                           A 12379    .LINE 2909
                           A 12380    
                           A 12381    ; 2910					if (IsLower(wc)) {		
                           A 12382    .LINE 2910
                           A 12383    
002E08 49016100            A 12384    	LD.LIS	BC,97
002E0C DD27FA              A 12385    	LD	HL,(IX+%FFFFFFFA)
002E0F B7                  A 12386    	OR	A,A
002E10 40ED42              A 12387    	SBC.SIS	HL,BC
002E13 38 21               A 12388    	JR	C,L_617
002E15 DD07FA              A 12389    	LD	BC,(IX+%FFFFFFFA)
002E18 49217A00            A 12390    	LD.LIS	HL,122
002E1C B7                  A 12391    	OR	A,A
002E1D 40ED42              A 12392    	SBC.SIS	HL,BC
002E20 38 14               A 12393    	JR	C,L_617
                           A 12394    ; 2911						b |= 1; wc -= 0x20;
                           A 12395    .LINE 2911
                           A 12396    
002E22 DD7EF6              A 12397    	LD	A,(IX+%FFFFFFF6)
002E25 CBC7                A 12398    	SET	%0,A
002E27 DD77F6              A 12399    	LD	(IX+%FFFFFFF6),A
002E2A DD31FA              A 12400    	LD	IY,(IX+%FFFFFFFA)
002E2D ED23E0              A 12401    	LEA	HL,IY+%FFFFFFE0
002E30 DD75FA              A 12402    	LD	(IX+%FFFFFFFA),L
002E33 DD74FB              A 12403    	LD	(IX+%FFFFFFFB),H
                           A 12404    ; 2912					}
                           A 12405    ; 2913				}
                           A 12406    ; 2914			}
002E36                     A 12407    L_617:
                           A 12408    .LINE 2914
                           A 12409    
                           A 12410    ; 2915			dp->fn[i++] = (BYTE)wc;
                           A 12411    .LINE 2915
                           A 12412    
002E36 DD7EFA              A 12413    	LD	A,(IX+%FFFFFFFA)
002E39 DD07F7              A 12414    	LD	BC,(IX+%FFFFFFF7)
002E3C DD3106              A 12415    	LD	IY,(IX+%6)
002E3F ED231E              A 12416    	LEA	HL,IY+%1E
002E42 09                  A 12417    	ADD	HL,BC
002E43 77                  A 12418    	LD	(HL),A
002E44 DD07F7              A 12419    	LD	BC,(IX+%FFFFFFF7)
002E47 03                  A 12420    	INC	BC
002E48 DD0FF7              A 12421    	LD	(IX+%FFFFFFF7),BC
                           A 12422    ; 2916		}
                           A 12423    .LINE 2916
                           A 12424    
002E4B C3 2C 2C 00         A 12425    	JR	L_618
002E4F                     A 12426    L_621:
                           A 12427    ; 2917	
                           A 12428    ; 2918		if (dp->fn[0] == DDEM) dp->fn[0] = 
                           A 12429    .LINE 2918
                           A 12430    
002E4F DD3106              A 12431    	LD	IY,(IX+%6)
002E52 ED031E              A 12432    	LEA	BC,IY+%1E
002E55 DD0FD7              A 12433    	LD	(IX+%FFFFFFD7),BC
002E58 FD7E1E              A 12434    	LD	A,(IY+%1E)
002E5B B7ED62              A 12435    	UEXT	HL
002E5E 6F                  A 12436    	LD	L,A
002E5F 01E50000            A 12437    	LD	BC,229
002E63 B7                  A 12438    	OR	A,A
002E64 ED42                A 12439    	SBC	HL,BC
002E66 20 0D               A 12440    	JR	NZ,L_623
002E68 DD3106              A 12441    	LD	IY,(IX+%6)
002E6B ED031E              A 12442    	LEA	BC,IY+%1E
002E6E DD0FD7              A 12443    	LD	(IX+%FFFFFFD7),BC
002E71 FD361E05            A 12444    	LD	(IY+%1E),%5
002E75                     A 12445    L_623:
                           A 12446    ; 2919	
                           A 12447    ; 2920		if (ni == 8) b <<= 2;				
                           A 12448    .LINE 2920
                           A 12449    
002E75 01080000            A 12450    	LD	BC,8
002E79 DD27E6              A 12451    	LD	HL,(IX+%FFFFFFE6)
002E7C B7                  A 12452    	OR	A,A
002E7D ED42                A 12453    	SBC	HL,BC
002E7F 20 08               A 12454    	JR	NZ,L_626
002E81 DD7EF6              A 12455    	LD	A,(IX+%FFFFFFF6)
002E84 87                  A 12456    	ADD	A,A
002E85 87                  A 12457    	ADD	A,A
002E86 DD77F6              A 12458    	LD	(IX+%FFFFFFF6),A
002E89                     A 12459    L_626:
                           A 12460    ; 2921		if ((b & 0x0C) == 0x0C || (b & 0x03
                           A 12461    .LINE 2921
                           A 12462    
002E89 DD7EF6              A 12463    	LD	A,(IX+%FFFFFFF6)
002E8C E60C                A 12464    	AND	A,%C
002E8E FE0C                A 12465    	CP	A,%C
002E90 28 09               A 12466    	JR	Z,L_625
002E92 DD7EF6              A 12467    	LD	A,(IX+%FFFFFFF6)
002E95 E603                A 12468    	AND	A,%3
002E97 FE03                A 12469    	CP	A,%3
002E99 20 08               A 12470    	JR	NZ,L_631
002E9B                     A 12471    L_625:
002E9B DD7EFC              A 12472    	LD	A,(IX+%FFFFFFFC)
002E9E CBCF                A 12473    	SET	%1,A
002EA0 DD77FC              A 12474    	LD	(IX+%FFFFFFFC),A
002EA3                     A 12475    L_631:
                           A 12476    ; 2922		if (!(cf & NS_LFN)) {				
                           A 12477    .LINE 2922
                           A 12478    
002EA3 DD7EFC              A 12479    	LD	A,(IX+%FFFFFFFC)
002EA6 E602                A 12480    	AND	A,%2
002EA8 20 1E               A 12481    	JR	NZ,L_632
                           A 12482    ; 2923			if (b & 0x01) cf |= NS_EXT;		
                           A 12483    .LINE 2923
                           A 12484    
002EAA DD7EF6              A 12485    	LD	A,(IX+%FFFFFFF6)
002EAD E601                A 12486    	AND	A,%1
002EAF 28 08               A 12487    	JR	Z,L_629
002EB1 DD7EFC              A 12488    	LD	A,(IX+%FFFFFFFC)
002EB4 CBE7                A 12489    	SET	%4,A
002EB6 DD77FC              A 12490    	LD	(IX+%FFFFFFFC),A
002EB9                     A 12491    L_629:
                           A 12492    ; 2924			if (b & 0x04) cf |= NS_BODY;	
                           A 12493    .LINE 2924
                           A 12494    
002EB9 DD7EF6              A 12495    	LD	A,(IX+%FFFFFFF6)
002EBC E604                A 12496    	AND	A,%4
002EBE 28 08               A 12497    	JR	Z,L_632
002EC0 DD7EFC              A 12498    	LD	A,(IX+%FFFFFFFC)
002EC3 CBDF                A 12499    	SET	%3,A
002EC5 DD77FC              A 12500    	LD	(IX+%FFFFFFFC),A
                           A 12501    ; 2925		}
002EC8                     A 12502    L_632:
                           A 12503    .LINE 2925
                           A 12504    
                           A 12505    ; 2926	
                           A 12506    ; 2927		dp->fn[NSFLAG] = cf;	/* SFN is c
                           A 12507    .LINE 2927
                           A 12508    
002EC8 DD31D7              A 12509    	LD	IY,(IX+%FFFFFFD7)
002ECB ED230B              A 12510    	LEA	HL,IY+%B
002ECE DD7EFC              A 12511    	LD	A,(IX+%FFFFFFFC)
002ED1 77                  A 12512    	LD	(HL),A
                           A 12513    ; 2928	
                           A 12514    ; 2929		return FR_OK;
                           A 12515    .LINE 2929
                           A 12516    
002ED2 B7                  A 12517    	OR	A,A
002ED3 ED62                A 12518    	SBC	HL,HL
                           A 12519    ; 2930	
                           A 12520    ; 2931	
                           A 12521    ; 2932	#else	/* FF_USE_LFN : Non-LFN configu
                           A 12522    ; 2933		BYTE c, d, *sfn;
                           A 12523    ; 2934		UINT ni, si, i;
                           A 12524    ; 2935		const char *p;
                           A 12525    ; 2936	
                           A 12526    ; 2937		/* Create file name in directory fo
                           A 12527    ; 2938		p = *path; sfn = dp->fn;
                           A 12528    ; 2939		memset(sfn, ' ', 11);
                           A 12529    ; 2940		si = i = 0; ni = 8;
                           A 12530    ; 2941	#if FF_FS_RPATH != 0
                           A 12531    ; 2942		if (p[si] == '.') { /* Is this a do
                           A 12532    ; 2943			for (;;) {
                           A 12533    ; 2944				c = (BYTE)p[si++];
                           A 12534    ; 2945				if (c != '.' || si >= 3) br
                           A 12535    ; 2946				sfn[i++] = c;
                           A 12536    ; 2947			}
                           A 12537    ; 2948			if (!IsSeparator(c) && c > ' ')
                           A 12538    ; 2949			*path = p + si;					
                           A 12539    ; 2950			sfn[NSFLAG] = (c <= ' ') ? NS_L
                           A 12540    ; 2951			return FR_OK;
                           A 12541    ; 2952		}
                           A 12542    ; 2953	#endif
                           A 12543    ; 2954		for (;;) {
                           A 12544    ; 2955			c = (BYTE)p[si++];				
                           A 12545    ; 2956			if (c <= ' ') break; 			
                           A 12546    ; 2957			if (IsSeparator(c)) {			
                           A 12547    ; 2958				while (IsSeparator(p[si])) 
                           A 12548    ; 2959				break;
                           A 12549    ; 2960			}
                           A 12550    ; 2961			if (c == '.' || i >= ni) {		
                           A 12551    ; 2962				if (ni == 11 || c != '.') r
                           A 12552    ; 2963				i = 8; ni = 11;				
                           A 12553    ; 2964				continue;
                           A 12554    ; 2965			}
                           A 12555    ; 2966	#if FF_CODE_PAGE == 0
                           A 12556    ; 2967			if (ExCvt && c >= 0x80) {		
                           A 12557    ; 2968				c = ExCvt[c & 0x7F];		
                           A 12558    ; 2969			}
                           A 12559    ; 2970	#elif FF_CODE_PAGE < 900
                           A 12560    ; 2971			if (c >= 0x80) {				
                           A 12561    ; 2972				c = ExCvt[c & 0x7F];		
                           A 12562    ; 2973			}
                           A 12563    ; 2974	#endif
                           A 12564    ; 2975			if (dbc_1st(c)) {				
                           A 12565    ; 2976				d = (BYTE)p[si++];			
                           A 12566    ; 2977				if (!dbc_2nd(d) || i >= ni 
                           A 12567    ; 2978				sfn[i++] = c;
                           A 12568    ; 2979				sfn[i++] = d;
                           A 12569    ; 2980			} else {						
                           A 12570    ; 2981				if (strchr("*+,:;<=>[]|\"\?
                           A 12571    ; 2982				if (IsLower(c)) c -= 0x20;	
                           A 12572    ; 2983				sfn[i++] = c;
                           A 12573    ; 2984			}
                           A 12574    ; 2985		}
                           A 12575    ; 2986		*path = &p[si];						
                           A 12576    ; 2987		if (i == 0) return FR_INVALID_NAME;
                           A 12577    ; 2988	
                           A 12578    ; 2989		if (sfn[0] == DDEM) sfn[0] = RDDEM;
                           A 12579    ; 2990		sfn[NSFLAG] = (c <= ' ' || p[si] <=
                           A 12580    ; 2991	
                           A 12581    ; 2992		return FR_OK;
                           A 12582    ; 2993	#endif /* FF_USE_LFN */
                           A 12583    ; 2994	}
002ED5                     A 12584    L_633:
                           A 12585    .LINE 2994
                           A 12586    
002ED5 DDF9                A 12587    	LD	SP,IX
002ED7 DDE1                A 12588    	POP	IX
002ED9 C9                  A 12589    	RET	
                           A 12590    
                           A 12591    
                           A 12592    ;**************************** _create_name ****
                           A 12593    ;Name                         Addr/Register   S
                           A 12594    ;_ExCvt                              STATIC    
                           A 12595    ;_ff_uni2oem                         IMPORT  --
                           A 12596    ;_memset                             IMPORT  --
                           A 12597    ;_strchr                             IMPORT  --
                           A 12598    ;G_34                                 IX-41    
                           A 12599    ;G_32                                 IX-38    
                           A 12600    ;G_31                                 IX-35    
                           A 12601    ;G_30                                 IX-32    
                           A 12602    ;temp552                              IX-29    
                           A 12603    ;ni                                   IX-26    
                           A 12604    ;p                                    IX-23    
                           A 12605    ;uc                                   IX-20    
                           A 12606    ;lfn                                  IX-16    
                           A 12607    ;si                                   IX-13    
                           A 12608    ;b                                    IX-10    
                           A 12609    ;i                                     IX-9    
                           A 12610    ;wc                                    IX-6    
                           A 12611    ;cf                                    IX-4    
                           A 12612    ;di                                    IX-3    
                           A 12613    ;path                                  IX+9    
                           A 12614    ;dp                                    IX+6    
                           A 12615    
                           A 12616    
                           A 12617    ; Stack Frame Size: 56 (bytes)
                           A 12618    ;       Spill Code: -2 (instruction)
                           A 12619    
                           A 12620    
                           A 12621    .ENDFUNC "create_name",2994,"_create_name"
                           A 12622    	SEGMENT STRSECT
000000                     A 12623    L__274:
000000 2A3A3C3E 7C223F     A 12624    	DB	"*:<>|\"?"
000007 7F00                A 12625    	DB	127,0
000009                     A 12626    L__311:
000009 2B2C3B3D 5B5D       A 12627    	DB	"+,;=[]"
00000F 00                  A 12628    	DB	0
                           A 12629    	SEGMENT CODE
                           A 12630    ; 2995	
                           A 12631    ; 2996	
                           A 12632    ; 2997	
                           A 12633    ; 2998	
                           A 12634    ; 2999	/*-------------------------------------
                           A 12635    ; 3000	/* Follow a file path                  
                           A 12636    ; 3001	/*-------------------------------------
                           A 12637    ; 3002	
                           A 12638    ; 3003	static FRESULT follow_path (	/* FR_O
                           A 12639    ; 3004		DIR* dp,					/* Dire
                           A 12640    ; 3005		const TCHAR* path			/* Full
                           A 12641    ; 3006	)
                           A 12642    ; 3007	{
002EDA                     A 12643    _follow_path:
                           A 12644    .DEFINE "_follow_path"
                           A 12645    
                           A 12646    .VALUE _follow_path
                           A 12647    
                           A 12648    .CLASS 3
                           A 12649    
                           A 12650    .TYPE 68
                           A 12651    
                           A 12652    .ENDEF
                           A 12653    
                           A 12654    .BEGFUNC "follow_path",3007,"_follow_path"
                           A 12655    
                           A 12656    .LINE 3007
                           A 12657    
                           A 12658    .DEFINE "dp"
                           A 12659    
                           A 12660    .CLASS 65
                           A 12661    
                           A 12662    .VALUE 6
                           A 12663    
                           A 12664    .TAG "NONAME3"
                           A 12665    
                           A 12666    .TYPE 40
                           A 12667    
                           A 12668    .ENDEF
                           A 12669    
                           A 12670    .DEFINE "path"
                           A 12671    
                           A 12672    .CLASS 65
                           A 12673    
                           A 12674    .VALUE 9
                           A 12675    
                           A 12676    .TYPE 194
                           A 12677    
                           A 12678    .ENDEF
                           A 12679    
                           A 12680    .DEFINE "res"
                           A 12681    
                           A 12682    .CLASS 65
                           A 12683    
                           A 12684    .VALUE -3
                           A 12685    
                           A 12686    .TYPE 4
                           A 12687    
                           A 12688    .ENDEF
                           A 12689    
                           A 12690    .DEFINE "ns"
                           A 12691    
                           A 12692    .CLASS 65
                           A 12693    
                           A 12694    .VALUE -4
                           A 12695    
                           A 12696    .TYPE 12
                           A 12697    
                           A 12698    .ENDEF
                           A 12699    
                           A 12700    .DEFINE "fs"
                           A 12701    
                           A 12702    .CLASS 65
                           A 12703    
                           A 12704    .VALUE -7
                           A 12705    
                           A 12706    .TAG "NONAME0"
                           A 12707    
                           A 12708    .TYPE 40
                           A 12709    
                           A 12710    .ENDEF
                           A 12711    
002EDA DDE5                A 12712    	PUSH	IX
002EDC DD210000 00         A 12713    	LD	IX,0
002EE1 DD39                A 12714    	ADD	IX,SP
002EE3 ED22F3              A 12715    	LEA	HL,IX+%FFFFFFF3
002EE6 F9                  A 12716    	LD	SP,HL
                           A 12717    ; 3008		FRESULT res;
                           A 12718    ; 3009		BYTE ns;
                           A 12719    ; 3010		FATFS *fs = dp->obj.fs;
                           A 12720    .LINE 3010
                           A 12721    
002EE7 DD3106              A 12722    	LD	IY,(IX+%6)
002EEA FD0700              A 12723    	LD	BC,(IY+%0)
002EED DD0FF9              A 12724    	LD	(IX+%FFFFFFF9),BC
                           A 12725    ; 3011	
                           A 12726    ; 3012	
                           A 12727    ; 3013	#if FF_FS_RPATH != 0
                           A 12728    ; 3014		if (!IsSeparator(*path) && (FF_STR_
                           A 12729    .LINE 3014
                           A 12730    
002EF0 DD2709              A 12731    	LD	HL,(IX+%9)
002EF3 7E                  A 12732    	LD	A,(HL)
002EF4 47                  A 12733    	LD	B,A
002EF5 17ED62              A 12734    	SEXT	HL
002EF8 68                  A 12735    	LD	L,B
002EF9 012F0000            A 12736    	LD	BC,47
002EFD B7                  A 12737    	OR	A,A
002EFE ED42                A 12738    	SBC	HL,BC
002F00 28 33               A 12739    	JR	Z,L_638
002F02 DD2709              A 12740    	LD	HL,(IX+%9)
002F05 7E                  A 12741    	LD	A,(HL)
002F06 47                  A 12742    	LD	B,A
002F07 17ED62              A 12743    	SEXT	HL
002F0A 68                  A 12744    	LD	L,B
002F0B 015C0000            A 12745    	LD	BC,92
002F0F B7                  A 12746    	OR	A,A
002F10 ED42                A 12747    	SBC	HL,BC
002F12 28 21               A 12748    	JR	Z,L_638
                           A 12749    ; 3015			dp->obj.sclust = fs->cdir;		
                           A 12750    .LINE 3015
                           A 12751    
002F14 DD31F9              A 12752    	LD	IY,(IX+%FFFFFFF9)
002F17 FD0716              A 12753    	LD	BC,(IY+%16)
002F1A FD7E19              A 12754    	LD	A,(IY+%19)
002F1D DD3106              A 12755    	LD	IY,(IX+%6)
002F20 FD0F07              A 12756    	LD	(IY+%7),BC
002F23 FD770A              A 12757    	LD	(IY+%A),A
                           A 12758    ; 3016		} else
                           A 12759    .LINE 3016
                           A 12760    
002F26 18 3F               A 12761    	JR	L_662
                           A 12762    ; 3017	#endif
                           A 12763    ; 3018		{									
                           A 12764    ; 3019			while (IsSeparator(*path)) path
002F28                     A 12765    L_639:
                           A 12766    .LINE 3019
                           A 12767    
002F28 DD0709              A 12768    	LD	BC,(IX+%9)
002F2B DD0FF3              A 12769    	LD	(IX+%FFFFFFF3),BC
002F2E DD0709              A 12770    	LD	BC,(IX+%9)
002F31 03                  A 12771    	INC	BC
002F32 DD0F09              A 12772    	LD	(IX+%9),BC
002F35                     A 12773    L_638:
002F35 DD2709              A 12774    	LD	HL,(IX+%9)
002F38 7E                  A 12775    	LD	A,(HL)
002F39 47                  A 12776    	LD	B,A
002F3A 17ED62              A 12777    	SEXT	HL
002F3D 68                  A 12778    	LD	L,B
002F3E 012F0000            A 12779    	LD	BC,47
002F42 B7                  A 12780    	OR	A,A
002F43 ED42                A 12781    	SBC	HL,BC
002F45 28 E1               A 12782    	JR	Z,L_639
002F47 DD2709              A 12783    	LD	HL,(IX+%9)
002F4A 7E                  A 12784    	LD	A,(HL)
002F4B 47                  A 12785    	LD	B,A
002F4C 17ED62              A 12786    	SEXT	HL
002F4F 68                  A 12787    	LD	L,B
002F50 015C0000            A 12788    	LD	BC,92
002F54 B7                  A 12789    	OR	A,A
002F55 ED42                A 12790    	SBC	HL,BC
002F57 28 CF               A 12791    	JR	Z,L_639
                           A 12792    ; 3020			dp->obj.sclust = 0;				
                           A 12793    .LINE 3020
                           A 12794    
002F59 01000000            A 12795    	LD	BC,0
002F5D DD3106              A 12796    	LD	IY,(IX+%6)
002F60 FD0F07              A 12797    	LD	(IY+%7),BC
002F63 FD360A00            A 12798    	LD	(IY+%A),%0
                           A 12799    ; 3021		}
002F67                     A 12800    L_662:
                           A 12801    .LINE 3021
                           A 12802    
                           A 12803    ; 3022	#if FF_FS_EXFAT
                           A 12804    ; 3023		dp->obj.n_frag = 0;	/* Invalidate l
                           A 12805    ; 3024	#if FF_FS_RPATH != 0
                           A 12806    ; 3025		if (fs->fs_type == FS_EXFAT && dp->
                           A 12807    ; 3026			DIR dj;
                           A 12808    ; 3027	
                           A 12809    ; 3028			dp->obj.c_scl = fs->cdc_scl;
                           A 12810    ; 3029			dp->obj.c_size = fs->cdc_size;
                           A 12811    ; 3030			dp->obj.c_ofs = fs->cdc_ofs;
                           A 12812    ; 3031			res = load_obj_xdir(&dj, &dp->o
                           A 12813    ; 3032			if (res != FR_OK) return res;
                           A 12814    ; 3033			dp->obj.objsize = ld_dword(fs->
                           A 12815    ; 3034			dp->obj.stat = fs->dirbuf[XDIR_
                           A 12816    ; 3035		}
                           A 12817    ; 3036	#endif
                           A 12818    ; 3037	#endif
                           A 12819    ; 3038	
                           A 12820    ; 3039		if ((UINT)*path < ' ') {			
                           A 12821    .LINE 3039
                           A 12822    
002F67 DD2709              A 12823    	LD	HL,(IX+%9)
002F6A 7E                  A 12824    	LD	A,(HL)
002F6B 47                  A 12825    	LD	B,A
002F6C 17ED62              A 12826    	SEXT	HL
002F6F 68                  A 12827    	LD	L,B
002F70 01200000            A 12828    	LD	BC,32
002F74 B7                  A 12829    	OR	A,A
002F75 ED42                A 12830    	SBC	HL,BC
002F77 30 20               A 12831    	JR	NC,L_658
                           A 12832    ; 3040			dp->fn[NSFLAG] = NS_NONAME;
                           A 12833    .LINE 3040
                           A 12834    
002F79 DD3106              A 12835    	LD	IY,(IX+%6)
002F7C ED2329              A 12836    	LEA	HL,IY+%29
002F7F 3680                A 12837    	LD	(HL),%80
                           A 12838    ; 3041			res = dir_sdi(dp, 0);
                           A 12839    .LINE 3041
                           A 12840    
002F81 01000000            A 12841    	LD	BC,0
002F85 C5                  A 12842    	PUSH	BC
002F86 C5                  A 12843    	PUSH	BC
002F87 DD0706              A 12844    	LD	BC,(IX+%6)
002F8A C5                  A 12845    	PUSH	BC
002F8B CD 50 12 00         A 12846    	CALL	_dir_sdi
002F8F C1                  A 12847    	POP	BC
002F90 C1                  A 12848    	POP	BC
002F91 C1                  A 12849    	POP	BC
002F92 DD2FFD              A 12850    	LD	(IX+%FFFFFFFD),HL
                           A 12851    ; 3042	
                           A 12852    ; 3043		} else {							
                           A 12853    .LINE 3043
                           A 12854    
002F95 C3 64 30 00         A 12855    	JR	L_663
                           A 12856    ; 3044			for (;;) {
002F99                     A 12857    L_658:
                           A 12858    .LINE 3044
                           A 12859    
                           A 12860    ; 3045				res = create_name(dp, &path
                           A 12861    .LINE 3045
                           A 12862    
002F99 ED6509              A 12863    	PEA	IX+%9
002F9C DD0706              A 12864    	LD	BC,(IX+%6)
002F9F C5                  A 12865    	PUSH	BC
002FA0 CD E0 28 00         A 12866    	CALL	_create_name
002FA4 C1                  A 12867    	POP	BC
002FA5 C1                  A 12868    	POP	BC
002FA6 DD2FFD              A 12869    	LD	(IX+%FFFFFFFD),HL
                           A 12870    ; 3046				if (res != FR_OK) break;
                           A 12871    .LINE 3046
                           A 12872    
002FA9 01000000            A 12873    	LD	BC,0
002FAD DD27FD              A 12874    	LD	HL,(IX+%FFFFFFFD)
002FB0 B7                  A 12875    	OR	A,A
002FB1 ED42                A 12876    	SBC	HL,BC
002FB3 C2 64 30 00         A 12877    	JR	NZ,L_663
                           A 12878    ; 3047				res = dir_find(dp);			
                           A 12879    .LINE 3047
                           A 12880    
002FB7 DD0706              A 12881    	LD	BC,(IX+%6)
002FBA C5                  A 12882    	PUSH	BC
002FBB CD FF 1F 00         A 12883    	CALL	_dir_find
002FBF C1                  A 12884    	POP	BC
002FC0 DD2FFD              A 12885    	LD	(IX+%FFFFFFFD),HL
                           A 12886    ; 3048				ns = dp->fn[NSFLAG];
                           A 12887    .LINE 3048
                           A 12888    
002FC3 DD3106              A 12889    	LD	IY,(IX+%6)
002FC6 ED3329              A 12890    	LEA	IY,IY+%29
002FC9 DD3EF6              A 12891    	LD	(IX+%FFFFFFF6),IY
002FCC DD27F6              A 12892    	LD	HL,(IX+%FFFFFFF6)
002FCF 7E                  A 12893    	LD	A,(HL)
002FD0 DD77FC              A 12894    	LD	(IX+%FFFFFFFC),A
                           A 12895    ; 3049				if (res != FR_OK) {			
                           A 12896    .LINE 3049
                           A 12897    
002FD3 01000000            A 12898    	LD	BC,0
002FD7 DD27FD              A 12899    	LD	HL,(IX+%FFFFFFFD)
002FDA B7                  A 12900    	OR	A,A
002FDB ED42                A 12901    	SBC	HL,BC
002FDD 28 38               A 12902    	JR	Z,L_654
                           A 12903    ; 3050					if (res == FR_NO_FILE) 
                           A 12904    .LINE 3050
                           A 12905    
002FDF 01040000            A 12906    	LD	BC,4
002FE3 DD27FD              A 12907    	LD	HL,(IX+%FFFFFFFD)
002FE6 B7                  A 12908    	OR	A,A
002FE7 ED42                A 12909    	SBC	HL,BC
002FE9 20 79               A 12910    	JR	NZ,L_663
                           A 12911    ; 3051						if (FF_FS_RPATH && 
                           A 12912    .LINE 3051
                           A 12913    
002FEB DD7EFC              A 12914    	LD	A,(IX+%FFFFFFFC)
002FEE E620                A 12915    	AND	A,%20
002FF0 28 15               A 12916    	JR	Z,L_649
                           A 12917    ; 3052							if (!(ns & NS_L
                           A 12918    .LINE 3052
                           A 12919    
002FF2 DD7EFC              A 12920    	LD	A,(IX+%FFFFFFFC)
002FF5 E604                A 12921    	AND	A,%4
002FF7 28 A0               A 12922    	JR	Z,L_658
                           A 12923    ; 3053							dp->fn[NSFLAG] 
                           A 12924    .LINE 3053
                           A 12925    
002FF9 DD27F6              A 12926    	LD	HL,(IX+%FFFFFFF6)
002FFC 3680                A 12927    	LD	(HL),%80
                           A 12928    ; 3054							res = FR_OK;
                           A 12929    .LINE 3054
                           A 12930    
002FFE 01000000            A 12931    	LD	BC,0
003002 DD0FFD              A 12932    	LD	(IX+%FFFFFFFD),BC
                           A 12933    ; 3055						} else {			
                           A 12934    .LINE 3055
                           A 12935    
003005 18 5D               A 12936    	JR	L_663
003007                     A 12937    L_649:
                           A 12938    ; 3056							if (!(ns & NS_L
                           A 12939    .LINE 3056
                           A 12940    
003007 DD7EFC              A 12941    	LD	A,(IX+%FFFFFFFC)
00300A E604                A 12942    	AND	A,%4
00300C 20 56               A 12943    	JR	NZ,L_663
00300E 01050000            A 12944    	LD	BC,5
003012 DD0FFD              A 12945    	LD	(IX+%FFFFFFFD),BC
                           A 12946    ; 3057						}
                           A 12947    ; 3058					}
                           A 12948    .LINE 3058
                           A 12949    
                           A 12950    ; 3059					break;
                           A 12951    .LINE 3059
                           A 12952    
003015 18 4D               A 12953    	JR	L_663
                           A 12954    ; 3060				}
003017                     A 12955    L_654:
                           A 12956    .LINE 3060
                           A 12957    
                           A 12958    ; 3061				if (ns & NS_LAST) break;	
                           A 12959    .LINE 3061
                           A 12960    
003017 DD7EFC              A 12961    	LD	A,(IX+%FFFFFFFC)
00301A E604                A 12962    	AND	A,%4
00301C 20 46               A 12963    	JR	NZ,L_663
                           A 12964    ; 3062				/* Get into the sub-directo
                           A 12965    ; 3063				if (!(dp->obj.attr & AM_DIR
                           A 12966    .LINE 3063
                           A 12967    
00301E DD3106              A 12968    	LD	IY,(IX+%6)
003021 FD7E05              A 12969    	LD	A,(IY+%5)
003024 E610                A 12970    	AND	A,%10
003026 20 09               A 12971    	JR	NZ,L_657
                           A 12972    ; 3064					res = FR_NO_PATH; break
                           A 12973    .LINE 3064
                           A 12974    
003028 01050000            A 12975    	LD	BC,5
00302C DD0FFD              A 12976    	LD	(IX+%FFFFFFFD),BC
00302F 18 33               A 12977    	JR	L_663
                           A 12978    ; 3065				}
003031                     A 12979    L_657:
                           A 12980    .LINE 3065
                           A 12981    
                           A 12982    ; 3066	#if FF_FS_EXFAT
                           A 12983    ; 3067				if (fs->fs_type == FS_EXFAT
                           A 12984    ; 3068					dp->obj.c_scl = dp->obj
                           A 12985    ; 3069					dp->obj.c_size = ((DWOR
                           A 12986    ; 3070					dp->obj.c_ofs = dp->blk
                           A 12987    ; 3071					init_alloc_info(fs, &dp
                           A 12988    ; 3072				} else
                           A 12989    ; 3073	#endif
                           A 12990    ; 3074				{
                           A 12991    ; 3075					dp->obj.sclust = ld_clu
                           A 12992    .LINE 3075
                           A 12993    
003031 DD3106              A 12994    	LD	IY,(IX+%6)
003034 FD270F              A 12995    	LD	HL,(IY+%F)
003037 FD5E12              A 12996    	LD	E,(IY+%12)
00303A 01FF0100            A 12997    	LD	BC,511
00303E AF                  A 12998    	XOR	A,A
00303F CD 00 00 00         A 12999    	CALL	__land
003043 E5C1                A 13000    	LD	BC,HL
003045 DD31F9              A 13001    	LD	IY,(IX+%FFFFFFF9)
003048 ED2336              A 13002    	LEA	HL,IY+%36
00304B 09                  A 13003    	ADD	HL,BC
00304C E5                  A 13004    	PUSH	HL
00304D DD07F9              A 13005    	LD	BC,(IX+%FFFFFFF9)
003050 C5                  A 13006    	PUSH	BC
003051 CD EE 17 00         A 13007    	CALL	_ld_clust
003055 C1                  A 13008    	POP	BC
003056 C1                  A 13009    	POP	BC
003057 DD3106              A 13010    	LD	IY,(IX+%6)
00305A FD2F07              A 13011    	LD	(IY+%7),HL
00305D FD730A              A 13012    	LD	(IY+%A),E
                           A 13013    ; 3076				}
                           A 13014    ; 3077			}
                           A 13015    .LINE 3077
                           A 13016    
003060 C3 99 2F 00         A 13017    	JR	L_658
                           A 13018    ; 3078		}
003064                     A 13019    L_663:
                           A 13020    .LINE 3078
                           A 13021    
                           A 13022    ; 3079	
                           A 13023    ; 3080		return res;
                           A 13024    .LINE 3080
                           A 13025    
003064 DD27FD              A 13026    	LD	HL,(IX+%FFFFFFFD)
                           A 13027    ; 3081	}
                           A 13028    .LINE 3081
                           A 13029    
003067 DDF9                A 13030    	LD	SP,IX
003069 DDE1                A 13031    	POP	IX
00306B C9                  A 13032    	RET	
                           A 13033    
                           A 13034    
                           A 13035    ;**************************** _follow_path ****
                           A 13036    ;Name                         Addr/Register   S
                           A 13037    ;G_36                                 IX-10    
                           A 13038    ;fs                                    IX-7    
                           A 13039    ;ns                                    IX-4    
                           A 13040    ;res                                   IX-3    
                           A 13041    ;path                                  IX+9    
                           A 13042    ;dp                                    IX+6    
                           A 13043    
                           A 13044    
                           A 13045    ; Stack Frame Size: 25 (bytes)
                           A 13046    ;       Spill Code: -2 (instruction)
                           A 13047    
                           A 13048    
                           A 13049    .ENDFUNC "follow_path",3081,"_follow_path"
                           A 13050    ; 3082	
                           A 13051    ; 3083	
                           A 13052    ; 3084	
                           A 13053    ; 3085	
                           A 13054    ; 3086	/*-------------------------------------
                           A 13055    ; 3087	/* Get logical drive number from path n
                           A 13056    ; 3088	/*-------------------------------------
                           A 13057    ; 3089	
                           A 13058    ; 3090	static int get_ldnumber (	/* Returns 
                           A 13059    ; 3091		const TCHAR** path		/* Pointer 
                           A 13060    ; 3092	)
                           A 13061    ; 3093	{
00306C                     A 13062    _get_ldnumber:
                           A 13063    .DEFINE "_get_ldnumber"
                           A 13064    
                           A 13065    .VALUE _get_ldnumber
                           A 13066    
                           A 13067    .CLASS 3
                           A 13068    
                           A 13069    .TYPE 68
                           A 13070    
                           A 13071    .ENDEF
                           A 13072    
                           A 13073    .BEGFUNC "get_ldnumber",3093,"_get_ldnumber"
                           A 13074    
                           A 13075    .LINE 3093
                           A 13076    
                           A 13077    .DEFINE "path"
                           A 13078    
                           A 13079    .CLASS 65
                           A 13080    
                           A 13081    .VALUE 6
                           A 13082    
                           A 13083    .TYPE 1570
                           A 13084    
                           A 13085    .ENDEF
                           A 13086    
                           A 13087    .DEFINE "tp"
                           A 13088    
                           A 13089    .CLASS 65
                           A 13090    
                           A 13091    .VALUE -3
                           A 13092    
                           A 13093    .TYPE 194
                           A 13094    
                           A 13095    .ENDEF
                           A 13096    
                           A 13097    .DEFINE "tt"
                           A 13098    
                           A 13099    .CLASS 65
                           A 13100    
                           A 13101    .VALUE -6
                           A 13102    
                           A 13103    .TYPE 194
                           A 13104    
                           A 13105    .ENDEF
                           A 13106    
                           A 13107    .DEFINE "tc"
                           A 13108    
                           A 13109    .CLASS 65
                           A 13110    
                           A 13111    .VALUE -7
                           A 13112    
                           A 13113    .TYPE 2
                           A 13114    
                           A 13115    .ENDEF
                           A 13116    
                           A 13117    .DEFINE "i"
                           A 13118    
                           A 13119    .CLASS 65
                           A 13120    
                           A 13121    .VALUE -10
                           A 13122    
                           A 13123    .TYPE 4
                           A 13124    
                           A 13125    .ENDEF
                           A 13126    
                           A 13127    .DEFINE "vol"
                           A 13128    
                           A 13129    .CLASS 65
                           A 13130    
                           A 13131    .VALUE -13
                           A 13132    
                           A 13133    .TYPE 4
                           A 13134    
                           A 13135    .ENDEF
                           A 13136    
00306C DDE5                A 13137    	PUSH	IX
00306E DD210000 00         A 13138    	LD	IX,0
003073 DD39                A 13139    	ADD	IX,SP
003075 ED22F0              A 13140    	LEA	HL,IX+%FFFFFFF0
003078 F9                  A 13141    	LD	SP,HL
                           A 13142    ; 3094		const TCHAR *tp, *tt;
                           A 13143    ; 3095		TCHAR tc;
                           A 13144    ; 3096		int i;
                           A 13145    ; 3097		int vol = -1;
                           A 13146    .LINE 3097
                           A 13147    
003079 01FFFFFF            A 13148    	LD	BC,16777215
00307D DD0FF3              A 13149    	LD	(IX+%FFFFFFF3),BC
                           A 13150    ; 3098	#if FF_STR_VOLUME_ID		/* Find str
                           A 13151    ; 3099		const char *sp;
                           A 13152    ; 3100		char c;
                           A 13153    ; 3101	#endif
                           A 13154    ; 3102	
                           A 13155    ; 3103		tt = tp = *path;
                           A 13156    .LINE 3103
                           A 13157    
003080 DD2706              A 13158    	LD	HL,(IX+%6)
003083 ED07                A 13159    	LD	BC,(HL)
003085 DD0FFD              A 13160    	LD	(IX+%FFFFFFFD),BC
003088 DD0FFA              A 13161    	LD	(IX+%FFFFFFFA),BC
                           A 13162    ; 3104		if (!tp) return vol;	/* Invalid 
                           A 13163    .LINE 3104
                           A 13164    
00308B 01000000            A 13165    	LD	BC,0
00308F DD27FD              A 13166    	LD	HL,(IX+%FFFFFFFD)
003092 B7                  A 13167    	OR	A,A
003093 ED42                A 13168    	SBC	HL,BC
003095 20 08               A 13169    	JR	NZ,L_668
003097 21FFFFFF            A 13170    	LD	HL,16777215
00309B C3 62 31 00         A 13171    	JR	L_680
                           A 13172    ; 3105		do tc = *tt++; while (!IsTerminator
00309F                     A 13173    L_668:
                           A 13174    .LINE 3105
                           A 13175    
00309F DD07FA              A 13176    	LD	BC,(IX+%FFFFFFFA)
0030A2 DD0FF0              A 13177    	LD	(IX+%FFFFFFF0),BC
0030A5 C5E1                A 13178    	LD	HL,BC
0030A7 7E                  A 13179    	LD	A,(HL)
0030A8 DD77F9              A 13180    	LD	(IX+%FFFFFFF9),A
0030AB DD07FA              A 13181    	LD	BC,(IX+%FFFFFFFA)
0030AE 03                  A 13182    	INC	BC
0030AF DD0FFA              A 13183    	LD	(IX+%FFFFFFFA),BC
0030B2 DD7EF9              A 13184    	LD	A,(IX+%FFFFFFF9)
0030B5 FE20                A 13185    	CP	A,%20
0030B7 38 07               A 13186    	JR	C,L_678
0030B9 DD7EF9              A 13187    	LD	A,(IX+%FFFFFFF9)
0030BC FE3A                A 13188    	CP	A,%3A
0030BE 20 DF               A 13189    	JR	NZ,L_668
0030C0                     A 13190    L_678:
                           A 13191    ; 3106	
                           A 13192    ; 3107		if (tc == ':') {	/* DOS/Windows 
                           A 13193    .LINE 3107
                           A 13194    
0030C0 DD7EF9              A 13195    	LD	A,(IX+%FFFFFFF9)
0030C3 FE3A                A 13196    	CP	A,%3A
0030C5 C2 4F 31 00         A 13197    	JR	NZ,L_679
                           A 13198    ; 3108			i = FF_VOLUMES;
                           A 13199    .LINE 3108
                           A 13200    
0030C9 01010000            A 13201    	LD	BC,1
0030CD DD0FF6              A 13202    	LD	(IX+%FFFFFFF6),BC
                           A 13203    ; 3109			if (IsDigit(*tp) && tp + 2 == t
                           A 13204    .LINE 3109
                           A 13205    
0030D0 DD27FD              A 13206    	LD	HL,(IX+%FFFFFFFD)
0030D3 7E                  A 13207    	LD	A,(HL)
0030D4 47                  A 13208    	LD	B,A
0030D5 17ED62              A 13209    	SEXT	HL
0030D8 68                  A 13210    	LD	L,B
0030D9 01300000            A 13211    	LD	BC,48
0030DD B7                  A 13212    	OR	A,A
0030DE ED42                A 13213    	SBC	HL,BC
0030E0 FA 24 31 00         A 13214    	JP	M,L_675
0030E4 DD27FD              A 13215    	LD	HL,(IX+%FFFFFFFD)
0030E7 7E                  A 13216    	LD	A,(HL)
0030E8 47                  A 13217    	LD	B,A
0030E9 17ED62              A 13218    	SEXT	HL
0030EC 68                  A 13219    	LD	L,B
0030ED E5C1                A 13220    	LD	BC,HL
0030EF 21390000            A 13221    	LD	HL,57
0030F3 B7                  A 13222    	OR	A,A
0030F4 ED42                A 13223    	SBC	HL,BC
0030F6 FA 00 31 00         A 13224    	JP	M,L__347
0030FA EA 24 31 00         A 13225    	JP	PE,L_675
0030FE 18 04               A 13226    	JR	L__348
003100                     A 13227    L__347:
003100 E2 24 31 00         A 13228    	JP	PO,L_675
003104                     A 13229    L__348:
003104 DD31FD              A 13230    	LD	IY,(IX+%FFFFFFFD)
003107 ED2302              A 13231    	LEA	HL,IY+%2
00310A DD07FA              A 13232    	LD	BC,(IX+%FFFFFFFA)
00310D B7                  A 13233    	OR	A,A
00310E ED42                A 13234    	SBC	HL,BC
003110 20 12               A 13235    	JR	NZ,L_675
                           A 13236    ; 3110				i = (int)*tp - '0';	/* Get 
                           A 13237    .LINE 3110
                           A 13238    
003112 DD27FD              A 13239    	LD	HL,(IX+%FFFFFFFD)
003115 7E                  A 13240    	LD	A,(HL)
003116 47                  A 13241    	LD	B,A
003117 17ED62              A 13242    	SEXT	HL
00311A 68                  A 13243    	LD	L,B
00311B E5FDE1              A 13244    	LD	IY,HL
00311E ED33D0              A 13245    	LEA	IY,IY+%FFFFFFD0
003121 DD3EF6              A 13246    	LD	(IX+%FFFFFFF6),IY
                           A 13247    ; 3111			}
003124                     A 13248    L_675:
                           A 13249    .LINE 3111
                           A 13250    
                           A 13251    ; 3112	#if FF_STR_VOLUME_ID == 1	/* Arbitrar
                           A 13252    ; 3113			else {
                           A 13253    ; 3114				i = 0;
                           A 13254    ; 3115				do {
                           A 13255    ; 3116					sp = VolumeStr[i]; tp =
                           A 13256    ; 3117					do {	/* Compare the 
                           A 13257    ; 3118						c = *sp++; tc = *tp
                           A 13258    ; 3119						if (IsLower(c)) c -
                           A 13259    ; 3120						if (IsLower(tc)) tc
                           A 13260    ; 3121					} while (c && (TCHAR)c 
                           A 13261    ; 3122				} while ((c || tp != tt) &&
                           A 13262    ; 3123			}
                           A 13263    ; 3124	#endif
                           A 13264    ; 3125			if (i < FF_VOLUMES) {	/* If a
                           A 13265    .LINE 3125
                           A 13266    
003124 01010000            A 13267    	LD	BC,1
003128 DD27F6              A 13268    	LD	HL,(IX+%FFFFFFF6)
00312B B7                  A 13269    	OR	A,A
00312C ED42                A 13270    	SBC	HL,BC
00312E F2 38 31 00         A 13271    	JP	P,L__349
003132 EA 4A 31 00         A 13272    	JP	PE,L_676
003136 18 04               A 13273    	JR	L__350
003138                     A 13274    L__349:
003138 E2 4A 31 00         A 13275    	JP	PO,L_676
00313C                     A 13276    L__350:
                           A 13277    ; 3126				vol = i;		/* Drive nu
                           A 13278    .LINE 3126
                           A 13279    
00313C DD07F6              A 13280    	LD	BC,(IX+%FFFFFFF6)
00313F DD0FF3              A 13281    	LD	(IX+%FFFFFFF3),BC
                           A 13282    ; 3127				*path = tt;		/* Snip the
                           A 13283    .LINE 3127
                           A 13284    
003142 DD2706              A 13285    	LD	HL,(IX+%6)
003145 DD07FA              A 13286    	LD	BC,(IX+%FFFFFFFA)
003148 ED0F                A 13287    	LD	(HL),BC
                           A 13288    ; 3128			}
00314A                     A 13289    L_676:
                           A 13290    .LINE 3128
                           A 13291    
                           A 13292    ; 3129			return vol;
                           A 13293    .LINE 3129
                           A 13294    
00314A DD27F3              A 13295    	LD	HL,(IX+%FFFFFFF3)
00314D 18 13               A 13296    	JR	L_680
                           A 13297    ; 3130		}
00314F                     A 13298    L_679:
                           A 13299    .LINE 3130
                           A 13300    
                           A 13301    ; 3131	#if FF_STR_VOLUME_ID == 2		/* Unix
                           A 13302    ; 3132		if (*tp == '/') {			/* Is t
                           A 13303    ; 3133			while (*(tp + 1) == '/') tp++;	
                           A 13304    ; 3134			i = 0;
                           A 13305    ; 3135			do {
                           A 13306    ; 3136				tt = tp; sp = VolumeStr[i];
                           A 13307    ; 3137				do {	/* Compare the volu
                           A 13308    ; 3138					c = *sp++; tc = *(++tt)
                           A 13309    ; 3139					if (IsLower(c)) c -= 0x
                           A 13310    ; 3140					if (IsLower(tc)) tc -= 
                           A 13311    ; 3141				} while (c && (TCHAR)c == t
                           A 13312    ; 3142			} while ((c || (tc != '/' && !I
                           A 13313    ; 3143			if (i < FF_VOLUMES) {	/* If a
                           A 13314    ; 3144				vol = i;		/* Drive nu
                           A 13315    ; 3145				*path = tt;		/* Snip the
                           A 13316    ; 3146			}
                           A 13317    ; 3147			return vol;
                           A 13318    ; 3148		}
                           A 13319    ; 3149	#endif
                           A 13320    ; 3150		/* No drive prefix is found */
                           A 13321    ; 3151	#if FF_FS_RPATH != 0
                           A 13322    ; 3152		vol = CurrVol;	/* Default drive is
                           A 13323    .LINE 3152
                           A 13324    
00314F 3A 05 00 00         A 13325    	LD	A,(_CurrVol)
003153 B7ED62              A 13326    	UEXT	HL
003156 6F                  A 13327    	LD	L,A
003157 DD2FF3              A 13328    	LD	(IX+%FFFFFFF3),HL
                           A 13329    ; 3153	#else
                           A 13330    ; 3154		vol = 0;		/* Default drive is
                           A 13331    ; 3155	#endif
                           A 13332    ; 3156		return vol;		/* Return the defau
                           A 13333    .LINE 3156
                           A 13334    
00315A 3A 05 00 00         A 13335    	LD	A,(_CurrVol)
00315E B7ED62              A 13336    	UEXT	HL
003161 6F                  A 13337    	LD	L,A
                           A 13338    ; 3157	}
003162                     A 13339    L_680:
                           A 13340    .LINE 3157
                           A 13341    
003162 DDF9                A 13342    	LD	SP,IX
003164 DDE1                A 13343    	POP	IX
003166 C9                  A 13344    	RET	
                           A 13345    
                           A 13346    
                           A 13347    ;**************************** _get_ldnumber ***
                           A 13348    ;Name                         Addr/Register   S
                           A 13349    ;_CurrVol                            STATIC    
                           A 13350    ;vol                                  IX-13    
                           A 13351    ;i                                    IX-10    
                           A 13352    ;tc                                    IX-7    
                           A 13353    ;tt                                    IX-6    
                           A 13354    ;tp                                    IX-3    
                           A 13355    ;path                                  IX+6    
                           A 13356    
                           A 13357    
                           A 13358    ; Stack Frame Size: 25 (bytes)
                           A 13359    ;       Spill Code: -2 (instruction)
                           A 13360    
                           A 13361    
                           A 13362    .ENDFUNC "get_ldnumber",3157,"_get_ldnumber"
                           A 13363    ; 3158	
                           A 13364    ; 3159	
                           A 13365    ; 3160	
                           A 13366    ; 3161	
                           A 13367    ; 3162	/*-------------------------------------
                           A 13368    ; 3163	/* GPT support functions               
                           A 13369    ; 3164	/*-------------------------------------
                           A 13370    ; 3165	
                           A 13371    ; 3166	#if FF_LBA64
                           A 13372    ; 3167	
                           A 13373    ; 3168	/* Calculate CRC32 in byte-by-byte */
                           A 13374    ; 3169	
                           A 13375    ; 3170	static DWORD crc32 (	/* Returns next
                           A 13376    ; 3171		DWORD crc,			/* Current CRC 
                           A 13377    ; 3172		BYTE d				/* A byte to be
                           A 13378    ; 3173	)
                           A 13379    ; 3174	{
                           A 13380    ; 3175		BYTE b;
                           A 13381    ; 3176	
                           A 13382    ; 3177	
                           A 13383    ; 3178		for (b = 1; b; b <<= 1) {
                           A 13384    ; 3179			crc ^= (d & b) ? 1 : 0;
                           A 13385    ; 3180			crc = (crc & 1) ? crc >> 1 ^ 0x
                           A 13386    ; 3181		}
                           A 13387    ; 3182		return crc;
                           A 13388    ; 3183	}
                           A 13389    ; 3184	
                           A 13390    ; 3185	
                           A 13391    ; 3186	/* Check validity of GPT header */
                           A 13392    ; 3187	
                           A 13393    ; 3188	static int test_gpt_header (	/* 0:In
                           A 13394    ; 3189		const BYTE* gpth			/* Poin
                           A 13395    ; 3190	)
                           A 13396    ; 3191	{
                           A 13397    ; 3192		UINT i;
                           A 13398    ; 3193		DWORD bcc;
                           A 13399    ; 3194	
                           A 13400    ; 3195	
                           A 13401    ; 3196		if (memcmp(gpth + GPTH_Sign, "EFI P
                           A 13402    ; 3197		for (i = 0, bcc = 0xFFFFFFFF; i < 9
                           A 13403    ; 3198			bcc = crc32(bcc, i - GPTH_Bcc <
                           A 13404    ; 3199		}
                           A 13405    ; 3200		if (~bcc != ld_dword(gpth + GPTH_Bc
                           A 13406    ; 3201		if (ld_dword(gpth + GPTH_PteSize) !
                           A 13407    ; 3202		if (ld_dword(gpth + GPTH_PtNum) > 1
                           A 13408    ; 3203	
                           A 13409    ; 3204		return 1;
                           A 13410    ; 3205	}
                           A 13411    ; 3206	
                           A 13412    ; 3207	#if !FF_FS_READONLY && FF_USE_MKFS
                           A 13413    ; 3208	
                           A 13414    ; 3209	/* Generate random value */
                           A 13415    ; 3210	static DWORD make_rand (
                           A 13416    ; 3211		DWORD seed,		/* Seed value */
                           A 13417    ; 3212		BYTE* buff,		/* Output buffer */
                           A 13418    ; 3213		UINT n			/* Data length */
                           A 13419    ; 3214	)
                           A 13420    ; 3215	{
                           A 13421    ; 3216		UINT r;
                           A 13422    ; 3217	
                           A 13423    ; 3218	
                           A 13424    ; 3219		if (seed == 0) seed = 1;
                           A 13425    ; 3220		do {
                           A 13426    ; 3221			for (r = 0; r < 8; r++) seed = 
                           A 13427    ; 3222			*buff++ = (BYTE)seed;
                           A 13428    ; 3223		} while (--n);
                           A 13429    ; 3224		return seed;
                           A 13430    ; 3225	}
                           A 13431    ; 3226	
                           A 13432    ; 3227	#endif
                           A 13433    ; 3228	#endif
                           A 13434    ; 3229	
                           A 13435    ; 3230	
                           A 13436    ; 3231	
                           A 13437    ; 3232	/*-------------------------------------
                           A 13438    ; 3233	/* Load a sector and check if it is an 
                           A 13439    ; 3234	/*-------------------------------------
                           A 13440    ; 3235	
                           A 13441    ; 3236	/* Check what the sector is */
                           A 13442    ; 3237	
                           A 13443    ; 3238	static UINT check_fs (	/* 0:FAT/FAT32 
                           A 13444    ; 3239		FATFS* fs,			/* Filesystem o
                           A 13445    ; 3240		LBA_t sect			/* Sector to lo
                           A 13446    ; 3241	)
                           A 13447    ; 3242	{
003167                     A 13448    _check_fs:
                           A 13449    .DEFINE "_check_fs"
                           A 13450    
                           A 13451    .VALUE _check_fs
                           A 13452    
                           A 13453    .CLASS 3
                           A 13454    
                           A 13455    .TYPE 78
                           A 13456    
                           A 13457    .ENDEF
                           A 13458    
                           A 13459    .BEGFUNC "check_fs",3242,"_check_fs"
                           A 13460    
                           A 13461    .LINE 3242
                           A 13462    
                           A 13463    .DEFINE "fs"
                           A 13464    
                           A 13465    .CLASS 65
                           A 13466    
                           A 13467    .VALUE 6
                           A 13468    
                           A 13469    .TAG "NONAME0"
                           A 13470    
                           A 13471    .TYPE 40
                           A 13472    
                           A 13473    .ENDEF
                           A 13474    
                           A 13475    .DEFINE "sect"
                           A 13476    
                           A 13477    .CLASS 65
                           A 13478    
                           A 13479    .VALUE 9
                           A 13480    
                           A 13481    .TYPE 15
                           A 13482    
                           A 13483    .ENDEF
                           A 13484    
                           A 13485    .DEFINE "b"
                           A 13486    
                           A 13487    .CLASS 65
                           A 13488    
                           A 13489    .VALUE -4
                           A 13490    
                           A 13491    .TYPE 12
                           A 13492    
                           A 13493    .ENDEF
                           A 13494    
                           A 13495    .DEFINE "w"
                           A 13496    
                           A 13497    .CLASS 65
                           A 13498    
                           A 13499    .VALUE -9
                           A 13500    
                           A 13501    .TYPE 13
                           A 13502    
                           A 13503    .ENDEF
                           A 13504    
                           A 13505    .DEFINE "sign"
                           A 13506    
                           A 13507    .CLASS 65
                           A 13508    
                           A 13509    .VALUE -11
                           A 13510    
                           A 13511    .TYPE 13
                           A 13512    
                           A 13513    .ENDEF
                           A 13514    
003167 DDE5                A 13515    	PUSH	IX
003169 DD210000 00         A 13516    	LD	IX,0
00316E DD39                A 13517    	ADD	IX,SP
003170 ED22EC              A 13518    	LEA	HL,IX+%FFFFFFEC
003173 F9                  A 13519    	LD	SP,HL
                           A 13520    ; 3243		WORD w, sign;
                           A 13521    ; 3244		BYTE b;
                           A 13522    ; 3245	
                           A 13523    ; 3246	
                           A 13524    ; 3247		fs->wflag = 0; fs->winsect = (LBA_t
                           A 13525    .LINE 3247
                           A 13526    
003174 DD3106              A 13527    	LD	IY,(IX+%6)
003177 FD360300            A 13528    	LD	(IY+%3),%0
00317B 01FFFFFF            A 13529    	LD	BC,16777215
00317F FD0F32              A 13530    	LD	(IY+%32),BC
003182 FD3635FF            A 13531    	LD	(IY+%35),%FF
                           A 13532    ; 3248		if (move_window(fs, sect) != FR_OK)
                           A 13533    .LINE 3248
                           A 13534    
003186 DD4E0C              A 13535    	LD	C,(IX+%C)
003189 0600                A 13536    	LD	B,%0
00318B C5                  A 13537    	PUSH	BC
00318C DD0709              A 13538    	LD	BC,(IX+%9)
00318F C5                  A 13539    	PUSH	BC
003190 DD0706              A 13540    	LD	BC,(IX+%6)
003193 C5                  A 13541    	PUSH	BC
003194 CD 1E 04 00         A 13542    	CALL	_move_window
003198 C1                  A 13543    	POP	BC
003199 C1                  A 13544    	POP	BC
00319A C1                  A 13545    	POP	BC
00319B 01000000            A 13546    	LD	BC,0
00319F B7                  A 13547    	OR	A,A
0031A0 ED42                A 13548    	SBC	HL,BC
0031A2 28 08               A 13549    	JR	Z,L_682
0031A4 21040000            A 13550    	LD	HL,4
0031A8 C3 55 33 00         A 13551    	JR	L_705
0031AC                     A 13552    L_682:
                           A 13553    ; 3249		sign = ld_word(fs->win + BS_55AA);
                           A 13554    .LINE 3249
                           A 13555    
0031AC DD3106              A 13556    	LD	IY,(IX+%6)
0031AF ED0336              A 13557    	LEA	BC,IY+%36
0031B2 DD0FF9              A 13558    	LD	(IX+%FFFFFFF9),BC
0031B5 DD0FEF              A 13559    	LD	(IX+%FFFFFFEF),BC
0031B8 01FE0100            A 13560    	LD	BC,510
0031BC DD27F9              A 13561    	LD	HL,(IX+%FFFFFFF9)
0031BF 09                  A 13562    	ADD	HL,BC
0031C0 E5                  A 13563    	PUSH	HL
0031C1 CD 00 00 00         A 13564    	CALL	_ld_word
0031C5 C1                  A 13565    	POP	BC
0031C6 DD75F5              A 13566    	LD	(IX+%FFFFFFF5),L
0031C9 DD74F6              A 13567    	LD	(IX+%FFFFFFF6),H
                           A 13568    ; 3250	#if FF_FS_EXFAT
                           A 13569    ; 3251		if (sign == 0xAA55 && !memcmp(fs->w
                           A 13570    ; 3252	#endif
                           A 13571    ; 3253		b = fs->win[BS_JmpBoot];
                           A 13572    .LINE 3253
                           A 13573    
0031CC DD27F9              A 13574    	LD	HL,(IX+%FFFFFFF9)
0031CF 7E                  A 13575    	LD	A,(HL)
0031D0 DD77FC              A 13576    	LD	(IX+%FFFFFFFC),A
                           A 13577    ; 3254		if (b == 0xEB || b == 0xE9 || b == 
                           A 13578    .LINE 3254
                           A 13579    
0031D3 FEEB                A 13580    	CP	A,%EB
0031D5 28 10               A 13581    	JR	Z,L_699
0031D7 DD7EFC              A 13582    	LD	A,(IX+%FFFFFFFC)
0031DA FEE9                A 13583    	CP	A,%E9
0031DC 28 09               A 13584    	JR	Z,L_699
0031DE DD7EFC              A 13585    	LD	A,(IX+%FFFFFFFC)
0031E1 FEE8                A 13586    	CP	A,%E8
0031E3 C2 35 33 00         A 13587    	JR	NZ,L_704
0031E7                     A 13588    L_699:
                           A 13589    ; 3255			if (sign == 0xAA55 && !memcmp(f
                           A 13590    .LINE 3255
                           A 13591    
0031E7 490155AA            A 13592    	LD.LIS	BC,43605
0031EB DD27F5              A 13593    	LD	HL,(IX+%FFFFFFF5)
0031EE B7                  A 13594    	OR	A,A
0031EF 40ED42              A 13595    	SBC.SIS	HL,BC
0031F2 20 2E               A 13596    	JR	NZ,L_687
0031F4 DD07F9              A 13597    	LD	BC,(IX+%FFFFFFF9)
0031F7 DD0FEF              A 13598    	LD	(IX+%FFFFFFEF),BC
0031FA 01080000            A 13599    	LD	BC,8
0031FE C5                  A 13600    	PUSH	BC
0031FF 01 10 00 00         A 13601    	LD	BC,L__357
003203 C5                  A 13602    	PUSH	BC
003204 DD31F9              A 13603    	LD	IY,(IX+%FFFFFFF9)
003207 ED0352              A 13604    	LEA	BC,IY+%52
00320A C5                  A 13605    	PUSH	BC
00320B CD 00 00 00         A 13606    	CALL	_memcmp
00320F C1                  A 13607    	POP	BC
003210 C1                  A 13608    	POP	BC
003211 C1                  A 13609    	POP	BC
003212 01000000            A 13610    	LD	BC,0
003216 B7                  A 13611    	OR	A,A
003217 ED42                A 13612    	SBC	HL,BC
003219 20 07               A 13613    	JR	NZ,L_687
                           A 13614    ; 3256				return 0;	/* It is an FAT
                           A 13615    .LINE 3256
                           A 13616    
00321B B7                  A 13617    	OR	A,A
00321C ED62                A 13618    	SBC	HL,HL
00321E C3 55 33 00         A 13619    	JR	L_705
                           A 13620    ; 3257			}
003222                     A 13621    L_687:
                           A 13622    .LINE 3257
                           A 13623    
                           A 13624    ; 3258			/* FAT volumes formatted with e
                           A 13625    ; 3259			w = ld_word(fs->win + BPB_BytsP
                           A 13626    .LINE 3259
                           A 13627    
003222 DD07EF              A 13628    	LD	BC,(IX+%FFFFFFEF)
003225 DD0FFD              A 13629    	LD	(IX+%FFFFFFFD),BC
003228 DD31FD              A 13630    	LD	IY,(IX+%FFFFFFFD)
00322B ED030B              A 13631    	LEA	BC,IY+%B
00322E C5                  A 13632    	PUSH	BC
00322F CD 00 00 00         A 13633    	CALL	_ld_word
003233 C1                  A 13634    	POP	BC
003234 DD75F7              A 13635    	LD	(IX+%FFFFFFF7),L
003237 DD74F8              A 13636    	LD	(IX+%FFFFFFF8),H
                           A 13637    ; 3260			b = fs->win[BPB_SecPerClus];
                           A 13638    .LINE 3260
                           A 13639    
00323A DD31FD              A 13640    	LD	IY,(IX+%FFFFFFFD)
00323D ED230D              A 13641    	LEA	HL,IY+%D
003240 7E                  A 13642    	LD	A,(HL)
003241 DD77FC              A 13643    	LD	(IX+%FFFFFFFC),A
                           A 13644    ; 3261			if ((w & (w - 1)) == 0 && w >= 
                           A 13645    .LINE 3261
                           A 13646    
003244 DD07F7              A 13647    	LD	BC,(IX+%FFFFFFF7)
003247 CD 00 00 00         A 13648    	CALL	__stoiu
00324B 2B                  A 13649    	DEC	HL
00324C DD07F7              A 13650    	LD	BC,(IX+%FFFFFFF7)
00324F CD 00 00 00         A 13651    	CALL	__sand
003253 49010000            A 13652    	LD.LIS	BC,0
003257 B7                  A 13653    	OR	A,A
003258 40ED42              A 13654    	SBC.SIS	HL,BC
00325B C2 35 33 00         A 13655    	JR	NZ,L_704
00325F 49010002            A 13656    	LD.LIS	BC,512
003263 DD27F7              A 13657    	LD	HL,(IX+%FFFFFFF7)
003266 B7                  A 13658    	OR	A,A
003267 40ED42              A 13659    	SBC.SIS	HL,BC
00326A DA 35 33 00         A 13660    	JR	C,L_704
                           A 13661    ; 3262				&& b != 0 && (b & (b - 1)) 
                           A 13662    .LINE 3262
                           A 13663    
00326E DD07F7              A 13664    	LD	BC,(IX+%FFFFFFF7)
003271 49210002            A 13665    	LD.LIS	HL,512
003275 B7                  A 13666    	OR	A,A
003276 40ED42              A 13667    	SBC.SIS	HL,BC
003279 DA 35 33 00         A 13668    	JR	C,L_704
00327D DD7EFC              A 13669    	LD	A,(IX+%FFFFFFFC)
003280 B7                  A 13670    	OR	A,A
003281 CA 35 33 00         A 13671    	JR	Z,L_704
                           A 13672    ; 3263				&& ld_word(fs->win + BPB_Rs
                           A 13673    .LINE 3263
                           A 13674    
003285 DD7EFC              A 13675    	LD	A,(IX+%FFFFFFFC)
003288 B7ED62              A 13676    	UEXT	HL
00328B 6F                  A 13677    	LD	L,A
00328C 2B                  A 13678    	DEC	HL
00328D 7D                  A 13679    	LD	A,L
00328E DDA6FC              A 13680    	AND	A,(IX+%FFFFFFFC)
003291 C2 35 33 00         A 13681    	JR	NZ,L_704
                           A 13682    ; 3264				&& (UINT)fs->win[BPB_NumFAT
                           A 13683    .LINE 3264
                           A 13684    
003295 DD31FD              A 13685    	LD	IY,(IX+%FFFFFFFD)
003298 ED030E              A 13686    	LEA	BC,IY+%E
00329B C5                  A 13687    	PUSH	BC
00329C CD 00 00 00         A 13688    	CALL	_ld_word
0032A0 C1                  A 13689    	POP	BC
0032A1 49010000            A 13690    	LD.LIS	BC,0
0032A5 B7                  A 13691    	OR	A,A
0032A6 40ED42              A 13692    	SBC.SIS	HL,BC
0032A9 CA 35 33 00         A 13693    	JR	Z,L_704
                           A 13694    ; 3265				&& ld_word(fs->win + BPB_Ro
                           A 13695    .LINE 3265
                           A 13696    
0032AD DD31FD              A 13697    	LD	IY,(IX+%FFFFFFFD)
0032B0 ED2310              A 13698    	LEA	HL,IY+%10
0032B3 7E                  A 13699    	LD	A,(HL)
0032B4 B7ED62              A 13700    	UEXT	HL
0032B7 6F                  A 13701    	LD	L,A
0032B8 E5C1                A 13702    	LD	BC,HL
0032BA 0B                  A 13703    	DEC	BC
0032BB 21010000            A 13704    	LD	HL,1
0032BF B7                  A 13705    	OR	A,A
0032C0 ED42                A 13706    	SBC	HL,BC
0032C2 38 71               A 13707    	JR	C,L_704
                           A 13708    ; 3266				&& (ld_word(fs->win + BPB_T
                           A 13709    .LINE 3266
                           A 13710    
0032C4 DD31FD              A 13711    	LD	IY,(IX+%FFFFFFFD)
0032C7 ED0311              A 13712    	LEA	BC,IY+%11
0032CA C5                  A 13713    	PUSH	BC
0032CB CD 00 00 00         A 13714    	CALL	_ld_word
0032CF C1                  A 13715    	POP	BC
0032D0 49010000            A 13716    	LD.LIS	BC,0
0032D4 B7                  A 13717    	OR	A,A
0032D5 40ED42              A 13718    	SBC.SIS	HL,BC
0032D8 28 5B               A 13719    	JR	Z,L_704
0032DA DD07FD              A 13720    	LD	BC,(IX+%FFFFFFFD)
0032DD DD0FEC              A 13721    	LD	(IX+%FFFFFFEC),BC
0032E0 DD31FD              A 13722    	LD	IY,(IX+%FFFFFFFD)
0032E3 ED0313              A 13723    	LEA	BC,IY+%13
0032E6 C5                  A 13724    	PUSH	BC
0032E7 CD 00 00 00         A 13725    	CALL	_ld_word
0032EB C1                  A 13726    	POP	BC
0032EC E5C1                A 13727    	LD	BC,HL
0032EE CD 00 00 00         A 13728    	CALL	__stoiu
0032F2 01800000            A 13729    	LD	BC,128
0032F6 B7                  A 13730    	OR	A,A
0032F7 ED42                A 13731    	SBC	HL,BC
0032F9 F2 1A 33 00         A 13732    	JP	P,L_697
0032FD DD07FD              A 13733    	LD	BC,(IX+%FFFFFFFD)
003300 DD0FEC              A 13734    	LD	(IX+%FFFFFFEC),BC
003303 DD31FD              A 13735    	LD	IY,(IX+%FFFFFFFD)
003306 ED0320              A 13736    	LEA	BC,IY+%20
003309 C5                  A 13737    	PUSH	BC
00330A CD 3C 00 00         A 13738    	CALL	_ld_dword
00330E C1                  A 13739    	POP	BC
00330F 01000001            A 13740    	LD	BC,65536
003313 AF                  A 13741    	XOR	A,A
003314 CD 00 00 00         A 13742    	CALL	__lcmpu
003318 38 1B               A 13743    	JR	C,L_704
                           A 13744    ; 3267				&& ld_word(fs->win + BPB_FA
00331A                     A 13745    L_697:
                           A 13746    .LINE 3267
                           A 13747    
00331A DD31EC              A 13748    	LD	IY,(IX+%FFFFFFEC)
00331D ED0316              A 13749    	LEA	BC,IY+%16
003320 C5                  A 13750    	PUSH	BC
003321 CD 00 00 00         A 13751    	CALL	_ld_word
003325 C1                  A 13752    	POP	BC
003326 49010000            A 13753    	LD.LIS	BC,0
00332A B7                  A 13754    	OR	A,A
00332B 40ED42              A 13755    	SBC.SIS	HL,BC
00332E 28 05               A 13756    	JR	Z,L_704
                           A 13757    ; 3268					return 0;	/* It can b
                           A 13758    .LINE 3268
                           A 13759    
003330 B7                  A 13760    	OR	A,A
003331 ED62                A 13761    	SBC	HL,HL
003333 18 20               A 13762    	JR	L_705
                           A 13763    ; 3269			}
                           A 13764    ; 3270		}
003335                     A 13765    L_704:
                           A 13766    .LINE 3270
                           A 13767    
                           A 13768    ; 3271		return sign == 0xAA55 ? 2 : 3;	/* 
                           A 13769    .LINE 3271
                           A 13770    
003335 490155AA            A 13771    	LD.LIS	BC,43605
003339 DD27F5              A 13772    	LD	HL,(IX+%FFFFFFF5)
00333C B7                  A 13773    	OR	A,A
00333D 40ED42              A 13774    	SBC.SIS	HL,BC
003340 20 09               A 13775    	JR	NZ,L_702
003342 01020000            A 13776    	LD	BC,2
003346 DD0FF2              A 13777    	LD	(IX+%FFFFFFF2),BC
003349 18 07               A 13778    	JR	L_703
00334B                     A 13779    L_702:
00334B 01030000            A 13780    	LD	BC,3
00334F DD0FF2              A 13781    	LD	(IX+%FFFFFFF2),BC
003352                     A 13782    L_703:
003352 DD27F2              A 13783    	LD	HL,(IX+%FFFFFFF2)
                           A 13784    ; 3272	}
003355                     A 13785    L_705:
                           A 13786    .LINE 3272
                           A 13787    
003355 DDF9                A 13788    	LD	SP,IX
003357 DDE1                A 13789    	POP	IX
003359 C9                  A 13790    	RET	
                           A 13791    
                           A 13792    
                           A 13793    ;**************************** _check_fs *******
                           A 13794    ;Name                         Addr/Register   S
                           A 13795    ;_memcmp                             IMPORT  --
                           A 13796    ;G_45                                 IX-20    
                           A 13797    ;G_39                                 IX-17    
                           A 13798    ;temp700                              IX-14    
                           A 13799    ;sign                                 IX-11    
                           A 13800    ;w                                     IX-9    
                           A 13801    ;G_38                                  IX-7    
                           A 13802    ;b                                     IX-4    
                           A 13803    ;G_40                                  IX-3    
                           A 13804    ;sect                                  IX+9    
                           A 13805    ;fs                                    IX+6    
                           A 13806    
                           A 13807    
                           A 13808    ; Stack Frame Size: 35 (bytes)
                           A 13809    ;       Spill Code: -2 (instruction)
                           A 13810    
                           A 13811    
                           A 13812    .ENDFUNC "check_fs",3272,"_check_fs"
                           A 13813    	SEGMENT STRSECT
000010                     A 13814    L__357:
000010 46415433 32202020   A 13815    	DB	"FAT32   "
000018 00                  A 13816    	DB	0
                           A 13817    	SEGMENT CODE
                           A 13818    ; 3273	
                           A 13819    ; 3274	
                           A 13820    ; 3275	/* Find an FAT volume */
                           A 13821    ; 3276	/* (It supports only generic partitioni
                           A 13822    ; 3277	
                           A 13823    ; 3278	static UINT find_volume (	/* Returns 
                           A 13824    ; 3279		FATFS* fs,		/* Filesystem objec
                           A 13825    ; 3280		UINT part		/* Partition to fin
                           A 13826    ; 3281	)
                           A 13827    ; 3282	{
00335A                     A 13828    _find_volume:
                           A 13829    .DEFINE "_find_volume"
                           A 13830    
                           A 13831    .VALUE _find_volume
                           A 13832    
                           A 13833    .CLASS 3
                           A 13834    
                           A 13835    .TYPE 78
                           A 13836    
                           A 13837    .ENDEF
                           A 13838    
                           A 13839    .BEGFUNC "find_volume",3282,"_find_volume"
                           A 13840    
                           A 13841    .LINE 3282
                           A 13842    
                           A 13843    .DEFINE "fs"
                           A 13844    
                           A 13845    .CLASS 65
                           A 13846    
                           A 13847    .VALUE 6
                           A 13848    
                           A 13849    .TAG "NONAME0"
                           A 13850    
                           A 13851    .TYPE 40
                           A 13852    
                           A 13853    .ENDEF
                           A 13854    
                           A 13855    .DEFINE "part"
                           A 13856    
                           A 13857    .CLASS 65
                           A 13858    
                           A 13859    .VALUE 9
                           A 13860    
                           A 13861    .TYPE 14
                           A 13862    
                           A 13863    .ENDEF
                           A 13864    
                           A 13865    .DEFINE "i"
                           A 13866    
                           A 13867    .CLASS 65
                           A 13868    
                           A 13869    .VALUE -3
                           A 13870    
                           A 13871    .TYPE 14
                           A 13872    
                           A 13873    .ENDEF
                           A 13874    
                           A 13875    .DEFINE "fmt"
                           A 13876    
                           A 13877    .CLASS 65
                           A 13878    
                           A 13879    .VALUE -6
                           A 13880    
                           A 13881    .TYPE 14
                           A 13882    
                           A 13883    .ENDEF
                           A 13884    
                           A 13885    .DEFINE "mbr_pt"
                           A 13886    
                           A 13887    .CLASS 65
                           A 13888    
                           A 13889    .VALUE -31
                           A 13890    
                           A 13891    .DIM 4
                           A 13892    
                           A 13893    .TYPE 111
                           A 13894    
                           A 13895    .ENDEF
                           A 13896    
00335A DDE5                A 13897    	PUSH	IX
00335C DD210000 00         A 13898    	LD	IX,0
003361 DD39                A 13899    	ADD	IX,SP
003363 ED22DB              A 13900    	LEA	HL,IX+%FFFFFFDB
003366 F9                  A 13901    	LD	SP,HL
                           A 13902    ; 3283		UINT fmt, i;
                           A 13903    ; 3284		DWORD mbr_pt[4];
                           A 13904    ; 3285	
                           A 13905    ; 3286	
                           A 13906    ; 3287		fmt = check_fs(fs, 0);				
                           A 13907    .LINE 3287
                           A 13908    
003367 01000000            A 13909    	LD	BC,0
00336B C5                  A 13910    	PUSH	BC
00336C C5                  A 13911    	PUSH	BC
00336D DD0706              A 13912    	LD	BC,(IX+%6)
003370 C5                  A 13913    	PUSH	BC
003371 CD 67 31 00         A 13914    	CALL	_check_fs
003375 C1                  A 13915    	POP	BC
003376 C1                  A 13916    	POP	BC
003377 C1                  A 13917    	POP	BC
003378 DD2FFA              A 13918    	LD	(IX+%FFFFFFFA),HL
                           A 13919    ; 3288		if (fmt != 2 && (fmt >= 3 || part =
                           A 13920    .LINE 3288
                           A 13921    
00337B 01020000            A 13922    	LD	BC,2
00337F DD27FA              A 13923    	LD	HL,(IX+%FFFFFFFA)
003382 B7                  A 13924    	OR	A,A
003383 ED42                A 13925    	SBC	HL,BC
003385 28 1F               A 13926    	JR	Z,L_715
003387 01030000            A 13927    	LD	BC,3
00338B DD27FA              A 13928    	LD	HL,(IX+%FFFFFFFA)
00338E B7                  A 13929    	OR	A,A
00338F ED42                A 13930    	SBC	HL,BC
003391 30 0C               A 13931    	JR	NC,L_708
003393 01000000            A 13932    	LD	BC,0
003397 DD2709              A 13933    	LD	HL,(IX+%9)
00339A B7                  A 13934    	OR	A,A
00339B ED42                A 13935    	SBC	HL,BC
00339D 20 07               A 13936    	JR	NZ,L_715
00339F                     A 13937    L_708:
00339F DD27FA              A 13938    	LD	HL,(IX+%FFFFFFFA)
0033A2 C3 A4 34 00         A 13939    	JR	L_730
                           A 13940    ; 3289	
                           A 13941    ; 3290		/* Sector 0 is not an FAT VBR or fo
                           A 13942    ; 3291	
                           A 13943    ; 3292	#if FF_LBA64
                           A 13944    ; 3293		if (fs->win[MBR_Table + PTE_System]
                           A 13945    ; 3294			DWORD n_ent, v_ent, ofs;
                           A 13946    ; 3295			QWORD pt_lba;
                           A 13947    ; 3296	
                           A 13948    ; 3297			if (move_window(fs, 1) != FR_OK
                           A 13949    ; 3298			if (!test_gpt_header(fs->win)) 
                           A 13950    ; 3299			n_ent = ld_dword(fs->win + GPTH
                           A 13951    ; 3300			pt_lba = ld_qword(fs->win + GPT
                           A 13952    ; 3301			for (v_ent = i = 0; i < n_ent; 
                           A 13953    ; 3302				if (move_window(fs, pt_lba 
                           A 13954    ; 3303				ofs = i * SZ_GPTE % SS(fs);
                           A 13955    ; 3304				if (!memcmp(fs->win + ofs +
                           A 13956    ; 3305					v_ent++;
                           A 13957    ; 3306					fmt = check_fs(fs, ld_q
                           A 13958    ; 3307					if (part == 0 && fmt <=
                           A 13959    ; 3308					if (part != 0 && v_ent 
                           A 13960    ; 3309				}
                           A 13961    ; 3310			}
                           A 13962    ; 3311			return 3;	/* Not found */
                           A 13963    ; 3312		}
                           A 13964    ; 3313	#endif
                           A 13965    ; 3314		if (FF_MULTI_PARTITION && part > 4)
0033A6                     A 13966    L_715:
                           A 13967    .LINE 3314
                           A 13968    
                           A 13969    ; 3315		for (i = 0; i < 4; i++) {		/* 
                           A 13970    .LINE 3315
                           A 13971    
0033A6 01000000            A 13972    	LD	BC,0
0033AA DD0FFD              A 13973    	LD	(IX+%FFFFFFFD),BC
0033AD 18 4E               A 13974    	JR	L_714
0033AF                     A 13975    L_712:
                           A 13976    ; 3316			mbr_pt[i] = ld_dword(fs->win + 
                           A 13977    .LINE 3316
                           A 13978    
0033AF 01BE0100            A 13979    	LD	BC,446
0033B3 DD3106              A 13980    	LD	IY,(IX+%6)
0033B6 ED2336              A 13981    	LEA	HL,IY+%36
0033B9 09                  A 13982    	ADD	HL,BC
0033BA E5C1                A 13983    	LD	BC,HL
0033BC DD27FD              A 13984    	LD	HL,(IX+%FFFFFFFD)
0033BF 29                  A 13985    	ADD	HL,HL
0033C0 29                  A 13986    	ADD	HL,HL
0033C1 29                  A 13987    	ADD	HL,HL
0033C2 29                  A 13988    	ADD	HL,HL
0033C3 09                  A 13989    	ADD	HL,BC
0033C4 E5FDE1              A 13990    	LD	IY,HL
0033C7 ED0308              A 13991    	LEA	BC,IY+%8
0033CA C5                  A 13992    	PUSH	BC
0033CB CD 3C 00 00         A 13993    	CALL	_ld_dword
0033CF C1                  A 13994    	POP	BC
0033D0 E5C1                A 13995    	LD	BC,HL
0033D2 DD27FD              A 13996    	LD	HL,(IX+%FFFFFFFD)
0033D5 29                  A 13997    	ADD	HL,HL
0033D6 29                  A 13998    	ADD	HL,HL
0033D7 DD0FDE              A 13999    	LD	(IX+%FFFFFFDE),BC	; spill
0033DA ED02E1              A 14000    	LEA	BC,IX+%FFFFFFE1
0033DD DD0FDB              A 14001    	LD	(IX+%FFFFFFDB),BC	; spill
0033E0 DD07DE              A 14002    	LD	BC,(IX+%FFFFFFDE)	; unspill
0033E3 DD0FDE              A 14003    	LD	(IX+%FFFFFFDE),BC	; spill
0033E6 DD07DB              A 14004    	LD	BC,(IX+%FFFFFFDB)	; unspill
0033E9 09                  A 14005    	ADD	HL,BC
0033EA DD07DE              A 14006    	LD	BC,(IX+%FFFFFFDE)	; unspill
0033ED E5FDE1              A 14007    	LD	IY,HL
0033F0 FD0F00              A 14008    	LD	(IY),BC
0033F3 FD7303              A 14009    	LD	(IY+%3),E
0033F6 DD07FD              A 14010    	LD	BC,(IX+%FFFFFFFD)
0033F9 03                  A 14011    	INC	BC
0033FA DD0FFD              A 14012    	LD	(IX+%FFFFFFFD),BC
                           A 14013    ; 3317		}
0033FD                     A 14014    L_714:
                           A 14015    .LINE 3317
                           A 14016    
0033FD 01040000            A 14017    	LD	BC,4
003401 DD27FD              A 14018    	LD	HL,(IX+%FFFFFFFD)
003404 B7                  A 14019    	OR	A,A
003405 ED42                A 14020    	SBC	HL,BC
003407 38 A6               A 14021    	JR	C,L_712
                           A 14022    ; 3318		i = part ? part - 1 : 0;		/* 
                           A 14023    .LINE 3318
                           A 14024    
003409 01000000            A 14025    	LD	BC,0
00340D DD2709              A 14026    	LD	HL,(IX+%9)
003410 B7                  A 14027    	OR	A,A
003411 ED42                A 14028    	SBC	HL,BC
003413 28 0B               A 14029    	JR	Z,L_718
003415 DD3109              A 14030    	LD	IY,(IX+%9)
003418 ED33FF              A 14031    	LEA	IY,IY+%FFFFFFFF
00341B DD3EF7              A 14032    	LD	(IX+%FFFFFFF7),IY
00341E 18 03               A 14033    	JR	L_719
003420                     A 14034    L_718:
003420 DD0FF7              A 14035    	LD	(IX+%FFFFFFF7),BC
003423                     A 14036    L_719:
003423 DD07F7              A 14037    	LD	BC,(IX+%FFFFFFF7)
003426 DD0FFD              A 14038    	LD	(IX+%FFFFFFFD),BC
                           A 14039    ; 3319		do {							/* 
003429                     A 14040    L_727:
                           A 14041    .LINE 3319
                           A 14042    
                           A 14043    ; 3320			fmt = mbr_pt[i] ? check_fs(fs, 
                           A 14044    .LINE 3320
                           A 14045    
003429 DD27FD              A 14046    	LD	HL,(IX+%FFFFFFFD)
00342C 29                  A 14047    	ADD	HL,HL
00342D 29                  A 14048    	ADD	HL,HL
00342E E5C1                A 14049    	LD	BC,HL
003430 ED22E1              A 14050    	LEA	HL,IX+%FFFFFFE1
003433 09                  A 14051    	ADD	HL,BC
003434 DD2FF1              A 14052    	LD	(IX+%FFFFFFF1),HL
003437 DD31F1              A 14053    	LD	IY,(IX+%FFFFFFF1)
00343A FD2700              A 14054    	LD	HL,(IY)
00343D FD5E03              A 14055    	LD	E,(IY+%3)
003440 01000000            A 14056    	LD	BC,0
003444 AF                  A 14057    	XOR	A,A
003445 CD 00 00 00         A 14058    	CALL	__lcmpu
003449 28 1E               A 14059    	JR	Z,L_723
00344B DD31F1              A 14060    	LD	IY,(IX+%FFFFFFF1)
00344E FD0700              A 14061    	LD	BC,(IY)
003451 FD7E03              A 14062    	LD	A,(IY+%3)
003454 2600                A 14063    	LD	H,%0
003456 6F                  A 14064    	LD	L,A
003457 E5                  A 14065    	PUSH	HL
003458 C5                  A 14066    	PUSH	BC
003459 DD0706              A 14067    	LD	BC,(IX+%6)
00345C C5                  A 14068    	PUSH	BC
00345D CD 67 31 00         A 14069    	CALL	_check_fs
003461 C1                  A 14070    	POP	BC
003462 C1                  A 14071    	POP	BC
003463 C1                  A 14072    	POP	BC
003464 DD2FF4              A 14073    	LD	(IX+%FFFFFFF4),HL
003467 18 07               A 14074    	JR	L_724
003469                     A 14075    L_723:
003469 01030000            A 14076    	LD	BC,3
00346D DD0FF4              A 14077    	LD	(IX+%FFFFFFF4),BC
003470                     A 14078    L_724:
003470 DD07F4              A 14079    	LD	BC,(IX+%FFFFFFF4)
003473 DD0FFA              A 14080    	LD	(IX+%FFFFFFFA),BC
                           A 14081    ; 3321		} while (part == 0 && fmt >= 2 && +
                           A 14082    .LINE 3321
                           A 14083    
003476 01000000            A 14084    	LD	BC,0
00347A DD2709              A 14085    	LD	HL,(IX+%9)
00347D B7                  A 14086    	OR	A,A
00347E ED42                A 14087    	SBC	HL,BC
003480 20 1F               A 14088    	JR	NZ,L_729
003482 01020000            A 14089    	LD	BC,2
003486 DD27FA              A 14090    	LD	HL,(IX+%FFFFFFFA)
003489 B7                  A 14091    	OR	A,A
00348A ED42                A 14092    	SBC	HL,BC
00348C 38 13               A 14093    	JR	C,L_729
00348E DD07FD              A 14094    	LD	BC,(IX+%FFFFFFFD)
003491 03                  A 14095    	INC	BC
003492 DD0FFD              A 14096    	LD	(IX+%FFFFFFFD),BC
003495 01040000            A 14097    	LD	BC,4
003499 DD27FD              A 14098    	LD	HL,(IX+%FFFFFFFD)
00349C B7                  A 14099    	OR	A,A
00349D ED42                A 14100    	SBC	HL,BC
00349F 38 88               A 14101    	JR	C,L_727
0034A1                     A 14102    L_729:
                           A 14103    ; 3322		return fmt;
                           A 14104    .LINE 3322
                           A 14105    
0034A1 DD27FA              A 14106    	LD	HL,(IX+%FFFFFFFA)
                           A 14107    ; 3323	}
0034A4                     A 14108    L_730:
                           A 14109    .LINE 3323
                           A 14110    
0034A4 DDF9                A 14111    	LD	SP,IX
0034A6 DDE1                A 14112    	POP	IX
0034A8 C9                  A 14113    	RET	
                           A 14114    
                           A 14115    
                           A 14116    ;**************************** _find_volume ****
                           A 14117    ;Name                         Addr/Register   S
                           A 14118    ;mbr_pt                               IX-31    
                           A 14119    ;G_46                                 IX-15    
                           A 14120    ;temp721                              IX-12    
                           A 14121    ;temp716                               IX-9    
                           A 14122    ;fmt                                   IX-6    
                           A 14123    ;i                                     IX-3    
                           A 14124    ;part                                  IX+9    
                           A 14125    ;fs                                    IX+6    
                           A 14126    
                           A 14127    
                           A 14128    ; Stack Frame Size: 49 (bytes)
                           A 14129    ;       Spill Code: -2 (instruction)
                           A 14130    
                           A 14131    
                           A 14132    .ENDFUNC "find_volume",3323,"_find_volume"
                           A 14133    ; 3324	
                           A 14134    ; 3325	
                           A 14135    ; 3326	
                           A 14136    ; 3327	
                           A 14137    ; 3328	/*-------------------------------------
                           A 14138    ; 3329	/* Determine logical drive number and m
                           A 14139    ; 3330	/*-------------------------------------
                           A 14140    ; 3331	
                           A 14141    ; 3332	static FRESULT mount_volume (	/* FR_O
                           A 14142    ; 3333		const TCHAR** path,			/* Poin
                           A 14143    ; 3334		FATFS** rfs,				/* Poin
                           A 14144    ; 3335		BYTE mode					/* !=0:
                           A 14145    ; 3336	)
                           A 14146    ; 3337	{
0034A9                     A 14147    _mount_volume:
                           A 14148    .DEFINE "_mount_volume"
                           A 14149    
                           A 14150    .VALUE _mount_volume
                           A 14151    
                           A 14152    .CLASS 3
                           A 14153    
                           A 14154    .TYPE 68
                           A 14155    
                           A 14156    .ENDEF
                           A 14157    
                           A 14158    .BEGFUNC "mount_volume",3337,"_mount_volume"
                           A 14159    
                           A 14160    .LINE 3337
                           A 14161    
                           A 14162    .DEFINE "path"
                           A 14163    
                           A 14164    .CLASS 65
                           A 14165    
                           A 14166    .VALUE 6
                           A 14167    
                           A 14168    .TYPE 1570
                           A 14169    
                           A 14170    .ENDEF
                           A 14171    
                           A 14172    .DEFINE "rfs"
                           A 14173    
                           A 14174    .CLASS 65
                           A 14175    
                           A 14176    .VALUE 9
                           A 14177    
                           A 14178    .TAG "NONAME0"
                           A 14179    
                           A 14180    .TYPE 296
                           A 14181    
                           A 14182    .ENDEF
                           A 14183    
                           A 14184    .DEFINE "mode"
                           A 14185    
                           A 14186    .CLASS 65
                           A 14187    
                           A 14188    .VALUE 12
                           A 14189    
                           A 14190    .TYPE 12
                           A 14191    
                           A 14192    .ENDEF
                           A 14193    
                           A 14194    .DEFINE "fs"
                           A 14195    
                           A 14196    .CLASS 65
                           A 14197    
                           A 14198    .VALUE -3
                           A 14199    
                           A 14200    .TAG "NONAME0"
                           A 14201    
                           A 14202    .TYPE 40
                           A 14203    
                           A 14204    .ENDEF
                           A 14205    
                           A 14206    .DEFINE "fmt"
                           A 14207    
                           A 14208    .CLASS 65
                           A 14209    
                           A 14210    .VALUE -6
                           A 14211    
                           A 14212    .TYPE 14
                           A 14213    
                           A 14214    .ENDEF
                           A 14215    
                           A 14216    .DEFINE "stat"
                           A 14217    
                           A 14218    .CLASS 65
                           A 14219    
                           A 14220    .VALUE -7
                           A 14221    
                           A 14222    .TYPE 12
                           A 14223    
                           A 14224    .ENDEF
                           A 14225    
                           A 14226    .DEFINE "fasize"
                           A 14227    
                           A 14228    .CLASS 65
                           A 14229    
                           A 14230    .VALUE -11
                           A 14231    
                           A 14232    .TYPE 15
                           A 14233    
                           A 14234    .ENDEF
                           A 14235    
                           A 14236    .DEFINE "nclst"
                           A 14237    
                           A 14238    .CLASS 65
                           A 14239    
                           A 14240    .VALUE -22
                           A 14241    
                           A 14242    .TYPE 15
                           A 14243    
                           A 14244    .ENDEF
                           A 14245    
                           A 14246    .DEFINE "nrsv"
                           A 14247    
                           A 14248    .CLASS 65
                           A 14249    
                           A 14250    .VALUE -24
                           A 14251    
                           A 14252    .TYPE 13
                           A 14253    
                           A 14254    .ENDEF
                           A 14255    
                           A 14256    .DEFINE "vol"
                           A 14257    
                           A 14258    .CLASS 65
                           A 14259    
                           A 14260    .VALUE -34
                           A 14261    
                           A 14262    .TYPE 4
                           A 14263    
                           A 14264    .ENDEF
                           A 14265    
                           A 14266    .DEFINE "bsect"
                           A 14267    
                           A 14268    .CLASS 65
                           A 14269    
                           A 14270    .VALUE -38
                           A 14271    
                           A 14272    .TYPE 15
                           A 14273    
                           A 14274    .ENDEF
                           A 14275    
                           A 14276    .DEFINE "tsect"
                           A 14277    
                           A 14278    .CLASS 65
                           A 14279    
                           A 14280    .VALUE -42
                           A 14281    
                           A 14282    .TYPE 15
                           A 14283    
                           A 14284    .ENDEF
                           A 14285    
                           A 14286    .DEFINE "sysect"
                           A 14287    
                           A 14288    .CLASS 65
                           A 14289    
                           A 14290    .VALUE -55
                           A 14291    
                           A 14292    .TYPE 15
                           A 14293    
                           A 14294    .ENDEF
                           A 14295    
                           A 14296    .DEFINE "szbfat"
                           A 14297    
                           A 14298    .CLASS 65
                           A 14299    
                           A 14300    .VALUE -63
                           A 14301    
                           A 14302    .TYPE 15
                           A 14303    
                           A 14304    .ENDEF
                           A 14305    
0034A9 DDE5                A 14306    	PUSH	IX
0034AB DD210000 00         A 14307    	LD	IX,0
0034B0 DD39                A 14308    	ADD	IX,SP
0034B2 ED22B1              A 14309    	LEA	HL,IX+%FFFFFFB1
0034B5 F9                  A 14310    	LD	SP,HL
                           A 14311    ; 3338		int vol;
                           A 14312    ; 3339		DSTATUS stat;
                           A 14313    ; 3340		LBA_t bsect;
                           A 14314    ; 3341		DWORD tsect, sysect, fasize, nclst,
                           A 14315    ; 3342		WORD nrsv;
                           A 14316    ; 3343		FATFS *fs;
                           A 14317    ; 3344		UINT fmt;
                           A 14318    ; 3345	
                           A 14319    ; 3346	
                           A 14320    ; 3347		/* Get logical drive number */
                           A 14321    ; 3348		*rfs = 0;
                           A 14322    .LINE 3348
                           A 14323    
0034B6 DD2709              A 14324    	LD	HL,(IX+%9)
0034B9 01000000            A 14325    	LD	BC,0
0034BD ED0F                A 14326    	LD	(HL),BC
                           A 14327    ; 3349		vol = get_ldnumber(path);
                           A 14328    .LINE 3349
                           A 14329    
0034BF DD0706              A 14330    	LD	BC,(IX+%6)
0034C2 C5                  A 14331    	PUSH	BC
0034C3 CD 6C 30 00         A 14332    	CALL	_get_ldnumber
0034C7 C1                  A 14333    	POP	BC
0034C8 DD2FDE              A 14334    	LD	(IX+%FFFFFFDE),HL
                           A 14335    ; 3350		if (vol < 0) return FR_INVALID_DRIV
                           A 14336    .LINE 3350
                           A 14337    
0034CB 01000000            A 14338    	LD	BC,0
0034CF DD27DE              A 14339    	LD	HL,(IX+%FFFFFFDE)
0034D2 B7                  A 14340    	OR	A,A
0034D3 ED42                A 14341    	SBC	HL,BC
0034D5 F2 DF 34 00         A 14342    	JP	P,L__423
0034D9 EA EB 34 00         A 14343    	JP	PE,L_732
0034DD 18 04               A 14344    	JR	L__424
0034DF                     A 14345    L__423:
0034DF E2 EB 34 00         A 14346    	JP	PO,L_732
0034E3                     A 14347    L__424:
0034E3 210B0000            A 14348    	LD	HL,11
0034E7 C3 5A 3B 00         A 14349    	JR	L_800
0034EB                     A 14350    L_732:
                           A 14351    ; 3351	
                           A 14352    ; 3352		/* Check if the filesystem object i
                           A 14353    ; 3353		fs = FatFs[vol];					
                           A 14354    .LINE 3353
                           A 14355    
0034EB DD27DE              A 14356    	LD	HL,(IX+%FFFFFFDE)
0034EE E5C1                A 14357    	LD	BC,HL
0034F0 29                  A 14358    	ADD	HL,HL
0034F1 09                  A 14359    	ADD	HL,BC
0034F2 01 00 00 00         A 14360    	LD	BC,_FatFs
0034F6 09                  A 14361    	ADD	HL,BC
0034F7 ED07                A 14362    	LD	BC,(HL)
0034F9 DD0FFD              A 14363    	LD	(IX+%FFFFFFFD),BC
                           A 14364    ; 3354		if (!fs) return FR_NOT_ENABLED;		
                           A 14365    .LINE 3354
                           A 14366    
0034FC 01000000            A 14367    	LD	BC,0
003500 DD27FD              A 14368    	LD	HL,(IX+%FFFFFFFD)
003503 B7                  A 14369    	OR	A,A
003504 ED42                A 14370    	SBC	HL,BC
003506 20 08               A 14371    	JR	NZ,L_734
003508 210C0000            A 14372    	LD	HL,12
00350C C3 5A 3B 00         A 14373    	JR	L_800
003510                     A 14374    L_734:
                           A 14375    ; 3355	#if FF_FS_REENTRANT
                           A 14376    ; 3356		if (!lock_fs(fs)) return FR_TIMEOUT
                           A 14377    ; 3357	#endif
                           A 14378    ; 3358		*rfs = fs;							
                           A 14379    .LINE 3358
                           A 14380    
003510 DD2709              A 14381    	LD	HL,(IX+%9)
003513 DD07FD              A 14382    	LD	BC,(IX+%FFFFFFFD)
003516 ED0F                A 14383    	LD	(HL),BC
                           A 14384    ; 3359	
                           A 14385    ; 3360		mode &= (BYTE)~FA_READ;				
                           A 14386    .LINE 3360
                           A 14387    
003518 DD7E0C              A 14388    	LD	A,(IX+%C)
00351B CB87                A 14389    	RES	%0,A
00351D DD770C              A 14390    	LD	(IX+%C),A
                           A 14391    ; 3361		if (fs->fs_type != 0) {				
                           A 14392    .LINE 3361
                           A 14393    
003520 DD31FD              A 14394    	LD	IY,(IX+%FFFFFFFD)
003523 FD7E00              A 14395    	LD	A,(IY+%0)
003526 B7                  A 14396    	OR	A,A
003527 28 31               A 14397    	JR	Z,L_740
                           A 14398    ; 3362			stat = disk_status(fs->pdrv);
                           A 14399    .LINE 3362
                           A 14400    
003529 DD31FD              A 14401    	LD	IY,(IX+%FFFFFFFD)
00352C FD4E01              A 14402    	LD	C,(IY+%1)
00352F 0600                A 14403    	LD	B,%0
003531 C5                  A 14404    	PUSH	BC
003532 CD 00 00 00         A 14405    	CALL	_disk_status
003536 C1                  A 14406    	POP	BC
003537 DD77F9              A 14407    	LD	(IX+%FFFFFFF9),A
                           A 14408    ; 3363			if (!(stat & STA_NOINIT)) {		
                           A 14409    .LINE 3363
                           A 14410    
00353A E601                A 14411    	AND	A,%1
00353C 20 1C               A 14412    	JR	NZ,L_740
                           A 14413    ; 3364				if (!FF_FS_READONLY && mode
                           A 14414    .LINE 3364
                           A 14415    
00353E DD7E0C              A 14416    	LD	A,(IX+%C)
003541 B7                  A 14417    	OR	A,A
003542 28 0F               A 14418    	JR	Z,L_737
003544 DD7EF9              A 14419    	LD	A,(IX+%FFFFFFF9)
003547 E604                A 14420    	AND	A,%4
003549 28 08               A 14421    	JR	Z,L_737
                           A 14422    ; 3365					return FR_WRITE_PROTECT
                           A 14423    .LINE 3365
                           A 14424    
00354B 210A0000            A 14425    	LD	HL,10
00354F C3 5A 3B 00         A 14426    	JR	L_800
                           A 14427    ; 3366				}
003553                     A 14428    L_737:
                           A 14429    .LINE 3366
                           A 14430    
                           A 14431    ; 3367				return FR_OK;				
                           A 14432    .LINE 3367
                           A 14433    
003553 B7                  A 14434    	OR	A,A
003554 ED62                A 14435    	SBC	HL,HL
003556 C3 5A 3B 00         A 14436    	JR	L_800
                           A 14437    ; 3368			}
                           A 14438    ; 3369		}
00355A                     A 14439    L_740:
                           A 14440    .LINE 3369
                           A 14441    
                           A 14442    ; 3370	
                           A 14443    ; 3371		/* The filesystem object is not val
                           A 14444    ; 3372		/* Following code attempts to mount
                           A 14445    ; 3373	
                           A 14446    ; 3374		fs->fs_type = 0;					
                           A 14447    .LINE 3374
                           A 14448    
00355A DD31FD              A 14449    	LD	IY,(IX+%FFFFFFFD)
00355D FD360000            A 14450    	LD	(IY+%0),%0
                           A 14451    ; 3375		fs->pdrv = LD2PD(vol);				
                           A 14452    .LINE 3375
                           A 14453    
003561 DD7EDE              A 14454    	LD	A,(IX+%FFFFFFDE)
003564 FD7701              A 14455    	LD	(IY+%1),A
                           A 14456    ; 3376		stat = disk_initialize(fs->pdrv);	
                           A 14457    .LINE 3376
                           A 14458    
003567 FD4E01              A 14459    	LD	C,(IY+%1)
00356A 0600                A 14460    	LD	B,%0
00356C C5                  A 14461    	PUSH	BC
00356D CD 00 00 00         A 14462    	CALL	_disk_initialize
003571 C1                  A 14463    	POP	BC
003572 DD77F9              A 14464    	LD	(IX+%FFFFFFF9),A
                           A 14465    ; 3377		if (stat & STA_NOINIT) { 			
                           A 14466    .LINE 3377
                           A 14467    
003575 E601                A 14468    	AND	A,%1
003577 28 08               A 14469    	JR	Z,L_744
                           A 14470    ; 3378			return FR_NOT_READY;			
                           A 14471    .LINE 3378
                           A 14472    
003579 21030000            A 14473    	LD	HL,3
00357D C3 5A 3B 00         A 14474    	JR	L_800
                           A 14475    ; 3379		}
003581                     A 14476    L_744:
                           A 14477    .LINE 3379
                           A 14478    
                           A 14479    ; 3380		if (!FF_FS_READONLY && mode && (sta
                           A 14480    .LINE 3380
                           A 14481    
003581 DD7E0C              A 14482    	LD	A,(IX+%C)
003584 B7                  A 14483    	OR	A,A
003585 28 0F               A 14484    	JR	Z,L_745
003587 DD7EF9              A 14485    	LD	A,(IX+%FFFFFFF9)
00358A E604                A 14486    	AND	A,%4
00358C 28 08               A 14487    	JR	Z,L_745
                           A 14488    ; 3381			return FR_WRITE_PROTECTED;
                           A 14489    .LINE 3381
                           A 14490    
00358E 210A0000            A 14491    	LD	HL,10
003592 C3 5A 3B 00         A 14492    	JR	L_800
                           A 14493    ; 3382		}
003596                     A 14494    L_745:
                           A 14495    .LINE 3382
                           A 14496    
                           A 14497    ; 3383	#if FF_MAX_SS != FF_MIN_SS				
                           A 14498    ; 3384		if (disk_ioctl(fs->pdrv, GET_SECTOR
                           A 14499    ; 3385		if (SS(fs) > FF_MAX_SS || SS(fs) < 
                           A 14500    ; 3386	#endif
                           A 14501    ; 3387	
                           A 14502    ; 3388		/* Find an FAT volume on the drive 
                           A 14503    ; 3389		fmt = find_volume(fs, LD2PT(vol));
                           A 14504    .LINE 3389
                           A 14505    
003596 01000000            A 14506    	LD	BC,0
00359A C5                  A 14507    	PUSH	BC
00359B DD07FD              A 14508    	LD	BC,(IX+%FFFFFFFD)
00359E C5                  A 14509    	PUSH	BC
00359F CD 5A 33 00         A 14510    	CALL	_find_volume
0035A3 C1                  A 14511    	POP	BC
0035A4 C1                  A 14512    	POP	BC
0035A5 DD2FFA              A 14513    	LD	(IX+%FFFFFFFA),HL
                           A 14514    ; 3390		if (fmt == 4) return FR_DISK_ERR;	
                           A 14515    .LINE 3390
                           A 14516    
0035A8 01040000            A 14517    	LD	BC,4
0035AC DD27FA              A 14518    	LD	HL,(IX+%FFFFFFFA)
0035AF B7                  A 14519    	OR	A,A
0035B0 ED42                A 14520    	SBC	HL,BC
0035B2 20 08               A 14521    	JR	NZ,L_748
0035B4 21010000            A 14522    	LD	HL,1
0035B8 C3 5A 3B 00         A 14523    	JR	L_800
0035BC                     A 14524    L_748:
                           A 14525    ; 3391		if (fmt >= 2) return FR_NO_FILESYST
                           A 14526    .LINE 3391
                           A 14527    
0035BC 01020000            A 14528    	LD	BC,2
0035C0 DD27FA              A 14529    	LD	HL,(IX+%FFFFFFFA)
0035C3 B7                  A 14530    	OR	A,A
0035C4 ED42                A 14531    	SBC	HL,BC
0035C6 38 08               A 14532    	JR	C,L_749
0035C8 210D0000            A 14533    	LD	HL,13
0035CC C3 5A 3B 00         A 14534    	JR	L_800
0035D0                     A 14535    L_749:
                           A 14536    ; 3392		bsect = fs->winsect;				
                           A 14537    .LINE 3392
                           A 14538    
0035D0 DD31FD              A 14539    	LD	IY,(IX+%FFFFFFFD)
0035D3 FD0732              A 14540    	LD	BC,(IY+%32)
0035D6 FD7E35              A 14541    	LD	A,(IY+%35)
0035D9 DD0FDA              A 14542    	LD	(IX+%FFFFFFDA),BC
0035DC DD77DD              A 14543    	LD	(IX+%FFFFFFDD),A
                           A 14544    ; 3393	
                           A 14545    ; 3394		/* An FAT volume is found (bsect). 
                           A 14546    ; 3395	
                           A 14547    ; 3396	#if FF_FS_EXFAT
                           A 14548    ; 3397		if (fmt == 1) {
                           A 14549    ; 3398			QWORD maxlba;
                           A 14550    ; 3399			DWORD so, cv, bcl, i;
                           A 14551    ; 3400	
                           A 14552    ; 3401			for (i = BPB_ZeroedEx; i < BPB_
                           A 14553    ; 3402			if (i < BPB_ZeroedEx + 53) retu
                           A 14554    ; 3403	
                           A 14555    ; 3404			if (ld_word(fs->win + BPB_FSVer
                           A 14556    ; 3405	
                           A 14557    ; 3406			if (1 << fs->win[BPB_BytsPerSec
                           A 14558    ; 3407				return FR_NO_FILESYSTEM;
                           A 14559    ; 3408			}
                           A 14560    ; 3409	
                           A 14561    ; 3410			maxlba = ld_qword(fs->win + BPB
                           A 14562    ; 3411			if (!FF_LBA64 && maxlba >= 0x10
                           A 14563    ; 3412	
                           A 14564    ; 3413			fs->fsize = ld_dword(fs->win + 
                           A 14565    ; 3414	
                           A 14566    ; 3415			fs->n_fats = fs->win[BPB_NumFAT
                           A 14567    ; 3416			if (fs->n_fats != 1) return FR_
                           A 14568    ; 3417	
                           A 14569    ; 3418			fs->csize = 1 << fs->win[BPB_Se
                           A 14570    ; 3419			if (fs->csize == 0)	return FR_N
                           A 14571    ; 3420	
                           A 14572    ; 3421			nclst = ld_dword(fs->win + BPB_
                           A 14573    ; 3422			if (nclst > MAX_EXFAT) return F
                           A 14574    ; 3423			fs->n_fatent = nclst + 2;
                           A 14575    ; 3424	
                           A 14576    ; 3425			/* Boundaries and Limits */
                           A 14577    ; 3426			fs->volbase = bsect;
                           A 14578    ; 3427			fs->database = bsect + ld_dword
                           A 14579    ; 3428			fs->fatbase = bsect + ld_dword(
                           A 14580    ; 3429			if (maxlba < (QWORD)fs->databas
                           A 14581    ; 3430			fs->dirbase = ld_dword(fs->win 
                           A 14582    ; 3431	
                           A 14583    ; 3432			/* Get bitmap location and chec
                           A 14584    ; 3433			so = i = 0;
                           A 14585    ; 3434			for (;;) {	/* Find the bitmap 
                           A 14586    ; 3435				if (i == 0) {
                           A 14587    ; 3436					if (so >= fs->csize) re
                           A 14588    ; 3437					if (move_window(fs, cls
                           A 14589    ; 3438					so++;
                           A 14590    ; 3439				}
                           A 14591    ; 3440				if (fs->win[i] == ET_BITMAP
                           A 14592    ; 3441				i = (i + SZDIRE) % SS(fs);	
                           A 14593    ; 3442			}
                           A 14594    ; 3443			bcl = ld_dword(fs->win + i + 20
                           A 14595    ; 3444			if (bcl < 2 || bcl >= fs->n_fat
                           A 14596    ; 3445			fs->bitbase = fs->database + fs
                           A 14597    ; 3446			for (;;) {	/* Check if bitmap 
                           A 14598    ; 3447				if (move_window(fs, fs->fat
                           A 14599    ; 3448				cv = ld_dword(fs->win + bcl
                           A 14600    ; 3449				if (cv == 0xFFFFFFFF) break
                           A 14601    ; 3450				if (cv != ++bcl) return FR_
                           A 14602    ; 3451			}
                           A 14603    ; 3452	
                           A 14604    ; 3453	#if !FF_FS_READONLY
                           A 14605    ; 3454			fs->last_clst = fs->free_clst =
                           A 14606    ; 3455	#endif
                           A 14607    ; 3456			fmt = FS_EXFAT;			/* FAT 
                           A 14608    ; 3457		} else
                           A 14609    ; 3458	#endif	/* FF_FS_EXFAT */
                           A 14610    ; 3459		{
                           A 14611    ; 3460			if (ld_word(fs->win + BPB_BytsP
                           A 14612    .LINE 3460
                           A 14613    
0035DF ED0336              A 14614    	LEA	BC,IY+%36
0035E2 DD0FEF              A 14615    	LD	(IX+%FFFFFFEF),BC
0035E5 DD31EF              A 14616    	LD	IY,(IX+%FFFFFFEF)
0035E8 ED030B              A 14617    	LEA	BC,IY+%B
0035EB C5                  A 14618    	PUSH	BC
0035EC CD 00 00 00         A 14619    	CALL	_ld_word
0035F0 C1                  A 14620    	POP	BC
0035F1 E5C1                A 14621    	LD	BC,HL
0035F3 CD 00 00 00         A 14622    	CALL	__stoiu
0035F7 01000200            A 14623    	LD	BC,512
0035FB B7                  A 14624    	OR	A,A
0035FC ED42                A 14625    	SBC	HL,BC
0035FE 28 08               A 14626    	JR	Z,L_751
003600 210D0000            A 14627    	LD	HL,13
003604 C3 5A 3B 00         A 14628    	JR	L_800
003608                     A 14629    L_751:
                           A 14630    ; 3461	
                           A 14631    ; 3462			fasize = ld_word(fs->win + BPB_
                           A 14632    .LINE 3462
                           A 14633    
003608 DD31EF              A 14634    	LD	IY,(IX+%FFFFFFEF)
00360B ED0316              A 14635    	LEA	BC,IY+%16
00360E C5                  A 14636    	PUSH	BC
00360F CD 00 00 00         A 14637    	CALL	_ld_word
003613 C1                  A 14638    	POP	BC
003614 E5C1                A 14639    	LD	BC,HL
003616 CD 00 00 00         A 14640    	CALL	__stoiu
00361A AF                  A 14641    	XOR	A,A
00361B DD2FF5              A 14642    	LD	(IX+%FFFFFFF5),HL
00361E DD77F8              A 14643    	LD	(IX+%FFFFFFF8),A
                           A 14644    ; 3463			if (fasize == 0) fasize = ld_dw
                           A 14645    .LINE 3463
                           A 14646    
003621 DD27F5              A 14647    	LD	HL,(IX+%FFFFFFF5)
003624 DD5EF8              A 14648    	LD	E,(IX+%FFFFFFF8)
003627 01000000            A 14649    	LD	BC,0
00362B AF                  A 14650    	XOR	A,A
00362C CD 00 00 00         A 14651    	CALL	__lcmpu
003630 20 12               A 14652    	JR	NZ,L_753
003632 DD31EF              A 14653    	LD	IY,(IX+%FFFFFFEF)
003635 ED0324              A 14654    	LEA	BC,IY+%24
003638 C5                  A 14655    	PUSH	BC
003639 CD 3C 00 00         A 14656    	CALL	_ld_dword
00363D C1                  A 14657    	POP	BC
00363E DD2FF5              A 14658    	LD	(IX+%FFFFFFF5),HL
003641 DD73F8              A 14659    	LD	(IX+%FFFFFFF8),E
003644                     A 14660    L_753:
                           A 14661    ; 3464			fs->fsize = fasize;
                           A 14662    .LINE 3464
                           A 14663    
003644 DD07F5              A 14664    	LD	BC,(IX+%FFFFFFF5)
003647 DD7EF8              A 14665    	LD	A,(IX+%FFFFFFF8)
00364A DD31FD              A 14666    	LD	IY,(IX+%FFFFFFFD)
00364D FD0F1E              A 14667    	LD	(IY+%1E),BC
003650 FD7721              A 14668    	LD	(IY+%21),A
                           A 14669    ; 3465	
                           A 14670    ; 3466			fs->n_fats = fs->win[BPB_NumFAT
                           A 14671    .LINE 3466
                           A 14672    
003653 FD7E46              A 14673    	LD	A,(IY+%46)
003656 FD7702              A 14674    	LD	(IY+%2),A
                           A 14675    ; 3467			if (fs->n_fats != 1 && fs->n_fa
                           A 14676    .LINE 3467
                           A 14677    
003659 FD7E02              A 14678    	LD	A,(IY+%2)
00365C DD77F4              A 14679    	LD	(IX+%FFFFFFF4),A
00365F DD77EE              A 14680    	LD	(IX+%FFFFFFEE),A
003662 DD7EF4              A 14681    	LD	A,(IX+%FFFFFFF4)
003665 FE01                A 14682    	CP	A,%1
003667 28 15               A 14683    	JR	Z,L_756
003669 DD7EF4              A 14684    	LD	A,(IX+%FFFFFFF4)
00366C DD77EE              A 14685    	LD	(IX+%FFFFFFEE),A
00366F DD7EF4              A 14686    	LD	A,(IX+%FFFFFFF4)
003672 FE02                A 14687    	CP	A,%2
003674 28 08               A 14688    	JR	Z,L_756
003676 210D0000            A 14689    	LD	HL,13
00367A C3 5A 3B 00         A 14690    	JR	L_800
00367E                     A 14691    L_756:
                           A 14692    ; 3468			fasize *= fs->n_fats;			
                           A 14693    .LINE 3468
                           A 14694    
00367E B7ED62              A 14695    	UEXT	HL
003681 DD6EEE              A 14696    	LD	L,(IX+%FFFFFFEE)
003684 E5C1                A 14697    	LD	BC,HL
003686 7C                  A 14698    	LD	A,H
003687 DD27F5              A 14699    	LD	HL,(IX+%FFFFFFF5)
00368A DD5EF8              A 14700    	LD	E,(IX+%FFFFFFF8)
00368D CD 00 00 00         A 14701    	CALL	__lmulu
003691 DD2FF5              A 14702    	LD	(IX+%FFFFFFF5),HL
003694 DD73F8              A 14703    	LD	(IX+%FFFFFFF8),E
                           A 14704    ; 3469	
                           A 14705    ; 3470			fs->csize = fs->win[BPB_SecPerC
                           A 14706    .LINE 3470
                           A 14707    
003697 DD31FD              A 14708    	LD	IY,(IX+%FFFFFFFD)
00369A ED2343              A 14709    	LEA	HL,IY+%43
00369D 4E                  A 14710    	LD	C,(HL)
00369E FD7109              A 14711    	LD	(IY+%9),C
0036A1 FD360A00            A 14712    	LD	(IY+%A),%0
                           A 14713    ; 3471			if (fs->csize == 0 || (fs->csiz
                           A 14714    .LINE 3471
                           A 14715    
0036A5 FD0709              A 14716    	LD	BC,(IY+%9)
0036A8 DD71F2              A 14717    	LD	(IX+%FFFFFFF2),C
0036AB DD70F3              A 14718    	LD	(IX+%FFFFFFF3),B
0036AE 49010000            A 14719    	LD.LIS	BC,0
0036B2 DD27F2              A 14720    	LD	HL,(IX+%FFFFFFF2)
0036B5 B7                  A 14721    	OR	A,A
0036B6 40ED42              A 14722    	SBC.SIS	HL,BC
0036B9 28 19               A 14723    	JR	Z,L_758
0036BB DD07F2              A 14724    	LD	BC,(IX+%FFFFFFF2)
0036BE CD 00 00 00         A 14725    	CALL	__stoiu
0036C2 2B                  A 14726    	DEC	HL
0036C3 DD07F2              A 14727    	LD	BC,(IX+%FFFFFFF2)
0036C6 CD 00 00 00         A 14728    	CALL	__sand
0036CA 49010000            A 14729    	LD.LIS	BC,0
0036CE B7                  A 14730    	OR	A,A
0036CF 40ED42              A 14731    	SBC.SIS	HL,BC
0036D2 28 08               A 14732    	JR	Z,L_759
0036D4                     A 14733    L_758:
0036D4 210D0000            A 14734    	LD	HL,13
0036D8 C3 5A 3B 00         A 14735    	JR	L_800
0036DC                     A 14736    L_759:
                           A 14737    ; 3472	
                           A 14738    ; 3473			fs->n_rootdir = ld_word(fs->win
                           A 14739    .LINE 3473
                           A 14740    
0036DC DD31FD              A 14741    	LD	IY,(IX+%FFFFFFFD)
0036DF ED0347              A 14742    	LEA	BC,IY+%47
0036E2 C5                  A 14743    	PUSH	BC
0036E3 CD 00 00 00         A 14744    	CALL	_ld_word
0036E7 C1                  A 14745    	POP	BC
0036E8 DD31FD              A 14746    	LD	IY,(IX+%FFFFFFFD)
0036EB E5C1                A 14747    	LD	BC,HL
0036ED FD7107              A 14748    	LD	(IY+%7),C
0036F0 FD7008              A 14749    	LD	(IY+%8),B
                           A 14750    ; 3474			if (fs->n_rootdir % (SS(fs) / S
                           A 14751    .LINE 3474
                           A 14752    
0036F3 FD0707              A 14753    	LD	BC,(IY+%7)
0036F6 CD 00 00 00         A 14754    	CALL	__stoiu
0036FA 7D                  A 14755    	LD	A,L
0036FB E60F                A 14756    	AND	A,%F
0036FD B7ED62              A 14757    	UEXT	HL
003700 6F                  A 14758    	LD	L,A
003701 01000000            A 14759    	LD	BC,0
003705 B7                  A 14760    	OR	A,A
003706 ED42                A 14761    	SBC	HL,BC
003708 28 08               A 14762    	JR	Z,L_761
00370A 210D0000            A 14763    	LD	HL,13
00370E C3 5A 3B 00         A 14764    	JR	L_800
003712                     A 14765    L_761:
                           A 14766    ; 3475	
                           A 14767    ; 3476			tsect = ld_word(fs->win + BPB_T
                           A 14768    .LINE 3476
                           A 14769    
003712 DD31FD              A 14770    	LD	IY,(IX+%FFFFFFFD)
003715 ED0336              A 14771    	LEA	BC,IY+%36
003718 DD0FE5              A 14772    	LD	(IX+%FFFFFFE5),BC
00371B DD0FD3              A 14773    	LD	(IX+%FFFFFFD3),BC
00371E DD31E5              A 14774    	LD	IY,(IX+%FFFFFFE5)
003721 ED0313              A 14775    	LEA	BC,IY+%13
003724 C5                  A 14776    	PUSH	BC
003725 CD 00 00 00         A 14777    	CALL	_ld_word
003729 C1                  A 14778    	POP	BC
00372A E5C1                A 14779    	LD	BC,HL
00372C CD 00 00 00         A 14780    	CALL	__stoiu
003730 AF                  A 14781    	XOR	A,A
003731 DD2FD6              A 14782    	LD	(IX+%FFFFFFD6),HL
003734 DD77D9              A 14783    	LD	(IX+%FFFFFFD9),A
                           A 14784    ; 3477			if (tsect == 0) tsect = ld_dwor
                           A 14785    .LINE 3477
                           A 14786    
003737 DD27D6              A 14787    	LD	HL,(IX+%FFFFFFD6)
00373A DD5ED9              A 14788    	LD	E,(IX+%FFFFFFD9)
00373D 01000000            A 14789    	LD	BC,0
003741 AF                  A 14790    	XOR	A,A
003742 CD 00 00 00         A 14791    	CALL	__lcmpu
003746 20 18               A 14792    	JR	NZ,L_763
003748 DD07E5              A 14793    	LD	BC,(IX+%FFFFFFE5)
00374B DD0FD3              A 14794    	LD	(IX+%FFFFFFD3),BC
00374E DD31E5              A 14795    	LD	IY,(IX+%FFFFFFE5)
003751 ED0320              A 14796    	LEA	BC,IY+%20
003754 C5                  A 14797    	PUSH	BC
003755 CD 3C 00 00         A 14798    	CALL	_ld_dword
003759 C1                  A 14799    	POP	BC
00375A DD2FD6              A 14800    	LD	(IX+%FFFFFFD6),HL
00375D DD73D9              A 14801    	LD	(IX+%FFFFFFD9),E
003760                     A 14802    L_763:
                           A 14803    ; 3478	
                           A 14804    ; 3479			nrsv = ld_word(fs->win + BPB_Rs
                           A 14805    .LINE 3479
                           A 14806    
003760 DD31D3              A 14807    	LD	IY,(IX+%FFFFFFD3)
003763 ED030E              A 14808    	LEA	BC,IY+%E
003766 C5                  A 14809    	PUSH	BC
003767 CD 00 00 00         A 14810    	CALL	_ld_word
00376B C1                  A 14811    	POP	BC
00376C DD75E8              A 14812    	LD	(IX+%FFFFFFE8),L
00376F DD74E9              A 14813    	LD	(IX+%FFFFFFE9),H
                           A 14814    ; 3480			if (nrsv == 0) return FR_NO_FIL
                           A 14815    .LINE 3480
                           A 14816    
003772 49010000            A 14817    	LD.LIS	BC,0
003776 DD27E8              A 14818    	LD	HL,(IX+%FFFFFFE8)
003779 B7                  A 14819    	OR	A,A
00377A 40ED42              A 14820    	SBC.SIS	HL,BC
00377D 20 08               A 14821    	JR	NZ,L_765
00377F 210D0000            A 14822    	LD	HL,13
003783 C3 5A 3B 00         A 14823    	JR	L_800
003787                     A 14824    L_765:
                           A 14825    ; 3481	
                           A 14826    ; 3482			/* Determine the FAT sub type *
                           A 14827    ; 3483			sysect = nrsv + fasize + fs->n_
                           A 14828    .LINE 3483
                           A 14829    
003787 DD31FD              A 14830    	LD	IY,(IX+%FFFFFFFD)
00378A FD0707              A 14831    	LD	BC,(IY+%7)
00378D CD 00 00 00         A 14832    	CALL	__stoiu
003791 3E04                A 14833    	LD	A,%4
003793 CD 00 00 00         A 14834    	CALL	__ishru_b
003797 AF                  A 14835    	XOR	A,A
003798 DD77B4              A 14836    	LD	(IX+%FFFFFFB4),A
00379B DD2FB1              A 14837    	LD	(IX+%FFFFFFB1),HL
00379E DD07E8              A 14838    	LD	BC,(IX+%FFFFFFE8)
0037A1 CD 00 00 00         A 14839    	CALL	__stoiu
0037A5 E5C1                A 14840    	LD	BC,HL
0037A7 AF                  A 14841    	XOR	A,A
0037A8 DD27F5              A 14842    	LD	HL,(IX+%FFFFFFF5)
0037AB DD5EF8              A 14843    	LD	E,(IX+%FFFFFFF8)
0037AE CD 00 00 00         A 14844    	CALL	__ladd
0037B2 7B                  A 14845    	LD	A,E
0037B3 E5C1                A 14846    	LD	BC,HL
0037B5 DD5EB4              A 14847    	LD	E,(IX+%FFFFFFB4)
0037B8 DD27B1              A 14848    	LD	HL,(IX+%FFFFFFB1)
0037BB CD 00 00 00         A 14849    	CALL	__ladd
0037BF DD2FC9              A 14850    	LD	(IX+%FFFFFFC9),HL
0037C2 DD73CC              A 14851    	LD	(IX+%FFFFFFCC),E
                           A 14852    ; 3484			if (tsect < sysect) return FR_N
                           A 14853    .LINE 3484
                           A 14854    
0037C5 DD27D6              A 14855    	LD	HL,(IX+%FFFFFFD6)
0037C8 DD5ED9              A 14856    	LD	E,(IX+%FFFFFFD9)
0037CB DD07C9              A 14857    	LD	BC,(IX+%FFFFFFC9)
0037CE DD7ECC              A 14858    	LD	A,(IX+%FFFFFFCC)
0037D1 CD 00 00 00         A 14859    	CALL	__lcmpu
0037D5 30 08               A 14860    	JR	NC,L_767
0037D7 210D0000            A 14861    	LD	HL,13
0037DB C3 5A 3B 00         A 14862    	JR	L_800
0037DF                     A 14863    L_767:
                           A 14864    ; 3485			nclst = (tsect - sysect) / fs->
                           A 14865    .LINE 3485
                           A 14866    
0037DF DD27D6              A 14867    	LD	HL,(IX+%FFFFFFD6)
0037E2 DD5ED9              A 14868    	LD	E,(IX+%FFFFFFD9)
0037E5 DD07C9              A 14869    	LD	BC,(IX+%FFFFFFC9)
0037E8 DD7ECC              A 14870    	LD	A,(IX+%FFFFFFCC)
0037EB CD 00 00 00         A 14871    	CALL	__lsub
0037EF DD2FB5              A 14872    	LD	(IX+%FFFFFFB5),HL
0037F2 DD31FD              A 14873    	LD	IY,(IX+%FFFFFFFD)
0037F5 FD0709              A 14874    	LD	BC,(IY+%9)
0037F8 CD 00 00 00         A 14875    	CALL	__stoiu
0037FC E5C1                A 14876    	LD	BC,HL
0037FE AF                  A 14877    	XOR	A,A
0037FF DD27B5              A 14878    	LD	HL,(IX+%FFFFFFB5)
003802 CD 00 00 00         A 14879    	CALL	__ldivu
003806 DD2FEA              A 14880    	LD	(IX+%FFFFFFEA),HL
003809 DD73ED              A 14881    	LD	(IX+%FFFFFFED),E
                           A 14882    ; 3486			if (nclst == 0) return FR_NO_FI
                           A 14883    .LINE 3486
                           A 14884    
00380C DD27EA              A 14885    	LD	HL,(IX+%FFFFFFEA)
00380F DD5EED              A 14886    	LD	E,(IX+%FFFFFFED)
003812 01000000            A 14887    	LD	BC,0
003816 AF                  A 14888    	XOR	A,A
003817 CD 00 00 00         A 14889    	CALL	__lcmpu
00381B 20 08               A 14890    	JR	NZ,L_769
00381D 210D0000            A 14891    	LD	HL,13
003821 C3 5A 3B 00         A 14892    	JR	L_800
003825                     A 14893    L_769:
                           A 14894    ; 3487			fmt = 0;
                           A 14895    .LINE 3487
                           A 14896    
003825 DD0FFA              A 14897    	LD	(IX+%FFFFFFFA),BC
                           A 14898    ; 3488			if (nclst <= MAX_FAT32) fmt = F
                           A 14899    .LINE 3488
                           A 14900    
003828 21F5FFFF            A 14901    	LD	HL,16777205
00382C 1E0F                A 14902    	LD	E,%F
00382E DD07EA              A 14903    	LD	BC,(IX+%FFFFFFEA)
003831 DD7EED              A 14904    	LD	A,(IX+%FFFFFFED)
003834 CD 00 00 00         A 14905    	CALL	__lcmpu
003838 38 07               A 14906    	JR	C,L_772
00383A 01030000            A 14907    	LD	BC,3
00383E DD0FFA              A 14908    	LD	(IX+%FFFFFFFA),BC
003841                     A 14909    L_772:
                           A 14910    ; 3489			if (nclst <= MAX_FAT16) fmt = F
                           A 14911    .LINE 3489
                           A 14912    
003841 21F5FF00            A 14913    	LD	HL,65525
003845 1E00                A 14914    	LD	E,%0
003847 DD07EA              A 14915    	LD	BC,(IX+%FFFFFFEA)
00384A DD7EED              A 14916    	LD	A,(IX+%FFFFFFED)
00384D CD 00 00 00         A 14917    	CALL	__lcmpu
003851 38 07               A 14918    	JR	C,L_774
003853 01020000            A 14919    	LD	BC,2
003857 DD0FFA              A 14920    	LD	(IX+%FFFFFFFA),BC
00385A                     A 14921    L_774:
                           A 14922    ; 3490			if (nclst <= MAX_FAT12) fmt = F
                           A 14923    .LINE 3490
                           A 14924    
00385A 21F50F00            A 14925    	LD	HL,4085
00385E DD07EA              A 14926    	LD	BC,(IX+%FFFFFFEA)
003861 DD7EED              A 14927    	LD	A,(IX+%FFFFFFED)
003864 CD 00 00 00         A 14928    	CALL	__lcmpu
003868 38 07               A 14929    	JR	C,L_776
00386A 01010000            A 14930    	LD	BC,1
00386E DD0FFA              A 14931    	LD	(IX+%FFFFFFFA),BC
003871                     A 14932    L_776:
                           A 14933    ; 3491			if (fmt == 0) return FR_NO_FILE
                           A 14934    .LINE 3491
                           A 14935    
003871 01000000            A 14936    	LD	BC,0
003875 DD27FA              A 14937    	LD	HL,(IX+%FFFFFFFA)
003878 B7                  A 14938    	OR	A,A
003879 ED42                A 14939    	SBC	HL,BC
00387B 20 08               A 14940    	JR	NZ,L_777
00387D 210D0000            A 14941    	LD	HL,13
003881 C3 5A 3B 00         A 14942    	JR	L_800
003885                     A 14943    L_777:
                           A 14944    ; 3492	
                           A 14945    ; 3493			/* Boundaries and Limits */
                           A 14946    ; 3494			fs->n_fatent = nclst + 2;		
                           A 14947    .LINE 3494
                           A 14948    
003885 DD27EA              A 14949    	LD	HL,(IX+%FFFFFFEA)
003888 DD5EED              A 14950    	LD	E,(IX+%FFFFFFED)
00388B 3E02                A 14951    	LD	A,%2
00388D CD 00 00 00         A 14952    	CALL	__ladd_b
003891 DD31FD              A 14953    	LD	IY,(IX+%FFFFFFFD)
003894 FD2F1A              A 14954    	LD	(IY+%1A),HL
003897 FD731D              A 14955    	LD	(IY+%1D),E
                           A 14956    ; 3495			fs->volbase = bsect;			
                           A 14957    .LINE 3495
                           A 14958    
00389A DD07DA              A 14959    	LD	BC,(IX+%FFFFFFDA)
00389D DD7EDD              A 14960    	LD	A,(IX+%FFFFFFDD)
0038A0 FD0F22              A 14961    	LD	(IY+%22),BC
0038A3 FD7725              A 14962    	LD	(IY+%25),A
                           A 14963    ; 3496			fs->fatbase = bsect + nrsv; 	
                           A 14964    .LINE 3496
                           A 14965    
0038A6 DD07E8              A 14966    	LD	BC,(IX+%FFFFFFE8)
0038A9 CD 00 00 00         A 14967    	CALL	__stoiu
0038AD E5C1                A 14968    	LD	BC,HL
0038AF AF                  A 14969    	XOR	A,A
0038B0 DD27DA              A 14970    	LD	HL,(IX+%FFFFFFDA)
0038B3 DD5EDD              A 14971    	LD	E,(IX+%FFFFFFDD)
0038B6 CD 00 00 00         A 14972    	CALL	__ladd
0038BA FD2F26              A 14973    	LD	(IY+%26),HL
0038BD FD7329              A 14974    	LD	(IY+%29),E
                           A 14975    ; 3497			fs->database = bsect + sysect;	
                           A 14976    .LINE 3497
                           A 14977    
0038C0 DD27C9              A 14978    	LD	HL,(IX+%FFFFFFC9)
0038C3 DD5ECC              A 14979    	LD	E,(IX+%FFFFFFCC)
0038C6 DD07DA              A 14980    	LD	BC,(IX+%FFFFFFDA)
0038C9 DD7EDD              A 14981    	LD	A,(IX+%FFFFFFDD)
0038CC CD 00 00 00         A 14982    	CALL	__ladd
0038D0 FD2F2E              A 14983    	LD	(IY+%2E),HL
0038D3 FD7331              A 14984    	LD	(IY+%31),E
                           A 14985    ; 3498			if (fmt == FS_FAT32) {
                           A 14986    .LINE 3498
                           A 14987    
0038D6 01030000            A 14988    	LD	BC,3
0038DA DD27FA              A 14989    	LD	HL,(IX+%FFFFFFFA)
0038DD B7                  A 14990    	OR	A,A
0038DE ED42                A 14991    	SBC	HL,BC
0038E0 28 04               A 14992    	JR	Z,L__409
0038E2 3E01                A 14993    	LD	A,%1
0038E4 18 01               A 14994    	JR	L__410
0038E6                     A 14995    L__409:
0038E6 AF                  A 14996    	XOR	A,A
0038E7                     A 14997    L__410:
0038E7 DD77E4              A 14998    	LD	(IX+%FFFFFFE4),A
0038EA B7                  A 14999    	OR	A,A
0038EB 20 69               A 15000    	JR	NZ,L_789
                           A 15001    ; 3499				if (ld_word(fs->win + BPB_F
                           A 15002    .LINE 3499
                           A 15003    
0038ED DD31FD              A 15004    	LD	IY,(IX+%FFFFFFFD)
0038F0 ED0336              A 15005    	LEA	BC,IY+%36
0038F3 DD0FD0              A 15006    	LD	(IX+%FFFFFFD0),BC
0038F6 DD31D0              A 15007    	LD	IY,(IX+%FFFFFFD0)
0038F9 ED032A              A 15008    	LEA	BC,IY+%2A
0038FC C5                  A 15009    	PUSH	BC
0038FD CD 00 00 00         A 15010    	CALL	_ld_word
003901 C1                  A 15011    	POP	BC
003902 49010000            A 15012    	LD.LIS	BC,0
003906 B7                  A 15013    	OR	A,A
003907 40ED42              A 15014    	SBC.SIS	HL,BC
00390A 28 08               A 15015    	JR	Z,L_780
00390C 210D0000            A 15016    	LD	HL,13
003910 C3 5A 3B 00         A 15017    	JR	L_800
003914                     A 15018    L_780:
                           A 15019    ; 3500				if (fs->n_rootdir != 0) ret
                           A 15020    .LINE 3500
                           A 15021    
003914 DD31FD              A 15022    	LD	IY,(IX+%FFFFFFFD)
003917 FD2707              A 15023    	LD	HL,(IY+%7)
00391A B7                  A 15024    	OR	A,A
00391B 40ED42              A 15025    	SBC.SIS	HL,BC
00391E 28 08               A 15026    	JR	Z,L_781
003920 210D0000            A 15027    	LD	HL,13
003924 C3 5A 3B 00         A 15028    	JR	L_800
003928                     A 15029    L_781:
                           A 15030    ; 3501				fs->dirbase = ld_dword(fs->
                           A 15031    .LINE 3501
                           A 15032    
003928 DD31D0              A 15033    	LD	IY,(IX+%FFFFFFD0)
00392B ED032C              A 15034    	LEA	BC,IY+%2C
00392E C5                  A 15035    	PUSH	BC
00392F CD 3C 00 00         A 15036    	CALL	_ld_dword
003933 C1                  A 15037    	POP	BC
003934 DD31FD              A 15038    	LD	IY,(IX+%FFFFFFFD)
003937 FD2F2A              A 15039    	LD	(IY+%2A),HL
00393A FD732D              A 15040    	LD	(IY+%2D),E
                           A 15041    ; 3502				szbfat = fs->n_fatent * 4;	
                           A 15042    .LINE 3502
                           A 15043    
00393D FD271A              A 15044    	LD	HL,(IY+%1A)
003940 FD5E1D              A 15045    	LD	E,(IY+%1D)
003943 01040000            A 15046    	LD	BC,4
003947 AF                  A 15047    	XOR	A,A
003948 CD 00 00 00         A 15048    	CALL	__lmulu
00394C DD2FC1              A 15049    	LD	(IX+%FFFFFFC1),HL
00394F DD73C4              A 15050    	LD	(IX+%FFFFFFC4),E
                           A 15051    ; 3503			} else {
                           A 15052    .LINE 3503
                           A 15053    
003952 C3 02 3A 00         A 15054    	JR	L_791
003956                     A 15055    L_789:
                           A 15056    ; 3504				if (fs->n_rootdir == 0)	ret
                           A 15057    .LINE 3504
                           A 15058    
003956 49010000            A 15059    	LD.LIS	BC,0
00395A DD31FD              A 15060    	LD	IY,(IX+%FFFFFFFD)
00395D FD2707              A 15061    	LD	HL,(IY+%7)
003960 B7                  A 15062    	OR	A,A
003961 40ED42              A 15063    	SBC.SIS	HL,BC
003964 20 08               A 15064    	JR	NZ,L_783
003966 210D0000            A 15065    	LD	HL,13
00396A C3 5A 3B 00         A 15066    	JR	L_800
00396E                     A 15067    L_783:
                           A 15068    ; 3505				fs->dirbase = fs->fatbase +
                           A 15069    .LINE 3505
                           A 15070    
00396E DD31FD              A 15071    	LD	IY,(IX+%FFFFFFFD)
003971 FD2726              A 15072    	LD	HL,(IY+%26)
003974 FD5E29              A 15073    	LD	E,(IY+%29)
003977 DD07F5              A 15074    	LD	BC,(IX+%FFFFFFF5)
00397A DD7EF8              A 15075    	LD	A,(IX+%FFFFFFF8)
00397D CD 00 00 00         A 15076    	CALL	__ladd
003981 FD2F2A              A 15077    	LD	(IY+%2A),HL
003984 FD732D              A 15078    	LD	(IY+%2D),E
                           A 15079    ; 3506				szbfat = (fmt == FS_FAT16) 
                           A 15080    .LINE 3506
                           A 15081    
003987 01020000            A 15082    	LD	BC,2
00398B DD27FA              A 15083    	LD	HL,(IX+%FFFFFFFA)
00398E B7                  A 15084    	OR	A,A
00398F ED42                A 15085    	SBC	HL,BC
003991 20 16               A 15086    	JR	NZ,L_786
                           A 15087    ; 3507					fs->n_fatent * 2 : fs->
                           A 15088    .LINE 3507
                           A 15089    
003993 DD31FD              A 15090    	LD	IY,(IX+%FFFFFFFD)
003996 FD271A              A 15091    	LD	HL,(IY+%1A)
003999 FD5E1D              A 15092    	LD	E,(IY+%1D)
00399C AF                  A 15093    	XOR	A,A
00399D CD 00 00 00         A 15094    	CALL	__lmulu
0039A1 DD2FC5              A 15095    	LD	(IX+%FFFFFFC5),HL
0039A4 DD73C8              A 15096    	LD	(IX+%FFFFFFC8),E
0039A7 18 4D               A 15097    	JR	L_787
0039A9                     A 15098    L_786:
0039A9 DD31FD              A 15099    	LD	IY,(IX+%FFFFFFFD)
0039AC FD171A              A 15100    	LD	DE,(IY+%1A)
0039AF DD1FBB              A 15101    	LD	(IX+%FFFFFFBB),DE	; spill
0039B2 FD5E1D              A 15102    	LD	E,(IY+%1D)
0039B5 DD1FBE              A 15103    	LD	(IX+%FFFFFFBE),DE	; spill
0039B8 DD27BB              A 15104    	LD	HL,(IX+%FFFFFFBB)
0039BB DD17BE              A 15105    	LD	DE,(IX+%FFFFFFBE)	; unspill
0039BE 01030000            A 15106    	LD	BC,3
0039C2 AF                  A 15107    	XOR	A,A
0039C3 CD 00 00 00         A 15108    	CALL	__lmulu
0039C7 7B                  A 15109    	LD	A,E
0039C8 E5C1                A 15110    	LD	BC,HL
0039CA 2E01                A 15111    	LD	L,%1
0039CC CD 00 00 00         A 15112    	CALL	__lshru
0039D0 DD0FB8              A 15113    	LD	(IX+%FFFFFFB8),BC
0039D3 5F                  A 15114    	LD	E,A
0039D4 DD1FBE              A 15115    	LD	(IX+%FFFFFFBE),DE	; spill
0039D7 DD17BB              A 15116    	LD	DE,(IX+%FFFFFFBB)	; unspill
0039DA D5C1                A 15117    	LD	BC,DE
0039DC DD17BE              A 15118    	LD	DE,(IX+%FFFFFFBE)	; unspill
0039DF 79                  A 15119    	LD	A,C
0039E0 E601                A 15120    	AND	A,%1
0039E2 B7ED62              A 15121    	UEXT	HL
0039E5 6F                  A 15122    	LD	L,A
0039E6 E5C1                A 15123    	LD	BC,HL
0039E8 7C                  A 15124    	LD	A,H
0039E9 DD27B8              A 15125    	LD	HL,(IX+%FFFFFFB8)
0039EC CD 00 00 00         A 15126    	CALL	__ladd
0039F0 DD2FC5              A 15127    	LD	(IX+%FFFFFFC5),HL
0039F3 DD73C8              A 15128    	LD	(IX+%FFFFFFC8),E
0039F6                     A 15129    L_787:
0039F6 DD07C5              A 15130    	LD	BC,(IX+%FFFFFFC5)
0039F9 DD7EC8              A 15131    	LD	A,(IX+%FFFFFFC8)
0039FC DD0FC1              A 15132    	LD	(IX+%FFFFFFC1),BC
0039FF DD77C4              A 15133    	LD	(IX+%FFFFFFC4),A
                           A 15134    ; 3508			}
003A02                     A 15135    L_791:
                           A 15136    .LINE 3508
                           A 15137    
                           A 15138    ; 3509			if (fs->fsize < (szbfat + (SS(f
                           A 15139    .LINE 3509
                           A 15140    
003A02 DD27C1              A 15141    	LD	HL,(IX+%FFFFFFC1)
003A05 DD5EC4              A 15142    	LD	E,(IX+%FFFFFFC4)
003A08 01FF0100            A 15143    	LD	BC,511
003A0C AF                  A 15144    	XOR	A,A
003A0D CD 00 00 00         A 15145    	CALL	__ladd
003A11 7B                  A 15146    	LD	A,E
003A12 E5C1                A 15147    	LD	BC,HL
003A14 2E09                A 15148    	LD	L,%9
003A16 CD 00 00 00         A 15149    	CALL	__lshru
003A1A DD31FD              A 15150    	LD	IY,(IX+%FFFFFFFD)
003A1D FD271E              A 15151    	LD	HL,(IY+%1E)
003A20 FD5E21              A 15152    	LD	E,(IY+%21)
003A23 CD 00 00 00         A 15153    	CALL	__lcmpu
003A27 30 08               A 15154    	JR	NC,L_792
003A29 210D0000            A 15155    	LD	HL,13
003A2D C3 5A 3B 00         A 15156    	JR	L_800
003A31                     A 15157    L_792:
                           A 15158    ; 3510	
                           A 15159    ; 3511	#if !FF_FS_READONLY
                           A 15160    ; 3512			/* Get FSInfo if available */
                           A 15161    ; 3513			fs->last_clst = fs->free_clst =
                           A 15162    .LINE 3513
                           A 15163    
003A31 01FFFFFF            A 15164    	LD	BC,16777215
003A35 DD31FD              A 15165    	LD	IY,(IX+%FFFFFFFD)
003A38 FD0F12              A 15166    	LD	(IY+%12),BC
003A3B FD3615FF            A 15167    	LD	(IY+%15),%FF
003A3F FD0712              A 15168    	LD	BC,(IY+%12)
003A42 FD7E15              A 15169    	LD	A,(IY+%15)
003A45 FD0F0E              A 15170    	LD	(IY+%E),BC
003A48 FD7711              A 15171    	LD	(IY+%11),A
                           A 15172    ; 3514			fs->fsi_flag = 0x80;
                           A 15173    .LINE 3514
                           A 15174    
003A4B FD360480            A 15175    	LD	(IY+%4),%80
                           A 15176    ; 3515	#if (FF_FS_NOFSINFO & 3) != 3
                           A 15177    ; 3516			if (fmt == FS_FAT32				
                           A 15178    ; 3517				&& ld_word(fs->win + BPB_FS
                           A 15179    .LINE 3517
                           A 15180    
003A4F DD7EE4              A 15181    	LD	A,(IX+%FFFFFFE4)
003A52 B7                  A 15182    	OR	A,A
003A53 C2 2B 3B 00         A 15183    	JR	NZ,L_799
                           A 15184    ; 3518				&& move_window(fs, bsect + 
                           A 15185    .LINE 3518
                           A 15186    
003A57 DD31FD              A 15187    	LD	IY,(IX+%FFFFFFFD)
003A5A ED0366              A 15188    	LEA	BC,IY+%66
003A5D C5                  A 15189    	PUSH	BC
003A5E CD 00 00 00         A 15190    	CALL	_ld_word
003A62 C1                  A 15191    	POP	BC
003A63 E5C1                A 15192    	LD	BC,HL
003A65 CD 00 00 00         A 15193    	CALL	__stoiu
003A69 01010000            A 15194    	LD	BC,1
003A6D B7                  A 15195    	OR	A,A
003A6E ED42                A 15196    	SBC	HL,BC
003A70 C2 2B 3B 00         A 15197    	JR	NZ,L_799
003A74 DD27DA              A 15198    	LD	HL,(IX+%FFFFFFDA)
003A77 DD5EDD              A 15199    	LD	E,(IX+%FFFFFFDD)
003A7A 3E01                A 15200    	LD	A,%1
003A7C CD 00 00 00         A 15201    	CALL	__ladd_b
003A80 4B                  A 15202    	LD	C,E
003A81 0600                A 15203    	LD	B,%0
003A83 C5                  A 15204    	PUSH	BC
003A84 E5                  A 15205    	PUSH	HL
003A85 DD07FD              A 15206    	LD	BC,(IX+%FFFFFFFD)
003A88 C5                  A 15207    	PUSH	BC
003A89 CD 1E 04 00         A 15208    	CALL	_move_window
003A8D C1                  A 15209    	POP	BC
003A8E C1                  A 15210    	POP	BC
003A8F C1                  A 15211    	POP	BC
003A90 01000000            A 15212    	LD	BC,0
003A94 B7                  A 15213    	OR	A,A
003A95 ED42                A 15214    	SBC	HL,BC
003A97 C2 2B 3B 00         A 15215    	JR	NZ,L_799
                           A 15216    ; 3519			{
                           A 15217    ; 3520				fs->fsi_flag = 0;
                           A 15218    .LINE 3520
                           A 15219    
003A9B DD31FD              A 15220    	LD	IY,(IX+%FFFFFFFD)
003A9E FD360400            A 15221    	LD	(IY+%4),%0
                           A 15222    ; 3521				if (ld_word(fs->win + BS_55
                           A 15223    ; 3522					&& ld_dword(fs->win + F
                           A 15224    .LINE 3522
                           A 15225    
003AA2 ED0336              A 15226    	LEA	BC,IY+%36
003AA5 DD0FCD              A 15227    	LD	(IX+%FFFFFFCD),BC
003AA8 01FE0100            A 15228    	LD	BC,510
003AAC DD27CD              A 15229    	LD	HL,(IX+%FFFFFFCD)
003AAF 09                  A 15230    	ADD	HL,BC
003AB0 E5                  A 15231    	PUSH	HL
003AB1 CD 00 00 00         A 15232    	CALL	_ld_word
003AB5 C1                  A 15233    	POP	BC
003AB6 E5C1                A 15234    	LD	BC,HL
003AB8 CD 00 00 00         A 15235    	CALL	__stoiu
003ABC 0155AA00            A 15236    	LD	BC,43605
003AC0 B7                  A 15237    	OR	A,A
003AC1 ED42                A 15238    	SBC	HL,BC
003AC3 20 66               A 15239    	JR	NZ,L_799
                           A 15240    ; 3523					&& ld_dword(fs->win + F
                           A 15241    .LINE 3523
                           A 15242    
003AC5 DD07CD              A 15243    	LD	BC,(IX+%FFFFFFCD)
003AC8 C5                  A 15244    	PUSH	BC
003AC9 CD 3C 00 00         A 15245    	CALL	_ld_dword
003ACD C1                  A 15246    	POP	BC
003ACE 01525261            A 15247    	LD	BC,6378066
003AD2 3E41                A 15248    	LD	A,%41
003AD4 CD 00 00 00         A 15249    	CALL	__lcmpu
003AD8 20 51               A 15250    	JR	NZ,L_799
003ADA DD31FD              A 15251    	LD	IY,(IX+%FFFFFFFD)
003ADD ED0336              A 15252    	LEA	BC,IY+%36
003AE0 DD0FE1              A 15253    	LD	(IX+%FFFFFFE1),BC
003AE3 01E40100            A 15254    	LD	BC,484
003AE7 DD27E1              A 15255    	LD	HL,(IX+%FFFFFFE1)
003AEA 09                  A 15256    	ADD	HL,BC
003AEB E5                  A 15257    	PUSH	HL
003AEC CD 3C 00 00         A 15258    	CALL	_ld_dword
003AF0 C1                  A 15259    	POP	BC
003AF1 01727241            A 15260    	LD	BC,4289138
003AF5 3E61                A 15261    	LD	A,%61
003AF7 CD 00 00 00         A 15262    	CALL	__lcmpu
003AFB 20 2E               A 15263    	JR	NZ,L_799
                           A 15264    ; 3524				{
                           A 15265    ; 3525	#if (FF_FS_NOFSINFO & 1) == 0
                           A 15266    ; 3526					fs->free_clst = ld_dwor
                           A 15267    .LINE 3526
                           A 15268    
003AFD 01E80100            A 15269    	LD	BC,488
003B01 DD27E1              A 15270    	LD	HL,(IX+%FFFFFFE1)
003B04 09                  A 15271    	ADD	HL,BC
003B05 E5                  A 15272    	PUSH	HL
003B06 CD 3C 00 00         A 15273    	CALL	_ld_dword
003B0A C1                  A 15274    	POP	BC
003B0B DD31FD              A 15275    	LD	IY,(IX+%FFFFFFFD)
003B0E FD2F12              A 15276    	LD	(IY+%12),HL
003B11 FD7315              A 15277    	LD	(IY+%15),E
                           A 15278    ; 3527	#endif
                           A 15279    ; 3528	#if (FF_FS_NOFSINFO & 2) == 0
                           A 15280    ; 3529					fs->last_clst = ld_dwor
                           A 15281    .LINE 3529
                           A 15282    
003B14 01EC0100            A 15283    	LD	BC,492
003B18 DD27E1              A 15284    	LD	HL,(IX+%FFFFFFE1)
003B1B 09                  A 15285    	ADD	HL,BC
003B1C E5                  A 15286    	PUSH	HL
003B1D CD 3C 00 00         A 15287    	CALL	_ld_dword
003B21 C1                  A 15288    	POP	BC
003B22 DD31FD              A 15289    	LD	IY,(IX+%FFFFFFFD)
003B25 FD2F0E              A 15290    	LD	(IY+%E),HL
003B28 FD7311              A 15291    	LD	(IY+%11),E
                           A 15292    ; 3530	#endif
                           A 15293    ; 3531				}
                           A 15294    ; 3532			}
                           A 15295    ; 3533	#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
                           A 15296    ; 3534	#endif	/* !FF_FS_READONLY */
                           A 15297    ; 3535		}
003B2B                     A 15298    L_799:
                           A 15299    .LINE 3535
                           A 15300    
                           A 15301    ; 3536	
                           A 15302    ; 3537		fs->fs_type = (BYTE)fmt;/* FAT sub-
                           A 15303    .LINE 3537
                           A 15304    
003B2B DD7EFA              A 15305    	LD	A,(IX+%FFFFFFFA)
003B2E DD31FD              A 15306    	LD	IY,(IX+%FFFFFFFD)
003B31 FD7700              A 15307    	LD	(IY+%0),A
                           A 15308    ; 3538		fs->id = ++Fsid;		/* Volume m
                           A 15309    .LINE 3538
                           A 15310    
003B34 ED4B 03 00 00       A 15311    	LD	BC,(_Fsid)
003B39 03                  A 15312    	INC	BC
003B3A 21 03 00 00         A 15313    	LD	HL,_Fsid
003B3E 71                  A 15314    	LD	(HL),C
003B3F 23                  A 15315    	INC	HL
003B40 70                  A 15316    	LD	(HL),B
003B41 ED4B 03 00 00       A 15317    	LD	BC,(_Fsid)
003B46 FD7105              A 15318    	LD	(IY+%5),C
003B49 FD7006              A 15319    	LD	(IY+%6),B
                           A 15320    ; 3539	#if FF_USE_LFN == 1
                           A 15321    ; 3540		fs->lfnbuf = LfnBuf;	/* Static L
                           A 15322    ; 3541	#if FF_FS_EXFAT
                           A 15323    ; 3542		fs->dirbuf = DirBuf;	/* Static d
                           A 15324    ; 3543	#endif
                           A 15325    ; 3544	#endif
                           A 15326    ; 3545	#if FF_FS_RPATH != 0
                           A 15327    ; 3546		fs->cdir = 0;			/* Initiali
                           A 15328    .LINE 3546
                           A 15329    
003B4C 01000000            A 15330    	LD	BC,0
003B50 FD0F16              A 15331    	LD	(IY+%16),BC
003B53 FD361900            A 15332    	LD	(IY+%19),%0
                           A 15333    ; 3547	#endif
                           A 15334    ; 3548	#if FF_FS_LOCK != 0			/* Clear fi
                           A 15335    ; 3549		clear_lock(fs);
                           A 15336    ; 3550	#endif
                           A 15337    ; 3551		return FR_OK;
                           A 15338    .LINE 3551
                           A 15339    
003B57 B7                  A 15340    	OR	A,A
003B58 ED62                A 15341    	SBC	HL,HL
                           A 15342    ; 3552	}
003B5A                     A 15343    L_800:
                           A 15344    .LINE 3552
                           A 15345    
003B5A DDF9                A 15346    	LD	SP,IX
003B5C DDE1                A 15347    	POP	IX
003B5E C9                  A 15348    	RET	
                           A 15349    
                           A 15350    
                           A 15351    ;**************************** _mount_volume ***
                           A 15352    ;Name                         Addr/Register   S
                           A 15353    ;_Fsid                               STATIC    
                           A 15354    ;_disk_initialize                    IMPORT  --
                           A 15355    ;_disk_status                        IMPORT  --
                           A 15356    ;_FatFs                              STATIC    
                           A 15357    ;szbfat                               IX-63    
                           A 15358    ;temp784                              IX-59    
                           A 15359    ;sysect                               IX-55    
                           A 15360    ;G_56                                 IX-51    
                           A 15361    ;G_54                                 IX-48    
                           A 15362    ;G_53                                 IX-45    
                           A 15363    ;tsect                                IX-42    
                           A 15364    ;bsect                                IX-38    
                           A 15365    ;vol                                  IX-34    
                           A 15366    ;G_57                                 IX-31    
                           A 15367    ;G_55                                 IX-28    
                           A 15368    ;G_52                                 IX-27    
                           A 15369    ;nrsv                                 IX-24    
                           A 15370    ;nclst                                IX-22    
                           A 15371    ;G_50                                 IX-18    
                           A 15372    ;G_47                                 IX-17    
                           A 15373    ;G_51                                 IX-14    
                           A 15374    ;G_49                                 IX-12    
                           A 15375    ;fasize                               IX-11    
                           A 15376    ;stat                                  IX-7    
                           A 15377    ;fmt                                   IX-6    
                           A 15378    ;fs                                    IX-3    
                           A 15379    ;mode                                 IX+12    
                           A 15380    ;rfs                                   IX+9    
                           A 15381    ;path                                  IX+6    
                           A 15382    
                           A 15383    
                           A 15384    ; Stack Frame Size: 94 (bytes)
                           A 15385    ;       Spill Code: -3 (instruction)
                           A 15386    
                           A 15387    
                           A 15388    .ENDFUNC "mount_volume",3552,"_mount_volume"
                           A 15389    ; 3553	
                           A 15390    ; 3554	
                           A 15391    ; 3555	
                           A 15392    ; 3556	
                           A 15393    ; 3557	/*-------------------------------------
                           A 15394    ; 3558	/* Check if the file/directory object i
                           A 15395    ; 3559	/*-------------------------------------
                           A 15396    ; 3560	
                           A 15397    ; 3561	static FRESULT validate (	/* Returns 
                           A 15398    ; 3562		FFOBJID* obj,			/* Pointer 
                           A 15399    ; 3563		FATFS** rfs				/* Pointer 
                           A 15400    ; 3564	)
                           A 15401    ; 3565	{
003B5F                     A 15402    _validate:
                           A 15403    .DEFINE "_validate"
                           A 15404    
                           A 15405    .VALUE _validate
                           A 15406    
                           A 15407    .CLASS 3
                           A 15408    
                           A 15409    .TYPE 68
                           A 15410    
                           A 15411    .ENDEF
                           A 15412    
                           A 15413    .BEGFUNC "validate",3565,"_validate"
                           A 15414    
                           A 15415    .LINE 3565
                           A 15416    
                           A 15417    .DEFINE "obj"
                           A 15418    
                           A 15419    .CLASS 65
                           A 15420    
                           A 15421    .VALUE 6
                           A 15422    
                           A 15423    .TAG "NONAME1"
                           A 15424    
                           A 15425    .TYPE 40
                           A 15426    
                           A 15427    .ENDEF
                           A 15428    
                           A 15429    .DEFINE "rfs"
                           A 15430    
                           A 15431    .CLASS 65
                           A 15432    
                           A 15433    .VALUE 9
                           A 15434    
                           A 15435    .TAG "NONAME0"
                           A 15436    
                           A 15437    .TYPE 296
                           A 15438    
                           A 15439    .ENDEF
                           A 15440    
                           A 15441    .DEFINE "res"
                           A 15442    
                           A 15443    .CLASS 65
                           A 15444    
                           A 15445    .VALUE -6
                           A 15446    
                           A 15447    .TYPE 4
                           A 15448    
                           A 15449    .ENDEF
                           A 15450    
003B5F DDE5                A 15451    	PUSH	IX
003B61 DD210000 00         A 15452    	LD	IX,0
003B66 DD39                A 15453    	ADD	IX,SP
003B68 C5                  A 15454    	PUSH	BC
003B69 C5                  A 15455    	PUSH	BC
003B6A C5                  A 15456    	PUSH	BC
                           A 15457    ; 3566		FRESULT res = FR_INVALID_OBJECT;
                           A 15458    .LINE 3566
                           A 15459    
003B6B 01090000            A 15460    	LD	BC,9
003B6F DD0FFA              A 15461    	LD	(IX+%FFFFFFFA),BC
                           A 15462    ; 3567	
                           A 15463    ; 3568	
                           A 15464    ; 3569		if (obj && obj->fs && obj->fs->fs_t
                           A 15465    .LINE 3569
                           A 15466    
003B72 01000000            A 15467    	LD	BC,0
003B76 DD2706              A 15468    	LD	HL,(IX+%6)
003B79 B7                  A 15469    	OR	A,A
003B7A ED42                A 15470    	SBC	HL,BC
003B7C 28 49               A 15471    	JR	Z,L_810
003B7E DD3106              A 15472    	LD	IY,(IX+%6)
003B81 FD0700              A 15473    	LD	BC,(IY+%0)
003B84 DD0FFD              A 15474    	LD	(IX+%FFFFFFFD),BC
003B87 01000000            A 15475    	LD	BC,0
003B8B DD27FD              A 15476    	LD	HL,(IX+%FFFFFFFD)
003B8E B7                  A 15477    	OR	A,A
003B8F ED42                A 15478    	SBC	HL,BC
003B91 28 34               A 15479    	JR	Z,L_810
003B93 DD31FD              A 15480    	LD	IY,(IX+%FFFFFFFD)
003B96 FD7E00              A 15481    	LD	A,(IY+%0)
003B99 B7                  A 15482    	OR	A,A
003B9A 28 2B               A 15483    	JR	Z,L_810
003B9C DD31FD              A 15484    	LD	IY,(IX+%FFFFFFFD)
003B9F FD0705              A 15485    	LD	BC,(IY+%5)
003BA2 DD3106              A 15486    	LD	IY,(IX+%6)
003BA5 FD2703              A 15487    	LD	HL,(IY+%3)
003BA8 B7                  A 15488    	OR	A,A
003BA9 40ED42              A 15489    	SBC.SIS	HL,BC
003BAC 20 19               A 15490    	JR	NZ,L_810
                           A 15491    ; 3570	#if FF_FS_REENTRANT
                           A 15492    ; 3571			if (lock_fs(obj->fs)) {	/* Obta
                           A 15493    ; 3572				if (!(disk_status(obj->fs->
                           A 15494    ; 3573					res = FR_OK;
                           A 15495    ; 3574				} else {
                           A 15496    ; 3575					unlock_fs(obj->fs, FR_O
                           A 15497    ; 3576				}
                           A 15498    ; 3577			} else {
                           A 15499    ; 3578				res = FR_TIMEOUT;
                           A 15500    ; 3579			}
                           A 15501    ; 3580	#else
                           A 15502    ; 3581			if (!(disk_status(obj->fs->pdrv
                           A 15503    .LINE 3581
                           A 15504    
003BAE DD31FD              A 15505    	LD	IY,(IX+%FFFFFFFD)
003BB1 FD4E01              A 15506    	LD	C,(IY+%1)
003BB4 0600                A 15507    	LD	B,%0
003BB6 C5                  A 15508    	PUSH	BC
003BB7 CD 00 00 00         A 15509    	CALL	_disk_status
003BBB C1                  A 15510    	POP	BC
003BBC E601                A 15511    	AND	A,%1
003BBE 20 07               A 15512    	JR	NZ,L_810
                           A 15513    ; 3582				res = FR_OK;
                           A 15514    .LINE 3582
                           A 15515    
003BC0 01000000            A 15516    	LD	BC,0
003BC4 DD0FFA              A 15517    	LD	(IX+%FFFFFFFA),BC
                           A 15518    ; 3583			}
                           A 15519    ; 3584	#endif
                           A 15520    ; 3585		}
003BC7                     A 15521    L_810:
                           A 15522    .LINE 3585
                           A 15523    
                           A 15524    ; 3586		*rfs = (res == FR_OK) ? obj->fs : 0
                           A 15525    .LINE 3586
                           A 15526    
003BC7 01000000            A 15527    	LD	BC,0
003BCB DD27FA              A 15528    	LD	HL,(IX+%FFFFFFFA)
003BCE B7                  A 15529    	OR	A,A
003BCF ED42                A 15530    	SBC	HL,BC
003BD1 20 0B               A 15531    	JR	NZ,L_808
003BD3 DD3106              A 15532    	LD	IY,(IX+%6)
003BD6 FD0700              A 15533    	LD	BC,(IY+%0)
003BD9 DD0FF7              A 15534    	LD	(IX+%FFFFFFF7),BC
003BDC 18 03               A 15535    	JR	L_809
003BDE                     A 15536    L_808:
003BDE DD0FF7              A 15537    	LD	(IX+%FFFFFFF7),BC
003BE1                     A 15538    L_809:
003BE1 DD2709              A 15539    	LD	HL,(IX+%9)
003BE4 DD07F7              A 15540    	LD	BC,(IX+%FFFFFFF7)
003BE7 ED0F                A 15541    	LD	(HL),BC
                           A 15542    ; 3587		return res;
                           A 15543    .LINE 3587
                           A 15544    
003BE9 DD27FA              A 15545    	LD	HL,(IX+%FFFFFFFA)
                           A 15546    ; 3588	}
                           A 15547    .LINE 3588
                           A 15548    
003BEC DDF9                A 15549    	LD	SP,IX
003BEE DDE1                A 15550    	POP	IX
003BF0 C9                  A 15551    	RET	
                           A 15552    
                           A 15553    
                           A 15554    ;**************************** _validate *******
                           A 15555    ;Name                         Addr/Register   S
                           A 15556    ;_disk_status                        IMPORT  --
                           A 15557    ;temp806                               IX-9    
                           A 15558    ;res                                   IX-6    
                           A 15559    ;G_58                                  IX-3    
                           A 15560    ;rfs                                   IX+9    
                           A 15561    ;obj                                   IX+6    
                           A 15562    
                           A 15563    
                           A 15564    ; Stack Frame Size: 21 (bytes)
                           A 15565    ;       Spill Code: -3 (instruction)
                           A 15566    
                           A 15567    
                           A 15568    .ENDFUNC "validate",3588,"_validate"
                           A 15569    ; 3589	
                           A 15570    ; 3590	
                           A 15571    ; 3591	
                           A 15572    ; 3592	
                           A 15573    ; 3593	/*-------------------------------------
                           A 15574    ; 3594	
                           A 15575    ; 3595	   Public Functions (FatFs API)
                           A 15576    ; 3596	
                           A 15577    ; 3597	---------------------------------------
                           A 15578    ; 3598	
                           A 15579    ; 3599	
                           A 15580    ; 3600	
                           A 15581    ; 3601	/*-------------------------------------
                           A 15582    ; 3602	/* Mount/Unmount a Logical Drive       
                           A 15583    ; 3603	/*-------------------------------------
                           A 15584    ; 3604	
                           A 15585    ; 3605	FRESULT f_mount (
                           A 15586    ; 3606		FATFS* fs,			/* Pointer to t
                           A 15587    ; 3607		const TCHAR* path,	/* Logical driv
                           A 15588    ; 3608		BYTE opt			/* Mount option
                           A 15589    ; 3609	)
                           A 15590    ; 3610	{
003BF1                     A 15591    _f_mount:
                           A 15592    .DEFINE "_f_mount"
                           A 15593    
                           A 15594    .VALUE _f_mount
                           A 15595    
                           A 15596    .CLASS 2
                           A 15597    
                           A 15598    .TYPE 68
                           A 15599    
                           A 15600    .ENDEF
                           A 15601    
                           A 15602    .BEGFUNC "f_mount",3610,"_f_mount"
                           A 15603    
                           A 15604    .LINE 3610
                           A 15605    
                           A 15606    .DEFINE "fs"
                           A 15607    
                           A 15608    .CLASS 65
                           A 15609    
                           A 15610    .VALUE 6
                           A 15611    
                           A 15612    .TAG "NONAME0"
                           A 15613    
                           A 15614    .TYPE 40
                           A 15615    
                           A 15616    .ENDEF
                           A 15617    
                           A 15618    .DEFINE "path"
                           A 15619    
                           A 15620    .CLASS 65
                           A 15621    
                           A 15622    .VALUE 9
                           A 15623    
                           A 15624    .TYPE 194
                           A 15625    
                           A 15626    .ENDEF
                           A 15627    
                           A 15628    .DEFINE "opt"
                           A 15629    
                           A 15630    .CLASS 65
                           A 15631    
                           A 15632    .VALUE 12
                           A 15633    
                           A 15634    .TYPE 12
                           A 15635    
                           A 15636    .ENDEF
                           A 15637    
                           A 15638    .DEFINE "cfs"
                           A 15639    
                           A 15640    .CLASS 65
                           A 15641    
                           A 15642    .VALUE -3
                           A 15643    
                           A 15644    .TAG "NONAME0"
                           A 15645    
                           A 15646    .TYPE 40
                           A 15647    
                           A 15648    .ENDEF
                           A 15649    
                           A 15650    .DEFINE "vol"
                           A 15651    
                           A 15652    .CLASS 65
                           A 15653    
                           A 15654    .VALUE -6
                           A 15655    
                           A 15656    .TYPE 4
                           A 15657    
                           A 15658    .ENDEF
                           A 15659    
                           A 15660    .DEFINE "res"
                           A 15661    
                           A 15662    .CLASS 65
                           A 15663    
                           A 15664    .VALUE -12
                           A 15665    
                           A 15666    .TYPE 4
                           A 15667    
                           A 15668    .ENDEF
                           A 15669    
                           A 15670    .DEFINE "rp"
                           A 15671    
                           A 15672    .CLASS 65
                           A 15673    
                           A 15674    .VALUE -15
                           A 15675    
                           A 15676    .TYPE 194
                           A 15677    
                           A 15678    .ENDEF
                           A 15679    
003BF1 DDE5                A 15680    	PUSH	IX
003BF3 DD210000 00         A 15681    	LD	IX,0
003BF8 DD39                A 15682    	ADD	IX,SP
003BFA ED22F1              A 15683    	LEA	HL,IX+%FFFFFFF1
003BFD F9                  A 15684    	LD	SP,HL
                           A 15685    ; 3611		FATFS *cfs;
                           A 15686    ; 3612		int vol;
                           A 15687    ; 3613		FRESULT res;
                           A 15688    ; 3614		const TCHAR *rp = path;
                           A 15689    .LINE 3614
                           A 15690    
003BFE DD0709              A 15691    	LD	BC,(IX+%9)
003C01 DD0FF1              A 15692    	LD	(IX+%FFFFFFF1),BC
                           A 15693    ; 3615	
                           A 15694    ; 3616	
                           A 15695    ; 3617		/* Get logical drive number */
                           A 15696    ; 3618		vol = get_ldnumber(&rp);
                           A 15697    .LINE 3618
                           A 15698    
003C04 ED65F1              A 15699    	PEA	IX+%FFFFFFF1
003C07 CD 6C 30 00         A 15700    	CALL	_get_ldnumber
003C0B C1                  A 15701    	POP	BC
003C0C DD2FFA              A 15702    	LD	(IX+%FFFFFFFA),HL
                           A 15703    ; 3619		if (vol < 0) return FR_INVALID_DRIV
                           A 15704    .LINE 3619
                           A 15705    
003C0F 01000000            A 15706    	LD	BC,0
003C13 DD27FA              A 15707    	LD	HL,(IX+%FFFFFFFA)
003C16 B7                  A 15708    	OR	A,A
003C17 ED42                A 15709    	SBC	HL,BC
003C19 F2 23 3C 00         A 15710    	JP	P,L_813
003C1D 210B0000            A 15711    	LD	HL,11
003C21 18 5E               A 15712    	JR	L_820
003C23                     A 15713    L_813:
                           A 15714    ; 3620		cfs = FatFs[vol];					
                           A 15715    .LINE 3620
                           A 15716    
003C23 DD27FA              A 15717    	LD	HL,(IX+%FFFFFFFA)
003C26 E5C1                A 15718    	LD	BC,HL
003C28 29                  A 15719    	ADD	HL,HL
003C29 09                  A 15720    	ADD	HL,BC
003C2A 01 00 00 00         A 15721    	LD	BC,_FatFs
003C2E 09                  A 15722    	ADD	HL,BC
003C2F DD2FF7              A 15723    	LD	(IX+%FFFFFFF7),HL
003C32 ED07                A 15724    	LD	BC,(HL)
003C34 DD0FFD              A 15725    	LD	(IX+%FFFFFFFD),BC
                           A 15726    ; 3621	
                           A 15727    ; 3622		if (cfs) {
                           A 15728    .LINE 3622
                           A 15729    
003C37 01000000            A 15730    	LD	BC,0
003C3B DD27FD              A 15731    	LD	HL,(IX+%FFFFFFFD)
003C3E B7                  A 15732    	OR	A,A
003C3F ED42                A 15733    	SBC	HL,BC
003C41 28 07               A 15734    	JR	Z,L_816
                           A 15735    ; 3623	#if FF_FS_LOCK != 0
                           A 15736    ; 3624			clear_lock(cfs);
                           A 15737    ; 3625	#endif
                           A 15738    ; 3626	#if FF_FS_REENTRANT						
                           A 15739    ; 3627			if (!ff_del_syncobj(cfs->sobj))
                           A 15740    ; 3628	#endif
                           A 15741    ; 3629			cfs->fs_type = 0;				
                           A 15742    .LINE 3629
                           A 15743    
003C43 DD31FD              A 15744    	LD	IY,(IX+%FFFFFFFD)
003C46 FD360000            A 15745    	LD	(IY+%0),%0
                           A 15746    ; 3630		}
003C4A                     A 15747    L_816:
                           A 15748    .LINE 3630
                           A 15749    
                           A 15750    ; 3631	
                           A 15751    ; 3632		if (fs) {
                           A 15752    .LINE 3632
                           A 15753    
003C4A DD2706              A 15754    	LD	HL,(IX+%6)
003C4D B7                  A 15755    	OR	A,A
003C4E ED42                A 15756    	SBC	HL,BC
003C50 28 07               A 15757    	JR	Z,L_817
                           A 15758    ; 3633			fs->fs_type = 0;				
                           A 15759    .LINE 3633
                           A 15760    
003C52 DD3106              A 15761    	LD	IY,(IX+%6)
003C55 FD360000            A 15762    	LD	(IY+%0),%0
                           A 15763    ; 3634	#if FF_FS_REENTRANT						
                           A 15764    ; 3635			if (!ff_cre_syncobj((BYTE)vol, 
                           A 15765    ; 3636	#endif
                           A 15766    ; 3637		}
003C59                     A 15767    L_817:
                           A 15768    .LINE 3637
                           A 15769    
                           A 15770    ; 3638		FatFs[vol] = fs;					
                           A 15771    .LINE 3638
                           A 15772    
003C59 DD27F7              A 15773    	LD	HL,(IX+%FFFFFFF7)
003C5C DD0706              A 15774    	LD	BC,(IX+%6)
003C5F ED0F                A 15775    	LD	(HL),BC
                           A 15776    ; 3639	
                           A 15777    ; 3640		if (opt == 0) return FR_OK;			
                           A 15778    .LINE 3640
                           A 15779    
003C61 DD7E0C              A 15780    	LD	A,(IX+%C)
003C64 B7                  A 15781    	OR	A,A
003C65 20 05               A 15782    	JR	NZ,L_819
003C67 B7                  A 15783    	OR	A,A
003C68 ED62                A 15784    	SBC	HL,HL
003C6A 18 15               A 15785    	JR	L_820
003C6C                     A 15786    L_819:
                           A 15787    ; 3641	
                           A 15788    ; 3642		res = mount_volume(&path, &fs, 0);	
                           A 15789    .LINE 3642
                           A 15790    
003C6C 01000000            A 15791    	LD	BC,0
003C70 C5                  A 15792    	PUSH	BC
003C71 ED6506              A 15793    	PEA	IX+%6
003C74 ED6509              A 15794    	PEA	IX+%9
003C77 CD A9 34 00         A 15795    	CALL	_mount_volume
003C7B C1                  A 15796    	POP	BC
003C7C C1                  A 15797    	POP	BC
003C7D C1                  A 15798    	POP	BC
003C7E DD2FF4              A 15799    	LD	(IX+%FFFFFFF4),HL
                           A 15800    ; 3643		LEAVE_FF(fs, res);
                           A 15801    .LINE 3643
                           A 15802    
                           A 15803    ; 3644	}
003C81                     A 15804    L_820:
                           A 15805    .LINE 3644
                           A 15806    
003C81 DDF9                A 15807    	LD	SP,IX
003C83 DDE1                A 15808    	POP	IX
003C85 C9                  A 15809    	RET	
                           A 15810    
                           A 15811    
                           A 15812    ;**************************** _f_mount ********
                           A 15813    ;Name                         Addr/Register   S
                           A 15814    ;_FatFs                              STATIC    
                           A 15815    ;rp                                   IX-15    
                           A 15816    ;res                                  IX-12    
                           A 15817    ;G_61                                  IX-9    
                           A 15818    ;vol                                   IX-6    
                           A 15819    ;cfs                                   IX-3    
                           A 15820    ;opt                                  IX+12    
                           A 15821    ;path                                  IX+9    
                           A 15822    ;fs                                    IX+6    
                           A 15823    
                           A 15824    
                           A 15825    ; Stack Frame Size: 30 (bytes)
                           A 15826    ;       Spill Code: -3 (instruction)
                           A 15827    
                           A 15828    
                           A 15829    .ENDFUNC "f_mount",3644,"_f_mount"
                           A 15830    ; 3645	
                           A 15831    ; 3646	
                           A 15832    ; 3647	
                           A 15833    ; 3648	
                           A 15834    ; 3649	/*-------------------------------------
                           A 15835    ; 3650	/* Open or Create a File               
                           A 15836    ; 3651	/*-------------------------------------
                           A 15837    ; 3652	
                           A 15838    ; 3653	FRESULT f_open (
                           A 15839    ; 3654		FIL* fp,			/* Pointer to t
                           A 15840    ; 3655		const TCHAR* path,	/* Pointer to t
                           A 15841    ; 3656		BYTE mode			/* Access mode 
                           A 15842    ; 3657	)
                           A 15843    ; 3658	{
003C86                     A 15844    _f_open:
                           A 15845    .DEFINE "_f_open"
                           A 15846    
                           A 15847    .VALUE _f_open
                           A 15848    
                           A 15849    .CLASS 2
                           A 15850    
                           A 15851    .TYPE 68
                           A 15852    
                           A 15853    .ENDEF
                           A 15854    
                           A 15855    .BEGFUNC "f_open",3658,"_f_open"
                           A 15856    
                           A 15857    .LINE 3658
                           A 15858    
                           A 15859    .DEFINE "fp"
                           A 15860    
                           A 15861    .CLASS 65
                           A 15862    
                           A 15863    .VALUE 6
                           A 15864    
                           A 15865    .TAG "NONAME2"
                           A 15866    
                           A 15867    .TYPE 40
                           A 15868    
                           A 15869    .ENDEF
                           A 15870    
                           A 15871    .DEFINE "path"
                           A 15872    
                           A 15873    .CLASS 65
                           A 15874    
                           A 15875    .VALUE 9
                           A 15876    
                           A 15877    .TYPE 194
                           A 15878    
                           A 15879    .ENDEF
                           A 15880    
                           A 15881    .DEFINE "mode"
                           A 15882    
                           A 15883    .CLASS 65
                           A 15884    
                           A 15885    .VALUE 12
                           A 15886    
                           A 15887    .TYPE 12
                           A 15888    
                           A 15889    .ENDEF
                           A 15890    
                           A 15891    .DEFINE "res"
                           A 15892    
                           A 15893    .CLASS 65
                           A 15894    
                           A 15895    .VALUE -3
                           A 15896    
                           A 15897    .TYPE 4
                           A 15898    
                           A 15899    .ENDEF
                           A 15900    
                           A 15901    .DEFINE "fs"
                           A 15902    
                           A 15903    .CLASS 65
                           A 15904    
                           A 15905    .VALUE -6
                           A 15906    
                           A 15907    .TAG "NONAME0"
                           A 15908    
                           A 15909    .TYPE 40
                           A 15910    
                           A 15911    .ENDEF
                           A 15912    
                           A 15913    .DEFINE "clst"
                           A 15914    
                           A 15915    .CLASS 65
                           A 15916    
                           A 15917    .VALUE -10
                           A 15918    
                           A 15919    .TYPE 15
                           A 15920    
                           A 15921    .ENDEF
                           A 15922    
                           A 15923    .DEFINE "ofs"
                           A 15924    
                           A 15925    .CLASS 65
                           A 15926    
                           A 15927    .VALUE -14
                           A 15928    
                           A 15929    .TYPE 15
                           A 15930    
                           A 15931    .ENDEF
                           A 15932    
                           A 15933    .DEFINE "sc"
                           A 15934    
                           A 15935    .CLASS 65
                           A 15936    
                           A 15937    .VALUE -18
                           A 15938    
                           A 15939    .TYPE 15
                           A 15940    
                           A 15941    .ENDEF
                           A 15942    
                           A 15943    .DEFINE "cl"
                           A 15944    
                           A 15945    .CLASS 65
                           A 15946    
                           A 15947    .VALUE -28
                           A 15948    
                           A 15949    .TYPE 15
                           A 15950    
                           A 15951    .ENDEF
                           A 15952    
                           A 15953    .DEFINE "bcs"
                           A 15954    
                           A 15955    .CLASS 65
                           A 15956    
                           A 15957    .VALUE -32
                           A 15958    
                           A 15959    .TYPE 15
                           A 15960    
                           A 15961    .ENDEF
                           A 15962    
                           A 15963    .DEFINE "tm"
                           A 15964    
                           A 15965    .CLASS 65
                           A 15966    
                           A 15967    .VALUE -36
                           A 15968    
                           A 15969    .TYPE 15
                           A 15970    
                           A 15971    .ENDEF
                           A 15972    
                           A 15973    .DEFINE "dj"
                           A 15974    
                           A 15975    .CLASS 65
                           A 15976    
                           A 15977    .VALUE -82
                           A 15978    
                           A 15979    .TAG "NONAME3"
                           A 15980    
                           A 15981    .TYPE 8
                           A 15982    
                           A 15983    .ENDEF
                           A 15984    
                           A 15985    .DEFINE "lbuf"
                           A 15986    
                           A 15987    .CLASS 65
                           A 15988    
                           A 15989    .VALUE -594
                           A 15990    
                           A 15991    .DIM 256
                           A 15992    
                           A 15993    .TYPE 109
                           A 15994    
                           A 15995    .ENDEF
                           A 15996    
003C86 DDE5                A 15997    	PUSH	IX
003C88 DD210000 00         A 15998    	LD	IX,0
003C8D DD39                A 15999    	ADD	IX,SP
003C8F 21A8FDFF            A 16000    	LD	HL,-600
003C93 39                  A 16001    	ADD	HL,SP
003C94 F9                  A 16002    	LD	SP,HL
                           A 16003    ; 3659		FRESULT res;
                           A 16004    ; 3660		DIR dj;
                           A 16005    ; 3661		FATFS *fs;
                           A 16006    ; 3662	#if !FF_FS_READONLY
                           A 16007    ; 3663		DWORD cl, bcs, clst, tm;
                           A 16008    ; 3664		LBA_t sc;
                           A 16009    ; 3665		FSIZE_t ofs;
                           A 16010    ; 3666	#endif
                           A 16011    ; 3667		DEF_NAMBUF
                           A 16012    ; 3668	
                           A 16013    ; 3669	
                           A 16014    ; 3670		if (!fp) return FR_INVALID_OBJECT;
                           A 16015    .LINE 3670
                           A 16016    
003C95 01000000            A 16017    	LD	BC,0
003C99 DD2706              A 16018    	LD	HL,(IX+%6)
003C9C B7                  A 16019    	OR	A,A
003C9D ED42                A 16020    	SBC	HL,BC
003C9F 20 08               A 16021    	JR	NZ,L_822
003CA1 21090000            A 16022    	LD	HL,9
003CA5 C3 53 41 00         A 16023    	JR	L_870
003CA9                     A 16024    L_822:
                           A 16025    ; 3671	
                           A 16026    ; 3672		/* Get logical drive number */
                           A 16027    ; 3673		mode &= FF_FS_READONLY ? FA_READ : 
                           A 16028    .LINE 3673
                           A 16029    
003CA9 DD7E0C              A 16030    	LD	A,(IX+%C)
003CAC E63F                A 16031    	AND	A,%3F
003CAE DD770C              A 16032    	LD	(IX+%C),A
                           A 16033    ; 3674		res = mount_volume(&path, &fs, mode
                           A 16034    .LINE 3674
                           A 16035    
003CB1 DD4E0C              A 16036    	LD	C,(IX+%C)
003CB4 0600                A 16037    	LD	B,%0
003CB6 C5                  A 16038    	PUSH	BC
003CB7 ED65FA              A 16039    	PEA	IX+%FFFFFFFA
003CBA ED6509              A 16040    	PEA	IX+%9
003CBD CD A9 34 00         A 16041    	CALL	_mount_volume
003CC1 C1                  A 16042    	POP	BC
003CC2 C1                  A 16043    	POP	BC
003CC3 C1                  A 16044    	POP	BC
003CC4 DD2FFD              A 16045    	LD	(IX+%FFFFFFFD),HL
                           A 16046    ; 3675		if (res == FR_OK) {
                           A 16047    .LINE 3675
                           A 16048    
003CC7 01000000            A 16049    	LD	BC,0
003CCB DD27FD              A 16050    	LD	HL,(IX+%FFFFFFFD)
003CCE B7                  A 16051    	OR	A,A
003CCF ED42                A 16052    	SBC	HL,BC
003CD1 C2 3E 41 00         A 16053    	JR	NZ,L_868
                           A 16054    ; 3676			dj.obj.fs = fs;
                           A 16055    .LINE 3676
                           A 16056    
003CD5 DD07FA              A 16057    	LD	BC,(IX+%FFFFFFFA)
003CD8 DD0FAE              A 16058    	LD	(IX+%FFFFFFAE),BC
                           A 16059    ; 3677			INIT_NAMBUF(fs);
                           A 16060    .LINE 3677
                           A 16061    
003CDB DDE5E1              A 16062    	LD	HL,IX
003CDE 01AEFDFF            A 16063    	LD	BC,-594
003CE2 09                  A 16064    	ADD	HL,BC
003CE3 DD31FA              A 16065    	LD	IY,(IX+%FFFFFFFA)
003CE6 FD2F0B              A 16066    	LD	(IY+%B),HL
                           A 16067    ; 3678			res = follow_path(&dj, path);	
                           A 16068    .LINE 3678
                           A 16069    
003CE9 DD0709              A 16070    	LD	BC,(IX+%9)
003CEC C5                  A 16071    	PUSH	BC
003CED ED65AE              A 16072    	PEA	IX+%FFFFFFAE
003CF0 CD DA 2E 00         A 16073    	CALL	_follow_path
003CF4 C1                  A 16074    	POP	BC
003CF5 C1                  A 16075    	POP	BC
003CF6 DD2FFD              A 16076    	LD	(IX+%FFFFFFFD),HL
                           A 16077    ; 3679	#if !FF_FS_READONLY	/* Read/Write confi
                           A 16078    ; 3680			if (res == FR_OK) {
                           A 16079    .LINE 3680
                           A 16080    
003CF9 01000000            A 16081    	LD	BC,0
003CFD DD27FD              A 16082    	LD	HL,(IX+%FFFFFFFD)
003D00 B7                  A 16083    	OR	A,A
003D01 ED42                A 16084    	SBC	HL,BC
003D03 20 11               A 16085    	JR	NZ,L_844
                           A 16086    ; 3681				if (dj.fn[NSFLAG] & NS_NONA
                           A 16087    .LINE 3681
                           A 16088    
003D05 ED55CC              A 16089    	LEA	IY,IX+%FFFFFFCC
003D08 FD7E0B              A 16090    	LD	A,(IY+%B)
003D0B E680                A 16091    	AND	A,%80
003D0D 28 07               A 16092    	JR	Z,L_844
                           A 16093    ; 3682					res = FR_INVALID_NAME;
                           A 16094    .LINE 3682
                           A 16095    
003D0F 01060000            A 16096    	LD	BC,6
003D13 DD0FFD              A 16097    	LD	(IX+%FFFFFFFD),BC
                           A 16098    ; 3683				}
                           A 16099    ; 3684	#if FF_FS_LOCK != 0
                           A 16100    ; 3685				else {
                           A 16101    ; 3686					res = chk_lock(&dj, (mo
                           A 16102    ; 3687				}
                           A 16103    ; 3688	#endif
                           A 16104    ; 3689			}
003D16                     A 16105    L_844:
                           A 16106    .LINE 3689
                           A 16107    
                           A 16108    ; 3690			/* Create or Open a file */
                           A 16109    ; 3691			if (mode & (FA_CREATE_ALWAYS | 
                           A 16110    .LINE 3691
                           A 16111    
003D16 DD7E0C              A 16112    	LD	A,(IX+%C)
003D19 E61C                A 16113    	AND	A,%1C
003D1B CA 87 3E 00         A 16114    	JR	Z,L_843
                           A 16115    ; 3692				if (res != FR_OK) {			
                           A 16116    .LINE 3692
                           A 16117    
003D1F 01000000            A 16118    	LD	BC,0
003D23 DD27FD              A 16119    	LD	HL,(IX+%FFFFFFFD)
003D26 B7                  A 16120    	OR	A,A
003D27 ED42                A 16121    	SBC	HL,BC
003D29 28 21               A 16122    	JR	Z,L_831
                           A 16123    ; 3693					if (res == FR_NO_FILE) 
                           A 16124    .LINE 3693
                           A 16125    
003D2B 01040000            A 16126    	LD	BC,4
003D2F DD27FD              A 16127    	LD	HL,(IX+%FFFFFFFD)
003D32 B7                  A 16128    	OR	A,A
003D33 ED42                A 16129    	SBC	HL,BC
003D35 20 0B               A 16130    	JR	NZ,L_826
                           A 16131    ; 3694	#if FF_FS_LOCK != 0
                           A 16132    ; 3695						res = enq_lock() ? 
                           A 16133    ; 3696	#else
                           A 16134    ; 3697						res = dir_register(
                           A 16135    .LINE 3697
                           A 16136    
003D37 ED65AE              A 16137    	PEA	IX+%FFFFFFAE
003D3A CD ED 21 00         A 16138    	CALL	_dir_register
003D3E C1                  A 16139    	POP	BC
003D3F DD2FFD              A 16140    	LD	(IX+%FFFFFFFD),HL
                           A 16141    ; 3698	#endif
                           A 16142    ; 3699					}
003D42                     A 16143    L_826:
                           A 16144    .LINE 3699
                           A 16145    
                           A 16146    ; 3700					mode |= FA_CREATE_ALWAY
                           A 16147    .LINE 3700
                           A 16148    
003D42 DD7E0C              A 16149    	LD	A,(IX+%C)
003D45 CBDF                A 16150    	SET	%3,A
003D47 DD770C              A 16151    	LD	(IX+%C),A
                           A 16152    ; 3701				}
                           A 16153    ; 3702				else {						
                           A 16154    .LINE 3702
                           A 16155    
003D4A 18 1E               A 16156    	JR	L_836
003D4C                     A 16157    L_831:
                           A 16158    ; 3703					if (dj.obj.attr & (AM_R
                           A 16159    .LINE 3703
                           A 16160    
003D4C DD7EB3              A 16161    	LD	A,(IX+%FFFFFFB3)
003D4F E611                A 16162    	AND	A,%11
003D51 28 09               A 16163    	JR	Z,L_829
                           A 16164    ; 3704						res = FR_DENIED;
                           A 16165    .LINE 3704
                           A 16166    
003D53 01070000            A 16167    	LD	BC,7
003D57 DD0FFD              A 16168    	LD	(IX+%FFFFFFFD),BC
                           A 16169    ; 3705					} else {
                           A 16170    .LINE 3705
                           A 16171    
003D5A 18 0E               A 16172    	JR	L_836
003D5C                     A 16173    L_829:
                           A 16174    ; 3706						if (mode & FA_CREAT
                           A 16175    .LINE 3706
                           A 16176    
003D5C DD7E0C              A 16177    	LD	A,(IX+%C)
003D5F E604                A 16178    	AND	A,%4
003D61 28 07               A 16179    	JR	Z,L_836
003D63 01080000            A 16180    	LD	BC,8
003D67 DD0FFD              A 16181    	LD	(IX+%FFFFFFFD),BC
                           A 16182    ; 3707					}
                           A 16183    ; 3708				}
003D6A                     A 16184    L_836:
                           A 16185    .LINE 3708
                           A 16186    
                           A 16187    ; 3709				if (res == FR_OK && (mode &
                           A 16188    .LINE 3709
                           A 16189    
003D6A 01000000            A 16190    	LD	BC,0
003D6E DD27FD              A 16191    	LD	HL,(IX+%FFFFFFFD)
003D71 B7                  A 16192    	OR	A,A
003D72 ED42                A 16193    	SBC	HL,BC
003D74 C2 C4 3E 00         A 16194    	JR	NZ,L_848
003D78 DD7E0C              A 16195    	LD	A,(IX+%C)
003D7B E608                A 16196    	AND	A,%8
003D7D CA C4 3E 00         A 16197    	JR	Z,L_848
                           A 16198    ; 3710	#if FF_FS_EXFAT
                           A 16199    ; 3711					if (fs->fs_type == FS_E
                           A 16200    ; 3712						/* Get current allo
                           A 16201    ; 3713						fp->obj.fs = fs;
                           A 16202    ; 3714						init_alloc_info(fs,
                           A 16203    ; 3715						/* Set directory en
                           A 16204    ; 3716						memset(fs->dirbuf +
                           A 16205    ; 3717						memset(fs->dirbuf +
                           A 16206    ; 3718						fs->dirbuf[XDIR_Att
                           A 16207    ; 3719						st_dword(fs->dirbuf
                           A 16208    ; 3720						fs->dirbuf[XDIR_Gen
                           A 16209    ; 3721						res = store_xdir(&d
                           A 16210    ; 3722						if (res == FR_OK &&
                           A 16211    ; 3723							res = remove_ch
                           A 16212    ; 3724							fs->last_clst =
                           A 16213    ; 3725						}
                           A 16214    ; 3726					} else
                           A 16215    ; 3727	#endif
                           A 16216    ; 3728					{
                           A 16217    ; 3729						/* Set directory en
                           A 16218    ; 3730						tm = GET_FATTIME();
                           A 16219    .LINE 3730
                           A 16220    
003D81 CD 00 00 00         A 16221    	CALL	_get_fattime
003D85 DD2FDC              A 16222    	LD	(IX+%FFFFFFDC),HL
003D88 DD73DF              A 16223    	LD	(IX+%FFFFFFDF),E
                           A 16224    ; 3731						st_dword(dj.dir + D
                           A 16225    .LINE 3731
                           A 16226    
003D8B DD4EDF              A 16227    	LD	C,(IX+%FFFFFFDF)
003D8E 0600                A 16228    	LD	B,%0
003D90 C5                  A 16229    	PUSH	BC
003D91 DD07DC              A 16230    	LD	BC,(IX+%FFFFFFDC)
003D94 C5                  A 16231    	PUSH	BC
003D95 DD31C9              A 16232    	LD	IY,(IX+%FFFFFFC9)
003D98 ED030E              A 16233    	LEA	BC,IY+%E
003D9B C5                  A 16234    	PUSH	BC
003D9C CD 45 01 00         A 16235    	CALL	_st_dword
003DA0 C1                  A 16236    	POP	BC
003DA1 C1                  A 16237    	POP	BC
003DA2 C1                  A 16238    	POP	BC
                           A 16239    ; 3732						st_dword(dj.dir + D
                           A 16240    .LINE 3732
                           A 16241    
003DA3 DD4EDF              A 16242    	LD	C,(IX+%FFFFFFDF)
003DA6 0600                A 16243    	LD	B,%0
003DA8 C5                  A 16244    	PUSH	BC
003DA9 DD07DC              A 16245    	LD	BC,(IX+%FFFFFFDC)
003DAC C5                  A 16246    	PUSH	BC
003DAD DD31C9              A 16247    	LD	IY,(IX+%FFFFFFC9)
003DB0 ED0316              A 16248    	LEA	BC,IY+%16
003DB3 C5                  A 16249    	PUSH	BC
003DB4 CD 45 01 00         A 16250    	CALL	_st_dword
003DB8 C1                  A 16251    	POP	BC
003DB9 C1                  A 16252    	POP	BC
003DBA C1                  A 16253    	POP	BC
                           A 16254    ; 3733						cl = ld_clust(fs, d
                           A 16255    .LINE 3733
                           A 16256    
003DBB DD07C9              A 16257    	LD	BC,(IX+%FFFFFFC9)
003DBE C5                  A 16258    	PUSH	BC
003DBF DD07FA              A 16259    	LD	BC,(IX+%FFFFFFFA)
003DC2 C5                  A 16260    	PUSH	BC
003DC3 CD EE 17 00         A 16261    	CALL	_ld_clust
003DC7 C1                  A 16262    	POP	BC
003DC8 C1                  A 16263    	POP	BC
003DC9 DD2FE4              A 16264    	LD	(IX+%FFFFFFE4),HL
003DCC DD73E7              A 16265    	LD	(IX+%FFFFFFE7),E
                           A 16266    ; 3734						dj.dir[DIR_Attr] = 
                           A 16267    .LINE 3734
                           A 16268    
003DCF DD31C9              A 16269    	LD	IY,(IX+%FFFFFFC9)
003DD2 ED230B              A 16270    	LEA	HL,IY+%B
003DD5 3620                A 16271    	LD	(HL),%20
                           A 16272    ; 3735						st_clust(fs, dj.dir
                           A 16273    .LINE 3735
                           A 16274    
003DD7 01000000            A 16275    	LD	BC,0
003DDB C5                  A 16276    	PUSH	BC
003DDC C5                  A 16277    	PUSH	BC
003DDD DD07C9              A 16278    	LD	BC,(IX+%FFFFFFC9)
003DE0 C5                  A 16279    	PUSH	BC
003DE1 DD07FA              A 16280    	LD	BC,(IX+%FFFFFFFA)
003DE4 C5                  A 16281    	PUSH	BC
003DE5 CD 5C 18 00         A 16282    	CALL	_st_clust
003DE9 C1                  A 16283    	POP	BC
003DEA C1                  A 16284    	POP	BC
003DEB C1                  A 16285    	POP	BC
003DEC C1                  A 16286    	POP	BC
                           A 16287    ; 3736						st_dword(dj.dir + D
                           A 16288    .LINE 3736
                           A 16289    
003DED 01000000            A 16290    	LD	BC,0
003DF1 C5                  A 16291    	PUSH	BC
003DF2 C5                  A 16292    	PUSH	BC
003DF3 DD31C9              A 16293    	LD	IY,(IX+%FFFFFFC9)
003DF6 ED031C              A 16294    	LEA	BC,IY+%1C
003DF9 C5                  A 16295    	PUSH	BC
003DFA CD 45 01 00         A 16296    	CALL	_st_dword
003DFE C1                  A 16297    	POP	BC
003DFF C1                  A 16298    	POP	BC
003E00 C1                  A 16299    	POP	BC
                           A 16300    ; 3737						fs->wflag = 1;
                           A 16301    .LINE 3737
                           A 16302    
003E01 DD31FA              A 16303    	LD	IY,(IX+%FFFFFFFA)
003E04 FD360301            A 16304    	LD	(IY+%3),%1
                           A 16305    ; 3738						if (cl != 0) {		
                           A 16306    .LINE 3738
                           A 16307    
003E08 DD27E4              A 16308    	LD	HL,(IX+%FFFFFFE4)
003E0B DD5EE7              A 16309    	LD	E,(IX+%FFFFFFE7)
003E0E 01000000            A 16310    	LD	BC,0
003E12 AF                  A 16311    	XOR	A,A
003E13 CD 00 00 00         A 16312    	CALL	__lcmpu
003E17 CA C4 3E 00         A 16313    	JR	Z,L_848
                           A 16314    ; 3739							sc = fs->winsec
                           A 16315    .LINE 3739
                           A 16316    
003E1B DD31FA              A 16317    	LD	IY,(IX+%FFFFFFFA)
003E1E FD0732              A 16318    	LD	BC,(IY+%32)
003E21 FD7E35              A 16319    	LD	A,(IY+%35)
003E24 DD0FEE              A 16320    	LD	(IX+%FFFFFFEE),BC
003E27 DD77F1              A 16321    	LD	(IX+%FFFFFFF1),A
                           A 16322    ; 3740							res = remove_ch
                           A 16323    .LINE 3740
                           A 16324    
003E2A 01000000            A 16325    	LD	BC,0
003E2E C5                  A 16326    	PUSH	BC
003E2F C5                  A 16327    	PUSH	BC
003E30 DD4EE7              A 16328    	LD	C,(IX+%FFFFFFE7)
003E33 0600                A 16329    	LD	B,%0
003E35 C5                  A 16330    	PUSH	BC
003E36 DD07E4              A 16331    	LD	BC,(IX+%FFFFFFE4)
003E39 C5                  A 16332    	PUSH	BC
003E3A ED65AE              A 16333    	PEA	IX+%FFFFFFAE
003E3D CD F4 0B 00         A 16334    	CALL	_remove_chain
003E41 C1                  A 16335    	POP	BC
003E42 C1                  A 16336    	POP	BC
003E43 C1                  A 16337    	POP	BC
003E44 C1                  A 16338    	POP	BC
003E45 C1                  A 16339    	POP	BC
003E46 DD2FFD              A 16340    	LD	(IX+%FFFFFFFD),HL
                           A 16341    ; 3741							if (res == FR_O
                           A 16342    .LINE 3741
                           A 16343    
003E49 01000000            A 16344    	LD	BC,0
003E4D DD27FD              A 16345    	LD	HL,(IX+%FFFFFFFD)
003E50 B7                  A 16346    	OR	A,A
003E51 ED42                A 16347    	SBC	HL,BC
003E53 20 6F               A 16348    	JR	NZ,L_848
                           A 16349    ; 3742								res = move_
                           A 16350    .LINE 3742
                           A 16351    
003E55 DD4EF1              A 16352    	LD	C,(IX+%FFFFFFF1)
003E58 0600                A 16353    	LD	B,%0
003E5A C5                  A 16354    	PUSH	BC
003E5B DD07EE              A 16355    	LD	BC,(IX+%FFFFFFEE)
003E5E C5                  A 16356    	PUSH	BC
003E5F DD07FA              A 16357    	LD	BC,(IX+%FFFFFFFA)
003E62 C5                  A 16358    	PUSH	BC
003E63 CD 1E 04 00         A 16359    	CALL	_move_window
003E67 C1                  A 16360    	POP	BC
003E68 C1                  A 16361    	POP	BC
003E69 C1                  A 16362    	POP	BC
003E6A DD2FFD              A 16363    	LD	(IX+%FFFFFFFD),HL
                           A 16364    ; 3743								fs->last_cl
                           A 16365    .LINE 3743
                           A 16366    
003E6D DD27E4              A 16367    	LD	HL,(IX+%FFFFFFE4)
003E70 DD5EE7              A 16368    	LD	E,(IX+%FFFFFFE7)
003E73 01010000            A 16369    	LD	BC,1
003E77 AF                  A 16370    	XOR	A,A
003E78 CD 00 00 00         A 16371    	CALL	__lsub
003E7C DD31FA              A 16372    	LD	IY,(IX+%FFFFFFFA)
003E7F FD2F0E              A 16373    	LD	(IY+%E),HL
003E82 FD7311              A 16374    	LD	(IY+%11),E
                           A 16375    ; 3744							}
                           A 16376    ; 3745						}
                           A 16377    ; 3746					}
                           A 16378    ; 3747				}
                           A 16379    ; 3748			}
                           A 16380    ; 3749			else {	/* Open an existing fil
                           A 16381    .LINE 3749
                           A 16382    
003E85 18 3D               A 16383    	JR	L_848
003E87                     A 16384    L_843:
                           A 16385    ; 3750				if (res == FR_OK) {			
                           A 16386    .LINE 3750
                           A 16387    
003E87 01000000            A 16388    	LD	BC,0
003E8B DD27FD              A 16389    	LD	HL,(IX+%FFFFFFFD)
003E8E B7                  A 16390    	OR	A,A
003E8F ED42                A 16391    	SBC	HL,BC
003E91 20 31               A 16392    	JR	NZ,L_848
                           A 16393    ; 3751					if (dj.obj.attr & AM_DI
                           A 16394    .LINE 3751
                           A 16395    
003E93 ED02AE              A 16396    	LEA	BC,IX+%FFFFFFAE
003E96 DD0FEB              A 16397    	LD	(IX+%FFFFFFEB),BC
003E99 DD31EB              A 16398    	LD	IY,(IX+%FFFFFFEB)
003E9C FD7E05              A 16399    	LD	A,(IY+%5)
003E9F E610                A 16400    	AND	A,%10
003EA1 28 09               A 16401    	JR	Z,L_840
                           A 16402    ; 3752						res = FR_NO_FILE;
                           A 16403    .LINE 3752
                           A 16404    
003EA3 01040000            A 16405    	LD	BC,4
003EA7 DD0FFD              A 16406    	LD	(IX+%FFFFFFFD),BC
                           A 16407    ; 3753					} else {
                           A 16408    .LINE 3753
                           A 16409    
003EAA 18 18               A 16410    	JR	L_848
003EAC                     A 16411    L_840:
                           A 16412    ; 3754						if ((mode & FA_WRIT
                           A 16413    .LINE 3754
                           A 16414    
003EAC DD7E0C              A 16415    	LD	A,(IX+%C)
003EAF E602                A 16416    	AND	A,%2
003EB1 28 11               A 16417    	JR	Z,L_848
003EB3 DD31EB              A 16418    	LD	IY,(IX+%FFFFFFEB)
003EB6 FD7E05              A 16419    	LD	A,(IY+%5)
003EB9 E601                A 16420    	AND	A,%1
003EBB 28 07               A 16421    	JR	Z,L_848
                           A 16422    ; 3755							res = FR_DENIED
                           A 16423    .LINE 3755
                           A 16424    
003EBD 01070000            A 16425    	LD	BC,7
003EC1 DD0FFD              A 16426    	LD	(IX+%FFFFFFFD),BC
                           A 16427    ; 3756						}
                           A 16428    ; 3757					}
                           A 16429    ; 3758				}
                           A 16430    ; 3759			}
003EC4                     A 16431    L_848:
                           A 16432    .LINE 3759
                           A 16433    
                           A 16434    ; 3760			if (res == FR_OK) {
                           A 16435    .LINE 3760
                           A 16436    
003EC4 01000000            A 16437    	LD	BC,0
003EC8 DD27FD              A 16438    	LD	HL,(IX+%FFFFFFFD)
003ECB B7                  A 16439    	OR	A,A
003ECC ED42                A 16440    	SBC	HL,BC
003ECE 20 27               A 16441    	JR	NZ,L_864
                           A 16442    ; 3761				if (mode & FA_CREATE_ALWAYS
                           A 16443    .LINE 3761
                           A 16444    
003ED0 DD7E0C              A 16445    	LD	A,(IX+%C)
003ED3 E608                A 16446    	AND	A,%8
003ED5 28 08               A 16447    	JR	Z,L_846
003ED7 DD7E0C              A 16448    	LD	A,(IX+%C)
003EDA CBF7                A 16449    	SET	%6,A
003EDC DD770C              A 16450    	LD	(IX+%C),A
003EDF                     A 16451    L_846:
                           A 16452    ; 3762				fp->dir_sect = fs->winsect;
                           A 16453    .LINE 3762
                           A 16454    
003EDF DD31FA              A 16455    	LD	IY,(IX+%FFFFFFFA)
003EE2 FD0732              A 16456    	LD	BC,(IY+%32)
003EE5 FD7E35              A 16457    	LD	A,(IY+%35)
003EE8 DD3106              A 16458    	LD	IY,(IX+%6)
003EEB FD0F1D              A 16459    	LD	(IY+%1D),BC
003EEE FD7720              A 16460    	LD	(IY+%20),A
                           A 16461    ; 3763				fp->dir_ptr = dj.dir;
                           A 16462    .LINE 3763
                           A 16463    
003EF1 DD07C9              A 16464    	LD	BC,(IX+%FFFFFFC9)
003EF4 FD0F21              A 16465    	LD	(IY+%21),BC
                           A 16466    ; 3764	#if FF_FS_LOCK != 0
                           A 16467    ; 3765				fp->obj.lockid = inc_lock(&
                           A 16468    ; 3766				if (fp->obj.lockid == 0) re
                           A 16469    ; 3767	#endif
                           A 16470    ; 3768			}
003EF7                     A 16471    L_864:
                           A 16472    .LINE 3768
                           A 16473    
                           A 16474    ; 3769	#else		/* R/O configuration */
                           A 16475    ; 3770			if (res == FR_OK) {
                           A 16476    ; 3771				if (dj.fn[NSFLAG] & NS_NONA
                           A 16477    ; 3772					res = FR_INVALID_NAME;
                           A 16478    ; 3773				} else {
                           A 16479    ; 3774					if (dj.obj.attr & AM_DI
                           A 16480    ; 3775						res = FR_NO_FILE;
                           A 16481    ; 3776					}
                           A 16482    ; 3777				}
                           A 16483    ; 3778			}
                           A 16484    ; 3779	#endif
                           A 16485    ; 3780	
                           A 16486    ; 3781			if (res == FR_OK) {
                           A 16487    .LINE 3781
                           A 16488    
003EF7 01000000            A 16489    	LD	BC,0
003EFB DD27FD              A 16490    	LD	HL,(IX+%FFFFFFFD)
003EFE B7                  A 16491    	OR	A,A
003EFF ED42                A 16492    	SBC	HL,BC
003F01 C2 3E 41 00         A 16493    	JR	NZ,L_865
                           A 16494    ; 3782	#if FF_FS_EXFAT
                           A 16495    ; 3783				if (fs->fs_type == FS_EXFAT
                           A 16496    ; 3784					fp->obj.c_scl = dj.obj.
                           A 16497    ; 3785					fp->obj.c_size = ((DWOR
                           A 16498    ; 3786					fp->obj.c_ofs = dj.blk_
                           A 16499    ; 3787					init_alloc_info(fs, &fp
                           A 16500    ; 3788				} else
                           A 16501    ; 3789	#endif
                           A 16502    ; 3790				{
                           A 16503    ; 3791					fp->obj.sclust = ld_clu
                           A 16504    .LINE 3791
                           A 16505    
003F05 DD3106              A 16506    	LD	IY,(IX+%6)
003F08 ED0300              A 16507    	LEA	BC,IY+%0
003F0B 21ABFDFF            A 16508    	LD	HL,-597
003F0F DDE5D1              A 16509    	LD	DE,IX
003F12 19                  A 16510    	ADD	HL,DE
003F13 ED0F                A 16511    	LD	(HL),BC
003F15 DD07C9              A 16512    	LD	BC,(IX+%FFFFFFC9)
003F18 C5                  A 16513    	PUSH	BC
003F19 DD07FA              A 16514    	LD	BC,(IX+%FFFFFFFA)
003F1C C5                  A 16515    	PUSH	BC
003F1D CD EE 17 00         A 16516    	CALL	_ld_clust
003F21 C1                  A 16517    	POP	BC
003F22 C1                  A 16518    	POP	BC
003F23 FD21ABFD FF         A 16519    	LD	IY,-597
003F28 DDE5C1              A 16520    	LD	BC,IX
003F2B FD09                A 16521    	ADD	IY,BC
003F2D FD3700              A 16522    	LD	IY,(IY)
003F30 FD2F07              A 16523    	LD	(IY+%7),HL
003F33 FD730A              A 16524    	LD	(IY+%A),E
                           A 16525    ; 3792					fp->obj.objsize = ld_dw
                           A 16526    .LINE 3792
                           A 16527    
003F36 DD31C9              A 16528    	LD	IY,(IX+%FFFFFFC9)
003F39 ED031C              A 16529    	LEA	BC,IY+%1C
003F3C C5                  A 16530    	PUSH	BC
003F3D CD 3C 00 00         A 16531    	CALL	_ld_dword
003F41 C1                  A 16532    	POP	BC
003F42 FD21ABFD FF         A 16533    	LD	IY,-597
003F47 DDE5C1              A 16534    	LD	BC,IX
003F4A FD09                A 16535    	ADD	IY,BC
003F4C FD3700              A 16536    	LD	IY,(IY)
003F4F FD2F0B              A 16537    	LD	(IY+%B),HL
003F52 FD730E              A 16538    	LD	(IY+%E),E
                           A 16539    ; 3793				}
                           A 16540    ; 3794	#if FF_USE_FASTSEEK
                           A 16541    ; 3795				fp->cltbl = 0;		/* Disa
                           A 16542    ; 3796	#endif
                           A 16543    ; 3797				fp->obj.fs = fs;	/* Vali
                           A 16544    .LINE 3797
                           A 16545    
003F55 21ABFDFF            A 16546    	LD	HL,-597
003F59 DDE5C1              A 16547    	LD	BC,IX
003F5C 09                  A 16548    	ADD	HL,BC
003F5D ED31                A 16549    	LD	IY,(HL)
003F5F DD07FA              A 16550    	LD	BC,(IX+%FFFFFFFA)
003F62 FD0F00              A 16551    	LD	(IY+%0),BC
                           A 16552    ; 3798				fp->obj.id = fs->id;
                           A 16553    .LINE 3798
                           A 16554    
003F65 21ABFDFF            A 16555    	LD	HL,-597
003F69 DDE5C1              A 16556    	LD	BC,IX
003F6C 09                  A 16557    	ADD	HL,BC
003F6D ED17                A 16558    	LD	DE,(HL)
003F6F DD31FA              A 16559    	LD	IY,(IX+%FFFFFFFA)
003F72 FD0705              A 16560    	LD	BC,(IY+%5)
003F75 D5FDE1              A 16561    	LD	IY,DE
003F78 FD7103              A 16562    	LD	(IY+%3),C
003F7B FD7004              A 16563    	LD	(IY+%4),B
                           A 16564    ; 3799				fp->flag = mode;	/* Set 
                           A 16565    .LINE 3799
                           A 16566    
003F7E DD7E0C              A 16567    	LD	A,(IX+%C)
003F81 DD3106              A 16568    	LD	IY,(IX+%6)
003F84 FD770F              A 16569    	LD	(IY+%F),A
                           A 16570    ; 3800				fp->err = 0;		/* Clea
                           A 16571    .LINE 3800
                           A 16572    
003F87 FD361000            A 16573    	LD	(IY+%10),%0
                           A 16574    ; 3801				fp->sect = 0;		/* Inva
                           A 16575    .LINE 3801
                           A 16576    
003F8B 01000000            A 16577    	LD	BC,0
003F8F FD0F19              A 16578    	LD	(IY+%19),BC
003F92 FD361C00            A 16579    	LD	(IY+%1C),%0
                           A 16580    ; 3802				fp->fptr = 0;		/* Set 
                           A 16581    .LINE 3802
                           A 16582    
003F96 FD0F11              A 16583    	LD	(IY+%11),BC
003F99 FD361400            A 16584    	LD	(IY+%14),%0
                           A 16585    ; 3803	#if !FF_FS_READONLY
                           A 16586    ; 3804	#if !FF_FS_TINY
                           A 16587    ; 3805				memset(fp->buf, 0, sizeof f
                           A 16588    ; 3806	#endif
                           A 16589    ; 3807				if ((mode & FA_SEEKEND) && 
                           A 16590    .LINE 3807
                           A 16591    
003F9D DD7E0C              A 16592    	LD	A,(IX+%C)
003FA0 E620                A 16593    	AND	A,%20
003FA2 CA 3E 41 00         A 16594    	JR	Z,L_865
003FA6 DD3106              A 16595    	LD	IY,(IX+%6)
003FA9 ED0300              A 16596    	LEA	BC,IY+%0
003FAC DD0FE8              A 16597    	LD	(IX+%FFFFFFE8),BC
003FAF B7                  A 16598    	OR	A,A
003FB0 ED62                A 16599    	SBC	HL,HL
003FB2 1E00                A 16600    	LD	E,%0
003FB4 DD31E8              A 16601    	LD	IY,(IX+%FFFFFFE8)
003FB7 FD070B              A 16602    	LD	BC,(IY+%B)
003FBA FD7E0E              A 16603    	LD	A,(IY+%E)
003FBD CD 00 00 00         A 16604    	CALL	__lcmpu
003FC1 D2 3E 41 00         A 16605    	JR	NC,L_865
                           A 16606    ; 3808					fp->fptr = fp->obj.objs
                           A 16607    .LINE 3808
                           A 16608    
003FC5 DD31E8              A 16609    	LD	IY,(IX+%FFFFFFE8)
003FC8 FD070B              A 16610    	LD	BC,(IY+%B)
003FCB FD7E0E              A 16611    	LD	A,(IY+%E)
003FCE DD3106              A 16612    	LD	IY,(IX+%6)
003FD1 FD0F11              A 16613    	LD	(IY+%11),BC
003FD4 FD7714              A 16614    	LD	(IY+%14),A
                           A 16615    ; 3809					bcs = (DWORD)fs->csize 
                           A 16616    .LINE 3809
                           A 16617    
003FD7 DD31FA              A 16618    	LD	IY,(IX+%FFFFFFFA)
003FDA FD0709              A 16619    	LD	BC,(IY+%9)
003FDD CD 00 00 00         A 16620    	CALL	__stoiu
003FE1 01000200            A 16621    	LD	BC,512
003FE5 AF                  A 16622    	XOR	A,A
003FE6 CD 00 00 00         A 16623    	CALL	__lmulu
003FEA DD2FE0              A 16624    	LD	(IX+%FFFFFFE0),HL
003FED DD73E3              A 16625    	LD	(IX+%FFFFFFE3),E
                           A 16626    ; 3810					clst = fp->obj.sclust;	
                           A 16627    .LINE 3810
                           A 16628    
003FF0 DD3106              A 16629    	LD	IY,(IX+%6)
003FF3 ED0300              A 16630    	LEA	BC,IY+%0
003FF6 21A8FDFF            A 16631    	LD	HL,-600
003FFA DDE5D1              A 16632    	LD	DE,IX
003FFD 19                  A 16633    	ADD	HL,DE
003FFE ED0F                A 16634    	LD	(HL),BC
004000 21A8FDFF            A 16635    	LD	HL,-600
004004 DDE5C1              A 16636    	LD	BC,IX
004007 09                  A 16637    	ADD	HL,BC
004008 ED31                A 16638    	LD	IY,(HL)
00400A FD0707              A 16639    	LD	BC,(IY+%7)
00400D FD7E0A              A 16640    	LD	A,(IY+%A)
004010 DD0FF6              A 16641    	LD	(IX+%FFFFFFF6),BC
004013 DD77F9              A 16642    	LD	(IX+%FFFFFFF9),A
                           A 16643    ; 3811					for (ofs = fp->obj.objs
                           A 16644    .LINE 3811
                           A 16645    
004016 21A8FDFF            A 16646    	LD	HL,-600
00401A DDE5C1              A 16647    	LD	BC,IX
00401D 09                  A 16648    	ADD	HL,BC
00401E ED31                A 16649    	LD	IY,(HL)
004020 FD070B              A 16650    	LD	BC,(IY+%B)
004023 FD7E0E              A 16651    	LD	A,(IY+%E)
004026 DD0FF2              A 16652    	LD	(IX+%FFFFFFF2),BC
004029 DD77F5              A 16653    	LD	(IX+%FFFFFFF5),A
00402C 18 64               A 16654    	JR	L_856
00402E                     A 16655    L_854:
                           A 16656    ; 3812						clst = get_fat(&fp-
                           A 16657    .LINE 3812
                           A 16658    
00402E DD4EF9              A 16659    	LD	C,(IX+%FFFFFFF9)
004031 0600                A 16660    	LD	B,%0
004033 C5                  A 16661    	PUSH	BC
004034 DD07F6              A 16662    	LD	BC,(IX+%FFFFFFF6)
004037 C5                  A 16663    	PUSH	BC
004038 DD3106              A 16664    	LD	IY,(IX+%6)
00403B ED6600              A 16665    	PEA	IY+%0
00403E CD 64 06 00         A 16666    	CALL	_get_fat
004042 C1                  A 16667    	POP	BC
004043 C1                  A 16668    	POP	BC
004044 C1                  A 16669    	POP	BC
004045 E5C1                A 16670    	LD	BC,HL
004047 DD0FF6              A 16671    	LD	(IX+%FFFFFFF6),BC
00404A DD73F9              A 16672    	LD	(IX+%FFFFFFF9),E
                           A 16673    ; 3813						if (clst <= 1) res 
                           A 16674    .LINE 3813
                           A 16675    
00404D 21010000            A 16676    	LD	HL,1
004051 1E00                A 16677    	LD	E,%0
004053 DD7EF9              A 16678    	LD	A,(IX+%FFFFFFF9)
004056 CD 00 00 00         A 16679    	CALL	__lcmpu
00405A 38 07               A 16680    	JR	C,L_853
00405C 01020000            A 16681    	LD	BC,2
004060 DD0FFD              A 16682    	LD	(IX+%FFFFFFFD),BC
004063                     A 16683    L_853:
                           A 16684    ; 3814						if (clst == 0xFFFFF
                           A 16685    .LINE 3814
                           A 16686    
004063 DD27F6              A 16687    	LD	HL,(IX+%FFFFFFF6)
004066 DD5EF9              A 16688    	LD	E,(IX+%FFFFFFF9)
004069 01FFFFFF            A 16689    	LD	BC,16777215
00406D 3EFF                A 16690    	LD	A,%FF
00406F CD 00 00 00         A 16691    	CALL	__lcmpu
004073 20 07               A 16692    	JR	NZ,L_855
004075 01010000            A 16693    	LD	BC,1
004079 DD0FFD              A 16694    	LD	(IX+%FFFFFFFD),BC
                           A 16695    ; 3815					}
00407C                     A 16696    L_855:
                           A 16697    .LINE 3815
                           A 16698    
00407C DD27F2              A 16699    	LD	HL,(IX+%FFFFFFF2)
00407F DD5EF5              A 16700    	LD	E,(IX+%FFFFFFF5)
004082 DD07E0              A 16701    	LD	BC,(IX+%FFFFFFE0)
004085 DD7EE3              A 16702    	LD	A,(IX+%FFFFFFE3)
004088 CD 00 00 00         A 16703    	CALL	__lsub
00408C DD2FF2              A 16704    	LD	(IX+%FFFFFFF2),HL
00408F DD73F5              A 16705    	LD	(IX+%FFFFFFF5),E
004092                     A 16706    L_856:
004092 01000000            A 16707    	LD	BC,0
004096 DD27FD              A 16708    	LD	HL,(IX+%FFFFFFFD)
004099 B7                  A 16709    	OR	A,A
00409A ED42                A 16710    	SBC	HL,BC
00409C 20 14               A 16711    	JR	NZ,L_857
00409E DD27E0              A 16712    	LD	HL,(IX+%FFFFFFE0)
0040A1 DD5EE3              A 16713    	LD	E,(IX+%FFFFFFE3)
0040A4 DD07F2              A 16714    	LD	BC,(IX+%FFFFFFF2)
0040A7 DD7EF5              A 16715    	LD	A,(IX+%FFFFFFF5)
0040AA CD 00 00 00         A 16716    	CALL	__lcmpu
0040AE DA 2E 40 00         A 16717    	JR	C,L_854
0040B2                     A 16718    L_857:
                           A 16719    ; 3816					fp->clust = clst;
                           A 16720    .LINE 3816
                           A 16721    
0040B2 DD07F6              A 16722    	LD	BC,(IX+%FFFFFFF6)
0040B5 DD7EF9              A 16723    	LD	A,(IX+%FFFFFFF9)
0040B8 DD3106              A 16724    	LD	IY,(IX+%6)
0040BB FD0F15              A 16725    	LD	(IY+%15),BC
0040BE FD7718              A 16726    	LD	(IY+%18),A
                           A 16727    ; 3817					if (res == FR_OK && ofs
                           A 16728    .LINE 3817
                           A 16729    
0040C1 01000000            A 16730    	LD	BC,0
0040C5 DD27FD              A 16731    	LD	HL,(IX+%FFFFFFFD)
0040C8 B7                  A 16732    	OR	A,A
0040C9 ED42                A 16733    	SBC	HL,BC
0040CB 20 71               A 16734    	JR	NZ,L_865
0040CD DD27F2              A 16735    	LD	HL,(IX+%FFFFFFF2)
0040D0 DD5EF5              A 16736    	LD	E,(IX+%FFFFFFF5)
0040D3 01FF0100            A 16737    	LD	BC,511
0040D7 AF                  A 16738    	XOR	A,A
0040D8 CD 00 00 00         A 16739    	CALL	__land
0040DC 01000000            A 16740    	LD	BC,0
0040E0 AF                  A 16741    	XOR	A,A
0040E1 CD 00 00 00         A 16742    	CALL	__lcmpu
0040E5 28 57               A 16743    	JR	Z,L_865
                           A 16744    ; 3818						sc = clst2sect(fs, 
                           A 16745    .LINE 3818
                           A 16746    
0040E7 DD4EF9              A 16747    	LD	C,(IX+%FFFFFFF9)
0040EA 0600                A 16748    	LD	B,%0
0040EC C5                  A 16749    	PUSH	BC
0040ED DD07F6              A 16750    	LD	BC,(IX+%FFFFFFF6)
0040F0 C5                  A 16751    	PUSH	BC
0040F1 DD07FA              A 16752    	LD	BC,(IX+%FFFFFFFA)
0040F4 C5                  A 16753    	PUSH	BC
0040F5 CD F9 05 00         A 16754    	CALL	_clst2sect
0040F9 C1                  A 16755    	POP	BC
0040FA C1                  A 16756    	POP	BC
0040FB C1                  A 16757    	POP	BC
0040FC DD2FEE              A 16758    	LD	(IX+%FFFFFFEE),HL
0040FF DD73F1              A 16759    	LD	(IX+%FFFFFFF1),E
                           A 16760    ; 3819						if (sc == 0) {
                           A 16761    .LINE 3819
                           A 16762    
004102 DD27EE              A 16763    	LD	HL,(IX+%FFFFFFEE)
004105 DD5EF1              A 16764    	LD	E,(IX+%FFFFFFF1)
004108 01000000            A 16765    	LD	BC,0
00410C AF                  A 16766    	XOR	A,A
00410D CD 00 00 00         A 16767    	CALL	__lcmpu
004111 20 09               A 16768    	JR	NZ,L_860
                           A 16769    ; 3820							res = FR_INT_ER
                           A 16770    .LINE 3820
                           A 16771    
004113 01020000            A 16772    	LD	BC,2
004117 DD0FFD              A 16773    	LD	(IX+%FFFFFFFD),BC
                           A 16774    ; 3821						} else {
                           A 16775    .LINE 3821
                           A 16776    
00411A 18 22               A 16777    	JR	L_865
00411C                     A 16778    L_860:
                           A 16779    ; 3822							fp->sect = sc +
                           A 16780    .LINE 3822
                           A 16781    
00411C DD07F2              A 16782    	LD	BC,(IX+%FFFFFFF2)
00411F DD7EF5              A 16783    	LD	A,(IX+%FFFFFFF5)
004122 2E09                A 16784    	LD	L,%9
004124 CD 00 00 00         A 16785    	CALL	__lshru
004128 5F                  A 16786    	LD	E,A
004129 C5E1                A 16787    	LD	HL,BC
00412B DD07EE              A 16788    	LD	BC,(IX+%FFFFFFEE)
00412E DD7EF1              A 16789    	LD	A,(IX+%FFFFFFF1)
004131 CD 00 00 00         A 16790    	CALL	__ladd
004135 DD3106              A 16791    	LD	IY,(IX+%6)
004138 FD2F19              A 16792    	LD	(IY+%19),HL
00413B FD731C              A 16793    	LD	(IY+%1C),E
                           A 16794    ; 3823	#if !FF_FS_TINY
                           A 16795    ; 3824							if (disk_read(f
                           A 16796    ; 3825	#endif
                           A 16797    ; 3826						}
                           A 16798    ; 3827					}
                           A 16799    ; 3828	#if FF_FS_LOCK != 0
                           A 16800    ; 3829					if (res != FR_OK) dec_l
                           A 16801    ; 3830	#endif
                           A 16802    ; 3831				}
                           A 16803    ; 3832	#endif
                           A 16804    ; 3833			}
00413E                     A 16805    L_865:
                           A 16806    .LINE 3833
                           A 16807    
                           A 16808    ; 3834	
                           A 16809    ; 3835			FREE_NAMBUF();
                           A 16810    ; 3836		}
00413E                     A 16811    L_868:
                           A 16812    .LINE 3836
                           A 16813    
                           A 16814    ; 3837	
                           A 16815    ; 3838		if (res != FR_OK) fp->obj.fs = 0;	
                           A 16816    .LINE 3838
                           A 16817    
00413E 01000000            A 16818    	LD	BC,0
004142 DD27FD              A 16819    	LD	HL,(IX+%FFFFFFFD)
004145 B7                  A 16820    	OR	A,A
004146 ED42                A 16821    	SBC	HL,BC
004148 28 06               A 16822    	JR	Z,L_869
00414A DD3106              A 16823    	LD	IY,(IX+%6)
00414D FD0F00              A 16824    	LD	(IY+%0),BC
004150                     A 16825    L_869:
                           A 16826    ; 3839	
                           A 16827    ; 3840		LEAVE_FF(fs, res);
                           A 16828    .LINE 3840
                           A 16829    
004150 DD27FD              A 16830    	LD	HL,(IX+%FFFFFFFD)
                           A 16831    ; 3841	}
004153                     A 16832    L_870:
                           A 16833    .LINE 3841
                           A 16834    
004153 DDF9                A 16835    	LD	SP,IX
004155 DDE1                A 16836    	POP	IX
004157 C9                  A 16837    	RET	
                           A 16838    
                           A 16839    
                           A 16840    ;**************************** _f_open *********
                           A 16841    ;Name                         Addr/Register   S
                           A 16842    ;_get_fattime                        IMPORT  --
                           A 16843    ;lbuf                                IX-594    
                           A 16844    ;dj                                   IX-82    
                           A 16845    ;tm                                   IX-36    
                           A 16846    ;bcs                                  IX-32    
                           A 16847    ;cl                                   IX-28    
                           A 16848    ;G_63                                 IX-24    
                           A 16849    ;G_62                                 IX-21    
                           A 16850    ;sc                                   IX-18    
                           A 16851    ;ofs                                  IX-14    
                           A 16852    ;clst                                 IX-10    
                           A 16853    ;fs                                    IX-6    
                           A 16854    ;res                                   IX-3    
                           A 16855    ;mode                                 IX+12    
                           A 16856    ;path                                  IX+9    
                           A 16857    ;fp                                    IX+6    
                           A 16858    
                           A 16859    
                           A 16860    ; Stack Frame Size: 615 (bytes)
                           A 16861    ;       Spill Code: -3 (instruction)
                           A 16862    
                           A 16863    
                           A 16864    .ENDFUNC "f_open",3841,"_f_open"
                           A 16865    ; 3842	
                           A 16866    ; 3843	
                           A 16867    ; 3844	
                           A 16868    ; 3845	
                           A 16869    ; 3846	/*-------------------------------------
                           A 16870    ; 3847	/* Read File                           
                           A 16871    ; 3848	/*-------------------------------------
                           A 16872    ; 3849	
                           A 16873    ; 3850	FRESULT f_read (
                           A 16874    ; 3851		FIL* fp, 	/* Open file to be read
                           A 16875    ; 3852		void* buff,	/* Data buffer to store
                           A 16876    ; 3853		UINT btr,	/* Number of bytes to r
                           A 16877    ; 3854		UINT* br	/* Number of bytes read
                           A 16878    ; 3855	)
                           A 16879    ; 3856	{
004158                     A 16880    _f_read:
                           A 16881    .DEFINE "_f_read"
                           A 16882    
                           A 16883    .VALUE _f_read
                           A 16884    
                           A 16885    .CLASS 2
                           A 16886    
                           A 16887    .TYPE 68
                           A 16888    
                           A 16889    .ENDEF
                           A 16890    
                           A 16891    .BEGFUNC "f_read",3856,"_f_read"
                           A 16892    
                           A 16893    .LINE 3856
                           A 16894    
                           A 16895    .DEFINE "fp"
                           A 16896    
                           A 16897    .CLASS 65
                           A 16898    
                           A 16899    .VALUE 6
                           A 16900    
                           A 16901    .TAG "NONAME2"
                           A 16902    
                           A 16903    .TYPE 40
                           A 16904    
                           A 16905    .ENDEF
                           A 16906    
                           A 16907    .DEFINE "buff"
                           A 16908    
                           A 16909    .CLASS 65
                           A 16910    
                           A 16911    .VALUE 9
                           A 16912    
                           A 16913    .TYPE 33
                           A 16914    
                           A 16915    .ENDEF
                           A 16916    
                           A 16917    .DEFINE "btr"
                           A 16918    
                           A 16919    .CLASS 65
                           A 16920    
                           A 16921    .VALUE 12
                           A 16922    
                           A 16923    .TYPE 14
                           A 16924    
                           A 16925    .ENDEF
                           A 16926    
                           A 16927    .DEFINE "br"
                           A 16928    
                           A 16929    .CLASS 65
                           A 16930    
                           A 16931    .VALUE 15
                           A 16932    
                           A 16933    .TYPE 46
                           A 16934    
                           A 16935    .ENDEF
                           A 16936    
                           A 16937    .DEFINE "fs"
                           A 16938    
                           A 16939    .CLASS 65
                           A 16940    
                           A 16941    .VALUE -3
                           A 16942    
                           A 16943    .TAG "NONAME0"
                           A 16944    
                           A 16945    .TYPE 40
                           A 16946    
                           A 16947    .ENDEF
                           A 16948    
                           A 16949    .DEFINE "rcnt"
                           A 16950    
                           A 16951    .CLASS 65
                           A 16952    
                           A 16953    .VALUE -6
                           A 16954    
                           A 16955    .TYPE 14
                           A 16956    
                           A 16957    .ENDEF
                           A 16958    
                           A 16959    .DEFINE "sect"
                           A 16960    
                           A 16961    .CLASS 65
                           A 16962    
                           A 16963    .VALUE -10
                           A 16964    
                           A 16965    .TYPE 15
                           A 16966    
                           A 16967    .ENDEF
                           A 16968    
                           A 16969    .DEFINE "cc"
                           A 16970    
                           A 16971    .CLASS 65
                           A 16972    
                           A 16973    .VALUE -13
                           A 16974    
                           A 16975    .TYPE 14
                           A 16976    
                           A 16977    .ENDEF
                           A 16978    
                           A 16979    .DEFINE "rbuff"
                           A 16980    
                           A 16981    .CLASS 65
                           A 16982    
                           A 16983    .VALUE -16
                           A 16984    
                           A 16985    .TYPE 44
                           A 16986    
                           A 16987    .ENDEF
                           A 16988    
                           A 16989    .DEFINE "csect"
                           A 16990    
                           A 16991    .CLASS 65
                           A 16992    
                           A 16993    .VALUE -19
                           A 16994    
                           A 16995    .TYPE 14
                           A 16996    
                           A 16997    .ENDEF
                           A 16998    
                           A 16999    .DEFINE "res"
                           A 17000    
                           A 17001    .CLASS 65
                           A 17002    
                           A 17003    .VALUE -22
                           A 17004    
                           A 17005    .TYPE 4
                           A 17006    
                           A 17007    .ENDEF
                           A 17008    
                           A 17009    .DEFINE "clst"
                           A 17010    
                           A 17011    .CLASS 65
                           A 17012    
                           A 17013    .VALUE -26
                           A 17014    
                           A 17015    .TYPE 15
                           A 17016    
                           A 17017    .ENDEF
                           A 17018    
                           A 17019    .DEFINE "remain"
                           A 17020    
                           A 17021    .CLASS 65
                           A 17022    
                           A 17023    .VALUE -34
                           A 17024    
                           A 17025    .TYPE 15
                           A 17026    
                           A 17027    .ENDEF
                           A 17028    
004158 DDE5                A 17029    	PUSH	IX
00415A DD210000 00         A 17030    	LD	IX,0
00415F DD39                A 17031    	ADD	IX,SP
004161 ED22DA              A 17032    	LEA	HL,IX+%FFFFFFDA
004164 F9                  A 17033    	LD	SP,HL
                           A 17034    ; 3857		FRESULT res;
                           A 17035    ; 3858		FATFS *fs;
                           A 17036    ; 3859		DWORD clst;
                           A 17037    ; 3860		LBA_t sect;
                           A 17038    ; 3861		FSIZE_t remain;
                           A 17039    ; 3862		UINT rcnt, cc, csect;
                           A 17040    ; 3863		BYTE *rbuff = (BYTE*)buff;
                           A 17041    .LINE 3863
                           A 17042    
004165 DD0709              A 17043    	LD	BC,(IX+%9)
004168 DD0FF0              A 17044    	LD	(IX+%FFFFFFF0),BC
                           A 17045    ; 3864	
                           A 17046    ; 3865	
                           A 17047    ; 3866		*br = 0;	/* Clear read byte coun
                           A 17048    .LINE 3866
                           A 17049    
00416B DD270F              A 17050    	LD	HL,(IX+%F)
00416E 01000000            A 17051    	LD	BC,0
004172 ED0F                A 17052    	LD	(HL),BC
                           A 17053    ; 3867		res = validate(&fp->obj, &fs);		
                           A 17054    .LINE 3867
                           A 17055    
004174 ED65FD              A 17056    	PEA	IX+%FFFFFFFD
004177 DD3106              A 17057    	LD	IY,(IX+%6)
00417A ED6600              A 17058    	PEA	IY+%0
00417D CD 5F 3B 00         A 17059    	CALL	_validate
004181 C1                  A 17060    	POP	BC
004182 C1                  A 17061    	POP	BC
004183 DD2FEA              A 17062    	LD	(IX+%FFFFFFEA),HL
                           A 17063    ; 3868		if (res != FR_OK || (res = (FRESULT
                           A 17064    .LINE 3868
                           A 17065    
004186 01000000            A 17066    	LD	BC,0
00418A DD27EA              A 17067    	LD	HL,(IX+%FFFFFFEA)
00418D B7                  A 17068    	OR	A,A
00418E ED42                A 17069    	SBC	HL,BC
004190 20 15               A 17070    	JR	NZ,L_872
004192 DD3106              A 17071    	LD	IY,(IX+%6)
004195 FD7E10              A 17072    	LD	A,(IY+%10)
004198 B7ED62              A 17073    	UEXT	HL
00419B 6F                  A 17074    	LD	L,A
00419C DD2FEA              A 17075    	LD	(IX+%FFFFFFEA),HL
00419F DD27EA              A 17076    	LD	HL,(IX+%FFFFFFEA)
0041A2 B7                  A 17077    	OR	A,A
0041A3 ED42                A 17078    	SBC	HL,BC
0041A5 28 07               A 17079    	JR	Z,L_874
0041A7                     A 17080    L_872:
0041A7 DD27EA              A 17081    	LD	HL,(IX+%FFFFFFEA)
0041AA C3 05 45 00         A 17082    	JR	L_908
0041AE                     A 17083    L_874:
                           A 17084    ; 3869		if (!(fp->flag & FA_READ)) LEAVE_FF
                           A 17085    .LINE 3869
                           A 17086    
0041AE DD3106              A 17087    	LD	IY,(IX+%6)
0041B1 FD7E0F              A 17088    	LD	A,(IY+%F)
0041B4 E601                A 17089    	AND	A,%1
0041B6 20 08               A 17090    	JR	NZ,L_875
0041B8 21070000            A 17091    	LD	HL,7
0041BC C3 05 45 00         A 17092    	JR	L_908
0041C0                     A 17093    L_875:
                           A 17094    ; 3870		remain = fp->obj.objsize - fp->fptr
                           A 17095    .LINE 3870
                           A 17096    
0041C0 DD3106              A 17097    	LD	IY,(IX+%6)
0041C3 FD270B              A 17098    	LD	HL,(IY+%B)
0041C6 FD5E0E              A 17099    	LD	E,(IY+%E)
0041C9 FD0711              A 17100    	LD	BC,(IY+%11)
0041CC FD7E14              A 17101    	LD	A,(IY+%14)
0041CF CD 00 00 00         A 17102    	CALL	__lsub
0041D3 DD2FDE              A 17103    	LD	(IX+%FFFFFFDE),HL
0041D6 DD73E1              A 17104    	LD	(IX+%FFFFFFE1),E
                           A 17105    ; 3871		if (btr > remain) btr = (UINT)remai
                           A 17106    .LINE 3871
                           A 17107    
0041D9 DD070C              A 17108    	LD	BC,(IX+%C)
0041DC AF                  A 17109    	XOR	A,A
0041DD DD27DE              A 17110    	LD	HL,(IX+%FFFFFFDE)
0041E0 DD5EE1              A 17111    	LD	E,(IX+%FFFFFFE1)
0041E3 CD 00 00 00         A 17112    	CALL	__lcmpu
0041E7 D2 F5 44 00         A 17113    	JR	NC,L_905
0041EB DD07DE              A 17114    	LD	BC,(IX+%FFFFFFDE)
0041EE DD0F0C              A 17115    	LD	(IX+%C),BC
                           A 17116    ; 3872	
                           A 17117    ; 3873		for ( ; btr > 0; btr -= rcnt, *br +
                           A 17118    .LINE 3873
                           A 17119    
0041F1 C3 F5 44 00         A 17120    	JR	L_905
0041F5                     A 17121    L_903:
                           A 17122    ; 3874			if (fp->fptr % SS(fs) == 0) {	
                           A 17123    .LINE 3874
                           A 17124    
0041F5 DD3106              A 17125    	LD	IY,(IX+%6)
0041F8 FD0711              A 17126    	LD	BC,(IY+%11)
0041FB FD7E14              A 17127    	LD	A,(IY+%14)
0041FE DD0FE2              A 17128    	LD	(IX+%FFFFFFE2),BC
004201 DD77E5              A 17129    	LD	(IX+%FFFFFFE5),A
004204 C5E1                A 17130    	LD	HL,BC
004206 DD5EE5              A 17131    	LD	E,(IX+%FFFFFFE5)
004209 01FF0100            A 17132    	LD	BC,511
00420D AF                  A 17133    	XOR	A,A
00420E CD 00 00 00         A 17134    	CALL	__land
004212 01000000            A 17135    	LD	BC,0
004216 AF                  A 17136    	XOR	A,A
004217 CD 00 00 00         A 17137    	CALL	__lcmpu
00421B C2 2F 44 00         A 17138    	JR	NZ,L_898
                           A 17139    ; 3875				csect = (UINT)(fp->fptr / S
                           A 17140    .LINE 3875
                           A 17141    
00421F DD31FD              A 17142    	LD	IY,(IX+%FFFFFFFD)
004222 FD0709              A 17143    	LD	BC,(IY+%9)
004225 CD 00 00 00         A 17144    	CALL	__stoiu
004229 2B                  A 17145    	DEC	HL
00422A E5C1                A 17146    	LD	BC,HL
00422C CD 00 00 00         A 17147    	CALL	__itol
004230 DD0FDB              A 17148    	LD	(IX+%FFFFFFDB),BC
004233 5F                  A 17149    	LD	E,A
004234 DD07E2              A 17150    	LD	BC,(IX+%FFFFFFE2)
004237 DD7EE5              A 17151    	LD	A,(IX+%FFFFFFE5)
00423A 2E09                A 17152    	LD	L,%9
00423C CD 00 00 00         A 17153    	CALL	__lshru
004240 DD27DB              A 17154    	LD	HL,(IX+%FFFFFFDB)
004243 CD 00 00 00         A 17155    	CALL	__land
004247 DD2FED              A 17156    	LD	(IX+%FFFFFFED),HL
                           A 17157    ; 3876				if (csect == 0) {			
                           A 17158    .LINE 3876
                           A 17159    
00424A 01000000            A 17160    	LD	BC,0
00424E DD27ED              A 17161    	LD	HL,(IX+%FFFFFFED)
004251 B7                  A 17162    	OR	A,A
004252 ED42                A 17163    	SBC	HL,BC
004254 C2 E4 42 00         A 17164    	JR	NZ,L_885
                           A 17165    ; 3877					if (fp->fptr == 0) {	
                           A 17166    .LINE 3877
                           A 17167    
004258 DD27E2              A 17168    	LD	HL,(IX+%FFFFFFE2)
00425B DD5EE5              A 17169    	LD	E,(IX+%FFFFFFE5)
00425E AF                  A 17170    	XOR	A,A
00425F CD 00 00 00         A 17171    	CALL	__lcmpu
004263 20 11               A 17172    	JR	NZ,L_878
                           A 17173    ; 3878						clst = fp->obj.sclu
                           A 17174    .LINE 3878
                           A 17175    
004265 DD3106              A 17176    	LD	IY,(IX+%6)
004268 FD0707              A 17177    	LD	BC,(IY+%7)
00426B FD7E0A              A 17178    	LD	A,(IY+%A)
00426E DD0FE6              A 17179    	LD	(IX+%FFFFFFE6),BC
004271 DD77E9              A 17180    	LD	(IX+%FFFFFFE9),A
                           A 17181    ; 3879					} else {				
                           A 17182    .LINE 3879
                           A 17183    
004274 18 1E               A 17184    	JR	L_880
004276                     A 17185    L_878:
                           A 17186    ; 3880	#if FF_USE_FASTSEEK
                           A 17187    ; 3881						if (fp->cltbl) {
                           A 17188    ; 3882							clst = clmt_clu
                           A 17189    ; 3883						} else
                           A 17190    ; 3884	#endif
                           A 17191    ; 3885						{
                           A 17192    ; 3886							clst = get_fat(
                           A 17193    .LINE 3886
                           A 17194    
004276 DD3106              A 17195    	LD	IY,(IX+%6)
004279 FD0715              A 17196    	LD	BC,(IY+%15)
00427C FD7E18              A 17197    	LD	A,(IY+%18)
00427F 2600                A 17198    	LD	H,%0
004281 6F                  A 17199    	LD	L,A
004282 E5                  A 17200    	PUSH	HL
004283 C5                  A 17201    	PUSH	BC
004284 ED6600              A 17202    	PEA	IY+%0
004287 CD 64 06 00         A 17203    	CALL	_get_fat
00428B C1                  A 17204    	POP	BC
00428C C1                  A 17205    	POP	BC
00428D C1                  A 17206    	POP	BC
00428E DD2FE6              A 17207    	LD	(IX+%FFFFFFE6),HL
004291 DD73E9              A 17208    	LD	(IX+%FFFFFFE9),E
                           A 17209    ; 3887						}
                           A 17210    ; 3888					}
004294                     A 17211    L_880:
                           A 17212    .LINE 3888
                           A 17213    
                           A 17214    ; 3889					if (clst < 2) ABORT(fs,
                           A 17215    .LINE 3889
                           A 17216    
004294 DD27E6              A 17217    	LD	HL,(IX+%FFFFFFE6)
004297 DD5EE9              A 17218    	LD	E,(IX+%FFFFFFE9)
00429A 01020000            A 17219    	LD	BC,2
00429E AF                  A 17220    	XOR	A,A
00429F CD 00 00 00         A 17221    	CALL	__lcmpu
0042A3 30 0F               A 17222    	JR	NC,L_881
0042A5 DD3106              A 17223    	LD	IY,(IX+%6)
0042A8 FD361002            A 17224    	LD	(IY+%10),%2
0042AC 21020000            A 17225    	LD	HL,2
0042B0 C3 05 45 00         A 17226    	JR	L_908
0042B4                     A 17227    L_881:
                           A 17228    ; 3890					if (clst == 0xFFFFFFFF)
                           A 17229    .LINE 3890
                           A 17230    
0042B4 DD27E6              A 17231    	LD	HL,(IX+%FFFFFFE6)
0042B7 DD5EE9              A 17232    	LD	E,(IX+%FFFFFFE9)
0042BA 01FFFFFF            A 17233    	LD	BC,16777215
0042BE 3EFF                A 17234    	LD	A,%FF
0042C0 CD 00 00 00         A 17235    	CALL	__lcmpu
0042C4 20 0F               A 17236    	JR	NZ,L_883
0042C6 DD3106              A 17237    	LD	IY,(IX+%6)
0042C9 FD361001            A 17238    	LD	(IY+%10),%1
0042CD 21010000            A 17239    	LD	HL,1
0042D1 C3 05 45 00         A 17240    	JR	L_908
0042D5                     A 17241    L_883:
                           A 17242    ; 3891					fp->clust = clst;		
                           A 17243    .LINE 3891
                           A 17244    
0042D5 DD07E6              A 17245    	LD	BC,(IX+%FFFFFFE6)
0042D8 DD7EE9              A 17246    	LD	A,(IX+%FFFFFFE9)
0042DB DD3106              A 17247    	LD	IY,(IX+%6)
0042DE FD0F15              A 17248    	LD	(IY+%15),BC
0042E1 FD7718              A 17249    	LD	(IY+%18),A
                           A 17250    ; 3892				}
0042E4                     A 17251    L_885:
                           A 17252    .LINE 3892
                           A 17253    
                           A 17254    ; 3893				sect = clst2sect(fs, fp->cl
                           A 17255    .LINE 3893
                           A 17256    
0042E4 DD3106              A 17257    	LD	IY,(IX+%6)
0042E7 FD0715              A 17258    	LD	BC,(IY+%15)
0042EA FD7E18              A 17259    	LD	A,(IY+%18)
0042ED 2600                A 17260    	LD	H,%0
0042EF 6F                  A 17261    	LD	L,A
0042F0 E5                  A 17262    	PUSH	HL
0042F1 C5                  A 17263    	PUSH	BC
0042F2 DD07FD              A 17264    	LD	BC,(IX+%FFFFFFFD)
0042F5 C5                  A 17265    	PUSH	BC
0042F6 CD F9 05 00         A 17266    	CALL	_clst2sect
0042FA C1                  A 17267    	POP	BC
0042FB C1                  A 17268    	POP	BC
0042FC C1                  A 17269    	POP	BC
0042FD DD2FF6              A 17270    	LD	(IX+%FFFFFFF6),HL
004300 DD73F9              A 17271    	LD	(IX+%FFFFFFF9),E
                           A 17272    ; 3894				if (sect == 0) ABORT(fs, FR
                           A 17273    .LINE 3894
                           A 17274    
004303 DD27F6              A 17275    	LD	HL,(IX+%FFFFFFF6)
004306 DD5EF9              A 17276    	LD	E,(IX+%FFFFFFF9)
004309 01000000            A 17277    	LD	BC,0
00430D AF                  A 17278    	XOR	A,A
00430E CD 00 00 00         A 17279    	CALL	__lcmpu
004312 20 0F               A 17280    	JR	NZ,L_887
004314 DD3106              A 17281    	LD	IY,(IX+%6)
004317 FD361002            A 17282    	LD	(IY+%10),%2
00431B 21020000            A 17283    	LD	HL,2
00431F C3 05 45 00         A 17284    	JR	L_908
004323                     A 17285    L_887:
                           A 17286    ; 3895				sect += csect;
                           A 17287    .LINE 3895
                           A 17288    
004323 DD07ED              A 17289    	LD	BC,(IX+%FFFFFFED)
004326 AF                  A 17290    	XOR	A,A
004327 DD27F6              A 17291    	LD	HL,(IX+%FFFFFFF6)
00432A DD5EF9              A 17292    	LD	E,(IX+%FFFFFFF9)
00432D CD 00 00 00         A 17293    	CALL	__ladd
004331 DD2FF6              A 17294    	LD	(IX+%FFFFFFF6),HL
004334 DD73F9              A 17295    	LD	(IX+%FFFFFFF9),E
                           A 17296    ; 3896				cc = btr / SS(fs);			
                           A 17297    .LINE 3896
                           A 17298    
004337 DD270C              A 17299    	LD	HL,(IX+%C)
00433A 3E09                A 17300    	LD	A,%9
00433C CD 00 00 00         A 17301    	CALL	__ishru_b
004340 DD2FF3              A 17302    	LD	(IX+%FFFFFFF3),HL
                           A 17303    ; 3897				if (cc > 0) {				
                           A 17304    .LINE 3897
                           A 17305    
004343 E5C1                A 17306    	LD	BC,HL
004345 B7                  A 17307    	OR	A,A
004346 ED62                A 17308    	SBC	HL,HL
004348 B7                  A 17309    	OR	A,A
004349 ED42                A 17310    	SBC	HL,BC
00434B D2 20 44 00         A 17311    	JR	NC,L_896
                           A 17312    ; 3898					if (csect + cc > fs->cs
                           A 17313    .LINE 3898
                           A 17314    
00434F DD31FD              A 17315    	LD	IY,(IX+%FFFFFFFD)
004352 FD0709              A 17316    	LD	BC,(IY+%9)
004355 CD 00 00 00         A 17317    	CALL	__stoiu
004359 E5C1                A 17318    	LD	BC,HL
00435B DD17F3              A 17319    	LD	DE,(IX+%FFFFFFF3)
00435E DD27ED              A 17320    	LD	HL,(IX+%FFFFFFED)
004361 19                  A 17321    	ADD	HL,DE
004362 E5D1                A 17322    	LD	DE,HL
004364 C5E1                A 17323    	LD	HL,BC
004366 B7                  A 17324    	OR	A,A
004367 ED52                A 17325    	SBC	HL,DE
004369 30 13               A 17326    	JR	NC,L_890
                           A 17327    ; 3899						cc = fs->csize - cs
                           A 17328    .LINE 3899
                           A 17329    
00436B DD31FD              A 17330    	LD	IY,(IX+%FFFFFFFD)
00436E FD0709              A 17331    	LD	BC,(IY+%9)
004371 CD 00 00 00         A 17332    	CALL	__stoiu
004375 DD07ED              A 17333    	LD	BC,(IX+%FFFFFFED)
004378 B7                  A 17334    	OR	A,A
004379 ED42                A 17335    	SBC	HL,BC
00437B DD2FF3              A 17336    	LD	(IX+%FFFFFFF3),HL
                           A 17337    ; 3900					}
00437E                     A 17338    L_890:
                           A 17339    .LINE 3900
                           A 17340    
                           A 17341    ; 3901					if (disk_read(fs->pdrv,
                           A 17342    .LINE 3901
                           A 17343    
00437E DD07F3              A 17344    	LD	BC,(IX+%FFFFFFF3)
004381 C5                  A 17345    	PUSH	BC
004382 DD4EF9              A 17346    	LD	C,(IX+%FFFFFFF9)
004385 0600                A 17347    	LD	B,%0
004387 C5                  A 17348    	PUSH	BC
004388 DD07F6              A 17349    	LD	BC,(IX+%FFFFFFF6)
00438B C5                  A 17350    	PUSH	BC
00438C DD07F0              A 17351    	LD	BC,(IX+%FFFFFFF0)
00438F C5                  A 17352    	PUSH	BC
004390 DD31FD              A 17353    	LD	IY,(IX+%FFFFFFFD)
004393 FD4E01              A 17354    	LD	C,(IY+%1)
004396 0600                A 17355    	LD	B,%0
004398 C5                  A 17356    	PUSH	BC
004399 CD 00 00 00         A 17357    	CALL	_disk_read
00439D C1                  A 17358    	POP	BC
00439E C1                  A 17359    	POP	BC
00439F C1                  A 17360    	POP	BC
0043A0 C1                  A 17361    	POP	BC
0043A1 C1                  A 17362    	POP	BC
0043A2 01000000            A 17363    	LD	BC,0
0043A6 B7                  A 17364    	OR	A,A
0043A7 ED42                A 17365    	SBC	HL,BC
0043A9 28 0F               A 17366    	JR	Z,L_891
0043AB DD3106              A 17367    	LD	IY,(IX+%6)
0043AE FD361001            A 17368    	LD	(IY+%10),%1
0043B2 21010000            A 17369    	LD	HL,1
0043B6 C3 05 45 00         A 17370    	JR	L_908
0043BA                     A 17371    L_891:
                           A 17372    ; 3902	#if !FF_FS_READONLY && FF_FS_MINIMIZE <
                           A 17373    ; 3903	#if FF_FS_TINY
                           A 17374    ; 3904					if (fs->wflag && fs->wi
                           A 17375    .LINE 3904
                           A 17376    
0043BA DD31FD              A 17377    	LD	IY,(IX+%FFFFFFFD)
0043BD FD7E03              A 17378    	LD	A,(IY+%3)
0043C0 B7                  A 17379    	OR	A,A
0043C1 28 4D               A 17380    	JR	Z,L_894
0043C3 DD31FD              A 17381    	LD	IY,(IX+%FFFFFFFD)
0043C6 FD2732              A 17382    	LD	HL,(IY+%32)
0043C9 FD5E35              A 17383    	LD	E,(IY+%35)
0043CC DD07F6              A 17384    	LD	BC,(IX+%FFFFFFF6)
0043CF DD7EF9              A 17385    	LD	A,(IX+%FFFFFFF9)
0043D2 CD 00 00 00         A 17386    	CALL	__lsub
0043D6 DD07F3              A 17387    	LD	BC,(IX+%FFFFFFF3)
0043D9 AF                  A 17388    	XOR	A,A
0043DA CD 00 00 00         A 17389    	CALL	__lcmpu
0043DE 30 30               A 17390    	JR	NC,L_894
                           A 17391    ; 3905						memcpy(rbuff + ((fs
                           A 17392    .LINE 3905
                           A 17393    
0043E0 01000200            A 17394    	LD	BC,512
0043E4 C5                  A 17395    	PUSH	BC
0043E5 DD31FD              A 17396    	LD	IY,(IX+%FFFFFFFD)
0043E8 ED6636              A 17397    	PEA	IY+%36
0043EB FD2732              A 17398    	LD	HL,(IY+%32)
0043EE FD5E35              A 17399    	LD	E,(IY+%35)
0043F1 DD07F6              A 17400    	LD	BC,(IX+%FFFFFFF6)
0043F4 DD7EF9              A 17401    	LD	A,(IX+%FFFFFFF9)
0043F7 CD 00 00 00         A 17402    	CALL	__lsub
0043FB 01000200            A 17403    	LD	BC,512
0043FF AF                  A 17404    	XOR	A,A
004400 CD 00 00 00         A 17405    	CALL	__lmulu
004404 DD07F0              A 17406    	LD	BC,(IX+%FFFFFFF0)
004407 09                  A 17407    	ADD	HL,BC
004408 E5                  A 17408    	PUSH	HL
004409 CD 00 00 00         A 17409    	CALL	_memcpy
00440D C1                  A 17410    	POP	BC
00440E C1                  A 17411    	POP	BC
00440F C1                  A 17412    	POP	BC
                           A 17413    ; 3906					}
004410                     A 17414    L_894:
                           A 17415    .LINE 3906
                           A 17416    
                           A 17417    ; 3907	#else
                           A 17418    ; 3908					if ((fp->flag & FA_DIRT
                           A 17419    ; 3909						memcpy(rbuff + ((fp
                           A 17420    ; 3910					}
                           A 17421    ; 3911	#endif
                           A 17422    ; 3912	#endif
                           A 17423    ; 3913					rcnt = SS(fs) * cc;		
                           A 17424    .LINE 3913
                           A 17425    
004410 DD27F3              A 17426    	LD	HL,(IX+%FFFFFFF3)
004413 3E09                A 17427    	LD	A,%9
004415 CD 00 00 00         A 17428    	CALL	__ishl_b
004419 DD2FFA              A 17429    	LD	(IX+%FFFFFFFA),HL
                           A 17430    ; 3914					continue;
                           A 17431    .LINE 3914
                           A 17432    
00441C C3 B9 44 00         A 17433    	JR	L_904
                           A 17434    ; 3915				}
004420                     A 17435    L_896:
                           A 17436    .LINE 3915
                           A 17437    
                           A 17438    ; 3916	#if !FF_FS_TINY
                           A 17439    ; 3917				if (fp->sect != sect) {		
                           A 17440    ; 3918	#if !FF_FS_READONLY
                           A 17441    ; 3919					if (fp->flag & FA_DIRTY
                           A 17442    ; 3920						if (disk_write(fs->
                           A 17443    ; 3921						fp->flag &= (BYTE)~
                           A 17444    ; 3922					}
                           A 17445    ; 3923	#endif
                           A 17446    ; 3924					if (disk_read(fs->pdrv,
                           A 17447    ; 3925				}
                           A 17448    ; 3926	#endif
                           A 17449    ; 3927				fp->sect = sect;
                           A 17450    .LINE 3927
                           A 17451    
004420 DD07F6              A 17452    	LD	BC,(IX+%FFFFFFF6)
004423 DD56F9              A 17453    	LD	D,(IX+%FFFFFFF9)
004426 DD3106              A 17454    	LD	IY,(IX+%6)
004429 FD0F19              A 17455    	LD	(IY+%19),BC
00442C FD721C              A 17456    	LD	(IY+%1C),D
                           A 17457    ; 3928			}
00442F                     A 17458    L_898:
                           A 17459    .LINE 3928
                           A 17460    
                           A 17461    ; 3929			rcnt = SS(fs) - (UINT)fp->fptr 
                           A 17462    .LINE 3929
                           A 17463    
00442F DD3106              A 17464    	LD	IY,(IX+%6)
004432 FD2711              A 17465    	LD	HL,(IY+%11)
004435 01FF0100            A 17466    	LD	BC,511
004439 CD 00 00 00         A 17467    	CALL	__iand
00443D E5C1                A 17468    	LD	BC,HL
00443F 21000200            A 17469    	LD	HL,512
004443 B7                  A 17470    	OR	A,A
004444 ED42                A 17471    	SBC	HL,BC
004446 DD2FFA              A 17472    	LD	(IX+%FFFFFFFA),HL
                           A 17473    ; 3930			if (rcnt > btr) rcnt = btr;		
                           A 17474    .LINE 3930
                           A 17475    
004449 E5C1                A 17476    	LD	BC,HL
00444B DD270C              A 17477    	LD	HL,(IX+%C)
00444E B7                  A 17478    	OR	A,A
00444F ED42                A 17479    	SBC	HL,BC
004451 30 06               A 17480    	JR	NC,L_901
004453 DD070C              A 17481    	LD	BC,(IX+%C)
004456 DD0FFA              A 17482    	LD	(IX+%FFFFFFFA),BC
004459                     A 17483    L_901:
                           A 17484    ; 3931	#if FF_FS_TINY
                           A 17485    ; 3932			if (move_window(fs, fp->sect) !
                           A 17486    .LINE 3932
                           A 17487    
004459 DD3106              A 17488    	LD	IY,(IX+%6)
00445C FD0719              A 17489    	LD	BC,(IY+%19)
00445F FD7E1C              A 17490    	LD	A,(IY+%1C)
004462 2600                A 17491    	LD	H,%0
004464 6F                  A 17492    	LD	L,A
004465 E5                  A 17493    	PUSH	HL
004466 C5                  A 17494    	PUSH	BC
004467 DD07FD              A 17495    	LD	BC,(IX+%FFFFFFFD)
00446A C5                  A 17496    	PUSH	BC
00446B CD 1E 04 00         A 17497    	CALL	_move_window
00446F C1                  A 17498    	POP	BC
004470 C1                  A 17499    	POP	BC
004471 C1                  A 17500    	POP	BC
004472 01000000            A 17501    	LD	BC,0
004476 B7                  A 17502    	OR	A,A
004477 ED42                A 17503    	SBC	HL,BC
004479 28 0D               A 17504    	JR	Z,L_902
00447B DD3106              A 17505    	LD	IY,(IX+%6)
00447E FD361001            A 17506    	LD	(IY+%10),%1
004482 21010000            A 17507    	LD	HL,1
004486 18 7D               A 17508    	JR	L_908
004488                     A 17509    L_902:
                           A 17510    ; 3933			memcpy(rbuff, fs->win + fp->fpt
                           A 17511    .LINE 3933
                           A 17512    
004488 DD07FA              A 17513    	LD	BC,(IX+%FFFFFFFA)
00448B C5                  A 17514    	PUSH	BC
00448C DD3106              A 17515    	LD	IY,(IX+%6)
00448F FD2711              A 17516    	LD	HL,(IY+%11)
004492 FD5E14              A 17517    	LD	E,(IY+%14)
004495 01FF0100            A 17518    	LD	BC,511
004499 AF                  A 17519    	XOR	A,A
00449A CD 00 00 00         A 17520    	CALL	__land
00449E E5C1                A 17521    	LD	BC,HL
0044A0 DD31FD              A 17522    	LD	IY,(IX+%FFFFFFFD)
0044A3 ED2336              A 17523    	LEA	HL,IY+%36
0044A6 09                  A 17524    	ADD	HL,BC
0044A7 E5                  A 17525    	PUSH	HL
0044A8 DD07F0              A 17526    	LD	BC,(IX+%FFFFFFF0)
0044AB C5                  A 17527    	PUSH	BC
0044AC DD77DA              A 17528    	LD	(IX+%FFFFFFDA),A
0044AF CD 00 00 00         A 17529    	CALL	_memcpy
0044B3 DD7EDA              A 17530    	LD	A,(IX+%FFFFFFDA)
0044B6 C1                  A 17531    	POP	BC
0044B7 C1                  A 17532    	POP	BC
0044B8 C1                  A 17533    	POP	BC
                           A 17534    ; 3934	#else
                           A 17535    ; 3935			memcpy(rbuff, fp->buf + fp->fpt
                           A 17536    ; 3936	#endif
                           A 17537    ; 3937		}
0044B9                     A 17538    L_904:
                           A 17539    .LINE 3937
                           A 17540    
0044B9 DD07FA              A 17541    	LD	BC,(IX+%FFFFFFFA)
0044BC DD270C              A 17542    	LD	HL,(IX+%C)
0044BF B7                  A 17543    	OR	A,A
0044C0 ED42                A 17544    	SBC	HL,BC
0044C2 DD2F0C              A 17545    	LD	(IX+%C),HL
0044C5 DD270F              A 17546    	LD	HL,(IX+%F)
0044C8 DD310F              A 17547    	LD	IY,(IX+%F)
0044CB DD07FA              A 17548    	LD	BC,(IX+%FFFFFFFA)
0044CE ED27                A 17549    	LD	HL,(HL)
0044D0 09                  A 17550    	ADD	HL,BC
0044D1 FD2F00              A 17551    	LD	(IY),HL
0044D4 DD07FA              A 17552    	LD	BC,(IX+%FFFFFFFA)
0044D7 DD27F0              A 17553    	LD	HL,(IX+%FFFFFFF0)
0044DA 09                  A 17554    	ADD	HL,BC
0044DB DD2FF0              A 17555    	LD	(IX+%FFFFFFF0),HL
0044DE DD07FA              A 17556    	LD	BC,(IX+%FFFFFFFA)
0044E1 AF                  A 17557    	XOR	A,A
0044E2 DD3106              A 17558    	LD	IY,(IX+%6)
0044E5 FD2711              A 17559    	LD	HL,(IY+%11)
0044E8 FD5E14              A 17560    	LD	E,(IY+%14)
0044EB CD 00 00 00         A 17561    	CALL	__ladd
0044EF FD2F11              A 17562    	LD	(IY+%11),HL
0044F2 FD7314              A 17563    	LD	(IY+%14),E
0044F5                     A 17564    L_905:
0044F5 DD070C              A 17565    	LD	BC,(IX+%C)
0044F8 B7                  A 17566    	OR	A,A
0044F9 ED62                A 17567    	SBC	HL,HL
0044FB B7                  A 17568    	OR	A,A
0044FC ED42                A 17569    	SBC	HL,BC
0044FE DA F5 41 00         A 17570    	JR	C,L_903
                           A 17571    ; 3938	
                           A 17572    ; 3939		LEAVE_FF(fs, FR_OK);
                           A 17573    .LINE 3939
                           A 17574    
004502 B7                  A 17575    	OR	A,A
004503 ED62                A 17576    	SBC	HL,HL
                           A 17577    ; 3940	}
004505                     A 17578    L_908:
                           A 17579    .LINE 3940
                           A 17580    
004505 DDF9                A 17581    	LD	SP,IX
004507 DDE1                A 17582    	POP	IX
004509 C9                  A 17583    	RET	
                           A 17584    
                           A 17585    
                           A 17586    ;**************************** _f_read *********
                           A 17587    ;Name                         Addr/Register   S
                           A 17588    ;_memcpy                             IMPORT  --
                           A 17589    ;_disk_read                          IMPORT  --
                           A 17590    ;remain                               IX-34    
                           A 17591    ;G_64                                 IX-30    
                           A 17592    ;clst                                 IX-26    
                           A 17593    ;res                                  IX-22    
                           A 17594    ;csect                                IX-19    
                           A 17595    ;rbuff                                IX-16    
                           A 17596    ;cc                                   IX-13    
                           A 17597    ;sect                                 IX-10    
                           A 17598    ;rcnt                                  IX-6    
                           A 17599    ;fs                                    IX-3    
                           A 17600    ;br                                   IX+15    
                           A 17601    ;btr                                  IX+12    
                           A 17602    ;buff                                  IX+9    
                           A 17603    ;fp                                    IX+6    
                           A 17604    
                           A 17605    
                           A 17606    ; Stack Frame Size: 56 (bytes)
                           A 17607    ;       Spill Code: -3 (instruction)
                           A 17608    
                           A 17609    
                           A 17610    .ENDFUNC "f_read",3940,"_f_read"
                           A 17611    ; 3941	
                           A 17612    ; 3942	
                           A 17613    ; 3943	
                           A 17614    ; 3944	
                           A 17615    ; 3945	#if !FF_FS_READONLY
                           A 17616    ; 3946	/*-------------------------------------
                           A 17617    ; 3947	/* Write File                          
                           A 17618    ; 3948	/*-------------------------------------
                           A 17619    ; 3949	
                           A 17620    ; 3950	FRESULT f_write (
                           A 17621    ; 3951		FIL* fp,			/* Open file to
                           A 17622    ; 3952		const void* buff,	/* Data to be w
                           A 17623    ; 3953		UINT btw,			/* Number of by
                           A 17624    ; 3954		UINT* bw			/* Number of by
                           A 17625    ; 3955	)
                           A 17626    ; 3956	{
00450A                     A 17627    _f_write:
                           A 17628    .DEFINE "_f_write"
                           A 17629    
                           A 17630    .VALUE _f_write
                           A 17631    
                           A 17632    .CLASS 2
                           A 17633    
                           A 17634    .TYPE 68
                           A 17635    
                           A 17636    .ENDEF
                           A 17637    
                           A 17638    .BEGFUNC "f_write",3956,"_f_write"
                           A 17639    
                           A 17640    .LINE 3956
                           A 17641    
                           A 17642    .DEFINE "fp"
                           A 17643    
                           A 17644    .CLASS 65
                           A 17645    
                           A 17646    .VALUE 6
                           A 17647    
                           A 17648    .TAG "NONAME2"
                           A 17649    
                           A 17650    .TYPE 40
                           A 17651    
                           A 17652    .ENDEF
                           A 17653    
                           A 17654    .DEFINE "buff"
                           A 17655    
                           A 17656    .CLASS 65
                           A 17657    
                           A 17658    .VALUE 9
                           A 17659    
                           A 17660    .TYPE 193
                           A 17661    
                           A 17662    .ENDEF
                           A 17663    
                           A 17664    .DEFINE "btw"
                           A 17665    
                           A 17666    .CLASS 65
                           A 17667    
                           A 17668    .VALUE 12
                           A 17669    
                           A 17670    .TYPE 14
                           A 17671    
                           A 17672    .ENDEF
                           A 17673    
                           A 17674    .DEFINE "bw"
                           A 17675    
                           A 17676    .CLASS 65
                           A 17677    
                           A 17678    .VALUE 15
                           A 17679    
                           A 17680    .TYPE 46
                           A 17681    
                           A 17682    .ENDEF
                           A 17683    
                           A 17684    .DEFINE "fs"
                           A 17685    
                           A 17686    .CLASS 65
                           A 17687    
                           A 17688    .VALUE -3
                           A 17689    
                           A 17690    .TAG "NONAME0"
                           A 17691    
                           A 17692    .TYPE 40
                           A 17693    
                           A 17694    .ENDEF
                           A 17695    
                           A 17696    .DEFINE "wcnt"
                           A 17697    
                           A 17698    .CLASS 65
                           A 17699    
                           A 17700    .VALUE -6
                           A 17701    
                           A 17702    .TYPE 14
                           A 17703    
                           A 17704    .ENDEF
                           A 17705    
                           A 17706    .DEFINE "clst"
                           A 17707    
                           A 17708    .CLASS 65
                           A 17709    
                           A 17710    .VALUE -10
                           A 17711    
                           A 17712    .TYPE 15
                           A 17713    
                           A 17714    .ENDEF
                           A 17715    
                           A 17716    .DEFINE "sect"
                           A 17717    
                           A 17718    .CLASS 65
                           A 17719    
                           A 17720    .VALUE -14
                           A 17721    
                           A 17722    .TYPE 15
                           A 17723    
                           A 17724    .ENDEF
                           A 17725    
                           A 17726    .DEFINE "cc"
                           A 17727    
                           A 17728    .CLASS 65
                           A 17729    
                           A 17730    .VALUE -17
                           A 17731    
                           A 17732    .TYPE 14
                           A 17733    
                           A 17734    .ENDEF
                           A 17735    
                           A 17736    .DEFINE "wbuff"
                           A 17737    
                           A 17738    .CLASS 65
                           A 17739    
                           A 17740    .VALUE -20
                           A 17741    
                           A 17742    .TYPE 204
                           A 17743    
                           A 17744    .ENDEF
                           A 17745    
                           A 17746    .DEFINE "csect"
                           A 17747    
                           A 17748    .CLASS 65
                           A 17749    
                           A 17750    .VALUE -23
                           A 17751    
                           A 17752    .TYPE 14
                           A 17753    
                           A 17754    .ENDEF
                           A 17755    
                           A 17756    .DEFINE "res"
                           A 17757    
                           A 17758    .CLASS 65
                           A 17759    
                           A 17760    .VALUE -26
                           A 17761    
                           A 17762    .TYPE 4
                           A 17763    
                           A 17764    .ENDEF
                           A 17765    
00450A DDE5                A 17766    	PUSH	IX
00450C DD210000 00         A 17767    	LD	IX,0
004511 DD39                A 17768    	ADD	IX,SP
004513 ED22C9              A 17769    	LEA	HL,IX+%FFFFFFC9
004516 F9                  A 17770    	LD	SP,HL
                           A 17771    ; 3957		FRESULT res;
                           A 17772    ; 3958		FATFS *fs;
                           A 17773    ; 3959		DWORD clst;
                           A 17774    ; 3960		LBA_t sect;
                           A 17775    ; 3961		UINT wcnt, cc, csect;
                           A 17776    ; 3962		const BYTE *wbuff = (const BYTE*)bu
                           A 17777    .LINE 3962
                           A 17778    
004517 DD0709              A 17779    	LD	BC,(IX+%9)
00451A DD0FEC              A 17780    	LD	(IX+%FFFFFFEC),BC
                           A 17781    ; 3963	
                           A 17782    ; 3964	
                           A 17783    ; 3965		*bw = 0;	/* Clear write byte cou
                           A 17784    .LINE 3965
                           A 17785    
00451D DD270F              A 17786    	LD	HL,(IX+%F)
004520 01000000            A 17787    	LD	BC,0
004524 ED0F                A 17788    	LD	(HL),BC
                           A 17789    ; 3966		res = validate(&fp->obj, &fs);		
                           A 17790    .LINE 3966
                           A 17791    
004526 ED65FD              A 17792    	PEA	IX+%FFFFFFFD
004529 DD3106              A 17793    	LD	IY,(IX+%6)
00452C ED6600              A 17794    	PEA	IY+%0
00452F CD 5F 3B 00         A 17795    	CALL	_validate
004533 C1                  A 17796    	POP	BC
004534 C1                  A 17797    	POP	BC
004535 DD2FE6              A 17798    	LD	(IX+%FFFFFFE6),HL
                           A 17799    ; 3967		if (res != FR_OK || (res = (FRESULT
                           A 17800    .LINE 3967
                           A 17801    
004538 01000000            A 17802    	LD	BC,0
00453C DD27E6              A 17803    	LD	HL,(IX+%FFFFFFE6)
00453F B7                  A 17804    	OR	A,A
004540 ED42                A 17805    	SBC	HL,BC
004542 20 15               A 17806    	JR	NZ,L_910
004544 DD3106              A 17807    	LD	IY,(IX+%6)
004547 FD7E10              A 17808    	LD	A,(IY+%10)
00454A B7ED62              A 17809    	UEXT	HL
00454D 6F                  A 17810    	LD	L,A
00454E DD2FE6              A 17811    	LD	(IX+%FFFFFFE6),HL
004551 DD27E6              A 17812    	LD	HL,(IX+%FFFFFFE6)
004554 B7                  A 17813    	OR	A,A
004555 ED42                A 17814    	SBC	HL,BC
004557 28 07               A 17815    	JR	Z,L_912
004559                     A 17816    L_910:
004559 DD27E6              A 17817    	LD	HL,(IX+%FFFFFFE6)
00455C C3 0A 4A 00         A 17818    	JR	L_960
004560                     A 17819    L_912:
                           A 17820    ; 3968		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 17821    .LINE 3968
                           A 17822    
004560 DD3106              A 17823    	LD	IY,(IX+%6)
004563 FD7E0F              A 17824    	LD	A,(IY+%F)
004566 E602                A 17825    	AND	A,%2
004568 20 08               A 17826    	JR	NZ,L_914
00456A 21070000            A 17827    	LD	HL,7
00456E C3 0A 4A 00         A 17828    	JR	L_960
004572                     A 17829    L_914:
                           A 17830    ; 3969	
                           A 17831    ; 3970		/* Check fptr wrap-around (file siz
                           A 17832    ; 3971		if ((!FF_FS_EXFAT || fs->fs_type !=
                           A 17833    .LINE 3971
                           A 17834    
004572 DD3106              A 17835    	LD	IY,(IX+%6)
004575 FD0711              A 17836    	LD	BC,(IY+%11)
004578 FD7E14              A 17837    	LD	A,(IY+%14)
00457B DD0FDB              A 17838    	LD	(IX+%FFFFFFDB),BC
00457E DD77DE              A 17839    	LD	(IX+%FFFFFFDE),A
004581 AF                  A 17840    	XOR	A,A
004582 5F                  A 17841    	LD	E,A
004583 DD270C              A 17842    	LD	HL,(IX+%C)
004586 DD7EDE              A 17843    	LD	A,(IX+%FFFFFFDE)
004589 CD 00 00 00         A 17844    	CALL	__ladd
00458D DD07DB              A 17845    	LD	BC,(IX+%FFFFFFDB)
004590 DD7EDE              A 17846    	LD	A,(IX+%FFFFFFDE)
004593 CD 00 00 00         A 17847    	CALL	__lcmpu
004597 D2 EF 49 00         A 17848    	JR	NC,L_957
                           A 17849    ; 3972			btw = (UINT)(0xFFFFFFFF - (DWOR
                           A 17850    .LINE 3972
                           A 17851    
00459B DD07DB              A 17852    	LD	BC,(IX+%FFFFFFDB)
00459E 21FFFFFF            A 17853    	LD	HL,16777215
0045A2 B7                  A 17854    	OR	A,A
0045A3 ED42                A 17855    	SBC	HL,BC
0045A5 DD2F0C              A 17856    	LD	(IX+%C),HL
                           A 17857    ; 3973		}
                           A 17858    .LINE 3973
                           A 17859    
                           A 17860    ; 3974	
                           A 17861    ; 3975		for ( ; btw > 0; btw -= wcnt, *bw +
                           A 17862    .LINE 3975
                           A 17863    
0045A8 C3 EF 49 00         A 17864    	JR	L_957
0045AC                     A 17865    L_955:
                           A 17866    ; 3976			if (fp->fptr % SS(fs) == 0) {	
                           A 17867    .LINE 3976
                           A 17868    
0045AC DD3106              A 17869    	LD	IY,(IX+%6)
0045AF FD0711              A 17870    	LD	BC,(IY+%11)
0045B2 FD7E14              A 17871    	LD	A,(IY+%14)
0045B5 DD0FDF              A 17872    	LD	(IX+%FFFFFFDF),BC
0045B8 DD77E2              A 17873    	LD	(IX+%FFFFFFE2),A
0045BB C5E1                A 17874    	LD	HL,BC
0045BD DD5EE2              A 17875    	LD	E,(IX+%FFFFFFE2)
0045C0 01FF0100            A 17876    	LD	BC,511
0045C4 AF                  A 17877    	XOR	A,A
0045C5 CD 00 00 00         A 17878    	CALL	__land
0045C9 01000000            A 17879    	LD	BC,0
0045CD AF                  A 17880    	XOR	A,A
0045CE CD 00 00 00         A 17881    	CALL	__lcmpu
0045D2 C2 C7 48 00         A 17882    	JR	NZ,L_950
                           A 17883    ; 3977				csect = (UINT)(fp->fptr / S
                           A 17884    .LINE 3977
                           A 17885    
0045D6 DD31FD              A 17886    	LD	IY,(IX+%FFFFFFFD)
0045D9 FD0709              A 17887    	LD	BC,(IY+%9)
0045DC CD 00 00 00         A 17888    	CALL	__stoiu
0045E0 E5D1                A 17889    	LD	DE,HL
0045E2 1B                  A 17890    	DEC	DE
0045E3 DD07DF              A 17891    	LD	BC,(IX+%FFFFFFDF)
0045E6 DD7EE2              A 17892    	LD	A,(IX+%FFFFFFE2)
0045E9 2E09                A 17893    	LD	L,%9
0045EB CD 00 00 00         A 17894    	CALL	__lshru
0045EF D5E1                A 17895    	LD	HL,DE
0045F1 CD 00 00 00         A 17896    	CALL	__iand
0045F5 DD2FE9              A 17897    	LD	(IX+%FFFFFFE9),HL
                           A 17898    ; 3978				if (csect == 0) {			
                           A 17899    .LINE 3978
                           A 17900    
0045F8 01000000            A 17901    	LD	BC,0
0045FC DD27E9              A 17902    	LD	HL,(IX+%FFFFFFE9)
0045FF B7                  A 17903    	OR	A,A
004600 ED42                A 17904    	SBC	HL,BC
004602 C2 FA 46 00         A 17905    	JR	NZ,L_933
                           A 17906    ; 3979					if (fp->fptr == 0) {	
                           A 17907    .LINE 3979
                           A 17908    
004606 DD27DF              A 17909    	LD	HL,(IX+%FFFFFFDF)
004609 DD5EE2              A 17910    	LD	E,(IX+%FFFFFFE2)
00460C AF                  A 17911    	XOR	A,A
00460D CD 00 00 00         A 17912    	CALL	__lcmpu
004611 20 3D               A 17913    	JR	NZ,L_921
                           A 17914    ; 3980						clst = fp->obj.sclu
                           A 17915    .LINE 3980
                           A 17916    
004613 DD3106              A 17917    	LD	IY,(IX+%6)
004616 ED0300              A 17918    	LEA	BC,IY+%0
004619 DD0FD8              A 17919    	LD	(IX+%FFFFFFD8),BC
00461C DD31D8              A 17920    	LD	IY,(IX+%FFFFFFD8)
00461F FD0707              A 17921    	LD	BC,(IY+%7)
004622 FD7E0A              A 17922    	LD	A,(IY+%A)
004625 DD0FF6              A 17923    	LD	(IX+%FFFFFFF6),BC
004628 DD77F9              A 17924    	LD	(IX+%FFFFFFF9),A
                           A 17925    ; 3981						if (clst == 0) {	
                           A 17926    .LINE 3981
                           A 17927    
00462B C5E1                A 17928    	LD	HL,BC
00462D DD5EF9              A 17929    	LD	E,(IX+%FFFFFFF9)
004630 01000000            A 17930    	LD	BC,0
004634 AF                  A 17931    	XOR	A,A
004635 CD 00 00 00         A 17932    	CALL	__lcmpu
004639 20 33               A 17933    	JR	NZ,L_923
                           A 17934    ; 3982							clst = create_c
                           A 17935    .LINE 3982
                           A 17936    
00463B C5                  A 17937    	PUSH	BC
00463C C5                  A 17938    	PUSH	BC
00463D DD07D8              A 17939    	LD	BC,(IX+%FFFFFFD8)
004640 C5                  A 17940    	PUSH	BC
004641 CD 8E 0D 00         A 17941    	CALL	_create_chain
004645 C1                  A 17942    	POP	BC
004646 C1                  A 17943    	POP	BC
004647 C1                  A 17944    	POP	BC
004648 DD2FF6              A 17945    	LD	(IX+%FFFFFFF6),HL
00464B DD73F9              A 17946    	LD	(IX+%FFFFFFF9),E
                           A 17947    ; 3983						}
                           A 17948    ; 3984					} else {				
                           A 17949    .LINE 3984
                           A 17950    
00464E 18 1E               A 17951    	JR	L_923
004650                     A 17952    L_921:
                           A 17953    ; 3985	#if FF_USE_FASTSEEK
                           A 17954    ; 3986						if (fp->cltbl) {
                           A 17955    ; 3987							clst = clmt_clu
                           A 17956    ; 3988						} else
                           A 17957    ; 3989	#endif
                           A 17958    ; 3990						{
                           A 17959    ; 3991							clst = create_c
                           A 17960    .LINE 3991
                           A 17961    
004650 DD3106              A 17962    	LD	IY,(IX+%6)
004653 FD0715              A 17963    	LD	BC,(IY+%15)
004656 FD7E18              A 17964    	LD	A,(IY+%18)
004659 2600                A 17965    	LD	H,%0
00465B 6F                  A 17966    	LD	L,A
00465C E5                  A 17967    	PUSH	HL
00465D C5                  A 17968    	PUSH	BC
00465E ED6600              A 17969    	PEA	IY+%0
004661 CD 8E 0D 00         A 17970    	CALL	_create_chain
004665 C1                  A 17971    	POP	BC
004666 C1                  A 17972    	POP	BC
004667 C1                  A 17973    	POP	BC
004668 DD2FF6              A 17974    	LD	(IX+%FFFFFFF6),HL
00466B DD73F9              A 17975    	LD	(IX+%FFFFFFF9),E
                           A 17976    ; 3992						}
                           A 17977    ; 3993					}
00466E                     A 17978    L_923:
                           A 17979    .LINE 3993
                           A 17980    
                           A 17981    ; 3994					if (clst == 0) break;	
                           A 17982    .LINE 3994
                           A 17983    
00466E DD27F6              A 17984    	LD	HL,(IX+%FFFFFFF6)
004671 DD5EF9              A 17985    	LD	E,(IX+%FFFFFFF9)
004674 01000000            A 17986    	LD	BC,0
004678 AF                  A 17987    	XOR	A,A
004679 CD 00 00 00         A 17988    	CALL	__lcmpu
00467D CA FC 49 00         A 17989    	JR	Z,L_959
                           A 17990    ; 3995					if (clst == 1) ABORT(fs
                           A 17991    .LINE 3995
                           A 17992    
004681 DD27F6              A 17993    	LD	HL,(IX+%FFFFFFF6)
004684 DD5EF9              A 17994    	LD	E,(IX+%FFFFFFF9)
004687 01010000            A 17995    	LD	BC,1
00468B AF                  A 17996    	XOR	A,A
00468C CD 00 00 00         A 17997    	CALL	__lcmpu
004690 20 0F               A 17998    	JR	NZ,L_926
004692 DD3106              A 17999    	LD	IY,(IX+%6)
004695 FD361002            A 18000    	LD	(IY+%10),%2
004699 21020000            A 18001    	LD	HL,2
00469D C3 0A 4A 00         A 18002    	JR	L_960
0046A1                     A 18003    L_926:
                           A 18004    ; 3996					if (clst == 0xFFFFFFFF)
                           A 18005    .LINE 3996
                           A 18006    
0046A1 DD27F6              A 18007    	LD	HL,(IX+%FFFFFFF6)
0046A4 DD5EF9              A 18008    	LD	E,(IX+%FFFFFFF9)
0046A7 01FFFFFF            A 18009    	LD	BC,16777215
0046AB 3EFF                A 18010    	LD	A,%FF
0046AD CD 00 00 00         A 18011    	CALL	__lcmpu
0046B1 20 0F               A 18012    	JR	NZ,L_928
0046B3 DD3106              A 18013    	LD	IY,(IX+%6)
0046B6 FD361001            A 18014    	LD	(IY+%10),%1
0046BA 21010000            A 18015    	LD	HL,1
0046BE C3 0A 4A 00         A 18016    	JR	L_960
0046C2                     A 18017    L_928:
                           A 18018    ; 3997					fp->clust = clst;		
                           A 18019    .LINE 3997
                           A 18020    
0046C2 DD07F6              A 18021    	LD	BC,(IX+%FFFFFFF6)
0046C5 DD7EF9              A 18022    	LD	A,(IX+%FFFFFFF9)
0046C8 DD3106              A 18023    	LD	IY,(IX+%6)
0046CB FD0F15              A 18024    	LD	(IY+%15),BC
0046CE FD7718              A 18025    	LD	(IY+%18),A
                           A 18026    ; 3998					if (fp->obj.sclust == 0
                           A 18027    .LINE 3998
                           A 18028    
0046D1 ED0300              A 18029    	LEA	BC,IY+%0
0046D4 DD0FD5              A 18030    	LD	(IX+%FFFFFFD5),BC
0046D7 DD31D5              A 18031    	LD	IY,(IX+%FFFFFFD5)
0046DA FD2707              A 18032    	LD	HL,(IY+%7)
0046DD FD5E0A              A 18033    	LD	E,(IY+%A)
0046E0 01000000            A 18034    	LD	BC,0
0046E4 AF                  A 18035    	XOR	A,A
0046E5 CD 00 00 00         A 18036    	CALL	__lcmpu
0046E9 20 0F               A 18037    	JR	NZ,L_933
0046EB DD07F6              A 18038    	LD	BC,(IX+%FFFFFFF6)
0046EE DD7EF9              A 18039    	LD	A,(IX+%FFFFFFF9)
0046F1 DD31D5              A 18040    	LD	IY,(IX+%FFFFFFD5)
0046F4 FD0F07              A 18041    	LD	(IY+%7),BC
0046F7 FD770A              A 18042    	LD	(IY+%A),A
                           A 18043    ; 3999				}
0046FA                     A 18044    L_933:
                           A 18045    .LINE 3999
                           A 18046    
                           A 18047    ; 4000	#if FF_FS_TINY
                           A 18048    ; 4001				if (fs->winsect == fp->sect
                           A 18049    .LINE 4001
                           A 18050    
0046FA DD31FD              A 18051    	LD	IY,(IX+%FFFFFFFD)
0046FD FD2732              A 18052    	LD	HL,(IY+%32)
004700 FD5E35              A 18053    	LD	E,(IY+%35)
004703 DD3106              A 18054    	LD	IY,(IX+%6)
004706 FD0719              A 18055    	LD	BC,(IY+%19)
004709 FD7E1C              A 18056    	LD	A,(IY+%1C)
00470C CD 00 00 00         A 18057    	CALL	__lcmpu
004710 20 21               A 18058    	JR	NZ,L_934
004712 DD07FD              A 18059    	LD	BC,(IX+%FFFFFFFD)
004715 C5                  A 18060    	PUSH	BC
004716 CD 4E 03 00         A 18061    	CALL	_sync_window
00471A C1                  A 18062    	POP	BC
00471B 01000000            A 18063    	LD	BC,0
00471F B7                  A 18064    	OR	A,A
004720 ED42                A 18065    	SBC	HL,BC
004722 28 0F               A 18066    	JR	Z,L_934
004724 DD3106              A 18067    	LD	IY,(IX+%6)
004727 FD361001            A 18068    	LD	(IY+%10),%1
00472B 21010000            A 18069    	LD	HL,1
00472F C3 0A 4A 00         A 18070    	JR	L_960
004733                     A 18071    L_934:
                           A 18072    ; 4002	#else
                           A 18073    ; 4003				if (fp->flag & FA_DIRTY) {	
                           A 18074    ; 4004					if (disk_write(fs->pdrv
                           A 18075    ; 4005					fp->flag &= (BYTE)~FA_D
                           A 18076    ; 4006				}
                           A 18077    ; 4007	#endif
                           A 18078    ; 4008				sect = clst2sect(fs, fp->cl
                           A 18079    .LINE 4008
                           A 18080    
004733 DD3106              A 18081    	LD	IY,(IX+%6)
004736 FD0715              A 18082    	LD	BC,(IY+%15)
004739 FD7E18              A 18083    	LD	A,(IY+%18)
00473C 2600                A 18084    	LD	H,%0
00473E 6F                  A 18085    	LD	L,A
00473F E5                  A 18086    	PUSH	HL
004740 C5                  A 18087    	PUSH	BC
004741 DD07FD              A 18088    	LD	BC,(IX+%FFFFFFFD)
004744 C5                  A 18089    	PUSH	BC
004745 CD F9 05 00         A 18090    	CALL	_clst2sect
004749 C1                  A 18091    	POP	BC
00474A C1                  A 18092    	POP	BC
00474B C1                  A 18093    	POP	BC
00474C DD2FF2              A 18094    	LD	(IX+%FFFFFFF2),HL
00474F DD73F5              A 18095    	LD	(IX+%FFFFFFF5),E
                           A 18096    ; 4009				if (sect == 0) ABORT(fs, FR
                           A 18097    .LINE 4009
                           A 18098    
004752 DD27F2              A 18099    	LD	HL,(IX+%FFFFFFF2)
004755 DD5EF5              A 18100    	LD	E,(IX+%FFFFFFF5)
004758 01000000            A 18101    	LD	BC,0
00475C AF                  A 18102    	XOR	A,A
00475D CD 00 00 00         A 18103    	CALL	__lcmpu
004761 20 0F               A 18104    	JR	NZ,L_936
004763 DD3106              A 18105    	LD	IY,(IX+%6)
004766 FD361002            A 18106    	LD	(IY+%10),%2
00476A 21020000            A 18107    	LD	HL,2
00476E C3 0A 4A 00         A 18108    	JR	L_960
004772                     A 18109    L_936:
                           A 18110    ; 4010				sect += csect;
                           A 18111    .LINE 4010
                           A 18112    
004772 DD07E9              A 18113    	LD	BC,(IX+%FFFFFFE9)
004775 AF                  A 18114    	XOR	A,A
004776 DD27F2              A 18115    	LD	HL,(IX+%FFFFFFF2)
004779 DD5EF5              A 18116    	LD	E,(IX+%FFFFFFF5)
00477C CD 00 00 00         A 18117    	CALL	__ladd
004780 DD2FF2              A 18118    	LD	(IX+%FFFFFFF2),HL
004783 DD73F5              A 18119    	LD	(IX+%FFFFFFF5),E
                           A 18120    ; 4011				cc = btw / SS(fs);			
                           A 18121    .LINE 4011
                           A 18122    
004786 DD270C              A 18123    	LD	HL,(IX+%C)
004789 3E09                A 18124    	LD	A,%9
00478B CD 00 00 00         A 18125    	CALL	__ishru_b
00478F DD2FEF              A 18126    	LD	(IX+%FFFFFFEF),HL
                           A 18127    ; 4012				if (cc > 0) {				
                           A 18128    .LINE 4012
                           A 18129    
004792 E5C1                A 18130    	LD	BC,HL
004794 B7                  A 18131    	OR	A,A
004795 ED62                A 18132    	SBC	HL,HL
004797 B7                  A 18133    	OR	A,A
004798 ED42                A 18134    	SBC	HL,BC
00479A D2 6D 48 00         A 18135    	JR	NC,L_947
                           A 18136    ; 4013					if (csect + cc > fs->cs
                           A 18137    .LINE 4013
                           A 18138    
00479E DD31FD              A 18139    	LD	IY,(IX+%FFFFFFFD)
0047A1 FD0709              A 18140    	LD	BC,(IY+%9)
0047A4 CD 00 00 00         A 18141    	CALL	__stoiu
0047A8 E5C1                A 18142    	LD	BC,HL
0047AA DD17EF              A 18143    	LD	DE,(IX+%FFFFFFEF)
0047AD DD27E9              A 18144    	LD	HL,(IX+%FFFFFFE9)
0047B0 19                  A 18145    	ADD	HL,DE
0047B1 E5D1                A 18146    	LD	DE,HL
0047B3 C5E1                A 18147    	LD	HL,BC
0047B5 B7                  A 18148    	OR	A,A
0047B6 ED52                A 18149    	SBC	HL,DE
0047B8 30 13               A 18150    	JR	NC,L_939
                           A 18151    ; 4014						cc = fs->csize - cs
                           A 18152    .LINE 4014
                           A 18153    
0047BA DD31FD              A 18154    	LD	IY,(IX+%FFFFFFFD)
0047BD FD0709              A 18155    	LD	BC,(IY+%9)
0047C0 CD 00 00 00         A 18156    	CALL	__stoiu
0047C4 DD07E9              A 18157    	LD	BC,(IX+%FFFFFFE9)
0047C7 B7                  A 18158    	OR	A,A
0047C8 ED42                A 18159    	SBC	HL,BC
0047CA DD2FEF              A 18160    	LD	(IX+%FFFFFFEF),HL
                           A 18161    ; 4015					}
0047CD                     A 18162    L_939:
                           A 18163    .LINE 4015
                           A 18164    
                           A 18165    ; 4016					if (disk_write(fs->pdrv
                           A 18166    .LINE 4016
                           A 18167    
0047CD DD07EF              A 18168    	LD	BC,(IX+%FFFFFFEF)
0047D0 C5                  A 18169    	PUSH	BC
0047D1 DD4EF5              A 18170    	LD	C,(IX+%FFFFFFF5)
0047D4 0600                A 18171    	LD	B,%0
0047D6 C5                  A 18172    	PUSH	BC
0047D7 DD07F2              A 18173    	LD	BC,(IX+%FFFFFFF2)
0047DA C5                  A 18174    	PUSH	BC
0047DB DD07EC              A 18175    	LD	BC,(IX+%FFFFFFEC)
0047DE C5                  A 18176    	PUSH	BC
0047DF DD31FD              A 18177    	LD	IY,(IX+%FFFFFFFD)
0047E2 FD4E01              A 18178    	LD	C,(IY+%1)
0047E5 0600                A 18179    	LD	B,%0
0047E7 C5                  A 18180    	PUSH	BC
0047E8 CD 00 00 00         A 18181    	CALL	_disk_write
0047EC C1                  A 18182    	POP	BC
0047ED C1                  A 18183    	POP	BC
0047EE C1                  A 18184    	POP	BC
0047EF C1                  A 18185    	POP	BC
0047F0 C1                  A 18186    	POP	BC
0047F1 01000000            A 18187    	LD	BC,0
0047F5 B7                  A 18188    	OR	A,A
0047F6 ED42                A 18189    	SBC	HL,BC
0047F8 28 0F               A 18190    	JR	Z,L_940
0047FA DD3106              A 18191    	LD	IY,(IX+%6)
0047FD FD361001            A 18192    	LD	(IY+%10),%1
004801 21010000            A 18193    	LD	HL,1
004805 C3 0A 4A 00         A 18194    	JR	L_960
004809                     A 18195    L_940:
                           A 18196    ; 4017	#if FF_FS_MINIMIZE <= 2
                           A 18197    ; 4018	#if FF_FS_TINY
                           A 18198    ; 4019					if (fs->winsect - sect 
                           A 18199    .LINE 4019
                           A 18200    
004809 DD31FD              A 18201    	LD	IY,(IX+%FFFFFFFD)
00480C FD2732              A 18202    	LD	HL,(IY+%32)
00480F FD5E35              A 18203    	LD	E,(IY+%35)
004812 DD07F2              A 18204    	LD	BC,(IX+%FFFFFFF2)
004815 DD7EF5              A 18205    	LD	A,(IX+%FFFFFFF5)
004818 CD 00 00 00         A 18206    	CALL	__lsub
00481C DD07EF              A 18207    	LD	BC,(IX+%FFFFFFEF)
00481F AF                  A 18208    	XOR	A,A
004820 CD 00 00 00         A 18209    	CALL	__lcmpu
004824 30 37               A 18210    	JR	NC,L_942
                           A 18211    ; 4020						memcpy(fs->win, wbu
                           A 18212    .LINE 4020
                           A 18213    
004826 01000200            A 18214    	LD	BC,512
00482A C5                  A 18215    	PUSH	BC
00482B DD31FD              A 18216    	LD	IY,(IX+%FFFFFFFD)
00482E FD2732              A 18217    	LD	HL,(IY+%32)
004831 FD5E35              A 18218    	LD	E,(IY+%35)
004834 DD07F2              A 18219    	LD	BC,(IX+%FFFFFFF2)
004837 DD7EF5              A 18220    	LD	A,(IX+%FFFFFFF5)
00483A CD 00 00 00         A 18221    	CALL	__lsub
00483E 01000200            A 18222    	LD	BC,512
004842 AF                  A 18223    	XOR	A,A
004843 CD 00 00 00         A 18224    	CALL	__lmulu
004847 DD07EC              A 18225    	LD	BC,(IX+%FFFFFFEC)
00484A 09                  A 18226    	ADD	HL,BC
00484B E5                  A 18227    	PUSH	HL
00484C ED6636              A 18228    	PEA	IY+%36
00484F CD 00 00 00         A 18229    	CALL	_memcpy
004853 C1                  A 18230    	POP	BC
004854 C1                  A 18231    	POP	BC
004855 C1                  A 18232    	POP	BC
                           A 18233    ; 4021						fs->wflag = 0;
                           A 18234    .LINE 4021
                           A 18235    
004856 DD31FD              A 18236    	LD	IY,(IX+%FFFFFFFD)
004859 FD360300            A 18237    	LD	(IY+%3),%0
                           A 18238    ; 4022					}
00485D                     A 18239    L_942:
                           A 18240    .LINE 4022
                           A 18241    
                           A 18242    ; 4023	#else
                           A 18243    ; 4024					if (fp->sect - sect < c
                           A 18244    ; 4025						memcpy(fp->buf, wbu
                           A 18245    ; 4026						fp->flag &= (BYTE)~
                           A 18246    ; 4027					}
                           A 18247    ; 4028	#endif
                           A 18248    ; 4029	#endif
                           A 18249    ; 4030					wcnt = SS(fs) * cc;		
                           A 18250    .LINE 4030
                           A 18251    
00485D DD27EF              A 18252    	LD	HL,(IX+%FFFFFFEF)
004860 3E09                A 18253    	LD	A,%9
004862 CD 00 00 00         A 18254    	CALL	__ishl_b
004866 DD2FFA              A 18255    	LD	(IX+%FFFFFFFA),HL
                           A 18256    ; 4031					continue;
                           A 18257    .LINE 4031
                           A 18258    
004869 C3 5A 49 00         A 18259    	JR	L_956
                           A 18260    ; 4032				}
00486D                     A 18261    L_947:
                           A 18262    .LINE 4032
                           A 18263    
                           A 18264    ; 4033	#if FF_FS_TINY
                           A 18265    ; 4034				if (fp->fptr >= fp->obj.obj
                           A 18266    .LINE 4034
                           A 18267    
00486D DD3106              A 18268    	LD	IY,(IX+%6)
004870 FD2711              A 18269    	LD	HL,(IY+%11)
004873 FD5E14              A 18270    	LD	E,(IY+%14)
004876 FD070B              A 18271    	LD	BC,(IY+%B)
004879 FD7E0E              A 18272    	LD	A,(IY+%E)
00487C CD 00 00 00         A 18273    	CALL	__lcmpu
004880 38 36               A 18274    	JR	C,L_948
                           A 18275    ; 4035					if (sync_window(fs) != 
                           A 18276    .LINE 4035
                           A 18277    
004882 DD07FD              A 18278    	LD	BC,(IX+%FFFFFFFD)
004885 C5                  A 18279    	PUSH	BC
004886 DD77C9              A 18280    	LD	(IX+%FFFFFFC9),A
004889 CD 4E 03 00         A 18281    	CALL	_sync_window
00488D DD7EC9              A 18282    	LD	A,(IX+%FFFFFFC9)
004890 C1                  A 18283    	POP	BC
004891 01000000            A 18284    	LD	BC,0
004895 B7                  A 18285    	OR	A,A
004896 ED42                A 18286    	SBC	HL,BC
004898 28 0F               A 18287    	JR	Z,L_945
00489A DD3106              A 18288    	LD	IY,(IX+%6)
00489D FD361001            A 18289    	LD	(IY+%10),%1
0048A1 21010000            A 18290    	LD	HL,1
0048A5 C3 0A 4A 00         A 18291    	JR	L_960
0048A9                     A 18292    L_945:
                           A 18293    ; 4036					fs->winsect = sect;
                           A 18294    .LINE 4036
                           A 18295    
0048A9 DD07F2              A 18296    	LD	BC,(IX+%FFFFFFF2)
0048AC DD56F5              A 18297    	LD	D,(IX+%FFFFFFF5)
0048AF DD31FD              A 18298    	LD	IY,(IX+%FFFFFFFD)
0048B2 FD0F32              A 18299    	LD	(IY+%32),BC
0048B5 FD7235              A 18300    	LD	(IY+%35),D
                           A 18301    ; 4037				}
0048B8                     A 18302    L_948:
                           A 18303    .LINE 4037
                           A 18304    
                           A 18305    ; 4038	#else
                           A 18306    ; 4039				if (fp->sect != sect && 	
                           A 18307    ; 4040					fp->fptr < fp->obj.objs
                           A 18308    ; 4041					disk_read(fs->pdrv, fp-
                           A 18309    ; 4042						ABORT(fs, FR_DISK_E
                           A 18310    ; 4043				}
                           A 18311    ; 4044	#endif
                           A 18312    ; 4045				fp->sect = sect;
                           A 18313    .LINE 4045
                           A 18314    
0048B8 DD07F2              A 18315    	LD	BC,(IX+%FFFFFFF2)
0048BB DD56F5              A 18316    	LD	D,(IX+%FFFFFFF5)
0048BE DD3106              A 18317    	LD	IY,(IX+%6)
0048C1 FD0F19              A 18318    	LD	(IY+%19),BC
0048C4 FD721C              A 18319    	LD	(IY+%1C),D
                           A 18320    ; 4046			}
0048C7                     A 18321    L_950:
                           A 18322    .LINE 4046
                           A 18323    
                           A 18324    ; 4047			wcnt = SS(fs) - (UINT)fp->fptr 
                           A 18325    .LINE 4047
                           A 18326    
0048C7 DD3106              A 18327    	LD	IY,(IX+%6)
0048CA FD2711              A 18328    	LD	HL,(IY+%11)
0048CD 01FF0100            A 18329    	LD	BC,511
0048D1 CD 00 00 00         A 18330    	CALL	__iand
0048D5 E5C1                A 18331    	LD	BC,HL
0048D7 21000200            A 18332    	LD	HL,512
0048DB B7                  A 18333    	OR	A,A
0048DC ED42                A 18334    	SBC	HL,BC
0048DE DD2FFA              A 18335    	LD	(IX+%FFFFFFFA),HL
                           A 18336    ; 4048			if (wcnt > btw) wcnt = btw;		
                           A 18337    .LINE 4048
                           A 18338    
0048E1 E5C1                A 18339    	LD	BC,HL
0048E3 DD270C              A 18340    	LD	HL,(IX+%C)
0048E6 B7                  A 18341    	OR	A,A
0048E7 ED42                A 18342    	SBC	HL,BC
0048E9 30 06               A 18343    	JR	NC,L_953
0048EB DD070C              A 18344    	LD	BC,(IX+%C)
0048EE DD0FFA              A 18345    	LD	(IX+%FFFFFFFA),BC
0048F1                     A 18346    L_953:
                           A 18347    ; 4049	#if FF_FS_TINY
                           A 18348    ; 4050			if (move_window(fs, fp->sect) !
                           A 18349    .LINE 4050
                           A 18350    
0048F1 DD3106              A 18351    	LD	IY,(IX+%6)
0048F4 FD0719              A 18352    	LD	BC,(IY+%19)
0048F7 FD7E1C              A 18353    	LD	A,(IY+%1C)
0048FA 2600                A 18354    	LD	H,%0
0048FC 6F                  A 18355    	LD	L,A
0048FD E5                  A 18356    	PUSH	HL
0048FE C5                  A 18357    	PUSH	BC
0048FF DD07FD              A 18358    	LD	BC,(IX+%FFFFFFFD)
004902 C5                  A 18359    	PUSH	BC
004903 CD 1E 04 00         A 18360    	CALL	_move_window
004907 C1                  A 18361    	POP	BC
004908 C1                  A 18362    	POP	BC
004909 C1                  A 18363    	POP	BC
00490A 01000000            A 18364    	LD	BC,0
00490E B7                  A 18365    	OR	A,A
00490F ED42                A 18366    	SBC	HL,BC
004911 28 0F               A 18367    	JR	Z,L_954
004913 DD3106              A 18368    	LD	IY,(IX+%6)
004916 FD361001            A 18369    	LD	(IY+%10),%1
00491A 21010000            A 18370    	LD	HL,1
00491E C3 0A 4A 00         A 18371    	JR	L_960
004922                     A 18372    L_954:
                           A 18373    ; 4051			memcpy(fs->win + fp->fptr % SS(
                           A 18374    .LINE 4051
                           A 18375    
004922 DD07FA              A 18376    	LD	BC,(IX+%FFFFFFFA)
004925 C5                  A 18377    	PUSH	BC
004926 DD07EC              A 18378    	LD	BC,(IX+%FFFFFFEC)
004929 C5                  A 18379    	PUSH	BC
00492A DD3106              A 18380    	LD	IY,(IX+%6)
00492D FD2711              A 18381    	LD	HL,(IY+%11)
004930 FD5E14              A 18382    	LD	E,(IY+%14)
004933 01FF0100            A 18383    	LD	BC,511
004937 AF                  A 18384    	XOR	A,A
004938 CD 00 00 00         A 18385    	CALL	__land
00493C E5C1                A 18386    	LD	BC,HL
00493E DD31FD              A 18387    	LD	IY,(IX+%FFFFFFFD)
004941 ED2336              A 18388    	LEA	HL,IY+%36
004944 09                  A 18389    	ADD	HL,BC
004945 E5                  A 18390    	PUSH	HL
004946 DD77C9              A 18391    	LD	(IX+%FFFFFFC9),A
004949 CD 00 00 00         A 18392    	CALL	_memcpy
00494D DD7EC9              A 18393    	LD	A,(IX+%FFFFFFC9)
004950 C1                  A 18394    	POP	BC
004951 C1                  A 18395    	POP	BC
004952 C1                  A 18396    	POP	BC
                           A 18397    ; 4052			fs->wflag = 1;
                           A 18398    .LINE 4052
                           A 18399    
004953 DD31FD              A 18400    	LD	IY,(IX+%FFFFFFFD)
004956 FD360301            A 18401    	LD	(IY+%3),%1
                           A 18402    ; 4053	#else
                           A 18403    ; 4054			memcpy(fp->buf + fp->fptr % SS(
                           A 18404    ; 4055			fp->flag |= FA_DIRTY;
                           A 18405    ; 4056	#endif
                           A 18406    ; 4057		}
00495A                     A 18407    L_956:
                           A 18408    .LINE 4057
                           A 18409    
00495A DD07FA              A 18410    	LD	BC,(IX+%FFFFFFFA)
00495D DD270C              A 18411    	LD	HL,(IX+%C)
004960 B7                  A 18412    	OR	A,A
004961 ED42                A 18413    	SBC	HL,BC
004963 DD2F0C              A 18414    	LD	(IX+%C),HL
004966 DD270F              A 18415    	LD	HL,(IX+%F)
004969 DD310F              A 18416    	LD	IY,(IX+%F)
00496C DD07FA              A 18417    	LD	BC,(IX+%FFFFFFFA)
00496F ED27                A 18418    	LD	HL,(HL)
004971 09                  A 18419    	ADD	HL,BC
004972 FD2F00              A 18420    	LD	(IY),HL
004975 DD07FA              A 18421    	LD	BC,(IX+%FFFFFFFA)
004978 DD27EC              A 18422    	LD	HL,(IX+%FFFFFFEC)
00497B 09                  A 18423    	ADD	HL,BC
00497C DD2FEC              A 18424    	LD	(IX+%FFFFFFEC),HL
00497F DD07FA              A 18425    	LD	BC,(IX+%FFFFFFFA)
004982 AF                  A 18426    	XOR	A,A
004983 DD3106              A 18427    	LD	IY,(IX+%6)
004986 FD2711              A 18428    	LD	HL,(IY+%11)
004989 FD5E14              A 18429    	LD	E,(IY+%14)
00498C CD 00 00 00         A 18430    	CALL	__ladd
004990 FD2F11              A 18431    	LD	(IY+%11),HL
004993 FD7314              A 18432    	LD	(IY+%14),E
004996 FD0711              A 18433    	LD	BC,(IY+%11)
004999 FD7E14              A 18434    	LD	A,(IY+%14)
00499C DD0FCA              A 18435    	LD	(IX+%FFFFFFCA),BC
00499F DD77CD              A 18436    	LD	(IX+%FFFFFFCD),A
0049A2 ED1300              A 18437    	LEA	DE,IY+%0
0049A5 DD1FE3              A 18438    	LD	(IX+%FFFFFFE3),DE
0049A8 DD1FD2              A 18439    	LD	(IX+%FFFFFFD2),DE
0049AB DD31E3              A 18440    	LD	IY,(IX+%FFFFFFE3)
0049AE FD270B              A 18441    	LD	HL,(IY+%B)
0049B1 FD5E0E              A 18442    	LD	E,(IY+%E)
0049B4 DD7ECD              A 18443    	LD	A,(IX+%FFFFFFCD)
0049B7 CD 00 00 00         A 18444    	CALL	__lcmpu
0049BB 30 0E               A 18445    	JR	NC,L_917
0049BD DD07CA              A 18446    	LD	BC,(IX+%FFFFFFCA)
0049C0 DD7ECD              A 18447    	LD	A,(IX+%FFFFFFCD)
0049C3 DD0FCE              A 18448    	LD	(IX+%FFFFFFCE),BC
0049C6 DD77D1              A 18449    	LD	(IX+%FFFFFFD1),A
0049C9 18 15               A 18450    	JR	L_918
0049CB                     A 18451    L_917:
0049CB DD07E3              A 18452    	LD	BC,(IX+%FFFFFFE3)
0049CE DD0FD2              A 18453    	LD	(IX+%FFFFFFD2),BC
0049D1 DD31E3              A 18454    	LD	IY,(IX+%FFFFFFE3)
0049D4 FD070B              A 18455    	LD	BC,(IY+%B)
0049D7 FD7E0E              A 18456    	LD	A,(IY+%E)
0049DA DD0FCE              A 18457    	LD	(IX+%FFFFFFCE),BC
0049DD DD77D1              A 18458    	LD	(IX+%FFFFFFD1),A
0049E0                     A 18459    L_918:
0049E0 DD07CE              A 18460    	LD	BC,(IX+%FFFFFFCE)
0049E3 DD7ED1              A 18461    	LD	A,(IX+%FFFFFFD1)
0049E6 DD31D2              A 18462    	LD	IY,(IX+%FFFFFFD2)
0049E9 FD0F0B              A 18463    	LD	(IY+%B),BC
0049EC FD770E              A 18464    	LD	(IY+%E),A
0049EF                     A 18465    L_957:
0049EF DD070C              A 18466    	LD	BC,(IX+%C)
0049F2 B7                  A 18467    	OR	A,A
0049F3 ED62                A 18468    	SBC	HL,HL
0049F5 B7                  A 18469    	OR	A,A
0049F6 ED42                A 18470    	SBC	HL,BC
0049F8 DA AC 45 00         A 18471    	JR	C,L_955
0049FC                     A 18472    L_959:
                           A 18473    ; 4058	
                           A 18474    ; 4059		fp->flag |= FA_MODIFIED;			
                           A 18475    .LINE 4059
                           A 18476    
0049FC DD3106              A 18477    	LD	IY,(IX+%6)
0049FF FD7E0F              A 18478    	LD	A,(IY+%F)
004A02 CBF7                A 18479    	SET	%6,A
004A04 FD770F              A 18480    	LD	(IY+%F),A
                           A 18481    ; 4060	
                           A 18482    ; 4061		LEAVE_FF(fs, FR_OK);
                           A 18483    .LINE 4061
                           A 18484    
004A07 B7                  A 18485    	OR	A,A
004A08 ED62                A 18486    	SBC	HL,HL
                           A 18487    ; 4062	}
004A0A                     A 18488    L_960:
                           A 18489    .LINE 4062
                           A 18490    
004A0A DDF9                A 18491    	LD	SP,IX
004A0C DDE1                A 18492    	POP	IX
004A0E C9                  A 18493    	RET	
                           A 18494    
                           A 18495    
                           A 18496    ;**************************** _f_write ********
                           A 18497    ;Name                         Addr/Register   S
                           A 18498    ;_memcpy                             IMPORT  --
                           A 18499    ;_disk_write                         IMPORT  --
                           A 18500    ;G_71                                 IX-54    
                           A 18501    ;temp915                              IX-50    
                           A 18502    ;G_73                                 IX-46    
                           A 18503    ;G_70                                 IX-43    
                           A 18504    ;G_69                                 IX-40    
                           A 18505    ;G_66                                 IX-37    
                           A 18506    ;G_67                                 IX-33    
                           A 18507    ;G_72                                 IX-29    
                           A 18508    ;res                                  IX-26    
                           A 18509    ;csect                                IX-23    
                           A 18510    ;wbuff                                IX-20    
                           A 18511    ;cc                                   IX-17    
                           A 18512    ;sect                                 IX-14    
                           A 18513    ;clst                                 IX-10    
                           A 18514    ;wcnt                                  IX-6    
                           A 18515    ;fs                                    IX-3    
                           A 18516    ;bw                                   IX+15    
                           A 18517    ;btw                                  IX+12    
                           A 18518    ;buff                                  IX+9    
                           A 18519    ;fp                                    IX+6    
                           A 18520    
                           A 18521    
                           A 18522    ; Stack Frame Size: 73 (bytes)
                           A 18523    ;       Spill Code: -3 (instruction)
                           A 18524    
                           A 18525    
                           A 18526    .ENDFUNC "f_write",4062,"_f_write"
                           A 18527    ; 4063	
                           A 18528    ; 4064	
                           A 18529    ; 4065	
                           A 18530    ; 4066	
                           A 18531    ; 4067	/*-------------------------------------
                           A 18532    ; 4068	/* Synchronize the File                
                           A 18533    ; 4069	/*-------------------------------------
                           A 18534    ; 4070	
                           A 18535    ; 4071	FRESULT f_sync (
                           A 18536    ; 4072		FIL* fp		/* Open file to be sync
                           A 18537    ; 4073	)
                           A 18538    ; 4074	{
004A0F                     A 18539    _f_sync:
                           A 18540    .DEFINE "_f_sync"
                           A 18541    
                           A 18542    .VALUE _f_sync
                           A 18543    
                           A 18544    .CLASS 2
                           A 18545    
                           A 18546    .TYPE 68
                           A 18547    
                           A 18548    .ENDEF
                           A 18549    
                           A 18550    .BEGFUNC "f_sync",4074,"_f_sync"
                           A 18551    
                           A 18552    .LINE 4074
                           A 18553    
                           A 18554    .DEFINE "fp"
                           A 18555    
                           A 18556    .CLASS 65
                           A 18557    
                           A 18558    .VALUE 6
                           A 18559    
                           A 18560    .TAG "NONAME2"
                           A 18561    
                           A 18562    .TYPE 40
                           A 18563    
                           A 18564    .ENDEF
                           A 18565    
                           A 18566    .DEFINE "dir"
                           A 18567    
                           A 18568    .CLASS 65
                           A 18569    
                           A 18570    .VALUE -3
                           A 18571    
                           A 18572    .TYPE 44
                           A 18573    
                           A 18574    .ENDEF
                           A 18575    
                           A 18576    .DEFINE "res"
                           A 18577    
                           A 18578    .CLASS 65
                           A 18579    
                           A 18580    .VALUE -6
                           A 18581    
                           A 18582    .TYPE 4
                           A 18583    
                           A 18584    .ENDEF
                           A 18585    
                           A 18586    .DEFINE "fs"
                           A 18587    
                           A 18588    .CLASS 65
                           A 18589    
                           A 18590    .VALUE -9
                           A 18591    
                           A 18592    .TAG "NONAME0"
                           A 18593    
                           A 18594    .TYPE 40
                           A 18595    
                           A 18596    .ENDEF
                           A 18597    
                           A 18598    .DEFINE "tm"
                           A 18599    
                           A 18600    .CLASS 65
                           A 18601    
                           A 18602    .VALUE -13
                           A 18603    
                           A 18604    .TYPE 15
                           A 18605    
                           A 18606    .ENDEF
                           A 18607    
004A0F DDE5                A 18608    	PUSH	IX
004A11 DD210000 00         A 18609    	LD	IX,0
004A16 DD39                A 18610    	ADD	IX,SP
004A18 ED22F0              A 18611    	LEA	HL,IX+%FFFFFFF0
004A1B F9                  A 18612    	LD	SP,HL
                           A 18613    ; 4075		FRESULT res;
                           A 18614    ; 4076		FATFS *fs;
                           A 18615    ; 4077		DWORD tm;
                           A 18616    ; 4078		BYTE *dir;
                           A 18617    ; 4079	
                           A 18618    ; 4080	
                           A 18619    ; 4081		res = validate(&fp->obj, &fs);	/* 
                           A 18620    .LINE 4081
                           A 18621    
004A1C ED65F7              A 18622    	PEA	IX+%FFFFFFF7
004A1F DD3106              A 18623    	LD	IY,(IX+%6)
004A22 ED6600              A 18624    	PEA	IY+%0
004A25 CD 5F 3B 00         A 18625    	CALL	_validate
004A29 C1                  A 18626    	POP	BC
004A2A C1                  A 18627    	POP	BC
004A2B DD2FFA              A 18628    	LD	(IX+%FFFFFFFA),HL
                           A 18629    ; 4082		if (res == FR_OK) {
                           A 18630    .LINE 4082
                           A 18631    
004A2E 01000000            A 18632    	LD	BC,0
004A32 DD27FA              A 18633    	LD	HL,(IX+%FFFFFFFA)
004A35 B7                  A 18634    	OR	A,A
004A36 ED42                A 18635    	SBC	HL,BC
004A38 C2 1D 4B 00         A 18636    	JR	NZ,L_964
                           A 18637    ; 4083			if (fp->flag & FA_MODIFIED) {	
                           A 18638    .LINE 4083
                           A 18639    
004A3C DD3106              A 18640    	LD	IY,(IX+%6)
004A3F FD7E0F              A 18641    	LD	A,(IY+%F)
004A42 E640                A 18642    	AND	A,%40
004A44 CA 1D 4B 00         A 18643    	JR	Z,L_964
                           A 18644    ; 4084	#if !FF_FS_TINY
                           A 18645    ; 4085				if (fp->flag & FA_DIRTY) {	
                           A 18646    ; 4086					if (disk_write(fs->pdrv
                           A 18647    ; 4087					fp->flag &= (BYTE)~FA_D
                           A 18648    ; 4088				}
                           A 18649    ; 4089	#endif
                           A 18650    ; 4090				/* Update the directory ent
                           A 18651    ; 4091				tm = GET_FATTIME();			
                           A 18652    .LINE 4091
                           A 18653    
004A48 CD 00 00 00         A 18654    	CALL	_get_fattime
004A4C DD2FF3              A 18655    	LD	(IX+%FFFFFFF3),HL
004A4F DD73F6              A 18656    	LD	(IX+%FFFFFFF6),E
                           A 18657    ; 4092	#if FF_FS_EXFAT
                           A 18658    ; 4093				if (fs->fs_type == FS_EXFAT
                           A 18659    ; 4094					res = fill_first_frag(&
                           A 18660    ; 4095					if (res == FR_OK) {
                           A 18661    ; 4096						res = fill_last_fra
                           A 18662    ; 4097					}
                           A 18663    ; 4098					if (res == FR_OK) {
                           A 18664    ; 4099						DIR dj;
                           A 18665    ; 4100						DEF_NAMBUF
                           A 18666    ; 4101	
                           A 18667    ; 4102						INIT_NAMBUF(fs);
                           A 18668    ; 4103						res = load_obj_xdir
                           A 18669    ; 4104						if (res == FR_OK) {
                           A 18670    ; 4105							fs->dirbuf[XDIR
                           A 18671    ; 4106							fs->dirbuf[XDIR
                           A 18672    ; 4107							st_dword(fs->di
                           A 18673    ; 4108							st_qword(fs->di
                           A 18674    ; 4109							st_qword(fs->di
                           A 18675    ; 4110							st_dword(fs->di
                           A 18676    ; 4111							fs->dirbuf[XDIR
                           A 18677    ; 4112							st_dword(fs->di
                           A 18678    ; 4113							res = store_xdi
                           A 18679    ; 4114							if (res == FR_O
                           A 18680    ; 4115								res = sync_
                           A 18681    ; 4116								fp->flag &=
                           A 18682    ; 4117							}
                           A 18683    ; 4118						}
                           A 18684    ; 4119						FREE_NAMBUF();
                           A 18685    ; 4120					}
                           A 18686    ; 4121				} else
                           A 18687    ; 4122	#endif
                           A 18688    ; 4123				{
                           A 18689    ; 4124					res = move_window(fs, f
                           A 18690    .LINE 4124
                           A 18691    
004A52 DD3106              A 18692    	LD	IY,(IX+%6)
004A55 FD071D              A 18693    	LD	BC,(IY+%1D)
004A58 FD7E20              A 18694    	LD	A,(IY+%20)
004A5B 2600                A 18695    	LD	H,%0
004A5D 6F                  A 18696    	LD	L,A
004A5E E5                  A 18697    	PUSH	HL
004A5F C5                  A 18698    	PUSH	BC
004A60 DD07F7              A 18699    	LD	BC,(IX+%FFFFFFF7)
004A63 C5                  A 18700    	PUSH	BC
004A64 CD 1E 04 00         A 18701    	CALL	_move_window
004A68 C1                  A 18702    	POP	BC
004A69 C1                  A 18703    	POP	BC
004A6A C1                  A 18704    	POP	BC
004A6B DD2FFA              A 18705    	LD	(IX+%FFFFFFFA),HL
                           A 18706    ; 4125					if (res == FR_OK) {
                           A 18707    .LINE 4125
                           A 18708    
004A6E 01000000            A 18709    	LD	BC,0
004A72 DD27FA              A 18710    	LD	HL,(IX+%FFFFFFFA)
004A75 B7                  A 18711    	OR	A,A
004A76 ED42                A 18712    	SBC	HL,BC
004A78 C2 1D 4B 00         A 18713    	JR	NZ,L_964
                           A 18714    ; 4126						dir = fp->dir_ptr;
                           A 18715    .LINE 4126
                           A 18716    
004A7C DD3106              A 18717    	LD	IY,(IX+%6)
004A7F FD0721              A 18718    	LD	BC,(IY+%21)
004A82 DD0FFD              A 18719    	LD	(IX+%FFFFFFFD),BC
                           A 18720    ; 4127						dir[DIR_Attr] |= AM
                           A 18721    .LINE 4127
                           A 18722    
004A85 DD31FD              A 18723    	LD	IY,(IX+%FFFFFFFD)
004A88 ED230B              A 18724    	LEA	HL,IY+%B
004A8B 7E                  A 18725    	LD	A,(HL)
004A8C CBEF                A 18726    	SET	%5,A
004A8E ED230B              A 18727    	LEA	HL,IY+%B
004A91 77                  A 18728    	LD	(HL),A
                           A 18729    ; 4128						st_clust(fp->obj.fs
                           A 18730    .LINE 4128
                           A 18731    
004A92 DD3106              A 18732    	LD	IY,(IX+%6)
004A95 ED0300              A 18733    	LEA	BC,IY+%0
004A98 DD0FF0              A 18734    	LD	(IX+%FFFFFFF0),BC
004A9B DD31F0              A 18735    	LD	IY,(IX+%FFFFFFF0)
004A9E FD0707              A 18736    	LD	BC,(IY+%7)
004AA1 FD7E0A              A 18737    	LD	A,(IY+%A)
004AA4 2600                A 18738    	LD	H,%0
004AA6 6F                  A 18739    	LD	L,A
004AA7 E5                  A 18740    	PUSH	HL
004AA8 C5                  A 18741    	PUSH	BC
004AA9 DD07FD              A 18742    	LD	BC,(IX+%FFFFFFFD)
004AAC C5                  A 18743    	PUSH	BC
004AAD FD0700              A 18744    	LD	BC,(IY+%0)
004AB0 C5                  A 18745    	PUSH	BC
004AB1 CD 5C 18 00         A 18746    	CALL	_st_clust
004AB5 C1                  A 18747    	POP	BC
004AB6 C1                  A 18748    	POP	BC
004AB7 C1                  A 18749    	POP	BC
004AB8 C1                  A 18750    	POP	BC
                           A 18751    ; 4129						st_dword(dir + DIR_
                           A 18752    .LINE 4129
                           A 18753    
004AB9 DD3106              A 18754    	LD	IY,(IX+%6)
004ABC FD070B              A 18755    	LD	BC,(IY+%B)
004ABF FD7E0E              A 18756    	LD	A,(IY+%E)
004AC2 2600                A 18757    	LD	H,%0
004AC4 6F                  A 18758    	LD	L,A
004AC5 E5                  A 18759    	PUSH	HL
004AC6 C5                  A 18760    	PUSH	BC
004AC7 DD31FD              A 18761    	LD	IY,(IX+%FFFFFFFD)
004ACA ED031C              A 18762    	LEA	BC,IY+%1C
004ACD C5                  A 18763    	PUSH	BC
004ACE CD 45 01 00         A 18764    	CALL	_st_dword
004AD2 C1                  A 18765    	POP	BC
004AD3 C1                  A 18766    	POP	BC
004AD4 C1                  A 18767    	POP	BC
                           A 18768    ; 4130						st_dword(dir + DIR_
                           A 18769    .LINE 4130
                           A 18770    
004AD5 DD4EF6              A 18771    	LD	C,(IX+%FFFFFFF6)
004AD8 0600                A 18772    	LD	B,%0
004ADA C5                  A 18773    	PUSH	BC
004ADB DD07F3              A 18774    	LD	BC,(IX+%FFFFFFF3)
004ADE C5                  A 18775    	PUSH	BC
004ADF DD31FD              A 18776    	LD	IY,(IX+%FFFFFFFD)
004AE2 ED0316              A 18777    	LEA	BC,IY+%16
004AE5 C5                  A 18778    	PUSH	BC
004AE6 CD 45 01 00         A 18779    	CALL	_st_dword
004AEA C1                  A 18780    	POP	BC
004AEB C1                  A 18781    	POP	BC
004AEC C1                  A 18782    	POP	BC
                           A 18783    ; 4131						st_word(dir + DIR_L
                           A 18784    .LINE 4131
                           A 18785    
004AED 01000000            A 18786    	LD	BC,0
004AF1 C5                  A 18787    	PUSH	BC
004AF2 DD31FD              A 18788    	LD	IY,(IX+%FFFFFFFD)
004AF5 ED0312              A 18789    	LEA	BC,IY+%12
004AF8 C5                  A 18790    	PUSH	BC
004AF9 CD 06 01 00         A 18791    	CALL	_st_word
004AFD C1                  A 18792    	POP	BC
004AFE C1                  A 18793    	POP	BC
                           A 18794    ; 4132						fs->wflag = 1;
                           A 18795    .LINE 4132
                           A 18796    
004AFF DD31F7              A 18797    	LD	IY,(IX+%FFFFFFF7)
004B02 FD360301            A 18798    	LD	(IY+%3),%1
                           A 18799    ; 4133						res = sync_fs(fs);	
                           A 18800    .LINE 4133
                           A 18801    
004B06 DD07F7              A 18802    	LD	BC,(IX+%FFFFFFF7)
004B09 C5                  A 18803    	PUSH	BC
004B0A CD B3 04 00         A 18804    	CALL	_sync_fs
004B0E C1                  A 18805    	POP	BC
004B0F DD2FFA              A 18806    	LD	(IX+%FFFFFFFA),HL
                           A 18807    ; 4134						fp->flag &= (BYTE)~
                           A 18808    .LINE 4134
                           A 18809    
004B12 DD3106              A 18810    	LD	IY,(IX+%6)
004B15 FD7E0F              A 18811    	LD	A,(IY+%F)
004B18 CBB7                A 18812    	RES	%6,A
004B1A FD770F              A 18813    	LD	(IY+%F),A
                           A 18814    ; 4135					}
                           A 18815    ; 4136				}
                           A 18816    ; 4137			}
                           A 18817    ; 4138		}
004B1D                     A 18818    L_964:
                           A 18819    .LINE 4138
                           A 18820    
                           A 18821    ; 4139	
                           A 18822    ; 4140		LEAVE_FF(fs, res);
                           A 18823    .LINE 4140
                           A 18824    
004B1D DD27FA              A 18825    	LD	HL,(IX+%FFFFFFFA)
                           A 18826    ; 4141	}
                           A 18827    .LINE 4141
                           A 18828    
004B20 DDF9                A 18829    	LD	SP,IX
004B22 DDE1                A 18830    	POP	IX
004B24 C9                  A 18831    	RET	
                           A 18832    
                           A 18833    
                           A 18834    ;**************************** _f_sync *********
                           A 18835    ;Name                         Addr/Register   S
                           A 18836    ;_get_fattime                        IMPORT  --
                           A 18837    ;tm                                   IX-13    
                           A 18838    ;fs                                    IX-9    
                           A 18839    ;res                                   IX-6    
                           A 18840    ;dir                                   IX-3    
                           A 18841    ;fp                                    IX+6    
                           A 18842    
                           A 18843    
                           A 18844    ; Stack Frame Size: 25 (bytes)
                           A 18845    ;       Spill Code: -3 (instruction)
                           A 18846    
                           A 18847    
                           A 18848    .ENDFUNC "f_sync",4141,"_f_sync"
                           A 18849    ; 4142	
                           A 18850    ; 4143	#endif /* !FF_FS_READONLY */
                           A 18851    ; 4144	
                           A 18852    ; 4145	
                           A 18853    ; 4146	
                           A 18854    ; 4147	
                           A 18855    ; 4148	/*-------------------------------------
                           A 18856    ; 4149	/* Close File                          
                           A 18857    ; 4150	/*-------------------------------------
                           A 18858    ; 4151	
                           A 18859    ; 4152	FRESULT f_close (
                           A 18860    ; 4153		FIL* fp		/* Open file to be clos
                           A 18861    ; 4154	)
                           A 18862    ; 4155	{
004B25                     A 18863    _f_close:
                           A 18864    .DEFINE "_f_close"
                           A 18865    
                           A 18866    .VALUE _f_close
                           A 18867    
                           A 18868    .CLASS 2
                           A 18869    
                           A 18870    .TYPE 68
                           A 18871    
                           A 18872    .ENDEF
                           A 18873    
                           A 18874    .BEGFUNC "f_close",4155,"_f_close"
                           A 18875    
                           A 18876    .LINE 4155
                           A 18877    
                           A 18878    .DEFINE "fp"
                           A 18879    
                           A 18880    .CLASS 65
                           A 18881    
                           A 18882    .VALUE 6
                           A 18883    
                           A 18884    .TAG "NONAME2"
                           A 18885    
                           A 18886    .TYPE 40
                           A 18887    
                           A 18888    .ENDEF
                           A 18889    
                           A 18890    .DEFINE "res"
                           A 18891    
                           A 18892    .CLASS 65
                           A 18893    
                           A 18894    .VALUE -3
                           A 18895    
                           A 18896    .TYPE 4
                           A 18897    
                           A 18898    .ENDEF
                           A 18899    
                           A 18900    .DEFINE "fs"
                           A 18901    
                           A 18902    .CLASS 65
                           A 18903    
                           A 18904    .VALUE -6
                           A 18905    
                           A 18906    .TAG "NONAME0"
                           A 18907    
                           A 18908    .TYPE 40
                           A 18909    
                           A 18910    .ENDEF
                           A 18911    
004B25 DDE5                A 18912    	PUSH	IX
004B27 DD210000 00         A 18913    	LD	IX,0
004B2C DD39                A 18914    	ADD	IX,SP
004B2E C5                  A 18915    	PUSH	BC
004B2F C5                  A 18916    	PUSH	BC
                           A 18917    ; 4156		FRESULT res;
                           A 18918    ; 4157		FATFS *fs;
                           A 18919    ; 4158	
                           A 18920    ; 4159	#if !FF_FS_READONLY
                           A 18921    ; 4160		res = f_sync(fp);					
                           A 18922    .LINE 4160
                           A 18923    
004B30 DD0706              A 18924    	LD	BC,(IX+%6)
004B33 C5                  A 18925    	PUSH	BC
004B34 CD 0F 4A 00         A 18926    	CALL	_f_sync
004B38 C1                  A 18927    	POP	BC
004B39 DD2FFD              A 18928    	LD	(IX+%FFFFFFFD),HL
                           A 18929    ; 4161		if (res == FR_OK)
                           A 18930    .LINE 4161
                           A 18931    
004B3C 01000000            A 18932    	LD	BC,0
004B40 DD27FD              A 18933    	LD	HL,(IX+%FFFFFFFD)
004B43 B7                  A 18934    	OR	A,A
004B44 ED42                A 18935    	SBC	HL,BC
004B46 20 24               A 18936    	JR	NZ,L_968
                           A 18937    ; 4162	#endif
                           A 18938    ; 4163		{
                           A 18939    ; 4164			res = validate(&fp->obj, &fs);	
                           A 18940    .LINE 4164
                           A 18941    
004B48 ED65FA              A 18942    	PEA	IX+%FFFFFFFA
004B4B DD3106              A 18943    	LD	IY,(IX+%6)
004B4E ED6600              A 18944    	PEA	IY+%0
004B51 CD 5F 3B 00         A 18945    	CALL	_validate
004B55 C1                  A 18946    	POP	BC
004B56 C1                  A 18947    	POP	BC
004B57 DD2FFD              A 18948    	LD	(IX+%FFFFFFFD),HL
                           A 18949    ; 4165			if (res == FR_OK) {
                           A 18950    .LINE 4165
                           A 18951    
004B5A 01000000            A 18952    	LD	BC,0
004B5E DD27FD              A 18953    	LD	HL,(IX+%FFFFFFFD)
004B61 B7                  A 18954    	OR	A,A
004B62 ED42                A 18955    	SBC	HL,BC
004B64 20 06               A 18956    	JR	NZ,L_968
                           A 18957    ; 4166	#if FF_FS_LOCK != 0
                           A 18958    ; 4167				res = dec_lock(fp->obj.lock
                           A 18959    ; 4168				if (res == FR_OK) fp->obj.f
                           A 18960    ; 4169	#else
                           A 18961    ; 4170				fp->obj.fs = 0;	/* Invalida
                           A 18962    .LINE 4170
                           A 18963    
004B66 DD3106              A 18964    	LD	IY,(IX+%6)
004B69 FD0F00              A 18965    	LD	(IY+%0),BC
                           A 18966    ; 4171	#endif
                           A 18967    ; 4172	#if FF_FS_REENTRANT
                           A 18968    ; 4173				unlock_fs(fs, FR_OK);		
                           A 18969    ; 4174	#endif
                           A 18970    ; 4175			}
                           A 18971    ; 4176		}
004B6C                     A 18972    L_968:
                           A 18973    .LINE 4176
                           A 18974    
                           A 18975    ; 4177		return res;
                           A 18976    .LINE 4177
                           A 18977    
004B6C DD27FD              A 18978    	LD	HL,(IX+%FFFFFFFD)
                           A 18979    ; 4178	}
                           A 18980    .LINE 4178
                           A 18981    
004B6F DDF9                A 18982    	LD	SP,IX
004B71 DDE1                A 18983    	POP	IX
004B73 C9                  A 18984    	RET	
                           A 18985    
                           A 18986    
                           A 18987    ;**************************** _f_close ********
                           A 18988    ;Name                         Addr/Register   S
                           A 18989    ;_f_sync                             IMPORT  --
                           A 18990    ;fs                                    IX-6    
                           A 18991    ;res                                   IX-3    
                           A 18992    ;fp                                    IX+6    
                           A 18993    
                           A 18994    
                           A 18995    ; Stack Frame Size: 15 (bytes)
                           A 18996    ;       Spill Code: -3 (instruction)
                           A 18997    
                           A 18998    
                           A 18999    .ENDFUNC "f_close",4178,"_f_close"
                           A 19000    ; 4179	
                           A 19001    ; 4180	
                           A 19002    ; 4181	
                           A 19003    ; 4182	
                           A 19004    ; 4183	#if FF_FS_RPATH >= 1
                           A 19005    ; 4184	/*-------------------------------------
                           A 19006    ; 4185	/* Change Current Directory or Current 
                           A 19007    ; 4186	/*-------------------------------------
                           A 19008    ; 4187	
                           A 19009    ; 4188	FRESULT f_chdrive (
                           A 19010    ; 4189		const TCHAR* path		/* Drive nu
                           A 19011    ; 4190	)
                           A 19012    ; 4191	{
004B74                     A 19013    _f_chdrive:
                           A 19014    .DEFINE "_f_chdrive"
                           A 19015    
                           A 19016    .VALUE _f_chdrive
                           A 19017    
                           A 19018    .CLASS 2
                           A 19019    
                           A 19020    .TYPE 68
                           A 19021    
                           A 19022    .ENDEF
                           A 19023    
                           A 19024    .BEGFUNC "f_chdrive",4191,"_f_chdrive"
                           A 19025    
                           A 19026    .LINE 4191
                           A 19027    
                           A 19028    .DEFINE "path"
                           A 19029    
                           A 19030    .CLASS 65
                           A 19031    
                           A 19032    .VALUE 6
                           A 19033    
                           A 19034    .TYPE 194
                           A 19035    
                           A 19036    .ENDEF
                           A 19037    
                           A 19038    .DEFINE "vol"
                           A 19039    
                           A 19040    .CLASS 65
                           A 19041    
                           A 19042    .VALUE -3
                           A 19043    
                           A 19044    .TYPE 4
                           A 19045    
                           A 19046    .ENDEF
                           A 19047    
004B74 DDE5                A 19048    	PUSH	IX
004B76 DD210000 00         A 19049    	LD	IX,0
004B7B DD39                A 19050    	ADD	IX,SP
004B7D C5                  A 19051    	PUSH	BC
                           A 19052    ; 4192		int vol;
                           A 19053    ; 4193	
                           A 19054    ; 4194	
                           A 19055    ; 4195		/* Get logical drive number */
                           A 19056    ; 4196		vol = get_ldnumber(&path);
                           A 19057    .LINE 4196
                           A 19058    
004B7E ED6506              A 19059    	PEA	IX+%6
004B81 CD 6C 30 00         A 19060    	CALL	_get_ldnumber
004B85 C1                  A 19061    	POP	BC
004B86 DD2FFD              A 19062    	LD	(IX+%FFFFFFFD),HL
                           A 19063    ; 4197		if (vol < 0) return FR_INVALID_DRIV
                           A 19064    .LINE 4197
                           A 19065    
004B89 01000000            A 19066    	LD	BC,0
004B8D DD27FD              A 19067    	LD	HL,(IX+%FFFFFFFD)
004B90 B7                  A 19068    	OR	A,A
004B91 ED42                A 19069    	SBC	HL,BC
004B93 F2 9D 4B 00         A 19070    	JP	P,L_971
004B97 210B0000            A 19071    	LD	HL,11
004B9B 18 0A               A 19072    	JR	L_972
004B9D                     A 19073    L_971:
                           A 19074    ; 4198		CurrVol = (BYTE)vol;	/* Set it a
                           A 19075    .LINE 4198
                           A 19076    
004B9D DD7EFD              A 19077    	LD	A,(IX+%FFFFFFFD)
004BA0 32 05 00 00         A 19078    	LD	(_CurrVol),A
                           A 19079    ; 4199	
                           A 19080    ; 4200		return FR_OK;
                           A 19081    .LINE 4200
                           A 19082    
004BA4 B7                  A 19083    	OR	A,A
004BA5 ED62                A 19084    	SBC	HL,HL
                           A 19085    ; 4201	}
004BA7                     A 19086    L_972:
                           A 19087    .LINE 4201
                           A 19088    
004BA7 DDF9                A 19089    	LD	SP,IX
004BA9 DDE1                A 19090    	POP	IX
004BAB C9                  A 19091    	RET	
                           A 19092    
                           A 19093    
                           A 19094    ;**************************** _f_chdrive ******
                           A 19095    ;Name                         Addr/Register   S
                           A 19096    ;_CurrVol                            STATIC    
                           A 19097    ;vol                                   IX-3    
                           A 19098    ;path                                  IX+6    
                           A 19099    
                           A 19100    
                           A 19101    ; Stack Frame Size: 12 (bytes)
                           A 19102    ;       Spill Code: -3 (instruction)
                           A 19103    
                           A 19104    
                           A 19105    .ENDFUNC "f_chdrive",4201,"_f_chdrive"
                           A 19106    ; 4202	
                           A 19107    ; 4203	
                           A 19108    ; 4204	
                           A 19109    ; 4205	FRESULT f_chdir (
                           A 19110    ; 4206		const TCHAR* path	/* Pointer to t
                           A 19111    ; 4207	)
                           A 19112    ; 4208	{
004BAC                     A 19113    _f_chdir:
                           A 19114    .DEFINE "_f_chdir"
                           A 19115    
                           A 19116    .VALUE _f_chdir
                           A 19117    
                           A 19118    .CLASS 2
                           A 19119    
                           A 19120    .TYPE 68
                           A 19121    
                           A 19122    .ENDEF
                           A 19123    
                           A 19124    .BEGFUNC "f_chdir",4208,"_f_chdir"
                           A 19125    
                           A 19126    .LINE 4208
                           A 19127    
                           A 19128    .DEFINE "path"
                           A 19129    
                           A 19130    .CLASS 65
                           A 19131    
                           A 19132    .VALUE 6
                           A 19133    
                           A 19134    .TYPE 194
                           A 19135    
                           A 19136    .ENDEF
                           A 19137    
                           A 19138    .DEFINE "res"
                           A 19139    
                           A 19140    .CLASS 65
                           A 19141    
                           A 19142    .VALUE -3
                           A 19143    
                           A 19144    .TYPE 4
                           A 19145    
                           A 19146    .ENDEF
                           A 19147    
                           A 19148    .DEFINE "fs"
                           A 19149    
                           A 19150    .CLASS 65
                           A 19151    
                           A 19152    .VALUE -6
                           A 19153    
                           A 19154    .TAG "NONAME0"
                           A 19155    
                           A 19156    .TYPE 40
                           A 19157    
                           A 19158    .ENDEF
                           A 19159    
                           A 19160    .DEFINE "dj"
                           A 19161    
                           A 19162    .CLASS 65
                           A 19163    
                           A 19164    .VALUE -52
                           A 19165    
                           A 19166    .TAG "NONAME3"
                           A 19167    
                           A 19168    .TYPE 8
                           A 19169    
                           A 19170    .ENDEF
                           A 19171    
                           A 19172    .DEFINE "lbuf"
                           A 19173    
                           A 19174    .CLASS 65
                           A 19175    
                           A 19176    .VALUE -564
                           A 19177    
                           A 19178    .DIM 256
                           A 19179    
                           A 19180    .TYPE 109
                           A 19181    
                           A 19182    .ENDEF
                           A 19183    
004BAC DDE5                A 19184    	PUSH	IX
004BAE DD210000 00         A 19185    	LD	IX,0
004BB3 DD39                A 19186    	ADD	IX,SP
004BB5 21CCFDFF            A 19187    	LD	HL,-564
004BB9 39                  A 19188    	ADD	HL,SP
004BBA F9                  A 19189    	LD	SP,HL
                           A 19190    ; 4209	#if FF_STR_VOLUME_ID == 2
                           A 19191    ; 4210		UINT i;
                           A 19192    ; 4211	#endif
                           A 19193    ; 4212		FRESULT res;
                           A 19194    ; 4213		DIR dj;
                           A 19195    ; 4214		FATFS *fs;
                           A 19196    ; 4215		DEF_NAMBUF
                           A 19197    ; 4216	
                           A 19198    ; 4217	
                           A 19199    ; 4218		/* Get logical drive */
                           A 19200    ; 4219		res = mount_volume(&path, &fs, 0);
                           A 19201    .LINE 4219
                           A 19202    
004BBB 01000000            A 19203    	LD	BC,0
004BBF C5                  A 19204    	PUSH	BC
004BC0 ED65FA              A 19205    	PEA	IX+%FFFFFFFA
004BC3 ED6506              A 19206    	PEA	IX+%6
004BC6 CD A9 34 00         A 19207    	CALL	_mount_volume
004BCA C1                  A 19208    	POP	BC
004BCB C1                  A 19209    	POP	BC
004BCC C1                  A 19210    	POP	BC
004BCD DD2FFD              A 19211    	LD	(IX+%FFFFFFFD),HL
                           A 19212    ; 4220		if (res == FR_OK) {
                           A 19213    .LINE 4220
                           A 19214    
004BD0 01000000            A 19215    	LD	BC,0
004BD4 DD27FD              A 19216    	LD	HL,(IX+%FFFFFFFD)
004BD7 B7                  A 19217    	OR	A,A
004BD8 ED42                A 19218    	SBC	HL,BC
004BDA C2 63 4C 00         A 19219    	JR	NZ,L_981
                           A 19220    ; 4221			dj.obj.fs = fs;
                           A 19221    .LINE 4221
                           A 19222    
004BDE DD07FA              A 19223    	LD	BC,(IX+%FFFFFFFA)
004BE1 DD0FCC              A 19224    	LD	(IX+%FFFFFFCC),BC
                           A 19225    ; 4222			INIT_NAMBUF(fs);
                           A 19226    .LINE 4222
                           A 19227    
004BE4 DDE5E1              A 19228    	LD	HL,IX
004BE7 01CCFDFF            A 19229    	LD	BC,-564
004BEB 09                  A 19230    	ADD	HL,BC
004BEC DD31FA              A 19231    	LD	IY,(IX+%FFFFFFFA)
004BEF FD2F0B              A 19232    	LD	(IY+%B),HL
                           A 19233    ; 4223			res = follow_path(&dj, path);	
                           A 19234    .LINE 4223
                           A 19235    
004BF2 DD0706              A 19236    	LD	BC,(IX+%6)
004BF5 C5                  A 19237    	PUSH	BC
004BF6 ED65CC              A 19238    	PEA	IX+%FFFFFFCC
004BF9 CD DA 2E 00         A 19239    	CALL	_follow_path
004BFD C1                  A 19240    	POP	BC
004BFE C1                  A 19241    	POP	BC
004BFF DD2FFD              A 19242    	LD	(IX+%FFFFFFFD),HL
                           A 19243    ; 4224			if (res == FR_OK) {				
                           A 19244    .LINE 4224
                           A 19245    
004C02 01000000            A 19246    	LD	BC,0
004C06 DD27FD              A 19247    	LD	HL,(IX+%FFFFFFFD)
004C09 B7                  A 19248    	OR	A,A
004C0A ED42                A 19249    	SBC	HL,BC
004C0C 20 42               A 19250    	JR	NZ,L_978
                           A 19251    ; 4225				if (dj.fn[NSFLAG] & NS_NONA
                           A 19252    .LINE 4225
                           A 19253    
004C0E ED55EA              A 19254    	LEA	IY,IX+%FFFFFFEA
004C11 FD7E0B              A 19255    	LD	A,(IY+%B)
004C14 E680                A 19256    	AND	A,%80
004C16 28 11               A 19257    	JR	Z,L_976
                           A 19258    ; 4226					fs->cdir = dj.obj.sclus
                           A 19259    .LINE 4226
                           A 19260    
004C18 DD07D3              A 19261    	LD	BC,(IX+%FFFFFFD3)
004C1B DD7ED6              A 19262    	LD	A,(IX+%FFFFFFD6)
004C1E DD31FA              A 19263    	LD	IY,(IX+%FFFFFFFA)
004C21 FD0F16              A 19264    	LD	(IY+%16),BC
004C24 FD7719              A 19265    	LD	(IY+%19),A
                           A 19266    ; 4227	#if FF_FS_EXFAT
                           A 19267    ; 4228					if (fs->fs_type == FS_E
                           A 19268    ; 4229						fs->cdc_scl = dj.ob
                           A 19269    ; 4230						fs->cdc_size = dj.o
                           A 19270    ; 4231						fs->cdc_ofs = dj.ob
                           A 19271    ; 4232					}
                           A 19272    ; 4233	#endif
                           A 19273    ; 4234				} else {
                           A 19274    .LINE 4234
                           A 19275    
004C27 18 27               A 19276    	JR	L_978
004C29                     A 19277    L_976:
                           A 19278    ; 4235					if (dj.obj.attr & AM_DI
                           A 19279    .LINE 4235
                           A 19280    
004C29 DD7ED1              A 19281    	LD	A,(IX+%FFFFFFD1)
004C2C E610                A 19282    	AND	A,%10
004C2E 28 19               A 19283    	JR	Z,L_974
                           A 19284    ; 4236	#if FF_FS_EXFAT
                           A 19285    ; 4237						if (fs->fs_type == 
                           A 19286    ; 4238							fs->cdir = ld_d
                           A 19287    ; 4239							fs->cdc_scl = d
                           A 19288    ; 4240							fs->cdc_size = 
                           A 19289    ; 4241							fs->cdc_ofs = d
                           A 19290    ; 4242						} else
                           A 19291    ; 4243	#endif
                           A 19292    ; 4244						{
                           A 19293    ; 4245							fs->cdir = ld_c
                           A 19294    .LINE 4245
                           A 19295    
004C30 DD07E7              A 19296    	LD	BC,(IX+%FFFFFFE7)
004C33 C5                  A 19297    	PUSH	BC
004C34 DD07FA              A 19298    	LD	BC,(IX+%FFFFFFFA)
004C37 C5                  A 19299    	PUSH	BC
004C38 CD EE 17 00         A 19300    	CALL	_ld_clust
004C3C C1                  A 19301    	POP	BC
004C3D C1                  A 19302    	POP	BC
004C3E DD31FA              A 19303    	LD	IY,(IX+%FFFFFFFA)
004C41 FD2F16              A 19304    	LD	(IY+%16),HL
004C44 FD7319              A 19305    	LD	(IY+%19),E
                           A 19306    ; 4246						}
                           A 19307    ; 4247					} else {
                           A 19308    .LINE 4247
                           A 19309    
004C47 18 07               A 19310    	JR	L_978
004C49                     A 19311    L_974:
                           A 19312    ; 4248						res = FR_NO_PATH;	
                           A 19313    .LINE 4248
                           A 19314    
004C49 01050000            A 19315    	LD	BC,5
004C4D DD0FFD              A 19316    	LD	(IX+%FFFFFFFD),BC
                           A 19317    ; 4249					}
                           A 19318    ; 4250				}
                           A 19319    ; 4251			}
004C50                     A 19320    L_978:
                           A 19321    .LINE 4251
                           A 19322    
                           A 19323    ; 4252			FREE_NAMBUF();
                           A 19324    ; 4253			if (res == FR_NO_FILE) res = FR
                           A 19325    .LINE 4253
                           A 19326    
004C50 01040000            A 19327    	LD	BC,4
004C54 DD27FD              A 19328    	LD	HL,(IX+%FFFFFFFD)
004C57 B7                  A 19329    	OR	A,A
004C58 ED42                A 19330    	SBC	HL,BC
004C5A 20 07               A 19331    	JR	NZ,L_981
004C5C 01050000            A 19332    	LD	BC,5
004C60 DD0FFD              A 19333    	LD	(IX+%FFFFFFFD),BC
                           A 19334    ; 4254	#if FF_STR_VOLUME_ID == 2	/* Also cur
                           A 19335    ; 4255			if (res == FR_OK) {
                           A 19336    ; 4256				for (i = FF_VOLUMES - 1; i 
                           A 19337    ; 4257				CurrVol = (BYTE)i;
                           A 19338    ; 4258			}
                           A 19339    ; 4259	#endif
                           A 19340    ; 4260		}
004C63                     A 19341    L_981:
                           A 19342    .LINE 4260
                           A 19343    
                           A 19344    ; 4261	
                           A 19345    ; 4262		LEAVE_FF(fs, res);
                           A 19346    .LINE 4262
                           A 19347    
004C63 DD27FD              A 19348    	LD	HL,(IX+%FFFFFFFD)
                           A 19349    ; 4263	}
                           A 19350    .LINE 4263
                           A 19351    
004C66 DDF9                A 19352    	LD	SP,IX
004C68 DDE1                A 19353    	POP	IX
004C6A C9                  A 19354    	RET	
                           A 19355    
                           A 19356    
                           A 19357    ;**************************** _f_chdir ********
                           A 19358    ;Name                         Addr/Register   S
                           A 19359    ;lbuf                                IX-564    
                           A 19360    ;dj                                   IX-52    
                           A 19361    ;fs                                    IX-6    
                           A 19362    ;res                                   IX-3    
                           A 19363    ;path                                  IX+6    
                           A 19364    
                           A 19365    
                           A 19366    ; Stack Frame Size: 573 (bytes)
                           A 19367    ;       Spill Code: -3 (instruction)
                           A 19368    
                           A 19369    
                           A 19370    .ENDFUNC "f_chdir",4263,"_f_chdir"
                           A 19371    ; 4264	
                           A 19372    ; 4265	
                           A 19373    ; 4266	#if FF_FS_RPATH >= 2
                           A 19374    ; 4267	FRESULT f_getcwd (
                           A 19375    ; 4268		TCHAR* buff,	/* Pointer to the d
                           A 19376    ; 4269		UINT len		/* Size of buff in 
                           A 19377    ; 4270	)
                           A 19378    ; 4271	{
004C6B                     A 19379    _f_getcwd:
                           A 19380    .DEFINE "_f_getcwd"
                           A 19381    
                           A 19382    .VALUE _f_getcwd
                           A 19383    
                           A 19384    .CLASS 2
                           A 19385    
                           A 19386    .TYPE 68
                           A 19387    
                           A 19388    .ENDEF
                           A 19389    
                           A 19390    .BEGFUNC "f_getcwd",4271,"_f_getcwd"
                           A 19391    
                           A 19392    .LINE 4271
                           A 19393    
                           A 19394    .DEFINE "buff"
                           A 19395    
                           A 19396    .CLASS 65
                           A 19397    
                           A 19398    .VALUE 6
                           A 19399    
                           A 19400    .TYPE 34
                           A 19401    
                           A 19402    .ENDEF
                           A 19403    
                           A 19404    .DEFINE "len"
                           A 19405    
                           A 19406    .CLASS 65
                           A 19407    
                           A 19408    .VALUE 9
                           A 19409    
                           A 19410    .TYPE 14
                           A 19411    
                           A 19412    .ENDEF
                           A 19413    
                           A 19414    .DEFINE "res"
                           A 19415    
                           A 19416    .CLASS 65
                           A 19417    
                           A 19418    .VALUE -3
                           A 19419    
                           A 19420    .TYPE 4
                           A 19421    
                           A 19422    .ENDEF
                           A 19423    
                           A 19424    .DEFINE "i"
                           A 19425    
                           A 19426    .CLASS 65
                           A 19427    
                           A 19428    .VALUE -6
                           A 19429    
                           A 19430    .TYPE 14
                           A 19431    
                           A 19432    .ENDEF
                           A 19433    
                           A 19434    .DEFINE "n"
                           A 19435    
                           A 19436    .CLASS 65
                           A 19437    
                           A 19438    .VALUE -9
                           A 19439    
                           A 19440    .TYPE 14
                           A 19441    
                           A 19442    .ENDEF
                           A 19443    
                           A 19444    .DEFINE "fs"
                           A 19445    
                           A 19446    .CLASS 65
                           A 19447    
                           A 19448    .VALUE -12
                           A 19449    
                           A 19450    .TAG "NONAME0"
                           A 19451    
                           A 19452    .TYPE 40
                           A 19453    
                           A 19454    .ENDEF
                           A 19455    
                           A 19456    .DEFINE "tp"
                           A 19457    
                           A 19458    .CLASS 65
                           A 19459    
                           A 19460    .VALUE -15
                           A 19461    
                           A 19462    .TYPE 34
                           A 19463    
                           A 19464    .ENDEF
                           A 19465    
                           A 19466    .DEFINE "ccl"
                           A 19467    
                           A 19468    .CLASS 65
                           A 19469    
                           A 19470    .VALUE -19
                           A 19471    
                           A 19472    .TYPE 15
                           A 19473    
                           A 19474    .ENDEF
                           A 19475    
                           A 19476    .DEFINE "dj"
                           A 19477    
                           A 19478    .CLASS 65
                           A 19479    
                           A 19480    .VALUE -65
                           A 19481    
                           A 19482    .TAG "NONAME3"
                           A 19483    
                           A 19484    .TYPE 8
                           A 19485    
                           A 19486    .ENDEF
                           A 19487    
                           A 19488    .DEFINE "fno"
                           A 19489    
                           A 19490    .CLASS 65
                           A 19491    
                           A 19492    .VALUE -343
                           A 19493    
                           A 19494    .TAG "NONAME4"
                           A 19495    
                           A 19496    .TYPE 8
                           A 19497    
                           A 19498    .ENDEF
                           A 19499    
                           A 19500    .DEFINE "lbuf"
                           A 19501    
                           A 19502    .CLASS 65
                           A 19503    
                           A 19504    .VALUE -855
                           A 19505    
                           A 19506    .DIM 256
                           A 19507    
                           A 19508    .TYPE 109
                           A 19509    
                           A 19510    .ENDEF
                           A 19511    
004C6B DDE5                A 19512    	PUSH	IX
004C6D DD210000 00         A 19513    	LD	IX,0
004C72 DD39                A 19514    	ADD	IX,SP
004C74 21A3FCFF            A 19515    	LD	HL,-861
004C78 39                  A 19516    	ADD	HL,SP
004C79 F9                  A 19517    	LD	SP,HL
                           A 19518    ; 4272		FRESULT res;
                           A 19519    ; 4273		DIR dj;
                           A 19520    ; 4274		FATFS *fs;
                           A 19521    ; 4275		UINT i, n;
                           A 19522    ; 4276		DWORD ccl;
                           A 19523    ; 4277		TCHAR *tp = buff;
                           A 19524    .LINE 4277
                           A 19525    
004C7A DD0706              A 19526    	LD	BC,(IX+%6)
004C7D DD0FF1              A 19527    	LD	(IX+%FFFFFFF1),BC
                           A 19528    ; 4278	#if FF_VOLUMES >= 2
                           A 19529    ; 4279		UINT vl;
                           A 19530    ; 4280	#if FF_STR_VOLUME_ID
                           A 19531    ; 4281		const char *vp;
                           A 19532    ; 4282	#endif
                           A 19533    ; 4283	#endif
                           A 19534    ; 4284		FILINFO fno;
                           A 19535    ; 4285		DEF_NAMBUF
                           A 19536    ; 4286	
                           A 19537    ; 4287	
                           A 19538    ; 4288		/* Get logical drive */
                           A 19539    ; 4289		buff[0] = 0;	/* Set null string 
                           A 19540    .LINE 4289
                           A 19541    
004C80 DD2706              A 19542    	LD	HL,(IX+%6)
004C83 3600                A 19543    	LD	(HL),%0
                           A 19544    ; 4290		res = mount_volume((const TCHAR**)&
                           A 19545    .LINE 4290
                           A 19546    
004C85 01000000            A 19547    	LD	BC,0
004C89 C5                  A 19548    	PUSH	BC
004C8A ED65F4              A 19549    	PEA	IX+%FFFFFFF4
004C8D ED6506              A 19550    	PEA	IX+%6
004C90 CD A9 34 00         A 19551    	CALL	_mount_volume
004C94 C1                  A 19552    	POP	BC
004C95 C1                  A 19553    	POP	BC
004C96 C1                  A 19554    	POP	BC
004C97 DD2FFD              A 19555    	LD	(IX+%FFFFFFFD),HL
                           A 19556    ; 4291		if (res == FR_OK) {
                           A 19557    .LINE 4291
                           A 19558    
004C9A 01000000            A 19559    	LD	BC,0
004C9E DD27FD              A 19560    	LD	HL,(IX+%FFFFFFFD)
004CA1 B7                  A 19561    	OR	A,A
004CA2 ED42                A 19562    	SBC	HL,BC
004CA4 C2 FD 4E 00         A 19563    	JR	NZ,L_1024
                           A 19564    ; 4292			dj.obj.fs = fs;
                           A 19565    .LINE 4292
                           A 19566    
004CA8 ED02BF              A 19567    	LEA	BC,IX+%FFFFFFBF
004CAB 21A6FCFF            A 19568    	LD	HL,-858
004CAF DDE5D1              A 19569    	LD	DE,IX
004CB2 19                  A 19570    	ADD	HL,DE
004CB3 ED0F                A 19571    	LD	(HL),BC
004CB5 DD07F4              A 19572    	LD	BC,(IX+%FFFFFFF4)
004CB8 DD0FBF              A 19573    	LD	(IX+%FFFFFFBF),BC
                           A 19574    ; 4293			INIT_NAMBUF(fs);
                           A 19575    .LINE 4293
                           A 19576    
004CBB DDE5E1              A 19577    	LD	HL,IX
004CBE 01A9FCFF            A 19578    	LD	BC,-855
004CC2 09                  A 19579    	ADD	HL,BC
004CC3 DD31F4              A 19580    	LD	IY,(IX+%FFFFFFF4)
004CC6 FD2F0B              A 19581    	LD	(IY+%B),HL
                           A 19582    ; 4294	
                           A 19583    ; 4295			/* Follow parent directories an
                           A 19584    ; 4296			i = len;			/* Bottom o
                           A 19585    .LINE 4296
                           A 19586    
004CC9 DD0709              A 19587    	LD	BC,(IX+%9)
004CCC DD0FFA              A 19588    	LD	(IX+%FFFFFFFA),BC
                           A 19589    ; 4297			if (!FF_FS_EXFAT || fs->fs_type
                           A 19590    ; 4298				dj.obj.sclust = fs->cdir;	
                           A 19591    .LINE 4298
                           A 19592    
004CCF 21A6FCFF            A 19593    	LD	HL,-858
004CD3 DDE5C1              A 19594    	LD	BC,IX
004CD6 09                  A 19595    	ADD	HL,BC
004CD7 ED07                A 19596    	LD	BC,(HL)
004CD9 FD1716              A 19597    	LD	DE,(IY+%16)
004CDC FD7E19              A 19598    	LD	A,(IY+%19)
004CDF C5FDE1              A 19599    	LD	IY,BC
004CE2 FD1F07              A 19600    	LD	(IY+%7),DE
004CE5 FD770A              A 19601    	LD	(IY+%A),A
                           A 19602    ; 4299				while ((ccl = dj.obj.sclust
                           A 19603    .LINE 4299
                           A 19604    
004CE8 C3 6C 4E 00         A 19605    	JR	L_1010
004CEC                     A 19606    L_1011:
                           A 19607    ; 4300					res = dir_sdi(&dj, 1 * 
                           A 19608    .LINE 4300
                           A 19609    
004CEC C5                  A 19610    	PUSH	BC
004CED 01200000            A 19611    	LD	BC,32
004CF1 C5                  A 19612    	PUSH	BC
004CF2 ED65BF              A 19613    	PEA	IX+%FFFFFFBF
004CF5 CD 50 12 00         A 19614    	CALL	_dir_sdi
004CF9 C1                  A 19615    	POP	BC
004CFA C1                  A 19616    	POP	BC
004CFB C1                  A 19617    	POP	BC
004CFC DD2FFD              A 19618    	LD	(IX+%FFFFFFFD),HL
                           A 19619    ; 4301					if (res != FR_OK) break
                           A 19620    .LINE 4301
                           A 19621    
004CFF 01000000            A 19622    	LD	BC,0
004D03 DD27FD              A 19623    	LD	HL,(IX+%FFFFFFFD)
004D06 B7                  A 19624    	OR	A,A
004D07 ED42                A 19625    	SBC	HL,BC
004D09 C2 8A 4E 00         A 19626    	JR	NZ,L_1021
                           A 19627    ; 4302					res = move_window(fs, d
                           A 19628    .LINE 4302
                           A 19629    
004D0D DD4ED9              A 19630    	LD	C,(IX+%FFFFFFD9)
004D10 0600                A 19631    	LD	B,%0
004D12 C5                  A 19632    	PUSH	BC
004D13 DD07D6              A 19633    	LD	BC,(IX+%FFFFFFD6)
004D16 C5                  A 19634    	PUSH	BC
004D17 DD07F4              A 19635    	LD	BC,(IX+%FFFFFFF4)
004D1A C5                  A 19636    	PUSH	BC
004D1B CD 1E 04 00         A 19637    	CALL	_move_window
004D1F C1                  A 19638    	POP	BC
004D20 C1                  A 19639    	POP	BC
004D21 C1                  A 19640    	POP	BC
004D22 DD2FFD              A 19641    	LD	(IX+%FFFFFFFD),HL
                           A 19642    ; 4303					if (res != FR_OK) break
                           A 19643    .LINE 4303
                           A 19644    
004D25 01000000            A 19645    	LD	BC,0
004D29 DD27FD              A 19646    	LD	HL,(IX+%FFFFFFFD)
004D2C B7                  A 19647    	OR	A,A
004D2D ED42                A 19648    	SBC	HL,BC
004D2F C2 8A 4E 00         A 19649    	JR	NZ,L_1021
                           A 19650    ; 4304					dj.obj.sclust = ld_clus
                           A 19651    .LINE 4304
                           A 19652    
004D33 DD07DA              A 19653    	LD	BC,(IX+%FFFFFFDA)
004D36 C5                  A 19654    	PUSH	BC
004D37 DD07F4              A 19655    	LD	BC,(IX+%FFFFFFF4)
004D3A C5                  A 19656    	PUSH	BC
004D3B CD EE 17 00         A 19657    	CALL	_ld_clust
004D3F C1                  A 19658    	POP	BC
004D40 C1                  A 19659    	POP	BC
004D41 DD2FC6              A 19660    	LD	(IX+%FFFFFFC6),HL
004D44 DD73C9              A 19661    	LD	(IX+%FFFFFFC9),E
                           A 19662    ; 4305					res = dir_sdi(&dj, 0);
                           A 19663    .LINE 4305
                           A 19664    
004D47 01000000            A 19665    	LD	BC,0
004D4B C5                  A 19666    	PUSH	BC
004D4C C5                  A 19667    	PUSH	BC
004D4D ED65BF              A 19668    	PEA	IX+%FFFFFFBF
004D50 CD 50 12 00         A 19669    	CALL	_dir_sdi
004D54 C1                  A 19670    	POP	BC
004D55 C1                  A 19671    	POP	BC
004D56 C1                  A 19672    	POP	BC
004D57 DD2FFD              A 19673    	LD	(IX+%FFFFFFFD),HL
                           A 19674    ; 4306					if (res != FR_OK) break
                           A 19675    .LINE 4306
                           A 19676    
004D5A 01000000            A 19677    	LD	BC,0
004D5E DD27FD              A 19678    	LD	HL,(IX+%FFFFFFFD)
004D61 B7                  A 19679    	OR	A,A
004D62 ED42                A 19680    	SBC	HL,BC
004D64 C2 8A 4E 00         A 19681    	JR	NZ,L_1021
                           A 19682    ; 4307					do {					
004D68                     A 19683    L_992:
                           A 19684    .LINE 4307
                           A 19685    
                           A 19686    ; 4308						res = DIR_READ_FILE
                           A 19687    .LINE 4308
                           A 19688    
004D68 C5                  A 19689    	PUSH	BC
004D69 ED65BF              A 19690    	PEA	IX+%FFFFFFBF
004D6C CD 46 1E 00         A 19691    	CALL	_dir_read
004D70 C1                  A 19692    	POP	BC
004D71 C1                  A 19693    	POP	BC
004D72 DD2FFD              A 19694    	LD	(IX+%FFFFFFFD),HL
                           A 19695    ; 4309						if (res != FR_OK) b
                           A 19696    .LINE 4309
                           A 19697    
004D75 01000000            A 19698    	LD	BC,0
004D79 DD27FD              A 19699    	LD	HL,(IX+%FFFFFFFD)
004D7C B7                  A 19700    	OR	A,A
004D7D ED42                A 19701    	SBC	HL,BC
004D7F 20 37               A 19702    	JR	NZ,L_996
                           A 19703    ; 4310						if (ccl == ld_clust
                           A 19704    .LINE 4310
                           A 19705    
004D81 DD07DA              A 19706    	LD	BC,(IX+%FFFFFFDA)
004D84 C5                  A 19707    	PUSH	BC
004D85 DD07F4              A 19708    	LD	BC,(IX+%FFFFFFF4)
004D88 C5                  A 19709    	PUSH	BC
004D89 CD EE 17 00         A 19710    	CALL	_ld_clust
004D8D C1                  A 19711    	POP	BC
004D8E C1                  A 19712    	POP	BC
004D8F DD07ED              A 19713    	LD	BC,(IX+%FFFFFFED)
004D92 DD7EF0              A 19714    	LD	A,(IX+%FFFFFFF0)
004D95 CD 00 00 00         A 19715    	CALL	__lcmpu
004D99 28 1D               A 19716    	JR	Z,L_996
                           A 19717    ; 4311						res = dir_next(&dj,
                           A 19718    .LINE 4311
                           A 19719    
004D9B 01000000            A 19720    	LD	BC,0
004D9F C5                  A 19721    	PUSH	BC
004DA0 ED65BF              A 19722    	PEA	IX+%FFFFFFBF
004DA3 CD 6A 14 00         A 19723    	CALL	_dir_next
004DA7 C1                  A 19724    	POP	BC
004DA8 C1                  A 19725    	POP	BC
004DA9 DD2FFD              A 19726    	LD	(IX+%FFFFFFFD),HL
                           A 19727    ; 4312					} while (res == FR_OK);
                           A 19728    .LINE 4312
                           A 19729    
004DAC 01000000            A 19730    	LD	BC,0
004DB0 DD27FD              A 19731    	LD	HL,(IX+%FFFFFFFD)
004DB3 B7                  A 19732    	OR	A,A
004DB4 ED42                A 19733    	SBC	HL,BC
004DB6 28 B0               A 19734    	JR	Z,L_992
004DB8                     A 19735    L_996:
                           A 19736    ; 4313					if (res == FR_NO_FILE) 
                           A 19737    .LINE 4313
                           A 19738    
004DB8 01040000            A 19739    	LD	BC,4
004DBC DD27FD              A 19740    	LD	HL,(IX+%FFFFFFFD)
004DBF B7                  A 19741    	OR	A,A
004DC0 ED42                A 19742    	SBC	HL,BC
004DC2 20 07               A 19743    	JR	NZ,L_998
004DC4 01020000            A 19744    	LD	BC,2
004DC8 DD0FFD              A 19745    	LD	(IX+%FFFFFFFD),BC
004DCB                     A 19746    L_998:
                           A 19747    ; 4314					if (res != FR_OK) break
                           A 19748    .LINE 4314
                           A 19749    
004DCB 01000000            A 19750    	LD	BC,0
004DCF DD27FD              A 19751    	LD	HL,(IX+%FFFFFFFD)
004DD2 B7                  A 19752    	OR	A,A
004DD3 ED42                A 19753    	SBC	HL,BC
004DD5 C2 8A 4E 00         A 19754    	JR	NZ,L_1021
                           A 19755    ; 4315					get_fileinfo(&dj, &fno)
                           A 19756    .LINE 4315
                           A 19757    
004DD9 DDE5E1              A 19758    	LD	HL,IX
004DDC 01A9FEFF            A 19759    	LD	BC,-343
004DE0 09                  A 19760    	ADD	HL,BC
004DE1 E5C1                A 19761    	LD	BC,HL
004DE3 C5                  A 19762    	PUSH	BC
004DE4 ED65BF              A 19763    	PEA	IX+%FFFFFFBF
004DE7 CD 87 25 00         A 19764    	CALL	_get_fileinfo
004DEB C1                  A 19765    	POP	BC
004DEC C1                  A 19766    	POP	BC
                           A 19767    ; 4316					for (n = 0; fno.fname[n
                           A 19768    .LINE 4316
                           A 19769    
004DED 01000000            A 19770    	LD	BC,0
004DF1 DD0FF7              A 19771    	LD	(IX+%FFFFFFF7),BC
004DF4 18 07               A 19772    	JR	L_1003
004DF6                     A 19773    L_1001:
004DF6 DD07F7              A 19774    	LD	BC,(IX+%FFFFFFF7)
004DF9 03                  A 19775    	INC	BC
004DFA DD0FF7              A 19776    	LD	(IX+%FFFFFFF7),BC
004DFD                     A 19777    L_1003:
004DFD DD07F7              A 19778    	LD	BC,(IX+%FFFFFFF7)
004E00 DDE5E1              A 19779    	LD	HL,IX
004E03 11BFFEFF            A 19780    	LD	DE,-321
004E07 19                  A 19781    	ADD	HL,DE
004E08 09                  A 19782    	ADD	HL,BC
004E09 7E                  A 19783    	LD	A,(HL)
004E0A B7                  A 19784    	OR	A,A
004E0B 20 E9               A 19785    	JR	NZ,L_1001
                           A 19786    ; 4317					if (i < n + 1) {	/* 
                           A 19787    .LINE 4317
                           A 19788    
004E0D DD07F7              A 19789    	LD	BC,(IX+%FFFFFFF7)
004E10 03                  A 19790    	INC	BC
004E11 DD27FA              A 19791    	LD	HL,(IX+%FFFFFFFA)
004E14 B7                  A 19792    	OR	A,A
004E15 ED42                A 19793    	SBC	HL,BC
004E17 30 35               A 19794    	JR	NC,L_1006
                           A 19795    ; 4318						res = FR_NOT_ENOUGH
                           A 19796    .LINE 4318
                           A 19797    
004E19 01110000            A 19798    	LD	BC,17
004E1D DD0FFD              A 19799    	LD	(IX+%FFFFFFFD),BC
004E20 18 68               A 19800    	JR	L_1021
                           A 19801    ; 4319					}
                           A 19802    .LINE 4319
                           A 19803    
                           A 19804    ; 4320					while (n) buff[--i] = f
                           A 19805    .LINE 4320
                           A 19806    
004E22                     A 19807    L_1007:
004E22 DD31F7              A 19808    	LD	IY,(IX+%FFFFFFF7)
004E25 ED03FF              A 19809    	LEA	BC,IY+%FFFFFFFF
004E28 DD0FF7              A 19810    	LD	(IX+%FFFFFFF7),BC
004E2B DD31FA              A 19811    	LD	IY,(IX+%FFFFFFFA)
004E2E ED33FF              A 19812    	LEA	IY,IY+%FFFFFFFF
004E31 DD3EFA              A 19813    	LD	(IX+%FFFFFFFA),IY
004E34 DD07F7              A 19814    	LD	BC,(IX+%FFFFFFF7)
004E37 DDE5E1              A 19815    	LD	HL,IX
004E3A 11BFFEFF            A 19816    	LD	DE,-321
004E3E 19                  A 19817    	ADD	HL,DE
004E3F 09                  A 19818    	ADD	HL,BC
004E40 E5FDE1              A 19819    	LD	IY,HL
004E43 DD07FA              A 19820    	LD	BC,(IX+%FFFFFFFA)
004E46 DD2706              A 19821    	LD	HL,(IX+%6)
004E49 09                  A 19822    	ADD	HL,BC
004E4A FD7E00              A 19823    	LD	A,(IY)
004E4D 77                  A 19824    	LD	(HL),A
004E4E                     A 19825    L_1006:
004E4E 01000000            A 19826    	LD	BC,0
004E52 DD27F7              A 19827    	LD	HL,(IX+%FFFFFFF7)
004E55 B7                  A 19828    	OR	A,A
004E56 ED42                A 19829    	SBC	HL,BC
004E58 20 C8               A 19830    	JR	NZ,L_1007
                           A 19831    ; 4321					buff[--i] = '/';
                           A 19832    .LINE 4321
                           A 19833    
004E5A DD31FA              A 19834    	LD	IY,(IX+%FFFFFFFA)
004E5D ED33FF              A 19835    	LEA	IY,IY+%FFFFFFFF
004E60 DD3EFA              A 19836    	LD	(IX+%FFFFFFFA),IY
004E63 FDE5C1              A 19837    	LD	BC,IY
004E66 DD2706              A 19838    	LD	HL,(IX+%6)
004E69 09                  A 19839    	ADD	HL,BC
004E6A 362F                A 19840    	LD	(HL),%2F
                           A 19841    ; 4322				}
004E6C                     A 19842    L_1010:
                           A 19843    .LINE 4322
                           A 19844    
004E6C DD07C6              A 19845    	LD	BC,(IX+%FFFFFFC6)
004E6F DD7EC9              A 19846    	LD	A,(IX+%FFFFFFC9)
004E72 DD0FED              A 19847    	LD	(IX+%FFFFFFED),BC
004E75 DD77F0              A 19848    	LD	(IX+%FFFFFFF0),A
004E78 C5E1                A 19849    	LD	HL,BC
004E7A DD5EF0              A 19850    	LD	E,(IX+%FFFFFFF0)
004E7D 01000000            A 19851    	LD	BC,0
004E81 AF                  A 19852    	XOR	A,A
004E82 CD 00 00 00         A 19853    	CALL	__lcmpu
004E86 C2 EC 4C 00         A 19854    	JR	NZ,L_1011
                           A 19855    ; 4323			}
004E8A                     A 19856    L_1021:
                           A 19857    .LINE 4323
                           A 19858    
                           A 19859    ; 4324			if (res == FR_OK) {
                           A 19860    .LINE 4324
                           A 19861    
004E8A 01000000            A 19862    	LD	BC,0
004E8E DD27FD              A 19863    	LD	HL,(IX+%FFFFFFFD)
004E91 B7                  A 19864    	OR	A,A
004E92 ED42                A 19865    	SBC	HL,BC
004E94 20 67               A 19866    	JR	NZ,L_1022
                           A 19867    ; 4325				if (i == len) buff[--i] = '
                           A 19868    .LINE 4325
                           A 19869    
004E96 DD0709              A 19870    	LD	BC,(IX+%9)
004E99 DD27FA              A 19871    	LD	HL,(IX+%FFFFFFFA)
004E9C B7                  A 19872    	OR	A,A
004E9D ED42                A 19873    	SBC	HL,BC
004E9F 20 12               A 19874    	JR	NZ,L_1019
004EA1 DD31FA              A 19875    	LD	IY,(IX+%FFFFFFFA)
004EA4 ED33FF              A 19876    	LEA	IY,IY+%FFFFFFFF
004EA7 DD3EFA              A 19877    	LD	(IX+%FFFFFFFA),IY
004EAA FDE5C1              A 19878    	LD	BC,IY
004EAD DD2706              A 19879    	LD	HL,(IX+%6)
004EB0 09                  A 19880    	ADD	HL,BC
004EB1 362F                A 19881    	LD	(HL),%2F
004EB3                     A 19882    L_1019:
                           A 19883    ; 4326	#if FF_VOLUMES >= 2			/* Put driv
                           A 19884    ; 4327				vl = 0;
                           A 19885    ; 4328	#if FF_STR_VOLUME_ID >= 1	/* String v
                           A 19886    ; 4329				for (n = 0, vp = (const cha
                           A 19887    ; 4330				if (i >= n + 2) {
                           A 19888    ; 4331					if (FF_STR_VOLUME_ID ==
                           A 19889    ; 4332					for (vl = 0; vl < n; *t
                           A 19890    ; 4333					if (FF_STR_VOLUME_ID ==
                           A 19891    ; 4334					vl++;
                           A 19892    ; 4335				}
                           A 19893    ; 4336	#else						/* Numeric 
                           A 19894    ; 4337				if (i >= 3) {
                           A 19895    ; 4338					*tp++ = (TCHAR)'0' + Cu
                           A 19896    ; 4339					*tp++ = (TCHAR)':';
                           A 19897    ; 4340					vl = 2;
                           A 19898    ; 4341				}
                           A 19899    ; 4342	#endif
                           A 19900    ; 4343				if (vl == 0) res = FR_NOT_E
                           A 19901    ; 4344	#endif
                           A 19902    ; 4345				/* Add current directory pa
                           A 19903    ; 4346				if (res == FR_OK) {
                           A 19904    .LINE 4346
                           A 19905    
004EB3 01000000            A 19906    	LD	BC,0
004EB7 DD27FD              A 19907    	LD	HL,(IX+%FFFFFFFD)
004EBA B7                  A 19908    	OR	A,A
004EBB ED42                A 19909    	SBC	HL,BC
004EBD 20 3E               A 19910    	JR	NZ,L_1022
                           A 19911    ; 4347					do *tp++ = buff[i++]; w
004EBF                     A 19912    L_1016:
                           A 19913    .LINE 4347
                           A 19914    
004EBF DD17F1              A 19915    	LD	DE,(IX+%FFFFFFF1)
004EC2 21A3FCFF            A 19916    	LD	HL,-861
004EC6 DDE5C1              A 19917    	LD	BC,IX
004EC9 09                  A 19918    	ADD	HL,BC
004ECA ED1F                A 19919    	LD	(HL),DE
004ECC DD07FA              A 19920    	LD	BC,(IX+%FFFFFFFA)
004ECF DD2706              A 19921    	LD	HL,(IX+%6)
004ED2 09                  A 19922    	ADD	HL,BC
004ED3 FD21A3FC FF         A 19923    	LD	IY,-861
004ED8 DDE5C1              A 19924    	LD	BC,IX
004EDB FD09                A 19925    	ADD	IY,BC
004EDD FD3700              A 19926    	LD	IY,(IY)
004EE0 7E                  A 19927    	LD	A,(HL)
004EE1 FD7700              A 19928    	LD	(IY),A
004EE4 DD07FA              A 19929    	LD	BC,(IX+%FFFFFFFA)
004EE7 03                  A 19930    	INC	BC
004EE8 DD0FFA              A 19931    	LD	(IX+%FFFFFFFA),BC
004EEB DD07F1              A 19932    	LD	BC,(IX+%FFFFFFF1)
004EEE 03                  A 19933    	INC	BC
004EEF DD0FF1              A 19934    	LD	(IX+%FFFFFFF1),BC
004EF2 DD0709              A 19935    	LD	BC,(IX+%9)
004EF5 DD27FA              A 19936    	LD	HL,(IX+%FFFFFFFA)
004EF8 B7                  A 19937    	OR	A,A
004EF9 ED42                A 19938    	SBC	HL,BC
004EFB 38 C2               A 19939    	JR	C,L_1016
                           A 19940    ; 4348				}
                           A 19941    ; 4349			}
004EFD                     A 19942    L_1022:
                           A 19943    .LINE 4349
                           A 19944    
                           A 19945    ; 4350			FREE_NAMBUF();
                           A 19946    ; 4351		}
004EFD                     A 19947    L_1024:
                           A 19948    .LINE 4351
                           A 19949    
                           A 19950    ; 4352	
                           A 19951    ; 4353		*tp = 0;
                           A 19952    .LINE 4353
                           A 19953    
004EFD DD27F1              A 19954    	LD	HL,(IX+%FFFFFFF1)
004F00 3600                A 19955    	LD	(HL),%0
                           A 19956    ; 4354		LEAVE_FF(fs, res);
                           A 19957    .LINE 4354
                           A 19958    
004F02 DD27FD              A 19959    	LD	HL,(IX+%FFFFFFFD)
                           A 19960    ; 4355	}
                           A 19961    .LINE 4355
                           A 19962    
004F05 DDF9                A 19963    	LD	SP,IX
004F07 DDE1                A 19964    	POP	IX
004F09 C9                  A 19965    	RET	
                           A 19966    
                           A 19967    
                           A 19968    ;**************************** _f_getcwd *******
                           A 19969    ;Name                         Addr/Register   S
                           A 19970    ;lbuf                                IX-855    
                           A 19971    ;fno                                 IX-343    
                           A 19972    ;dj                                   IX-65    
                           A 19973    ;ccl                                  IX-19    
                           A 19974    ;tp                                   IX-15    
                           A 19975    ;fs                                   IX-12    
                           A 19976    ;n                                     IX-9    
                           A 19977    ;i                                     IX-6    
                           A 19978    ;res                                   IX-3    
                           A 19979    ;len                                   IX+9    
                           A 19980    ;buff                                  IX+6    
                           A 19981    
                           A 19982    
                           A 19983    ; Stack Frame Size: 873 (bytes)
                           A 19984    ;       Spill Code: -3 (instruction)
                           A 19985    
                           A 19986    
                           A 19987    .ENDFUNC "f_getcwd",4355,"_f_getcwd"
                           A 19988    ; 4356	
                           A 19989    ; 4357	#endif /* FF_FS_RPATH >= 2 */
                           A 19990    ; 4358	#endif /* FF_FS_RPATH >= 1 */
                           A 19991    ; 4359	
                           A 19992    ; 4360	
                           A 19993    ; 4361	
                           A 19994    ; 4362	#if FF_FS_MINIMIZE <= 2
                           A 19995    ; 4363	/*-------------------------------------
                           A 19996    ; 4364	/* Seek File Read/Write Pointer        
                           A 19997    ; 4365	/*-------------------------------------
                           A 19998    ; 4366	
                           A 19999    ; 4367	FRESULT f_lseek (
                           A 20000    ; 4368		FIL* fp,		/* Pointer to the f
                           A 20001    ; 4369		FSIZE_t ofs		/* File pointer fro
                           A 20002    ; 4370	)
                           A 20003    ; 4371	{
004F0A                     A 20004    _f_lseek:
                           A 20005    .DEFINE "_f_lseek"
                           A 20006    
                           A 20007    .VALUE _f_lseek
                           A 20008    
                           A 20009    .CLASS 2
                           A 20010    
                           A 20011    .TYPE 68
                           A 20012    
                           A 20013    .ENDEF
                           A 20014    
                           A 20015    .BEGFUNC "f_lseek",4371,"_f_lseek"
                           A 20016    
                           A 20017    .LINE 4371
                           A 20018    
                           A 20019    .DEFINE "fp"
                           A 20020    
                           A 20021    .CLASS 65
                           A 20022    
                           A 20023    .VALUE 6
                           A 20024    
                           A 20025    .TAG "NONAME2"
                           A 20026    
                           A 20027    .TYPE 40
                           A 20028    
                           A 20029    .ENDEF
                           A 20030    
                           A 20031    .DEFINE "ofs"
                           A 20032    
                           A 20033    .CLASS 65
                           A 20034    
                           A 20035    .VALUE 9
                           A 20036    
                           A 20037    .TYPE 15
                           A 20038    
                           A 20039    .ENDEF
                           A 20040    
                           A 20041    .DEFINE "clst"
                           A 20042    
                           A 20043    .CLASS 65
                           A 20044    
                           A 20045    .VALUE -4
                           A 20046    
                           A 20047    .TYPE 15
                           A 20048    
                           A 20049    .ENDEF
                           A 20050    
                           A 20051    .DEFINE "res"
                           A 20052    
                           A 20053    .CLASS 65
                           A 20054    
                           A 20055    .VALUE -7
                           A 20056    
                           A 20057    .TYPE 4
                           A 20058    
                           A 20059    .ENDEF
                           A 20060    
                           A 20061    .DEFINE "bcs"
                           A 20062    
                           A 20063    .CLASS 65
                           A 20064    
                           A 20065    .VALUE -11
                           A 20066    
                           A 20067    .TYPE 15
                           A 20068    
                           A 20069    .ENDEF
                           A 20070    
                           A 20071    .DEFINE "nsect"
                           A 20072    
                           A 20073    .CLASS 65
                           A 20074    
                           A 20075    .VALUE -15
                           A 20076    
                           A 20077    .TYPE 15
                           A 20078    
                           A 20079    .ENDEF
                           A 20080    
                           A 20081    .DEFINE "fs"
                           A 20082    
                           A 20083    .CLASS 65
                           A 20084    
                           A 20085    .VALUE -18
                           A 20086    
                           A 20087    .TAG "NONAME0"
                           A 20088    
                           A 20089    .TYPE 40
                           A 20090    
                           A 20091    .ENDEF
                           A 20092    
                           A 20093    .DEFINE "ifptr"
                           A 20094    
                           A 20095    .CLASS 65
                           A 20096    
                           A 20097    .VALUE -28
                           A 20098    
                           A 20099    .TYPE 15
                           A 20100    
                           A 20101    .ENDEF
                           A 20102    
004F0A DDE5                A 20103    	PUSH	IX
004F0C DD210000 00         A 20104    	LD	IX,0
004F11 DD39                A 20105    	ADD	IX,SP
004F13 ED22D8              A 20106    	LEA	HL,IX+%FFFFFFD8
004F16 F9                  A 20107    	LD	SP,HL
                           A 20108    ; 4372		FRESULT res;
                           A 20109    ; 4373		FATFS *fs;
                           A 20110    ; 4374		DWORD clst, bcs;
                           A 20111    ; 4375		LBA_t nsect;
                           A 20112    ; 4376		FSIZE_t ifptr;
                           A 20113    ; 4377	#if FF_USE_FASTSEEK
                           A 20114    ; 4378		DWORD cl, pcl, ncl, tcl, tlen, ulen
                           A 20115    ; 4379		DWORD *tbl;
                           A 20116    ; 4380		LBA_t dsc;
                           A 20117    ; 4381	#endif
                           A 20118    ; 4382	
                           A 20119    ; 4383		res = validate(&fp->obj, &fs);		
                           A 20120    .LINE 4383
                           A 20121    
004F17 ED65EE              A 20122    	PEA	IX+%FFFFFFEE
004F1A DD3106              A 20123    	LD	IY,(IX+%6)
004F1D ED6600              A 20124    	PEA	IY+%0
004F20 CD 5F 3B 00         A 20125    	CALL	_validate
004F24 C1                  A 20126    	POP	BC
004F25 C1                  A 20127    	POP	BC
004F26 DD2FF9              A 20128    	LD	(IX+%FFFFFFF9),HL
                           A 20129    ; 4384		if (res == FR_OK) res = (FRESULT)fp
                           A 20130    .LINE 4384
                           A 20131    
004F29 01000000            A 20132    	LD	BC,0
004F2D DD27F9              A 20133    	LD	HL,(IX+%FFFFFFF9)
004F30 B7                  A 20134    	OR	A,A
004F31 ED42                A 20135    	SBC	HL,BC
004F33 20 0D               A 20136    	JR	NZ,L_1028
004F35 DD3106              A 20137    	LD	IY,(IX+%6)
004F38 FD7E10              A 20138    	LD	A,(IY+%10)
004F3B B7ED62              A 20139    	UEXT	HL
004F3E 6F                  A 20140    	LD	L,A
004F3F DD2FF9              A 20141    	LD	(IX+%FFFFFFF9),HL
004F42                     A 20142    L_1028:
                           A 20143    ; 4385	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A 20144    ; 4386		if (res == FR_OK && fs->fs_type == 
                           A 20145    ; 4387			res = fill_last_frag(&fp->obj, 
                           A 20146    ; 4388		}
                           A 20147    ; 4389	#endif
                           A 20148    ; 4390		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 20149    .LINE 4390
                           A 20150    
004F42 DD27F9              A 20151    	LD	HL,(IX+%FFFFFFF9)
004F45 B7                  A 20152    	OR	A,A
004F46 ED42                A 20153    	SBC	HL,BC
004F48 28 07               A 20154    	JR	Z,L_1066
004F4A DD27F9              A 20155    	LD	HL,(IX+%FFFFFFF9)
004F4D C3 47 53 00         A 20156    	JR	L_1068
004F51                     A 20157    L_1066:
                           A 20158    ; 4391	
                           A 20159    ; 4392	#if FF_USE_FASTSEEK
                           A 20160    ; 4393		if (fp->cltbl) {	/* Fast seek */
                           A 20161    ; 4394			if (ofs == CREATE_LINKMAP) {	
                           A 20162    ; 4395				tbl = fp->cltbl;
                           A 20163    ; 4396				tlen = *tbl++; ulen = 2;	
                           A 20164    ; 4397				cl = fp->obj.sclust;		
                           A 20165    ; 4398				if (cl != 0) {
                           A 20166    ; 4399					do {
                           A 20167    ; 4400						/* Get a fragment *
                           A 20168    ; 4401						tcl = cl; ncl = 0; 
                           A 20169    ; 4402						do {
                           A 20170    ; 4403							pcl = cl; ncl++
                           A 20171    ; 4404							cl = get_fat(&f
                           A 20172    ; 4405							if (cl <= 1) AB
                           A 20173    ; 4406							if (cl == 0xFFF
                           A 20174    ; 4407						} while (cl == pcl 
                           A 20175    ; 4408						if (ulen <= tlen) {
                           A 20176    ; 4409							*tbl++ = ncl; *
                           A 20177    ; 4410						}
                           A 20178    ; 4411					} while (cl < fs->n_fat
                           A 20179    ; 4412				}
                           A 20180    ; 4413				*fp->cltbl = ulen;	/* Numb
                           A 20181    ; 4414				if (ulen <= tlen) {
                           A 20182    ; 4415					*tbl = 0;		/* Term
                           A 20183    ; 4416				} else {
                           A 20184    ; 4417					res = FR_NOT_ENOUGH_COR
                           A 20185    ; 4418				}
                           A 20186    ; 4419			} else {						
                           A 20187    ; 4420				if (ofs > fp->obj.objsize) 
                           A 20188    ; 4421				fp->fptr = ofs;				
                           A 20189    ; 4422				if (ofs > 0) {
                           A 20190    ; 4423					fp->clust = clmt_clust(
                           A 20191    ; 4424					dsc = clst2sect(fs, fp-
                           A 20192    ; 4425					if (dsc == 0) ABORT(fs,
                           A 20193    ; 4426					dsc += (DWORD)((ofs - 1
                           A 20194    ; 4427					if (fp->fptr % SS(fs) &
                           A 20195    ; 4428	#if !FF_FS_TINY
                           A 20196    ; 4429	#if !FF_FS_READONLY
                           A 20197    ; 4430						if (fp->flag & FA_D
                           A 20198    ; 4431							if (disk_write(
                           A 20199    ; 4432							fp->flag &= (BY
                           A 20200    ; 4433						}
                           A 20201    ; 4434	#endif
                           A 20202    ; 4435						if (disk_read(fs->p
                           A 20203    ; 4436	#endif
                           A 20204    ; 4437						fp->sect = dsc;
                           A 20205    ; 4438					}
                           A 20206    ; 4439				}
                           A 20207    ; 4440			}
                           A 20208    ; 4441		} else
                           A 20209    ; 4442	#endif
                           A 20210    ; 4443	
                           A 20211    ; 4444		/* Normal Seek */
                           A 20212    ; 4445		{
                           A 20213    ; 4446	#if FF_FS_EXFAT
                           A 20214    ; 4447			if (fs->fs_type != FS_EXFAT && 
                           A 20215    ; 4448	#endif
                           A 20216    ; 4449			if (ofs > fp->obj.objsize && (F
                           A 20217    .LINE 4449
                           A 20218    
004F51 DD3106              A 20219    	LD	IY,(IX+%6)
004F54 FD270B              A 20220    	LD	HL,(IY+%B)
004F57 FD5E0E              A 20221    	LD	E,(IY+%E)
004F5A DD0709              A 20222    	LD	BC,(IX+%9)
004F5D DD7E0C              A 20223    	LD	A,(IX+%C)
004F60 CD 00 00 00         A 20224    	CALL	__lcmpu
004F64 30 19               A 20225    	JR	NC,L_1031
004F66 DD3106              A 20226    	LD	IY,(IX+%6)
004F69 FD7E0F              A 20227    	LD	A,(IY+%F)
004F6C E602                A 20228    	AND	A,%2
004F6E 20 0F               A 20229    	JR	NZ,L_1031
                           A 20230    ; 4450				ofs = fp->obj.objsize;
                           A 20231    .LINE 4450
                           A 20232    
004F70 DD3106              A 20233    	LD	IY,(IX+%6)
004F73 FD070B              A 20234    	LD	BC,(IY+%B)
004F76 FD7E0E              A 20235    	LD	A,(IY+%E)
004F79 DD0F09              A 20236    	LD	(IX+%9),BC
004F7C DD770C              A 20237    	LD	(IX+%C),A
                           A 20238    ; 4451			}
004F7F                     A 20239    L_1031:
                           A 20240    .LINE 4451
                           A 20241    
                           A 20242    ; 4452			ifptr = fp->fptr;
                           A 20243    .LINE 4452
                           A 20244    
004F7F DD3106              A 20245    	LD	IY,(IX+%6)
004F82 FD0711              A 20246    	LD	BC,(IY+%11)
004F85 FD7E14              A 20247    	LD	A,(IY+%14)
004F88 DD0FE4              A 20248    	LD	(IX+%FFFFFFE4),BC
004F8B DD77E7              A 20249    	LD	(IX+%FFFFFFE7),A
                           A 20250    ; 4453			fp->fptr = nsect = 0;
                           A 20251    .LINE 4453
                           A 20252    
004F8E 01000000            A 20253    	LD	BC,0
004F92 AF                  A 20254    	XOR	A,A
004F93 DD0FF1              A 20255    	LD	(IX+%FFFFFFF1),BC
004F96 DD77F4              A 20256    	LD	(IX+%FFFFFFF4),A
004F99 FD0F11              A 20257    	LD	(IY+%11),BC
004F9C FD361400            A 20258    	LD	(IY+%14),%0
                           A 20259    ; 4454			if (ofs > 0) {
                           A 20260    .LINE 4454
                           A 20261    
004FA0 B7                  A 20262    	OR	A,A
004FA1 ED62                A 20263    	SBC	HL,HL
004FA3 1E00                A 20264    	LD	E,%0
004FA5 DD0709              A 20265    	LD	BC,(IX+%9)
004FA8 DD7E0C              A 20266    	LD	A,(IX+%C)
004FAB CD 00 00 00         A 20267    	CALL	__lcmpu
004FAF D2 C2 52 00         A 20268    	JR	NC,L_1062
                           A 20269    ; 4455				bcs = (DWORD)fs->csize * SS
                           A 20270    .LINE 4455
                           A 20271    
004FB3 DD31EE              A 20272    	LD	IY,(IX+%FFFFFFEE)
004FB6 FD0709              A 20273    	LD	BC,(IY+%9)
004FB9 CD 00 00 00         A 20274    	CALL	__stoiu
004FBD 01000200            A 20275    	LD	BC,512
004FC1 AF                  A 20276    	XOR	A,A
004FC2 CD 00 00 00         A 20277    	CALL	__lmulu
004FC6 DD2FF5              A 20278    	LD	(IX+%FFFFFFF5),HL
004FC9 DD73F8              A 20279    	LD	(IX+%FFFFFFF8),E
                           A 20280    ; 4456				if (ifptr > 0 &&
                           A 20281    .LINE 4456
                           A 20282    
004FCC B7                  A 20283    	OR	A,A
004FCD ED62                A 20284    	SBC	HL,HL
004FCF 1E00                A 20285    	LD	E,%0
004FD1 DD07E4              A 20286    	LD	BC,(IX+%FFFFFFE4)
004FD4 DD7EE7              A 20287    	LD	A,(IX+%FFFFFFE7)
004FD7 CD 00 00 00         A 20288    	CALL	__lcmpu
004FDB D2 7E 50 00         A 20289    	JR	NC,L_1040
                           A 20290    ; 4457					(ofs - 1) / bcs >= (ifp
                           A 20291    .LINE 4457
                           A 20292    
004FDF DD27E4              A 20293    	LD	HL,(IX+%FFFFFFE4)
004FE2 DD5EE7              A 20294    	LD	E,(IX+%FFFFFFE7)
004FE5 01010000            A 20295    	LD	BC,1
004FE9 AF                  A 20296    	XOR	A,A
004FEA CD 00 00 00         A 20297    	CALL	__lsub
004FEE DD2FDC              A 20298    	LD	(IX+%FFFFFFDC),HL
004FF1 DD73DF              A 20299    	LD	(IX+%FFFFFFDF),E
004FF4 DD2709              A 20300    	LD	HL,(IX+%9)
004FF7 DD5E0C              A 20301    	LD	E,(IX+%C)
004FFA 01010000            A 20302    	LD	BC,1
004FFE AF                  A 20303    	XOR	A,A
004FFF CD 00 00 00         A 20304    	CALL	__lsub
005003 DD07F5              A 20305    	LD	BC,(IX+%FFFFFFF5)
005006 DD7EF8              A 20306    	LD	A,(IX+%FFFFFFF8)
005009 CD 00 00 00         A 20307    	CALL	__ldivu
00500D DD73DB              A 20308    	LD	(IX+%FFFFFFDB),E
005010 DD2FD8              A 20309    	LD	(IX+%FFFFFFD8),HL
005013 DD27DC              A 20310    	LD	HL,(IX+%FFFFFFDC)
005016 DD5EDF              A 20311    	LD	E,(IX+%FFFFFFDF)
005019 DD07F5              A 20312    	LD	BC,(IX+%FFFFFFF5)
00501C DD7EF8              A 20313    	LD	A,(IX+%FFFFFFF8)
00501F CD 00 00 00         A 20314    	CALL	__ldivu
005023 7B                  A 20315    	LD	A,E
005024 E5C1                A 20316    	LD	BC,HL
005026 DD5EDB              A 20317    	LD	E,(IX+%FFFFFFDB)
005029 DD27D8              A 20318    	LD	HL,(IX+%FFFFFFD8)
00502C CD 00 00 00         A 20319    	CALL	__lcmpu
005030 38 4C               A 20320    	JR	C,L_1040
                           A 20321    ; 4458					fp->fptr = (ifptr - 1) 
                           A 20322    .LINE 4458
                           A 20323    
005032 DD27F5              A 20324    	LD	HL,(IX+%FFFFFFF5)
005035 DD5EF8              A 20325    	LD	E,(IX+%FFFFFFF8)
005038 01010000            A 20326    	LD	BC,1
00503C AF                  A 20327    	XOR	A,A
00503D CD 00 00 00         A 20328    	CALL	__lsub
005041 CD 00 00 00         A 20329    	CALL	__lnot
005045 DD07DC              A 20330    	LD	BC,(IX+%FFFFFFDC)
005048 DD7EDF              A 20331    	LD	A,(IX+%FFFFFFDF)
00504B CD 00 00 00         A 20332    	CALL	__land
00504F DD3106              A 20333    	LD	IY,(IX+%6)
005052 FD2F11              A 20334    	LD	(IY+%11),HL
005055 FD7314              A 20335    	LD	(IY+%14),E
                           A 20336    ; 4459					ofs -= fp->fptr;
                           A 20337    .LINE 4459
                           A 20338    
005058 DD2709              A 20339    	LD	HL,(IX+%9)
00505B DD5E0C              A 20340    	LD	E,(IX+%C)
00505E FD0711              A 20341    	LD	BC,(IY+%11)
005061 FD7E14              A 20342    	LD	A,(IY+%14)
005064 CD 00 00 00         A 20343    	CALL	__lsub
005068 DD2F09              A 20344    	LD	(IX+%9),HL
00506B DD730C              A 20345    	LD	(IX+%C),E
                           A 20346    ; 4460					clst = fp->clust;
                           A 20347    .LINE 4460
                           A 20348    
00506E FD0715              A 20349    	LD	BC,(IY+%15)
005071 FD7E18              A 20350    	LD	A,(IY+%18)
005074 DD0FFC              A 20351    	LD	(IX+%FFFFFFFC),BC
005077 DD77FF              A 20352    	LD	(IX+%FFFFFFFF),A
                           A 20353    ; 4461				} else {					
                           A 20354    .LINE 4461
                           A 20355    
00507A C3 18 51 00         A 20356    	JR	L_1059
00507E                     A 20357    L_1040:
                           A 20358    ; 4462					clst = fp->obj.sclust;	
                           A 20359    .LINE 4462
                           A 20360    
00507E DD3106              A 20361    	LD	IY,(IX+%6)
005081 ED0300              A 20362    	LEA	BC,IY+%0
005084 DD0FEB              A 20363    	LD	(IX+%FFFFFFEB),BC
005087 DD31EB              A 20364    	LD	IY,(IX+%FFFFFFEB)
00508A FD0707              A 20365    	LD	BC,(IY+%7)
00508D FD7E0A              A 20366    	LD	A,(IY+%A)
005090 DD0FFC              A 20367    	LD	(IX+%FFFFFFFC),BC
005093 DD77FF              A 20368    	LD	(IX+%FFFFFFFF),A
                           A 20369    ; 4463	#if !FF_FS_READONLY
                           A 20370    ; 4464					if (clst == 0) {		
                           A 20371    .LINE 4464
                           A 20372    
005096 C5E1                A 20373    	LD	HL,BC
005098 DD5EFF              A 20374    	LD	E,(IX+%FFFFFFFF)
00509B 01000000            A 20375    	LD	BC,0
00509F AF                  A 20376    	XOR	A,A
0050A0 CD 00 00 00         A 20377    	CALL	__lcmpu
0050A4 20 63               A 20378    	JR	NZ,L_1038
                           A 20379    ; 4465						clst = create_chain
                           A 20380    .LINE 4465
                           A 20381    
0050A6 C5                  A 20382    	PUSH	BC
0050A7 C5                  A 20383    	PUSH	BC
0050A8 DD07EB              A 20384    	LD	BC,(IX+%FFFFFFEB)
0050AB C5                  A 20385    	PUSH	BC
0050AC CD 8E 0D 00         A 20386    	CALL	_create_chain
0050B0 C1                  A 20387    	POP	BC
0050B1 C1                  A 20388    	POP	BC
0050B2 C1                  A 20389    	POP	BC
0050B3 DD2FFC              A 20390    	LD	(IX+%FFFFFFFC),HL
0050B6 DD73FF              A 20391    	LD	(IX+%FFFFFFFF),E
                           A 20392    ; 4466						if (clst == 1) ABOR
                           A 20393    .LINE 4466
                           A 20394    
0050B9 DD27FC              A 20395    	LD	HL,(IX+%FFFFFFFC)
0050BC DD5EFF              A 20396    	LD	E,(IX+%FFFFFFFF)
0050BF 01010000            A 20397    	LD	BC,1
0050C3 AF                  A 20398    	XOR	A,A
0050C4 CD 00 00 00         A 20399    	CALL	__lcmpu
0050C8 20 0F               A 20400    	JR	NZ,L_1034
0050CA DD3106              A 20401    	LD	IY,(IX+%6)
0050CD FD361002            A 20402    	LD	(IY+%10),%2
0050D1 21020000            A 20403    	LD	HL,2
0050D5 C3 47 53 00         A 20404    	JR	L_1068
0050D9                     A 20405    L_1034:
                           A 20406    ; 4467						if (clst == 0xFFFFF
                           A 20407    .LINE 4467
                           A 20408    
0050D9 DD27FC              A 20409    	LD	HL,(IX+%FFFFFFFC)
0050DC DD5EFF              A 20410    	LD	E,(IX+%FFFFFFFF)
0050DF 01FFFFFF            A 20411    	LD	BC,16777215
0050E3 3EFF                A 20412    	LD	A,%FF
0050E5 CD 00 00 00         A 20413    	CALL	__lcmpu
0050E9 20 0F               A 20414    	JR	NZ,L_1036
0050EB DD3106              A 20415    	LD	IY,(IX+%6)
0050EE FD361001            A 20416    	LD	(IY+%10),%1
0050F2 21010000            A 20417    	LD	HL,1
0050F6 C3 47 53 00         A 20418    	JR	L_1068
0050FA                     A 20419    L_1036:
                           A 20420    ; 4468						fp->obj.sclust = cl
                           A 20421    .LINE 4468
                           A 20422    
0050FA DD07FC              A 20423    	LD	BC,(IX+%FFFFFFFC)
0050FD DD7EFF              A 20424    	LD	A,(IX+%FFFFFFFF)
005100 DD3106              A 20425    	LD	IY,(IX+%6)
005103 FD0F07              A 20426    	LD	(IY+%7),BC
005106 FD770A              A 20427    	LD	(IY+%A),A
                           A 20428    ; 4469					}
005109                     A 20429    L_1038:
                           A 20430    .LINE 4469
                           A 20431    
                           A 20432    ; 4470	#endif
                           A 20433    ; 4471					fp->clust = clst;
                           A 20434    .LINE 4471
                           A 20435    
005109 DD07FC              A 20436    	LD	BC,(IX+%FFFFFFFC)
00510C DD7EFF              A 20437    	LD	A,(IX+%FFFFFFFF)
00510F DD3106              A 20438    	LD	IY,(IX+%6)
005112 FD0F15              A 20439    	LD	(IY+%15),BC
005115 FD7718              A 20440    	LD	(IY+%18),A
                           A 20441    ; 4472				}
005118                     A 20442    L_1059:
                           A 20443    .LINE 4472
                           A 20444    
                           A 20445    ; 4473				if (clst != 0) {
                           A 20446    .LINE 4473
                           A 20447    
005118 DD27FC              A 20448    	LD	HL,(IX+%FFFFFFFC)
00511B DD5EFF              A 20449    	LD	E,(IX+%FFFFFFFF)
00511E 01000000            A 20450    	LD	BC,0
005122 AF                  A 20451    	XOR	A,A
005123 CD 00 00 00         A 20452    	CALL	__lcmpu
005127 C2 21 52 00         A 20453    	JR	NZ,L_1052
00512B C3 C2 52 00         A 20454    	JR	L_1062
                           A 20455    ; 4474					while (ofs > bcs) {		
00512F                     A 20456    L_1053:
                           A 20457    .LINE 4474
                           A 20458    
                           A 20459    ; 4475						ofs -= bcs; fp->fpt
                           A 20460    .LINE 4475
                           A 20461    
00512F DD2709              A 20462    	LD	HL,(IX+%9)
005132 DD5E0C              A 20463    	LD	E,(IX+%C)
005135 DD07F5              A 20464    	LD	BC,(IX+%FFFFFFF5)
005138 DD7EF8              A 20465    	LD	A,(IX+%FFFFFFF8)
00513B CD 00 00 00         A 20466    	CALL	__lsub
00513F DD2F09              A 20467    	LD	(IX+%9),HL
005142 DD730C              A 20468    	LD	(IX+%C),E
005145 DD3106              A 20469    	LD	IY,(IX+%6)
005148 FD2711              A 20470    	LD	HL,(IY+%11)
00514B FD5E14              A 20471    	LD	E,(IY+%14)
00514E DD07F5              A 20472    	LD	BC,(IX+%FFFFFFF5)
005151 DD7EF8              A 20473    	LD	A,(IX+%FFFFFFF8)
005154 CD 00 00 00         A 20474    	CALL	__ladd
005158 FD2F11              A 20475    	LD	(IY+%11),HL
00515B FD7314              A 20476    	LD	(IY+%14),E
                           A 20477    ; 4476	#if !FF_FS_READONLY
                           A 20478    ; 4477						if (fp->flag & FA_W
                           A 20479    .LINE 4477
                           A 20480    
00515E FD7E0F              A 20481    	LD	A,(IY+%F)
005161 E602                A 20482    	AND	A,%2
005163 28 39               A 20483    	JR	Z,L_1045
                           A 20484    ; 4478							if (FF_FS_EXFAT
                           A 20485    ; 4479								fp->obj.obj
                           A 20486    ; 4480								fp->flag |=
                           A 20487    ; 4481							}
                           A 20488    ; 4482							clst = create_c
                           A 20489    .LINE 4482
                           A 20490    
005165 DD4EFF              A 20491    	LD	C,(IX+%FFFFFFFF)
005168 0600                A 20492    	LD	B,%0
00516A C5                  A 20493    	PUSH	BC
00516B DD07FC              A 20494    	LD	BC,(IX+%FFFFFFFC)
00516E C5                  A 20495    	PUSH	BC
00516F DD3106              A 20496    	LD	IY,(IX+%6)
005172 ED6600              A 20497    	PEA	IY+%0
005175 CD 8E 0D 00         A 20498    	CALL	_create_chain
005179 C1                  A 20499    	POP	BC
00517A C1                  A 20500    	POP	BC
00517B C1                  A 20501    	POP	BC
00517C DD2FFC              A 20502    	LD	(IX+%FFFFFFFC),HL
00517F DD73FF              A 20503    	LD	(IX+%FFFFFFFF),E
                           A 20504    ; 4483							if (clst == 0) 
                           A 20505    .LINE 4483
                           A 20506    
005182 DD27FC              A 20507    	LD	HL,(IX+%FFFFFFFC)
005185 DD5EFF              A 20508    	LD	E,(IX+%FFFFFFFF)
005188 01000000            A 20509    	LD	BC,0
00518C AF                  A 20510    	XOR	A,A
00518D CD 00 00 00         A 20511    	CALL	__lcmpu
005191 20 28               A 20512    	JR	NZ,L_1047
                           A 20513    ; 4484								ofs = 0; br
                           A 20514    .LINE 4484
                           A 20515    
005193 AF                  A 20516    	XOR	A,A
005194 DD0F09              A 20517    	LD	(IX+%9),BC
005197 DD770C              A 20518    	LD	(IX+%C),A
00519A C3 35 52 00         A 20519    	JR	L_1054
                           A 20520    ; 4485							}
                           A 20521    ; 4486						} else
00519E                     A 20522    L_1045:
                           A 20523    .LINE 4486
                           A 20524    
                           A 20525    ; 4487	#endif
                           A 20526    ; 4488						{
                           A 20527    ; 4489							clst = get_fat(
                           A 20528    .LINE 4489
                           A 20529    
00519E DD4EFF              A 20530    	LD	C,(IX+%FFFFFFFF)
0051A1 0600                A 20531    	LD	B,%0
0051A3 C5                  A 20532    	PUSH	BC
0051A4 DD07FC              A 20533    	LD	BC,(IX+%FFFFFFFC)
0051A7 C5                  A 20534    	PUSH	BC
0051A8 DD3106              A 20535    	LD	IY,(IX+%6)
0051AB ED6600              A 20536    	PEA	IY+%0
0051AE CD 64 06 00         A 20537    	CALL	_get_fat
0051B2 C1                  A 20538    	POP	BC
0051B3 C1                  A 20539    	POP	BC
0051B4 C1                  A 20540    	POP	BC
0051B5 DD2FFC              A 20541    	LD	(IX+%FFFFFFFC),HL
0051B8 DD73FF              A 20542    	LD	(IX+%FFFFFFFF),E
                           A 20543    ; 4490						}
0051BB                     A 20544    L_1047:
                           A 20545    .LINE 4490
                           A 20546    
                           A 20547    ; 4491						if (clst == 0xFFFFF
                           A 20548    .LINE 4491
                           A 20549    
0051BB DD27FC              A 20550    	LD	HL,(IX+%FFFFFFFC)
0051BE DD5EFF              A 20551    	LD	E,(IX+%FFFFFFFF)
0051C1 01FFFFFF            A 20552    	LD	BC,16777215
0051C5 3EFF                A 20553    	LD	A,%FF
0051C7 CD 00 00 00         A 20554    	CALL	__lcmpu
0051CB 20 0F               A 20555    	JR	NZ,L_1048
0051CD DD3106              A 20556    	LD	IY,(IX+%6)
0051D0 FD361001            A 20557    	LD	(IY+%10),%1
0051D4 21010000            A 20558    	LD	HL,1
0051D8 C3 47 53 00         A 20559    	JR	L_1068
0051DC                     A 20560    L_1048:
                           A 20561    ; 4492						if (clst <= 1 || cl
                           A 20562    .LINE 4492
                           A 20563    
0051DC 21010000            A 20564    	LD	HL,1
0051E0 1E00                A 20565    	LD	E,%0
0051E2 DD07FC              A 20566    	LD	BC,(IX+%FFFFFFFC)
0051E5 DD7EFF              A 20567    	LD	A,(IX+%FFFFFFFF)
0051E8 CD 00 00 00         A 20568    	CALL	__lcmpu
0051EC 30 15               A 20569    	JR	NC,L_1050
0051EE DD27FC              A 20570    	LD	HL,(IX+%FFFFFFFC)
0051F1 DD5EFF              A 20571    	LD	E,(IX+%FFFFFFFF)
0051F4 DD31EE              A 20572    	LD	IY,(IX+%FFFFFFEE)
0051F7 FD071A              A 20573    	LD	BC,(IY+%1A)
0051FA FD7E1D              A 20574    	LD	A,(IY+%1D)
0051FD CD 00 00 00         A 20575    	CALL	__lcmpu
005201 38 0F               A 20576    	JR	C,L_1051
005203                     A 20577    L_1050:
005203 DD3106              A 20578    	LD	IY,(IX+%6)
005206 FD361002            A 20579    	LD	(IY+%10),%2
00520A 21020000            A 20580    	LD	HL,2
00520E C3 47 53 00         A 20581    	JR	L_1068
005212                     A 20582    L_1051:
                           A 20583    ; 4493						fp->clust = clst;
                           A 20584    .LINE 4493
                           A 20585    
005212 DD07FC              A 20586    	LD	BC,(IX+%FFFFFFFC)
005215 DD7EFF              A 20587    	LD	A,(IX+%FFFFFFFF)
005218 DD3106              A 20588    	LD	IY,(IX+%6)
00521B FD0F15              A 20589    	LD	(IY+%15),BC
00521E FD7718              A 20590    	LD	(IY+%18),A
                           A 20591    ; 4494					}
005221                     A 20592    L_1052:
                           A 20593    .LINE 4494
                           A 20594    
005221 DD27F5              A 20595    	LD	HL,(IX+%FFFFFFF5)
005224 DD5EF8              A 20596    	LD	E,(IX+%FFFFFFF8)
005227 DD0709              A 20597    	LD	BC,(IX+%9)
00522A DD7E0C              A 20598    	LD	A,(IX+%C)
00522D CD 00 00 00         A 20599    	CALL	__lcmpu
005231 DA 2F 51 00         A 20600    	JR	C,L_1053
005235                     A 20601    L_1054:
                           A 20602    ; 4495					fp->fptr += ofs;
                           A 20603    .LINE 4495
                           A 20604    
005235 DD3106              A 20605    	LD	IY,(IX+%6)
005238 FD2711              A 20606    	LD	HL,(IY+%11)
00523B FD5E14              A 20607    	LD	E,(IY+%14)
00523E DD0709              A 20608    	LD	BC,(IX+%9)
005241 DD7E0C              A 20609    	LD	A,(IX+%C)
005244 CD 00 00 00         A 20610    	CALL	__ladd
005248 FD2F11              A 20611    	LD	(IY+%11),HL
00524B FD7314              A 20612    	LD	(IY+%14),E
                           A 20613    ; 4496					if (ofs % SS(fs)) {
                           A 20614    .LINE 4496
                           A 20615    
00524E DD2709              A 20616    	LD	HL,(IX+%9)
005251 DD5E0C              A 20617    	LD	E,(IX+%C)
005254 01FF0100            A 20618    	LD	BC,511
005258 AF                  A 20619    	XOR	A,A
005259 CD 00 00 00         A 20620    	CALL	__land
00525D 01000000            A 20621    	LD	BC,0
005261 AF                  A 20622    	XOR	A,A
005262 CD 00 00 00         A 20623    	CALL	__lcmpu
005266 28 5A               A 20624    	JR	Z,L_1062
                           A 20625    ; 4497						nsect = clst2sect(f
                           A 20626    .LINE 4497
                           A 20627    
005268 DD4EFF              A 20628    	LD	C,(IX+%FFFFFFFF)
00526B 0600                A 20629    	LD	B,%0
00526D C5                  A 20630    	PUSH	BC
00526E DD07FC              A 20631    	LD	BC,(IX+%FFFFFFFC)
005271 C5                  A 20632    	PUSH	BC
005272 DD07EE              A 20633    	LD	BC,(IX+%FFFFFFEE)
005275 C5                  A 20634    	PUSH	BC
005276 CD F9 05 00         A 20635    	CALL	_clst2sect
00527A C1                  A 20636    	POP	BC
00527B C1                  A 20637    	POP	BC
00527C C1                  A 20638    	POP	BC
00527D DD2FF1              A 20639    	LD	(IX+%FFFFFFF1),HL
005280 DD73F4              A 20640    	LD	(IX+%FFFFFFF4),E
                           A 20641    ; 4498						if (nsect == 0) ABO
                           A 20642    .LINE 4498
                           A 20643    
005283 DD27F1              A 20644    	LD	HL,(IX+%FFFFFFF1)
005286 DD5EF4              A 20645    	LD	E,(IX+%FFFFFFF4)
005289 01000000            A 20646    	LD	BC,0
00528D AF                  A 20647    	XOR	A,A
00528E CD 00 00 00         A 20648    	CALL	__lcmpu
005292 20 0F               A 20649    	JR	NZ,L_1056
005294 DD3106              A 20650    	LD	IY,(IX+%6)
005297 FD361002            A 20651    	LD	(IY+%10),%2
00529B 21020000            A 20652    	LD	HL,2
00529F C3 47 53 00         A 20653    	JR	L_1068
0052A3                     A 20654    L_1056:
                           A 20655    ; 4499						nsect += (DWORD)(of
                           A 20656    .LINE 4499
                           A 20657    
0052A3 DD0709              A 20658    	LD	BC,(IX+%9)
0052A6 DD7E0C              A 20659    	LD	A,(IX+%C)
0052A9 2E09                A 20660    	LD	L,%9
0052AB CD 00 00 00         A 20661    	CALL	__lshru
0052AF 5F                  A 20662    	LD	E,A
0052B0 C5E1                A 20663    	LD	HL,BC
0052B2 DD07F1              A 20664    	LD	BC,(IX+%FFFFFFF1)
0052B5 DD7EF4              A 20665    	LD	A,(IX+%FFFFFFF4)
0052B8 CD 00 00 00         A 20666    	CALL	__ladd
0052BC DD2FF1              A 20667    	LD	(IX+%FFFFFFF1),HL
0052BF DD73F4              A 20668    	LD	(IX+%FFFFFFF4),E
                           A 20669    ; 4500					}
                           A 20670    ; 4501				}
                           A 20671    ; 4502			}
0052C2                     A 20672    L_1062:
                           A 20673    .LINE 4502
                           A 20674    
                           A 20675    ; 4503			if (!FF_FS_READONLY && fp->fptr
                           A 20676    .LINE 4503
                           A 20677    
0052C2 DD3106              A 20678    	LD	IY,(IX+%6)
0052C5 ED0300              A 20679    	LEA	BC,IY+%0
0052C8 DD0FE8              A 20680    	LD	(IX+%FFFFFFE8),BC
0052CB FD0711              A 20681    	LD	BC,(IY+%11)
0052CE FD7E14              A 20682    	LD	A,(IY+%14)
0052D1 DD0FE0              A 20683    	LD	(IX+%FFFFFFE0),BC
0052D4 DD77E3              A 20684    	LD	(IX+%FFFFFFE3),A
0052D7 DD31E8              A 20685    	LD	IY,(IX+%FFFFFFE8)
0052DA FD270B              A 20686    	LD	HL,(IY+%B)
0052DD FD5E0E              A 20687    	LD	E,(IY+%E)
0052E0 DD7EE3              A 20688    	LD	A,(IX+%FFFFFFE3)
0052E3 CD 00 00 00         A 20689    	CALL	__lcmpu
0052E7 30 1A               A 20690    	JR	NC,L_1065
                           A 20691    ; 4504				fp->obj.objsize = fp->fptr;
                           A 20692    .LINE 4504
                           A 20693    
0052E9 DD07E0              A 20694    	LD	BC,(IX+%FFFFFFE0)
0052EC DD7EE3              A 20695    	LD	A,(IX+%FFFFFFE3)
0052EF DD31E8              A 20696    	LD	IY,(IX+%FFFFFFE8)
0052F2 FD0F0B              A 20697    	LD	(IY+%B),BC
0052F5 FD770E              A 20698    	LD	(IY+%E),A
                           A 20699    ; 4505				fp->flag |= FA_MODIFIED;
                           A 20700    .LINE 4505
                           A 20701    
0052F8 DD3106              A 20702    	LD	IY,(IX+%6)
0052FB FD7E0F              A 20703    	LD	A,(IY+%F)
0052FE CBF7                A 20704    	SET	%6,A
005300 FD770F              A 20705    	LD	(IY+%F),A
                           A 20706    ; 4506			}
005303                     A 20707    L_1065:
                           A 20708    .LINE 4506
                           A 20709    
                           A 20710    ; 4507			if (fp->fptr % SS(fs) && nsect 
                           A 20711    .LINE 4507
                           A 20712    
005303 DD3106              A 20713    	LD	IY,(IX+%6)
005306 FD2711              A 20714    	LD	HL,(IY+%11)
005309 FD5E14              A 20715    	LD	E,(IY+%14)
00530C 01FF0100            A 20716    	LD	BC,511
005310 AF                  A 20717    	XOR	A,A
005311 CD 00 00 00         A 20718    	CALL	__land
005315 01000000            A 20719    	LD	BC,0
005319 AF                  A 20720    	XOR	A,A
00531A CD 00 00 00         A 20721    	CALL	__lcmpu
00531E 28 24               A 20722    	JR	Z,L_1067
005320 DD3106              A 20723    	LD	IY,(IX+%6)
005323 FD2719              A 20724    	LD	HL,(IY+%19)
005326 FD5E1C              A 20725    	LD	E,(IY+%1C)
005329 DD07F1              A 20726    	LD	BC,(IX+%FFFFFFF1)
00532C DD7EF4              A 20727    	LD	A,(IX+%FFFFFFF4)
00532F CD 00 00 00         A 20728    	CALL	__lcmpu
005333 28 0F               A 20729    	JR	Z,L_1067
                           A 20730    ; 4508	#if !FF_FS_TINY
                           A 20731    ; 4509	#if !FF_FS_READONLY
                           A 20732    ; 4510				if (fp->flag & FA_DIRTY) {	
                           A 20733    ; 4511					if (disk_write(fs->pdrv
                           A 20734    ; 4512					fp->flag &= (BYTE)~FA_D
                           A 20735    ; 4513				}
                           A 20736    ; 4514	#endif
                           A 20737    ; 4515				if (disk_read(fs->pdrv, fp-
                           A 20738    ; 4516	#endif
                           A 20739    ; 4517				fp->sect = nsect;
                           A 20740    .LINE 4517
                           A 20741    
005335 DD07F1              A 20742    	LD	BC,(IX+%FFFFFFF1)
005338 DD7EF4              A 20743    	LD	A,(IX+%FFFFFFF4)
00533B DD3106              A 20744    	LD	IY,(IX+%6)
00533E FD0F19              A 20745    	LD	(IY+%19),BC
005341 FD771C              A 20746    	LD	(IY+%1C),A
                           A 20747    ; 4518			}
                           A 20748    ; 4519		}
005344                     A 20749    L_1067:
                           A 20750    .LINE 4519
                           A 20751    
                           A 20752    ; 4520	
                           A 20753    ; 4521		LEAVE_FF(fs, res);
                           A 20754    .LINE 4521
                           A 20755    
005344 DD27F9              A 20756    	LD	HL,(IX+%FFFFFFF9)
                           A 20757    ; 4522	}
005347                     A 20758    L_1068:
                           A 20759    .LINE 4522
                           A 20760    
005347 DDF9                A 20761    	LD	SP,IX
005349 DDE1                A 20762    	POP	IX
00534B C9                  A 20763    	RET	
                           A 20764    
                           A 20765    
                           A 20766    ;**************************** _f_lseek ********
                           A 20767    ;Name                         Addr/Register   S
                           A 20768    ;G_76                                 IX-36    
                           A 20769    ;G_79                                 IX-32    
                           A 20770    ;ifptr                                IX-28    
                           A 20771    ;G_78                                 IX-24    
                           A 20772    ;G_77                                 IX-21    
                           A 20773    ;fs                                   IX-18    
                           A 20774    ;nsect                                IX-15    
                           A 20775    ;bcs                                  IX-11    
                           A 20776    ;res                                   IX-7    
                           A 20777    ;clst                                  IX-4    
                           A 20778    ;ofs                                   IX+9    
                           A 20779    ;fp                                    IX+6    
                           A 20780    
                           A 20781    
                           A 20782    ; Stack Frame Size: 55 (bytes)
                           A 20783    ;       Spill Code: -3 (instruction)
                           A 20784    
                           A 20785    
                           A 20786    .ENDFUNC "f_lseek",4522,"_f_lseek"
                           A 20787    ; 4523	
                           A 20788    ; 4524	
                           A 20789    ; 4525	
                           A 20790    ; 4526	#if FF_FS_MINIMIZE <= 1
                           A 20791    ; 4527	/*-------------------------------------
                           A 20792    ; 4528	/* Create a Directory Object           
                           A 20793    ; 4529	/*-------------------------------------
                           A 20794    ; 4530	
                           A 20795    ; 4531	FRESULT f_opendir (
                           A 20796    ; 4532		DIR* dp,			/* Pointer to d
                           A 20797    ; 4533		const TCHAR* path	/* Pointer to t
                           A 20798    ; 4534	)
                           A 20799    ; 4535	{
00534C                     A 20800    _f_opendir:
                           A 20801    .DEFINE "_f_opendir"
                           A 20802    
                           A 20803    .VALUE _f_opendir
                           A 20804    
                           A 20805    .CLASS 2
                           A 20806    
                           A 20807    .TYPE 68
                           A 20808    
                           A 20809    .ENDEF
                           A 20810    
                           A 20811    .BEGFUNC "f_opendir",4535,"_f_opendir"
                           A 20812    
                           A 20813    .LINE 4535
                           A 20814    
                           A 20815    .DEFINE "dp"
                           A 20816    
                           A 20817    .CLASS 65
                           A 20818    
                           A 20819    .VALUE 6
                           A 20820    
                           A 20821    .TAG "NONAME3"
                           A 20822    
                           A 20823    .TYPE 40
                           A 20824    
                           A 20825    .ENDEF
                           A 20826    
                           A 20827    .DEFINE "path"
                           A 20828    
                           A 20829    .CLASS 65
                           A 20830    
                           A 20831    .VALUE 9
                           A 20832    
                           A 20833    .TYPE 194
                           A 20834    
                           A 20835    .ENDEF
                           A 20836    
                           A 20837    .DEFINE "res"
                           A 20838    
                           A 20839    .CLASS 65
                           A 20840    
                           A 20841    .VALUE -3
                           A 20842    
                           A 20843    .TYPE 4
                           A 20844    
                           A 20845    .ENDEF
                           A 20846    
                           A 20847    .DEFINE "fs"
                           A 20848    
                           A 20849    .CLASS 65
                           A 20850    
                           A 20851    .VALUE -6
                           A 20852    
                           A 20853    .TAG "NONAME0"
                           A 20854    
                           A 20855    .TYPE 40
                           A 20856    
                           A 20857    .ENDEF
                           A 20858    
                           A 20859    .DEFINE "lbuf"
                           A 20860    
                           A 20861    .CLASS 65
                           A 20862    
                           A 20863    .VALUE -518
                           A 20864    
                           A 20865    .DIM 256
                           A 20866    
                           A 20867    .TYPE 109
                           A 20868    
                           A 20869    .ENDEF
                           A 20870    
00534C DDE5                A 20871    	PUSH	IX
00534E DD210000 00         A 20872    	LD	IX,0
005353 DD39                A 20873    	ADD	IX,SP
005355 21FAFDFF            A 20874    	LD	HL,-518
005359 39                  A 20875    	ADD	HL,SP
00535A F9                  A 20876    	LD	SP,HL
                           A 20877    ; 4536		FRESULT res;
                           A 20878    ; 4537		FATFS *fs;
                           A 20879    ; 4538		DEF_NAMBUF
                           A 20880    ; 4539	
                           A 20881    ; 4540	
                           A 20882    ; 4541		if (!dp) return FR_INVALID_OBJECT;
                           A 20883    .LINE 4541
                           A 20884    
00535B 01000000            A 20885    	LD	BC,0
00535F DD2706              A 20886    	LD	HL,(IX+%6)
005362 B7                  A 20887    	OR	A,A
005363 ED42                A 20888    	SBC	HL,BC
005365 20 08               A 20889    	JR	NZ,L_1070
005367 21090000            A 20890    	LD	HL,9
00536B C3 50 54 00         A 20891    	JR	L_1083
00536F                     A 20892    L_1070:
                           A 20893    ; 4542	
                           A 20894    ; 4543		/* Get logical drive */
                           A 20895    ; 4544		res = mount_volume(&path, &fs, 0);
                           A 20896    .LINE 4544
                           A 20897    
00536F C5                  A 20898    	PUSH	BC
005370 ED65FA              A 20899    	PEA	IX+%FFFFFFFA
005373 ED6509              A 20900    	PEA	IX+%9
005376 CD A9 34 00         A 20901    	CALL	_mount_volume
00537A C1                  A 20902    	POP	BC
00537B C1                  A 20903    	POP	BC
00537C C1                  A 20904    	POP	BC
00537D DD2FFD              A 20905    	LD	(IX+%FFFFFFFD),HL
                           A 20906    ; 4545		if (res == FR_OK) {
                           A 20907    .LINE 4545
                           A 20908    
005380 01000000            A 20909    	LD	BC,0
005384 DD27FD              A 20910    	LD	HL,(IX+%FFFFFFFD)
005387 B7                  A 20911    	OR	A,A
005388 ED42                A 20912    	SBC	HL,BC
00538A C2 3B 54 00         A 20913    	JR	NZ,L_1081
                           A 20914    ; 4546			dp->obj.fs = fs;
                           A 20915    .LINE 4546
                           A 20916    
00538E DD07FA              A 20917    	LD	BC,(IX+%FFFFFFFA)
005391 DD3106              A 20918    	LD	IY,(IX+%6)
005394 FD0F00              A 20919    	LD	(IY+%0),BC
                           A 20920    ; 4547			INIT_NAMBUF(fs);
                           A 20921    .LINE 4547
                           A 20922    
005397 DDE5E1              A 20923    	LD	HL,IX
00539A 01FAFDFF            A 20924    	LD	BC,-518
00539E 09                  A 20925    	ADD	HL,BC
00539F DD31FA              A 20926    	LD	IY,(IX+%FFFFFFFA)
0053A2 FD2F0B              A 20927    	LD	(IY+%B),HL
                           A 20928    ; 4548			res = follow_path(dp, path);	
                           A 20929    .LINE 4548
                           A 20930    
0053A5 DD0709              A 20931    	LD	BC,(IX+%9)
0053A8 C5                  A 20932    	PUSH	BC
0053A9 DD0706              A 20933    	LD	BC,(IX+%6)
0053AC C5                  A 20934    	PUSH	BC
0053AD CD DA 2E 00         A 20935    	CALL	_follow_path
0053B1 C1                  A 20936    	POP	BC
0053B2 C1                  A 20937    	POP	BC
0053B3 DD2FFD              A 20938    	LD	(IX+%FFFFFFFD),HL
                           A 20939    ; 4549			if (res == FR_OK) {				
                           A 20940    .LINE 4549
                           A 20941    
0053B6 01000000            A 20942    	LD	BC,0
0053BA DD27FD              A 20943    	LD	HL,(IX+%FFFFFFFD)
0053BD B7                  A 20944    	OR	A,A
0053BE ED42                A 20945    	SBC	HL,BC
0053C0 20 66               A 20946    	JR	NZ,L_1077
                           A 20947    ; 4550				if (!(dp->fn[NSFLAG] & NS_N
                           A 20948    .LINE 4550
                           A 20949    
0053C2 DD3106              A 20950    	LD	IY,(IX+%6)
0053C5 FD7E29              A 20951    	LD	A,(IY+%29)
0053C8 E680                A 20952    	AND	A,%80
0053CA 20 2D               A 20953    	JR	NZ,L_1075
                           A 20954    ; 4551					if (dp->obj.attr & AM_D
                           A 20955    .LINE 4551
                           A 20956    
0053CC DD3106              A 20957    	LD	IY,(IX+%6)
0053CF FD7E05              A 20958    	LD	A,(IY+%5)
0053D2 E610                A 20959    	AND	A,%10
0053D4 28 1C               A 20960    	JR	Z,L_1072
                           A 20961    ; 4552	#if FF_FS_EXFAT
                           A 20962    ; 4553						if (fs->fs_type == 
                           A 20963    ; 4554							dp->obj.c_scl =
                           A 20964    ; 4555							dp->obj.c_size 
                           A 20965    ; 4556							dp->obj.c_ofs =
                           A 20966    ; 4557							init_alloc_info
                           A 20967    ; 4558						} else
                           A 20968    ; 4559	#endif
                           A 20969    ; 4560						{
                           A 20970    ; 4561							dp->obj.sclust 
                           A 20971    .LINE 4561
                           A 20972    
0053D6 DD3106              A 20973    	LD	IY,(IX+%6)
0053D9 FD071B              A 20974    	LD	BC,(IY+%1B)
0053DC C5                  A 20975    	PUSH	BC
0053DD DD07FA              A 20976    	LD	BC,(IX+%FFFFFFFA)
0053E0 C5                  A 20977    	PUSH	BC
0053E1 CD EE 17 00         A 20978    	CALL	_ld_clust
0053E5 C1                  A 20979    	POP	BC
0053E6 C1                  A 20980    	POP	BC
0053E7 DD3106              A 20981    	LD	IY,(IX+%6)
0053EA FD2F07              A 20982    	LD	(IY+%7),HL
0053ED FD730A              A 20983    	LD	(IY+%A),E
                           A 20984    ; 4562						}
                           A 20985    ; 4563					} else {				
                           A 20986    .LINE 4563
                           A 20987    
0053F0 18 07               A 20988    	JR	L_1075
0053F2                     A 20989    L_1072:
                           A 20990    ; 4564						res = FR_NO_PATH;
                           A 20991    .LINE 4564
                           A 20992    
0053F2 01050000            A 20993    	LD	BC,5
0053F6 DD0FFD              A 20994    	LD	(IX+%FFFFFFFD),BC
                           A 20995    ; 4565					}
                           A 20996    ; 4566				}
0053F9                     A 20997    L_1075:
                           A 20998    .LINE 4566
                           A 20999    
                           A 21000    ; 4567				if (res == FR_OK) {
                           A 21001    .LINE 4567
                           A 21002    
0053F9 01000000            A 21003    	LD	BC,0
0053FD DD27FD              A 21004    	LD	HL,(IX+%FFFFFFFD)
005400 B7                  A 21005    	OR	A,A
005401 ED42                A 21006    	SBC	HL,BC
005403 20 23               A 21007    	JR	NZ,L_1077
                           A 21008    ; 4568					dp->obj.id = fs->id;
                           A 21009    .LINE 4568
                           A 21010    
005405 DD31FA              A 21011    	LD	IY,(IX+%FFFFFFFA)
005408 FD0705              A 21012    	LD	BC,(IY+%5)
00540B DD3106              A 21013    	LD	IY,(IX+%6)
00540E FD7103              A 21014    	LD	(IY+%3),C
005411 FD7004              A 21015    	LD	(IY+%4),B
                           A 21016    ; 4569					res = dir_sdi(dp, 0);	
                           A 21017    .LINE 4569
                           A 21018    
005414 01000000            A 21019    	LD	BC,0
005418 C5                  A 21020    	PUSH	BC
005419 C5                  A 21021    	PUSH	BC
00541A DD0706              A 21022    	LD	BC,(IX+%6)
00541D C5                  A 21023    	PUSH	BC
00541E CD 50 12 00         A 21024    	CALL	_dir_sdi
005422 C1                  A 21025    	POP	BC
005423 C1                  A 21026    	POP	BC
005424 C1                  A 21027    	POP	BC
005425 DD2FFD              A 21028    	LD	(IX+%FFFFFFFD),HL
                           A 21029    ; 4570	#if FF_FS_LOCK != 0
                           A 21030    ; 4571					if (res == FR_OK) {
                           A 21031    ; 4572						if (dp->obj.sclust 
                           A 21032    ; 4573							dp->obj.lockid 
                           A 21033    ; 4574							if (!dp->obj.lo
                           A 21034    ; 4575						} else {
                           A 21035    ; 4576							dp->obj.lockid 
                           A 21036    ; 4577						}
                           A 21037    ; 4578					}
                           A 21038    ; 4579	#endif
                           A 21039    ; 4580				}
                           A 21040    ; 4581			}
005428                     A 21041    L_1077:
                           A 21042    .LINE 4581
                           A 21043    
                           A 21044    ; 4582			FREE_NAMBUF();
                           A 21045    ; 4583			if (res == FR_NO_FILE) res = FR
                           A 21046    .LINE 4583
                           A 21047    
005428 01040000            A 21048    	LD	BC,4
00542C DD27FD              A 21049    	LD	HL,(IX+%FFFFFFFD)
00542F B7                  A 21050    	OR	A,A
005430 ED42                A 21051    	SBC	HL,BC
005432 20 07               A 21052    	JR	NZ,L_1081
005434 01050000            A 21053    	LD	BC,5
005438 DD0FFD              A 21054    	LD	(IX+%FFFFFFFD),BC
                           A 21055    ; 4584		}
00543B                     A 21056    L_1081:
                           A 21057    .LINE 4584
                           A 21058    
                           A 21059    ; 4585		if (res != FR_OK) dp->obj.fs = 0;	
                           A 21060    .LINE 4585
                           A 21061    
00543B 01000000            A 21062    	LD	BC,0
00543F DD27FD              A 21063    	LD	HL,(IX+%FFFFFFFD)
005442 B7                  A 21064    	OR	A,A
005443 ED42                A 21065    	SBC	HL,BC
005445 28 06               A 21066    	JR	Z,L_1082
005447 DD3106              A 21067    	LD	IY,(IX+%6)
00544A FD0F00              A 21068    	LD	(IY+%0),BC
00544D                     A 21069    L_1082:
                           A 21070    ; 4586	
                           A 21071    ; 4587		LEAVE_FF(fs, res);
                           A 21072    .LINE 4587
                           A 21073    
00544D DD27FD              A 21074    	LD	HL,(IX+%FFFFFFFD)
                           A 21075    ; 4588	}
005450                     A 21076    L_1083:
                           A 21077    .LINE 4588
                           A 21078    
005450 DDF9                A 21079    	LD	SP,IX
005452 DDE1                A 21080    	POP	IX
005454 C9                  A 21081    	RET	
                           A 21082    
                           A 21083    
                           A 21084    ;**************************** _f_opendir ******
                           A 21085    ;Name                         Addr/Register   S
                           A 21086    ;lbuf                                IX-518    
                           A 21087    ;fs                                    IX-6    
                           A 21088    ;res                                   IX-3    
                           A 21089    ;path                                  IX+9    
                           A 21090    ;dp                                    IX+6    
                           A 21091    
                           A 21092    
                           A 21093    ; Stack Frame Size: 530 (bytes)
                           A 21094    ;       Spill Code: -3 (instruction)
                           A 21095    
                           A 21096    
                           A 21097    .ENDFUNC "f_opendir",4588,"_f_opendir"
                           A 21098    ; 4589	
                           A 21099    ; 4590	
                           A 21100    ; 4591	
                           A 21101    ; 4592	
                           A 21102    ; 4593	/*-------------------------------------
                           A 21103    ; 4594	/* Close Directory                     
                           A 21104    ; 4595	/*-------------------------------------
                           A 21105    ; 4596	
                           A 21106    ; 4597	FRESULT f_closedir (
                           A 21107    ; 4598		DIR *dp		/* Pointer to the direc
                           A 21108    ; 4599	)
                           A 21109    ; 4600	{
005455                     A 21110    _f_closedir:
                           A 21111    .DEFINE "_f_closedir"
                           A 21112    
                           A 21113    .VALUE _f_closedir
                           A 21114    
                           A 21115    .CLASS 2
                           A 21116    
                           A 21117    .TYPE 68
                           A 21118    
                           A 21119    .ENDEF
                           A 21120    
                           A 21121    .BEGFUNC "f_closedir",4600,"_f_closedir"
                           A 21122    
                           A 21123    .LINE 4600
                           A 21124    
                           A 21125    .DEFINE "dp"
                           A 21126    
                           A 21127    .CLASS 65
                           A 21128    
                           A 21129    .VALUE 6
                           A 21130    
                           A 21131    .TAG "NONAME3"
                           A 21132    
                           A 21133    .TYPE 40
                           A 21134    
                           A 21135    .ENDEF
                           A 21136    
                           A 21137    .DEFINE "res"
                           A 21138    
                           A 21139    .CLASS 65
                           A 21140    
                           A 21141    .VALUE -3
                           A 21142    
                           A 21143    .TYPE 4
                           A 21144    
                           A 21145    .ENDEF
                           A 21146    
                           A 21147    .DEFINE "fs"
                           A 21148    
                           A 21149    .CLASS 65
                           A 21150    
                           A 21151    .VALUE -6
                           A 21152    
                           A 21153    .TAG "NONAME0"
                           A 21154    
                           A 21155    .TYPE 40
                           A 21156    
                           A 21157    .ENDEF
                           A 21158    
005455 DDE5                A 21159    	PUSH	IX
005457 DD210000 00         A 21160    	LD	IX,0
00545C DD39                A 21161    	ADD	IX,SP
00545E C5                  A 21162    	PUSH	BC
00545F C5                  A 21163    	PUSH	BC
                           A 21164    ; 4601		FRESULT res;
                           A 21165    ; 4602		FATFS *fs;
                           A 21166    ; 4603	
                           A 21167    ; 4604	
                           A 21168    ; 4605		res = validate(&dp->obj, &fs);	/* 
                           A 21169    .LINE 4605
                           A 21170    
005460 ED65FA              A 21171    	PEA	IX+%FFFFFFFA
005463 DD3106              A 21172    	LD	IY,(IX+%6)
005466 ED6600              A 21173    	PEA	IY+%0
005469 CD 5F 3B 00         A 21174    	CALL	_validate
00546D C1                  A 21175    	POP	BC
00546E C1                  A 21176    	POP	BC
00546F DD2FFD              A 21177    	LD	(IX+%FFFFFFFD),HL
                           A 21178    ; 4606		if (res == FR_OK) {
                           A 21179    .LINE 4606
                           A 21180    
005472 01000000            A 21181    	LD	BC,0
005476 DD27FD              A 21182    	LD	HL,(IX+%FFFFFFFD)
005479 B7                  A 21183    	OR	A,A
00547A ED42                A 21184    	SBC	HL,BC
00547C 20 06               A 21185    	JR	NZ,L_1085
                           A 21186    ; 4607	#if FF_FS_LOCK != 0
                           A 21187    ; 4608			if (dp->obj.lockid) res = dec_l
                           A 21188    ; 4609			if (res == FR_OK) dp->obj.fs = 
                           A 21189    ; 4610	#else
                           A 21190    ; 4611			dp->obj.fs = 0;	/* Invalidate d
                           A 21191    .LINE 4611
                           A 21192    
00547E DD3106              A 21193    	LD	IY,(IX+%6)
005481 FD0F00              A 21194    	LD	(IY+%0),BC
                           A 21195    ; 4612	#endif
                           A 21196    ; 4613	#if FF_FS_REENTRANT
                           A 21197    ; 4614			unlock_fs(fs, FR_OK);		/* 
                           A 21198    ; 4615	#endif
                           A 21199    ; 4616		}
005484                     A 21200    L_1085:
                           A 21201    .LINE 4616
                           A 21202    
                           A 21203    ; 4617		return res;
                           A 21204    .LINE 4617
                           A 21205    
005484 DD27FD              A 21206    	LD	HL,(IX+%FFFFFFFD)
                           A 21207    ; 4618	}
                           A 21208    .LINE 4618
                           A 21209    
005487 DDF9                A 21210    	LD	SP,IX
005489 DDE1                A 21211    	POP	IX
00548B C9                  A 21212    	RET	
                           A 21213    
                           A 21214    
                           A 21215    ;**************************** _f_closedir *****
                           A 21216    ;Name                         Addr/Register   S
                           A 21217    ;fs                                    IX-6    
                           A 21218    ;res                                   IX-3    
                           A 21219    ;dp                                    IX+6    
                           A 21220    
                           A 21221    
                           A 21222    ; Stack Frame Size: 15 (bytes)
                           A 21223    ;       Spill Code: -3 (instruction)
                           A 21224    
                           A 21225    
                           A 21226    .ENDFUNC "f_closedir",4618,"_f_closedir"
                           A 21227    ; 4619	
                           A 21228    ; 4620	
                           A 21229    ; 4621	
                           A 21230    ; 4622	
                           A 21231    ; 4623	/*-------------------------------------
                           A 21232    ; 4624	/* Read Directory Entries in Sequence  
                           A 21233    ; 4625	/*-------------------------------------
                           A 21234    ; 4626	
                           A 21235    ; 4627	FRESULT f_readdir (
                           A 21236    ; 4628		DIR* dp,			/* Pointer to t
                           A 21237    ; 4629		FILINFO* fno		/* Pointer to f
                           A 21238    ; 4630	)
                           A 21239    ; 4631	{
00548C                     A 21240    _f_readdir:
                           A 21241    .DEFINE "_f_readdir"
                           A 21242    
                           A 21243    .VALUE _f_readdir
                           A 21244    
                           A 21245    .CLASS 2
                           A 21246    
                           A 21247    .TYPE 68
                           A 21248    
                           A 21249    .ENDEF
                           A 21250    
                           A 21251    .BEGFUNC "f_readdir",4631,"_f_readdir"
                           A 21252    
                           A 21253    .LINE 4631
                           A 21254    
                           A 21255    .DEFINE "dp"
                           A 21256    
                           A 21257    .CLASS 65
                           A 21258    
                           A 21259    .VALUE 6
                           A 21260    
                           A 21261    .TAG "NONAME3"
                           A 21262    
                           A 21263    .TYPE 40
                           A 21264    
                           A 21265    .ENDEF
                           A 21266    
                           A 21267    .DEFINE "fno"
                           A 21268    
                           A 21269    .CLASS 65
                           A 21270    
                           A 21271    .VALUE 9
                           A 21272    
                           A 21273    .TAG "NONAME4"
                           A 21274    
                           A 21275    .TYPE 40
                           A 21276    
                           A 21277    .ENDEF
                           A 21278    
                           A 21279    .DEFINE "res"
                           A 21280    
                           A 21281    .CLASS 65
                           A 21282    
                           A 21283    .VALUE -3
                           A 21284    
                           A 21285    .TYPE 4
                           A 21286    
                           A 21287    .ENDEF
                           A 21288    
                           A 21289    .DEFINE "fs"
                           A 21290    
                           A 21291    .CLASS 65
                           A 21292    
                           A 21293    .VALUE -6
                           A 21294    
                           A 21295    .TAG "NONAME0"
                           A 21296    
                           A 21297    .TYPE 40
                           A 21298    
                           A 21299    .ENDEF
                           A 21300    
                           A 21301    .DEFINE "lbuf"
                           A 21302    
                           A 21303    .CLASS 65
                           A 21304    
                           A 21305    .VALUE -518
                           A 21306    
                           A 21307    .DIM 256
                           A 21308    
                           A 21309    .TYPE 109
                           A 21310    
                           A 21311    .ENDEF
                           A 21312    
00548C DDE5                A 21313    	PUSH	IX
00548E DD210000 00         A 21314    	LD	IX,0
005493 DD39                A 21315    	ADD	IX,SP
005495 21FAFDFF            A 21316    	LD	HL,-518
005499 39                  A 21317    	ADD	HL,SP
00549A F9                  A 21318    	LD	SP,HL
                           A 21319    ; 4632		FRESULT res;
                           A 21320    ; 4633		FATFS *fs;
                           A 21321    ; 4634		DEF_NAMBUF
                           A 21322    ; 4635	
                           A 21323    ; 4636	
                           A 21324    ; 4637		res = validate(&dp->obj, &fs);	/* 
                           A 21325    .LINE 4637
                           A 21326    
00549B ED65FA              A 21327    	PEA	IX+%FFFFFFFA
00549E DD3106              A 21328    	LD	IY,(IX+%6)
0054A1 ED6600              A 21329    	PEA	IY+%0
0054A4 CD 5F 3B 00         A 21330    	CALL	_validate
0054A8 C1                  A 21331    	POP	BC
0054A9 C1                  A 21332    	POP	BC
0054AA DD2FFD              A 21333    	LD	(IX+%FFFFFFFD),HL
                           A 21334    ; 4638		if (res == FR_OK) {
                           A 21335    .LINE 4638
                           A 21336    
0054AD 01000000            A 21337    	LD	BC,0
0054B1 DD27FD              A 21338    	LD	HL,(IX+%FFFFFFFD)
0054B4 B7                  A 21339    	OR	A,A
0054B5 ED42                A 21340    	SBC	HL,BC
0054B7 C2 47 55 00         A 21341    	JR	NZ,L_1095
                           A 21342    ; 4639			if (!fno) {
                           A 21343    .LINE 4639
                           A 21344    
0054BB DD2709              A 21345    	LD	HL,(IX+%9)
0054BE B7                  A 21346    	OR	A,A
0054BF ED42                A 21347    	SBC	HL,BC
0054C1 20 12               A 21348    	JR	NZ,L_1093
                           A 21349    ; 4640				res = dir_sdi(dp, 0);		
                           A 21350    .LINE 4640
                           A 21351    
0054C3 C5                  A 21352    	PUSH	BC
0054C4 C5                  A 21353    	PUSH	BC
0054C5 DD0706              A 21354    	LD	BC,(IX+%6)
0054C8 C5                  A 21355    	PUSH	BC
0054C9 CD 50 12 00         A 21356    	CALL	_dir_sdi
0054CD C1                  A 21357    	POP	BC
0054CE C1                  A 21358    	POP	BC
0054CF C1                  A 21359    	POP	BC
0054D0 DD2FFD              A 21360    	LD	(IX+%FFFFFFFD),HL
                           A 21361    ; 4641			} else {
                           A 21362    .LINE 4641
                           A 21363    
0054D3 18 72               A 21364    	JR	L_1095
0054D5                     A 21365    L_1093:
                           A 21366    ; 4642				INIT_NAMBUF(fs);
                           A 21367    .LINE 4642
                           A 21368    
0054D5 DDE5E1              A 21369    	LD	HL,IX
0054D8 01FAFDFF            A 21370    	LD	BC,-518
0054DC 09                  A 21371    	ADD	HL,BC
0054DD DD31FA              A 21372    	LD	IY,(IX+%FFFFFFFA)
0054E0 FD2F0B              A 21373    	LD	(IY+%B),HL
                           A 21374    ; 4643				res = DIR_READ_FILE(dp);	
                           A 21375    .LINE 4643
                           A 21376    
0054E3 01000000            A 21377    	LD	BC,0
0054E7 C5                  A 21378    	PUSH	BC
0054E8 DD0706              A 21379    	LD	BC,(IX+%6)
0054EB C5                  A 21380    	PUSH	BC
0054EC CD 46 1E 00         A 21381    	CALL	_dir_read
0054F0 C1                  A 21382    	POP	BC
0054F1 C1                  A 21383    	POP	BC
0054F2 DD2FFD              A 21384    	LD	(IX+%FFFFFFFD),HL
                           A 21385    ; 4644				if (res == FR_NO_FILE) res 
                           A 21386    .LINE 4644
                           A 21387    
0054F5 01040000            A 21388    	LD	BC,4
0054F9 DD27FD              A 21389    	LD	HL,(IX+%FFFFFFFD)
0054FC B7                  A 21390    	OR	A,A
0054FD ED42                A 21391    	SBC	HL,BC
0054FF 20 07               A 21392    	JR	NZ,L_1090
005501 01000000            A 21393    	LD	BC,0
005505 DD0FFD              A 21394    	LD	(IX+%FFFFFFFD),BC
005508                     A 21395    L_1090:
                           A 21396    ; 4645				if (res == FR_OK) {			
                           A 21397    .LINE 4645
                           A 21398    
005508 01000000            A 21399    	LD	BC,0
00550C DD27FD              A 21400    	LD	HL,(IX+%FFFFFFFD)
00550F B7                  A 21401    	OR	A,A
005510 ED42                A 21402    	SBC	HL,BC
005512 20 33               A 21403    	JR	NZ,L_1091
                           A 21404    ; 4646					get_fileinfo(dp, fno);	
                           A 21405    .LINE 4646
                           A 21406    
005514 DD0709              A 21407    	LD	BC,(IX+%9)
005517 C5                  A 21408    	PUSH	BC
005518 DD0706              A 21409    	LD	BC,(IX+%6)
00551B C5                  A 21410    	PUSH	BC
00551C CD 87 25 00         A 21411    	CALL	_get_fileinfo
005520 C1                  A 21412    	POP	BC
005521 C1                  A 21413    	POP	BC
                           A 21414    ; 4647					res = dir_next(dp, 0);	
                           A 21415    .LINE 4647
                           A 21416    
005522 01000000            A 21417    	LD	BC,0
005526 C5                  A 21418    	PUSH	BC
005527 DD0706              A 21419    	LD	BC,(IX+%6)
00552A C5                  A 21420    	PUSH	BC
00552B CD 6A 14 00         A 21421    	CALL	_dir_next
00552F C1                  A 21422    	POP	BC
005530 C1                  A 21423    	POP	BC
005531 DD2FFD              A 21424    	LD	(IX+%FFFFFFFD),HL
                           A 21425    ; 4648					if (res == FR_NO_FILE) 
                           A 21426    .LINE 4648
                           A 21427    
005534 01040000            A 21428    	LD	BC,4
005538 DD27FD              A 21429    	LD	HL,(IX+%FFFFFFFD)
00553B B7                  A 21430    	OR	A,A
00553C ED42                A 21431    	SBC	HL,BC
00553E 20 07               A 21432    	JR	NZ,L_1091
005540 01000000            A 21433    	LD	BC,0
005544 DD0FFD              A 21434    	LD	(IX+%FFFFFFFD),BC
                           A 21435    ; 4649				}
005547                     A 21436    L_1091:
                           A 21437    .LINE 4649
                           A 21438    
                           A 21439    ; 4650				FREE_NAMBUF();
                           A 21440    ; 4651			}
                           A 21441    ; 4652		}
005547                     A 21442    L_1095:
                           A 21443    .LINE 4652
                           A 21444    
                           A 21445    ; 4653		LEAVE_FF(fs, res);
                           A 21446    .LINE 4653
                           A 21447    
005547 DD27FD              A 21448    	LD	HL,(IX+%FFFFFFFD)
                           A 21449    ; 4654	}
                           A 21450    .LINE 4654
                           A 21451    
00554A DDF9                A 21452    	LD	SP,IX
00554C DDE1                A 21453    	POP	IX
00554E C9                  A 21454    	RET	
                           A 21455    
                           A 21456    
                           A 21457    ;**************************** _f_readdir ******
                           A 21458    ;Name                         Addr/Register   S
                           A 21459    ;lbuf                                IX-518    
                           A 21460    ;fs                                    IX-6    
                           A 21461    ;res                                   IX-3    
                           A 21462    ;fno                                   IX+9    
                           A 21463    ;dp                                    IX+6    
                           A 21464    
                           A 21465    
                           A 21466    ; Stack Frame Size: 530 (bytes)
                           A 21467    ;       Spill Code: -3 (instruction)
                           A 21468    
                           A 21469    
                           A 21470    .ENDFUNC "f_readdir",4654,"_f_readdir"
                           A 21471    ; 4655	
                           A 21472    ; 4656	
                           A 21473    ; 4657	
                           A 21474    ; 4658	#if FF_USE_FIND
                           A 21475    ; 4659	/*-------------------------------------
                           A 21476    ; 4660	/* Find Next File                      
                           A 21477    ; 4661	/*-------------------------------------
                           A 21478    ; 4662	
                           A 21479    ; 4663	FRESULT f_findnext (
                           A 21480    ; 4664		DIR* dp,		/* Pointer to the o
                           A 21481    ; 4665		FILINFO* fno	/* Pointer to the f
                           A 21482    ; 4666	)
                           A 21483    ; 4667	{
                           A 21484    ; 4668		FRESULT res;
                           A 21485    ; 4669	
                           A 21486    ; 4670	
                           A 21487    ; 4671		for (;;) {
                           A 21488    ; 4672			res = f_readdir(dp, fno);		
                           A 21489    ; 4673			if (res != FR_OK || !fno || !fn
                           A 21490    ; 4674			if (pattern_match(dp->pat, fno-
                           A 21491    ; 4675	#if FF_USE_LFN && FF_USE_FIND == 2
                           A 21492    ; 4676			if (pattern_match(dp->pat, fno-
                           A 21493    ; 4677	#endif
                           A 21494    ; 4678		}
                           A 21495    ; 4679		return res;
                           A 21496    ; 4680	}
                           A 21497    ; 4681	
                           A 21498    ; 4682	
                           A 21499    ; 4683	
                           A 21500    ; 4684	/*-------------------------------------
                           A 21501    ; 4685	/* Find First File                     
                           A 21502    ; 4686	/*-------------------------------------
                           A 21503    ; 4687	
                           A 21504    ; 4688	FRESULT f_findfirst (
                           A 21505    ; 4689		DIR* dp,				/* Pointer 
                           A 21506    ; 4690		FILINFO* fno,			/* Pointer 
                           A 21507    ; 4691		const TCHAR* path,		/* Pointer 
                           A 21508    ; 4692		const TCHAR* pattern	/* Pointer 
                           A 21509    ; 4693	)
                           A 21510    ; 4694	{
                           A 21511    ; 4695		FRESULT res;
                           A 21512    ; 4696	
                           A 21513    ; 4697	
                           A 21514    ; 4698		dp->pat = pattern;		/* Save poi
                           A 21515    ; 4699		res = f_opendir(dp, path);		/* 
                           A 21516    ; 4700		if (res == FR_OK) {
                           A 21517    ; 4701			res = f_findnext(dp, fno);	/* 
                           A 21518    ; 4702		}
                           A 21519    ; 4703		return res;
                           A 21520    ; 4704	}
                           A 21521    ; 4705	
                           A 21522    ; 4706	#endif	/* FF_USE_FIND */
                           A 21523    ; 4707	
                           A 21524    ; 4708	
                           A 21525    ; 4709	
                           A 21526    ; 4710	#if FF_FS_MINIMIZE == 0
                           A 21527    ; 4711	/*-------------------------------------
                           A 21528    ; 4712	/* Get File Status                     
                           A 21529    ; 4713	/*-------------------------------------
                           A 21530    ; 4714	
                           A 21531    ; 4715	FRESULT f_stat (
                           A 21532    ; 4716		const TCHAR* path,	/* Pointer to t
                           A 21533    ; 4717		FILINFO* fno		/* Pointer to f
                           A 21534    ; 4718	)
                           A 21535    ; 4719	{
00554F                     A 21536    _f_stat:
                           A 21537    .DEFINE "_f_stat"
                           A 21538    
                           A 21539    .VALUE _f_stat
                           A 21540    
                           A 21541    .CLASS 2
                           A 21542    
                           A 21543    .TYPE 68
                           A 21544    
                           A 21545    .ENDEF
                           A 21546    
                           A 21547    .BEGFUNC "f_stat",4719,"_f_stat"
                           A 21548    
                           A 21549    .LINE 4719
                           A 21550    
                           A 21551    .DEFINE "path"
                           A 21552    
                           A 21553    .CLASS 65
                           A 21554    
                           A 21555    .VALUE 6
                           A 21556    
                           A 21557    .TYPE 194
                           A 21558    
                           A 21559    .ENDEF
                           A 21560    
                           A 21561    .DEFINE "fno"
                           A 21562    
                           A 21563    .CLASS 65
                           A 21564    
                           A 21565    .VALUE 9
                           A 21566    
                           A 21567    .TAG "NONAME4"
                           A 21568    
                           A 21569    .TYPE 40
                           A 21570    
                           A 21571    .ENDEF
                           A 21572    
                           A 21573    .DEFINE "res"
                           A 21574    
                           A 21575    .CLASS 65
                           A 21576    
                           A 21577    .VALUE -3
                           A 21578    
                           A 21579    .TYPE 4
                           A 21580    
                           A 21581    .ENDEF
                           A 21582    
                           A 21583    .DEFINE "dj"
                           A 21584    
                           A 21585    .CLASS 65
                           A 21586    
                           A 21587    .VALUE -52
                           A 21588    
                           A 21589    .TAG "NONAME3"
                           A 21590    
                           A 21591    .TYPE 8
                           A 21592    
                           A 21593    .ENDEF
                           A 21594    
                           A 21595    .DEFINE "lbuf"
                           A 21596    
                           A 21597    .CLASS 65
                           A 21598    
                           A 21599    .VALUE -564
                           A 21600    
                           A 21601    .DIM 256
                           A 21602    
                           A 21603    .TYPE 109
                           A 21604    
                           A 21605    .ENDEF
                           A 21606    
00554F DDE5                A 21607    	PUSH	IX
005551 DD210000 00         A 21608    	LD	IX,0
005556 DD39                A 21609    	ADD	IX,SP
005558 21CCFDFF            A 21610    	LD	HL,-564
00555C 39                  A 21611    	ADD	HL,SP
00555D F9                  A 21612    	LD	SP,HL
                           A 21613    ; 4720		FRESULT res;
                           A 21614    ; 4721		DIR dj;
                           A 21615    ; 4722		DEF_NAMBUF
                           A 21616    ; 4723	
                           A 21617    ; 4724	
                           A 21618    ; 4725		/* Get logical drive */
                           A 21619    ; 4726		res = mount_volume(&path, &dj.obj.f
                           A 21620    .LINE 4726
                           A 21621    
00555E ED02CC              A 21622    	LEA	BC,IX+%FFFFFFCC
005561 DD0FFA              A 21623    	LD	(IX+%FFFFFFFA),BC
005564 01000000            A 21624    	LD	BC,0
005568 C5                  A 21625    	PUSH	BC
005569 ED65CC              A 21626    	PEA	IX+%FFFFFFCC
00556C ED6506              A 21627    	PEA	IX+%6
00556F CD A9 34 00         A 21628    	CALL	_mount_volume
005573 C1                  A 21629    	POP	BC
005574 C1                  A 21630    	POP	BC
005575 C1                  A 21631    	POP	BC
005576 DD2FFD              A 21632    	LD	(IX+%FFFFFFFD),HL
                           A 21633    ; 4727		if (res == FR_OK) {
                           A 21634    .LINE 4727
                           A 21635    
005579 01000000            A 21636    	LD	BC,0
00557D DD27FD              A 21637    	LD	HL,(IX+%FFFFFFFD)
005580 B7                  A 21638    	OR	A,A
005581 ED42                A 21639    	SBC	HL,BC
005583 20 55               A 21640    	JR	NZ,L_1103
                           A 21641    ; 4728			INIT_NAMBUF(dj.obj.fs);
                           A 21642    .LINE 4728
                           A 21643    
005585 DD31FA              A 21644    	LD	IY,(IX+%FFFFFFFA)
005588 FD3700              A 21645    	LD	IY,(IY+%0)
00558B DDE5E1              A 21646    	LD	HL,IX
00558E 01CCFDFF            A 21647    	LD	BC,-564
005592 09                  A 21648    	ADD	HL,BC
005593 FD2F0B              A 21649    	LD	(IY+%B),HL
                           A 21650    ; 4729			res = follow_path(&dj, path);	
                           A 21651    .LINE 4729
                           A 21652    
005596 DD0706              A 21653    	LD	BC,(IX+%6)
005599 C5                  A 21654    	PUSH	BC
00559A ED65CC              A 21655    	PEA	IX+%FFFFFFCC
00559D CD DA 2E 00         A 21656    	CALL	_follow_path
0055A1 C1                  A 21657    	POP	BC
0055A2 C1                  A 21658    	POP	BC
0055A3 DD2FFD              A 21659    	LD	(IX+%FFFFFFFD),HL
                           A 21660    ; 4730			if (res == FR_OK) {				
                           A 21661    .LINE 4730
                           A 21662    
0055A6 01000000            A 21663    	LD	BC,0
0055AA DD27FD              A 21664    	LD	HL,(IX+%FFFFFFFD)
0055AD B7                  A 21665    	OR	A,A
0055AE ED42                A 21666    	SBC	HL,BC
0055B0 20 28               A 21667    	JR	NZ,L_1101
                           A 21668    ; 4731				if (dj.fn[NSFLAG] & NS_NONA
                           A 21669    .LINE 4731
                           A 21670    
0055B2 ED55EA              A 21671    	LEA	IY,IX+%FFFFFFEA
0055B5 FD7E0B              A 21672    	LD	A,(IY+%B)
0055B8 E680                A 21673    	AND	A,%80
0055BA 28 09               A 21674    	JR	Z,L_1099
                           A 21675    ; 4732					res = FR_INVALID_NAME;
                           A 21676    .LINE 4732
                           A 21677    
0055BC 01060000            A 21678    	LD	BC,6
0055C0 DD0FFD              A 21679    	LD	(IX+%FFFFFFFD),BC
                           A 21680    ; 4733				} else {					
                           A 21681    .LINE 4733
                           A 21682    
0055C3 18 15               A 21683    	JR	L_1101
0055C5                     A 21684    L_1099:
                           A 21685    ; 4734					if (fno) get_fileinfo(&
                           A 21686    .LINE 4734
                           A 21687    
0055C5 DD2709              A 21688    	LD	HL,(IX+%9)
0055C8 B7                  A 21689    	OR	A,A
0055C9 ED42                A 21690    	SBC	HL,BC
0055CB 28 0D               A 21691    	JR	Z,L_1101
0055CD DD0709              A 21692    	LD	BC,(IX+%9)
0055D0 C5                  A 21693    	PUSH	BC
0055D1 ED65CC              A 21694    	PEA	IX+%FFFFFFCC
0055D4 CD 87 25 00         A 21695    	CALL	_get_fileinfo
0055D8 C1                  A 21696    	POP	BC
0055D9 C1                  A 21697    	POP	BC
                           A 21698    ; 4735				}
                           A 21699    ; 4736			}
0055DA                     A 21700    L_1101:
                           A 21701    .LINE 4736
                           A 21702    
                           A 21703    ; 4737			FREE_NAMBUF();
                           A 21704    ; 4738		}
0055DA                     A 21705    L_1103:
                           A 21706    .LINE 4738
                           A 21707    
                           A 21708    ; 4739	
                           A 21709    ; 4740		LEAVE_FF(dj.obj.fs, res);
                           A 21710    .LINE 4740
                           A 21711    
0055DA DD27FD              A 21712    	LD	HL,(IX+%FFFFFFFD)
                           A 21713    ; 4741	}
                           A 21714    .LINE 4741
                           A 21715    
0055DD DDF9                A 21716    	LD	SP,IX
0055DF DDE1                A 21717    	POP	IX
0055E1 C9                  A 21718    	RET	
                           A 21719    
                           A 21720    
                           A 21721    ;**************************** _f_stat *********
                           A 21722    ;Name                         Addr/Register   S
                           A 21723    ;lbuf                                IX-564    
                           A 21724    ;dj                                   IX-52    
                           A 21725    ;G_81                                  IX-6    
                           A 21726    ;res                                   IX-3    
                           A 21727    ;fno                                   IX+9    
                           A 21728    ;path                                  IX+6    
                           A 21729    
                           A 21730    
                           A 21731    ; Stack Frame Size: 576 (bytes)
                           A 21732    ;       Spill Code: -3 (instruction)
                           A 21733    
                           A 21734    
                           A 21735    .ENDFUNC "f_stat",4741,"_f_stat"
                           A 21736    ; 4742	
                           A 21737    ; 4743	
                           A 21738    ; 4744	
                           A 21739    ; 4745	#if !FF_FS_READONLY
                           A 21740    ; 4746	/*-------------------------------------
                           A 21741    ; 4747	/* Get Number of Free Clusters         
                           A 21742    ; 4748	/*-------------------------------------
                           A 21743    ; 4749	
                           A 21744    ; 4750	FRESULT f_getfree (
                           A 21745    ; 4751		const TCHAR* path,	/* Logical driv
                           A 21746    ; 4752		DWORD* nclst,		/* Pointer to a
                           A 21747    ; 4753		FATFS** fatfs		/* Pointer to r
                           A 21748    ; 4754	)
                           A 21749    ; 4755	{
0055E2                     A 21750    _f_getfree:
                           A 21751    .DEFINE "_f_getfree"
                           A 21752    
                           A 21753    .VALUE _f_getfree
                           A 21754    
                           A 21755    .CLASS 2
                           A 21756    
                           A 21757    .TYPE 68
                           A 21758    
                           A 21759    .ENDEF
                           A 21760    
                           A 21761    .BEGFUNC "f_getfree",4755,"_f_getfree"
                           A 21762    
                           A 21763    .LINE 4755
                           A 21764    
                           A 21765    .DEFINE "path"
                           A 21766    
                           A 21767    .CLASS 65
                           A 21768    
                           A 21769    .VALUE 6
                           A 21770    
                           A 21771    .TYPE 194
                           A 21772    
                           A 21773    .ENDEF
                           A 21774    
                           A 21775    .DEFINE "nclst"
                           A 21776    
                           A 21777    .CLASS 65
                           A 21778    
                           A 21779    .VALUE 9
                           A 21780    
                           A 21781    .TYPE 47
                           A 21782    
                           A 21783    .ENDEF
                           A 21784    
                           A 21785    .DEFINE "fatfs"
                           A 21786    
                           A 21787    .CLASS 65
                           A 21788    
                           A 21789    .VALUE 12
                           A 21790    
                           A 21791    .TAG "NONAME0"
                           A 21792    
                           A 21793    .TYPE 296
                           A 21794    
                           A 21795    .ENDEF
                           A 21796    
                           A 21797    .DEFINE "fs"
                           A 21798    
                           A 21799    .CLASS 65
                           A 21800    
                           A 21801    .VALUE -3
                           A 21802    
                           A 21803    .TAG "NONAME0"
                           A 21804    
                           A 21805    .TYPE 40
                           A 21806    
                           A 21807    .ENDEF
                           A 21808    
                           A 21809    .DEFINE "nfree"
                           A 21810    
                           A 21811    .CLASS 65
                           A 21812    
                           A 21813    .VALUE -7
                           A 21814    
                           A 21815    .TYPE 15
                           A 21816    
                           A 21817    .ENDEF
                           A 21818    
                           A 21819    .DEFINE "i"
                           A 21820    
                           A 21821    .CLASS 65
                           A 21822    
                           A 21823    .VALUE -10
                           A 21824    
                           A 21825    .TYPE 14
                           A 21826    
                           A 21827    .ENDEF
                           A 21828    
                           A 21829    .DEFINE "clst"
                           A 21830    
                           A 21831    .CLASS 65
                           A 21832    
                           A 21833    .VALUE -14
                           A 21834    
                           A 21835    .TYPE 15
                           A 21836    
                           A 21837    .ENDEF
                           A 21838    
                           A 21839    .DEFINE "res"
                           A 21840    
                           A 21841    .CLASS 65
                           A 21842    
                           A 21843    .VALUE -17
                           A 21844    
                           A 21845    .TYPE 4
                           A 21846    
                           A 21847    .ENDEF
                           A 21848    
                           A 21849    .DEFINE "sect"
                           A 21850    
                           A 21851    .CLASS 65
                           A 21852    
                           A 21853    .VALUE -21
                           A 21854    
                           A 21855    .TYPE 15
                           A 21856    
                           A 21857    .ENDEF
                           A 21858    
                           A 21859    .DEFINE "stat"
                           A 21860    
                           A 21861    .CLASS 65
                           A 21862    
                           A 21863    .VALUE -25
                           A 21864    
                           A 21865    .TYPE 15
                           A 21866    
                           A 21867    .ENDEF
                           A 21868    
                           A 21869    .DEFINE "obj"
                           A 21870    
                           A 21871    .CLASS 65
                           A 21872    
                           A 21873    .VALUE -40
                           A 21874    
                           A 21875    .TAG "NONAME1"
                           A 21876    
                           A 21877    .TYPE 8
                           A 21878    
                           A 21879    .ENDEF
                           A 21880    
0055E2 DDE5                A 21881    	PUSH	IX
0055E4 DD210000 00         A 21882    	LD	IX,0
0055E9 DD39                A 21883    	ADD	IX,SP
0055EB ED22D2              A 21884    	LEA	HL,IX+%FFFFFFD2
0055EE F9                  A 21885    	LD	SP,HL
                           A 21886    ; 4756		FRESULT res;
                           A 21887    ; 4757		FATFS *fs;
                           A 21888    ; 4758		DWORD nfree, clst, stat;
                           A 21889    ; 4759		LBA_t sect;
                           A 21890    ; 4760		UINT i;
                           A 21891    ; 4761		FFOBJID obj;
                           A 21892    ; 4762	
                           A 21893    ; 4763	
                           A 21894    ; 4764		/* Get logical drive */
                           A 21895    ; 4765		res = mount_volume(&path, &fs, 0);
                           A 21896    .LINE 4765
                           A 21897    
0055EF 01000000            A 21898    	LD	BC,0
0055F3 C5                  A 21899    	PUSH	BC
0055F4 ED65FD              A 21900    	PEA	IX+%FFFFFFFD
0055F7 ED6506              A 21901    	PEA	IX+%6
0055FA CD A9 34 00         A 21902    	CALL	_mount_volume
0055FE C1                  A 21903    	POP	BC
0055FF C1                  A 21904    	POP	BC
005600 C1                  A 21905    	POP	BC
005601 DD2FEF              A 21906    	LD	(IX+%FFFFFFEF),HL
                           A 21907    ; 4766		if (res == FR_OK) {
                           A 21908    .LINE 4766
                           A 21909    
005604 01000000            A 21910    	LD	BC,0
005608 DD27EF              A 21911    	LD	HL,(IX+%FFFFFFEF)
00560B B7                  A 21912    	OR	A,A
00560C ED42                A 21913    	SBC	HL,BC
00560E C2 6A 58 00         A 21914    	JR	NZ,L_1135
                           A 21915    ; 4767			*fatfs = fs;				/* 
                           A 21916    .LINE 4767
                           A 21917    
005612 DD270C              A 21918    	LD	HL,(IX+%C)
005615 DD07FD              A 21919    	LD	BC,(IX+%FFFFFFFD)
005618 ED0F                A 21920    	LD	(HL),BC
                           A 21921    ; 4768			/* If free_clst is valid, retur
                           A 21922    ; 4769			if (fs->free_clst <= fs->n_fate
                           A 21923    .LINE 4769
                           A 21924    
00561A DD31FD              A 21925    	LD	IY,(IX+%FFFFFFFD)
00561D FD271A              A 21926    	LD	HL,(IY+%1A)
005620 FD5E1D              A 21927    	LD	E,(IY+%1D)
005623 01020000            A 21928    	LD	BC,2
005627 AF                  A 21929    	XOR	A,A
005628 CD 00 00 00         A 21930    	CALL	__lsub
00562C FD0712              A 21931    	LD	BC,(IY+%12)
00562F FD7E15              A 21932    	LD	A,(IY+%15)
005632 CD 00 00 00         A 21933    	CALL	__lcmpu
005636 38 16               A 21934    	JR	C,L_1133
                           A 21935    ; 4770				*nclst = fs->free_clst;
                           A 21936    .LINE 4770
                           A 21937    
005638 DD2709              A 21938    	LD	HL,(IX+%9)
00563B DD31FD              A 21939    	LD	IY,(IX+%FFFFFFFD)
00563E FD0712              A 21940    	LD	BC,(IY+%12)
005641 FD7E15              A 21941    	LD	A,(IY+%15)
005644 ED0F                A 21942    	LD	(HL),BC
005646 23                  A 21943    	INC	HL
005647 23                  A 21944    	INC	HL
005648 23                  A 21945    	INC	HL
005649 77                  A 21946    	LD	(HL),A
                           A 21947    ; 4771			} else {
                           A 21948    .LINE 4771
                           A 21949    
00564A C3 6A 58 00         A 21950    	JR	L_1135
00564E                     A 21951    L_1133:
                           A 21952    ; 4772				/* Scan FAT to obtain numbe
                           A 21953    ; 4773				nfree = 0;
                           A 21954    .LINE 4773
                           A 21955    
00564E 01000000            A 21956    	LD	BC,0
005652 AF                  A 21957    	XOR	A,A
005653 DD0FF9              A 21958    	LD	(IX+%FFFFFFF9),BC
005656 DD77FC              A 21959    	LD	(IX+%FFFFFFFC),A
                           A 21960    ; 4774				if (fs->fs_type == FS_FAT12
                           A 21961    .LINE 4774
                           A 21962    
005659 DD31FD              A 21963    	LD	IY,(IX+%FFFFFFFD)
00565C FD7E00              A 21964    	LD	A,(IY+%0)
00565F FE01                A 21965    	CP	A,%1
005661 C2 19 57 00         A 21966    	JR	NZ,L_1129
                           A 21967    ; 4775					clst = 2; obj.fs = fs;
                           A 21968    .LINE 4775
                           A 21969    
005665 01020000            A 21970    	LD	BC,2
005669 AF                  A 21971    	XOR	A,A
00566A DD0FF2              A 21972    	LD	(IX+%FFFFFFF2),BC
00566D DD77F5              A 21973    	LD	(IX+%FFFFFFF5),A
005670 DD07FD              A 21974    	LD	BC,(IX+%FFFFFFFD)
005673 DD0FD8              A 21975    	LD	(IX+%FFFFFFD8),BC
                           A 21976    ; 4776					do {
005676                     A 21977    L_1111:
                           A 21978    .LINE 4776
                           A 21979    
                           A 21980    ; 4777						stat = get_fat(&obj
                           A 21981    .LINE 4777
                           A 21982    
005676 DD4EF5              A 21983    	LD	C,(IX+%FFFFFFF5)
005679 0600                A 21984    	LD	B,%0
00567B C5                  A 21985    	PUSH	BC
00567C DD07F2              A 21986    	LD	BC,(IX+%FFFFFFF2)
00567F C5                  A 21987    	PUSH	BC
005680 ED65D8              A 21988    	PEA	IX+%FFFFFFD8
005683 CD 64 06 00         A 21989    	CALL	_get_fat
005687 C1                  A 21990    	POP	BC
005688 C1                  A 21991    	POP	BC
005689 C1                  A 21992    	POP	BC
00568A DD2FE7              A 21993    	LD	(IX+%FFFFFFE7),HL
00568D DD73EA              A 21994    	LD	(IX+%FFFFFFEA),E
                           A 21995    ; 4778						if (stat == 0xFFFFF
                           A 21996    .LINE 4778
                           A 21997    
005690 DD27E7              A 21998    	LD	HL,(IX+%FFFFFFE7)
005693 DD5EEA              A 21999    	LD	E,(IX+%FFFFFFEA)
005696 01FFFFFF            A 22000    	LD	BC,16777215
00569A 3EFF                A 22001    	LD	A,%FF
00569C CD 00 00 00         A 22002    	CALL	__lcmpu
0056A0 20 0B               A 22003    	JR	NZ,L_1107
0056A2 01010000            A 22004    	LD	BC,1
0056A6 DD0FEF              A 22005    	LD	(IX+%FFFFFFEF),BC
0056A9 C3 38 58 00         A 22006    	JR	L_1131
0056AD                     A 22007    L_1107:
                           A 22008    ; 4779						if (stat == 1) { re
                           A 22009    .LINE 4779
                           A 22010    
0056AD DD27E7              A 22011    	LD	HL,(IX+%FFFFFFE7)
0056B0 DD5EEA              A 22012    	LD	E,(IX+%FFFFFFEA)
0056B3 01010000            A 22013    	LD	BC,1
0056B7 AF                  A 22014    	XOR	A,A
0056B8 CD 00 00 00         A 22015    	CALL	__lcmpu
0056BC 20 0B               A 22016    	JR	NZ,L_1110
0056BE 01020000            A 22017    	LD	BC,2
0056C2 DD0FEF              A 22018    	LD	(IX+%FFFFFFEF),BC
0056C5 C3 38 58 00         A 22019    	JR	L_1131
0056C9                     A 22020    L_1110:
                           A 22021    ; 4780						if (stat == 0) nfre
                           A 22022    .LINE 4780
                           A 22023    
0056C9 DD27E7              A 22024    	LD	HL,(IX+%FFFFFFE7)
0056CC DD5EEA              A 22025    	LD	E,(IX+%FFFFFFEA)
0056CF 01000000            A 22026    	LD	BC,0
0056D3 AF                  A 22027    	XOR	A,A
0056D4 CD 00 00 00         A 22028    	CALL	__lcmpu
0056D8 20 12               A 22029    	JR	NZ,L_1112
0056DA DD27F9              A 22030    	LD	HL,(IX+%FFFFFFF9)
0056DD DD5EFC              A 22031    	LD	E,(IX+%FFFFFFFC)
0056E0 3E01                A 22032    	LD	A,%1
0056E2 CD 00 00 00         A 22033    	CALL	__ladd_b
0056E6 DD2FF9              A 22034    	LD	(IX+%FFFFFFF9),HL
0056E9 DD73FC              A 22035    	LD	(IX+%FFFFFFFC),E
                           A 22036    ; 4781					} while (++clst < fs->n
0056EC                     A 22037    L_1112:
                           A 22038    .LINE 4781
                           A 22039    
0056EC DD27F2              A 22040    	LD	HL,(IX+%FFFFFFF2)
0056EF DD5EF5              A 22041    	LD	E,(IX+%FFFFFFF5)
0056F2 3E01                A 22042    	LD	A,%1
0056F4 CD 00 00 00         A 22043    	CALL	__ladd_b
0056F8 DD2FF2              A 22044    	LD	(IX+%FFFFFFF2),HL
0056FB DD73F5              A 22045    	LD	(IX+%FFFFFFF5),E
0056FE DD27F2              A 22046    	LD	HL,(IX+%FFFFFFF2)
005701 DD5EF5              A 22047    	LD	E,(IX+%FFFFFFF5)
005704 DD31FD              A 22048    	LD	IY,(IX+%FFFFFFFD)
005707 FD071A              A 22049    	LD	BC,(IY+%1A)
00570A FD7E1D              A 22050    	LD	A,(IY+%1D)
00570D CD 00 00 00         A 22051    	CALL	__lcmpu
005711 DA 76 56 00         A 22052    	JR	C,L_1111
005715 C3 38 58 00         A 22053    	JR	L_1131
                           A 22054    ; 4782				} else {
005719                     A 22055    L_1129:
                           A 22056    .LINE 4782
                           A 22057    
                           A 22058    ; 4783	#if FF_FS_EXFAT
                           A 22059    ; 4784					if (fs->fs_type == FS_E
                           A 22060    ; 4785						BYTE bm;
                           A 22061    ; 4786						UINT b;
                           A 22062    ; 4787	
                           A 22063    ; 4788						clst = fs->n_fatent
                           A 22064    ; 4789						sect = fs->bitbase;
                           A 22065    ; 4790						i = 0;				
                           A 22066    ; 4791						do {	/* Counts n
                           A 22067    ; 4792							if (i == 0) {
                           A 22068    ; 4793								res = move_
                           A 22069    ; 4794								if (res != 
                           A 22070    ; 4795							}
                           A 22071    ; 4796							for (b = 8, bm 
                           A 22072    ; 4797								if (!(bm & 
                           A 22073    ; 4798								bm >>= 1;
                           A 22074    ; 4799							}
                           A 22075    ; 4800							i = (i + 1) % S
                           A 22076    ; 4801						} while (clst);
                           A 22077    ; 4802					} else
                           A 22078    ; 4803	#endif
                           A 22079    ; 4804					{	/* FAT16/32: Scan W
                           A 22080    ; 4805						clst = fs->n_fatent
                           A 22081    .LINE 4805
                           A 22082    
005719 DD31FD              A 22083    	LD	IY,(IX+%FFFFFFFD)
00571C FD071A              A 22084    	LD	BC,(IY+%1A)
00571F FD7E1D              A 22085    	LD	A,(IY+%1D)
005722 DD0FF2              A 22086    	LD	(IX+%FFFFFFF2),BC
005725 DD77F5              A 22087    	LD	(IX+%FFFFFFF5),A
                           A 22088    ; 4806						sect = fs->fatbase;
                           A 22089    .LINE 4806
                           A 22090    
005728 FD0726              A 22091    	LD	BC,(IY+%26)
00572B FD7E29              A 22092    	LD	A,(IY+%29)
00572E DD0FEB              A 22093    	LD	(IX+%FFFFFFEB),BC
005731 DD77EE              A 22094    	LD	(IX+%FFFFFFEE),A
                           A 22095    ; 4807						i = 0;				
                           A 22096    .LINE 4807
                           A 22097    
005734 01000000            A 22098    	LD	BC,0
005738 DD0FF6              A 22099    	LD	(IX+%FFFFFFF6),BC
                           A 22100    ; 4808						do {	/* Counts n
00573B                     A 22101    L_1126:
                           A 22102    .LINE 4808
                           A 22103    
                           A 22104    ; 4809							if (i == 0) {
                           A 22105    .LINE 4809
                           A 22106    
00573B DD27F6              A 22107    	LD	HL,(IX+%FFFFFFF6)
00573E B7                  A 22108    	OR	A,A
00573F ED42                A 22109    	SBC	HL,BC
005741 20 3E               A 22110    	JR	NZ,L_1124
                           A 22111    ; 4810								res = move_
                           A 22112    .LINE 4810
                           A 22113    
005743 DD27EB              A 22114    	LD	HL,(IX+%FFFFFFEB)
005746 DD2FD2              A 22115    	LD	(IX+%FFFFFFD2),HL	; spill
005749 DD4EEE              A 22116    	LD	C,(IX+%FFFFFFEE)
00574C DD27EB              A 22117    	LD	HL,(IX+%FFFFFFEB)
00574F DD5EEE              A 22118    	LD	E,(IX+%FFFFFFEE)
005752 3E01                A 22119    	LD	A,%1
005754 CD 00 00 00         A 22120    	CALL	__ladd_b
005758 DD2FEB              A 22121    	LD	(IX+%FFFFFFEB),HL
00575B DD73EE              A 22122    	LD	(IX+%FFFFFFEE),E
00575E 0600                A 22123    	LD	B,%0
005760 C5                  A 22124    	PUSH	BC
005761 DD27D2              A 22125    	LD	HL,(IX+%FFFFFFD2)	; unspill
005764 E5                  A 22126    	PUSH	HL
005765 DD07FD              A 22127    	LD	BC,(IX+%FFFFFFFD)
005768 C5                  A 22128    	PUSH	BC
005769 CD 1E 04 00         A 22129    	CALL	_move_window
00576D C1                  A 22130    	POP	BC
00576E C1                  A 22131    	POP	BC
00576F C1                  A 22132    	POP	BC
005770 DD2FEF              A 22133    	LD	(IX+%FFFFFFEF),HL
                           A 22134    ; 4811								if (res != 
                           A 22135    .LINE 4811
                           A 22136    
005773 01000000            A 22137    	LD	BC,0
005777 DD27EF              A 22138    	LD	HL,(IX+%FFFFFFEF)
00577A B7                  A 22139    	OR	A,A
00577B ED42                A 22140    	SBC	HL,BC
00577D C2 38 58 00         A 22141    	JR	NZ,L_1131
                           A 22142    ; 4812							}
005781                     A 22143    L_1124:
                           A 22144    .LINE 4812
                           A 22145    
                           A 22146    ; 4813							if (fs->fs_type
                           A 22147    .LINE 4813
                           A 22148    
005781 DD31FD              A 22149    	LD	IY,(IX+%FFFFFFFD)
005784 FD7E00              A 22150    	LD	A,(IY+%0)
005787 FE02                A 22151    	CP	A,%2
005789 20 37               A 22152    	JR	NZ,L_1123
                           A 22153    ; 4814								if (ld_word
                           A 22154    .LINE 4814
                           A 22155    
00578B DD07F6              A 22156    	LD	BC,(IX+%FFFFFFF6)
00578E DD31FD              A 22157    	LD	IY,(IX+%FFFFFFFD)
005791 ED2336              A 22158    	LEA	HL,IY+%36
005794 09                  A 22159    	ADD	HL,BC
005795 E5                  A 22160    	PUSH	HL
005796 CD 00 00 00         A 22161    	CALL	_ld_word
00579A C1                  A 22162    	POP	BC
00579B 49010000            A 22163    	LD.LIS	BC,0
00579F B7                  A 22164    	OR	A,A
0057A0 40ED42              A 22165    	SBC.SIS	HL,BC
0057A3 20 12               A 22166    	JR	NZ,L_1118
0057A5 DD27F9              A 22167    	LD	HL,(IX+%FFFFFFF9)
0057A8 DD5EFC              A 22168    	LD	E,(IX+%FFFFFFFC)
0057AB 3E01                A 22169    	LD	A,%1
0057AD CD 00 00 00         A 22170    	CALL	__ladd_b
0057B1 DD2FF9              A 22171    	LD	(IX+%FFFFFFF9),HL
0057B4 DD73FC              A 22172    	LD	(IX+%FFFFFFFC),E
0057B7                     A 22173    L_1118:
                           A 22174    ; 4815								i += 2;
                           A 22175    .LINE 4815
                           A 22176    
0057B7 DD31F6              A 22177    	LD	IY,(IX+%FFFFFFF6)
0057BA ED3302              A 22178    	LEA	IY,IY+%2
0057BD DD3EF6              A 22179    	LD	(IX+%FFFFFFF6),IY
                           A 22180    ; 4816							} else {
                           A 22181    .LINE 4816
                           A 22182    
0057C0 18 40               A 22183    	JR	L_1125
0057C2                     A 22184    L_1123:
                           A 22185    ; 4817								if ((ld_dwo
                           A 22186    .LINE 4817
                           A 22187    
0057C2 DD07F6              A 22188    	LD	BC,(IX+%FFFFFFF6)
0057C5 DD31FD              A 22189    	LD	IY,(IX+%FFFFFFFD)
0057C8 ED2336              A 22190    	LEA	HL,IY+%36
0057CB 09                  A 22191    	ADD	HL,BC
0057CC E5                  A 22192    	PUSH	HL
0057CD CD 3C 00 00         A 22193    	CALL	_ld_dword
0057D1 C1                  A 22194    	POP	BC
0057D2 01FFFFFF            A 22195    	LD	BC,16777215
0057D6 3E0F                A 22196    	LD	A,%F
0057D8 CD 00 00 00         A 22197    	CALL	__land
0057DC 01000000            A 22198    	LD	BC,0
0057E0 AF                  A 22199    	XOR	A,A
0057E1 CD 00 00 00         A 22200    	CALL	__lcmpu
0057E5 20 12               A 22201    	JR	NZ,L_1121
0057E7 DD27F9              A 22202    	LD	HL,(IX+%FFFFFFF9)
0057EA DD5EFC              A 22203    	LD	E,(IX+%FFFFFFFC)
0057ED 3E01                A 22204    	LD	A,%1
0057EF CD 00 00 00         A 22205    	CALL	__ladd_b
0057F3 DD2FF9              A 22206    	LD	(IX+%FFFFFFF9),HL
0057F6 DD73FC              A 22207    	LD	(IX+%FFFFFFFC),E
0057F9                     A 22208    L_1121:
                           A 22209    ; 4818								i += 4;
                           A 22210    .LINE 4818
                           A 22211    
0057F9 DD31F6              A 22212    	LD	IY,(IX+%FFFFFFF6)
0057FC ED3304              A 22213    	LEA	IY,IY+%4
0057FF DD3EF6              A 22214    	LD	(IX+%FFFFFFF6),IY
                           A 22215    ; 4819							}
005802                     A 22216    L_1125:
                           A 22217    .LINE 4819
                           A 22218    
                           A 22219    ; 4820							i %= SS(fs);
                           A 22220    .LINE 4820
                           A 22221    
005802 01FF0100            A 22222    	LD	BC,511
005806 DD27F6              A 22223    	LD	HL,(IX+%FFFFFFF6)
005809 CD 00 00 00         A 22224    	CALL	__iand
00580D DD2FF6              A 22225    	LD	(IX+%FFFFFFF6),HL
                           A 22226    ; 4821						} while (--clst);
                           A 22227    .LINE 4821
                           A 22228    
005810 DD27F2              A 22229    	LD	HL,(IX+%FFFFFFF2)
005813 DD5EF5              A 22230    	LD	E,(IX+%FFFFFFF5)
005816 01010000            A 22231    	LD	BC,1
00581A AF                  A 22232    	XOR	A,A
00581B CD 00 00 00         A 22233    	CALL	__lsub
00581F DD2FF2              A 22234    	LD	(IX+%FFFFFFF2),HL
005822 DD73F5              A 22235    	LD	(IX+%FFFFFFF5),E
005825 DD27F2              A 22236    	LD	HL,(IX+%FFFFFFF2)
005828 DD5EF5              A 22237    	LD	E,(IX+%FFFFFFF5)
00582B 01000000            A 22238    	LD	BC,0
00582F AF                  A 22239    	XOR	A,A
005830 CD 00 00 00         A 22240    	CALL	__lcmpu
005834 C2 3B 57 00         A 22241    	JR	NZ,L_1126
                           A 22242    ; 4822					}
                           A 22243    ; 4823				}
005838                     A 22244    L_1131:
                           A 22245    .LINE 4823
                           A 22246    
                           A 22247    ; 4824				if (res == FR_OK) {		/* 
                           A 22248    .LINE 4824
                           A 22249    
005838 01000000            A 22250    	LD	BC,0
00583C DD27EF              A 22251    	LD	HL,(IX+%FFFFFFEF)
00583F B7                  A 22252    	OR	A,A
005840 ED42                A 22253    	SBC	HL,BC
005842 20 26               A 22254    	JR	NZ,L_1135
                           A 22255    ; 4825					*nclst = nfree;			
                           A 22256    .LINE 4825
                           A 22257    
005844 DD2709              A 22258    	LD	HL,(IX+%9)
005847 DD07F9              A 22259    	LD	BC,(IX+%FFFFFFF9)
00584A DD7EFC              A 22260    	LD	A,(IX+%FFFFFFFC)
00584D ED0F                A 22261    	LD	(HL),BC
00584F 23                  A 22262    	INC	HL
005850 23                  A 22263    	INC	HL
005851 23                  A 22264    	INC	HL
005852 77                  A 22265    	LD	(HL),A
                           A 22266    ; 4826					fs->free_clst = nfree;	
                           A 22267    .LINE 4826
                           A 22268    
005853 DD07F9              A 22269    	LD	BC,(IX+%FFFFFFF9)
005856 DD7EFC              A 22270    	LD	A,(IX+%FFFFFFFC)
005859 DD31FD              A 22271    	LD	IY,(IX+%FFFFFFFD)
00585C FD0F12              A 22272    	LD	(IY+%12),BC
00585F FD7715              A 22273    	LD	(IY+%15),A
                           A 22274    ; 4827					fs->fsi_flag |= 1;		
                           A 22275    .LINE 4827
                           A 22276    
005862 FD7E04              A 22277    	LD	A,(IY+%4)
005865 CBC7                A 22278    	SET	%0,A
005867 FD7704              A 22279    	LD	(IY+%4),A
                           A 22280    ; 4828				}
                           A 22281    ; 4829			}
                           A 22282    ; 4830		}
00586A                     A 22283    L_1135:
                           A 22284    .LINE 4830
                           A 22285    
                           A 22286    ; 4831	
                           A 22287    ; 4832		LEAVE_FF(fs, res);
                           A 22288    .LINE 4832
                           A 22289    
00586A DD27EF              A 22290    	LD	HL,(IX+%FFFFFFEF)
                           A 22291    ; 4833	}
                           A 22292    .LINE 4833
                           A 22293    
00586D DDF9                A 22294    	LD	SP,IX
00586F DDE1                A 22295    	POP	IX
005871 C9                  A 22296    	RET	
                           A 22297    
                           A 22298    
                           A 22299    ;**************************** _f_getfree ******
                           A 22300    ;Name                         Addr/Register   S
                           A 22301    ;obj                                  IX-40    
                           A 22302    ;stat                                 IX-25    
                           A 22303    ;sect                                 IX-21    
                           A 22304    ;res                                  IX-17    
                           A 22305    ;clst                                 IX-14    
                           A 22306    ;i                                    IX-10    
                           A 22307    ;nfree                                 IX-7    
                           A 22308    ;fs                                    IX-3    
                           A 22309    ;fatfs                                IX+12    
                           A 22310    ;nclst                                 IX+9    
                           A 22311    ;path                                  IX+6    
                           A 22312    
                           A 22313    
                           A 22314    ; Stack Frame Size: 61 (bytes)
                           A 22315    ;       Spill Code: -3 (instruction)
                           A 22316    
                           A 22317    
                           A 22318    .ENDFUNC "f_getfree",4833,"_f_getfree"
                           A 22319    ; 4834	
                           A 22320    ; 4835	
                           A 22321    ; 4836	
                           A 22322    ; 4837	
                           A 22323    ; 4838	/*-------------------------------------
                           A 22324    ; 4839	/* Truncate File                       
                           A 22325    ; 4840	/*-------------------------------------
                           A 22326    ; 4841	
                           A 22327    ; 4842	FRESULT f_truncate (
                           A 22328    ; 4843		FIL* fp		/* Pointer to the file 
                           A 22329    ; 4844	)
                           A 22330    ; 4845	{
005872                     A 22331    _f_truncate:
                           A 22332    .DEFINE "_f_truncate"
                           A 22333    
                           A 22334    .VALUE _f_truncate
                           A 22335    
                           A 22336    .CLASS 2
                           A 22337    
                           A 22338    .TYPE 68
                           A 22339    
                           A 22340    .ENDEF
                           A 22341    
                           A 22342    .BEGFUNC "f_truncate",4845,"_f_truncate"
                           A 22343    
                           A 22344    .LINE 4845
                           A 22345    
                           A 22346    .DEFINE "fp"
                           A 22347    
                           A 22348    .CLASS 65
                           A 22349    
                           A 22350    .VALUE 6
                           A 22351    
                           A 22352    .TAG "NONAME2"
                           A 22353    
                           A 22354    .TYPE 40
                           A 22355    
                           A 22356    .ENDEF
                           A 22357    
                           A 22358    .DEFINE "res"
                           A 22359    
                           A 22360    .CLASS 65
                           A 22361    
                           A 22362    .VALUE -3
                           A 22363    
                           A 22364    .TYPE 4
                           A 22365    
                           A 22366    .ENDEF
                           A 22367    
                           A 22368    .DEFINE "ncl"
                           A 22369    
                           A 22370    .CLASS 65
                           A 22371    
                           A 22372    .VALUE -7
                           A 22373    
                           A 22374    .TYPE 15
                           A 22375    
                           A 22376    .ENDEF
                           A 22377    
                           A 22378    .DEFINE "fs"
                           A 22379    
                           A 22380    .CLASS 65
                           A 22381    
                           A 22382    .VALUE -14
                           A 22383    
                           A 22384    .TAG "NONAME0"
                           A 22385    
                           A 22386    .TYPE 40
                           A 22387    
                           A 22388    .ENDEF
                           A 22389    
005872 DDE5                A 22390    	PUSH	IX
005874 DD210000 00         A 22391    	LD	IX,0
005879 DD39                A 22392    	ADD	IX,SP
00587B ED22EF              A 22393    	LEA	HL,IX+%FFFFFFEF
00587E F9                  A 22394    	LD	SP,HL
                           A 22395    ; 4846		FRESULT res;
                           A 22396    ; 4847		FATFS *fs;
                           A 22397    ; 4848		DWORD ncl;
                           A 22398    ; 4849	
                           A 22399    ; 4850	
                           A 22400    ; 4851		res = validate(&fp->obj, &fs);	/* 
                           A 22401    .LINE 4851
                           A 22402    
00587F ED65F2              A 22403    	PEA	IX+%FFFFFFF2
005882 DD3106              A 22404    	LD	IY,(IX+%6)
005885 ED6600              A 22405    	PEA	IY+%0
005888 CD 5F 3B 00         A 22406    	CALL	_validate
00588C C1                  A 22407    	POP	BC
00588D C1                  A 22408    	POP	BC
00588E DD2FFD              A 22409    	LD	(IX+%FFFFFFFD),HL
                           A 22410    ; 4852		if (res != FR_OK || (res = (FRESULT
                           A 22411    .LINE 4852
                           A 22412    
005891 01000000            A 22413    	LD	BC,0
005895 DD27FD              A 22414    	LD	HL,(IX+%FFFFFFFD)
005898 B7                  A 22415    	OR	A,A
005899 ED42                A 22416    	SBC	HL,BC
00589B 20 15               A 22417    	JR	NZ,L_1138
00589D DD3106              A 22418    	LD	IY,(IX+%6)
0058A0 FD7E10              A 22419    	LD	A,(IY+%10)
0058A3 B7ED62              A 22420    	UEXT	HL
0058A6 6F                  A 22421    	LD	L,A
0058A7 DD2FFD              A 22422    	LD	(IX+%FFFFFFFD),HL
0058AA DD27FD              A 22423    	LD	HL,(IX+%FFFFFFFD)
0058AD B7                  A 22424    	OR	A,A
0058AE ED42                A 22425    	SBC	HL,BC
0058B0 28 07               A 22426    	JR	Z,L_1140
0058B2                     A 22427    L_1138:
0058B2 DD27FD              A 22428    	LD	HL,(IX+%FFFFFFFD)
0058B5 C3 0F 5A 00         A 22429    	JR	L_1155
0058B9                     A 22430    L_1140:
                           A 22431    ; 4853		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 22432    .LINE 4853
                           A 22433    
0058B9 DD3106              A 22434    	LD	IY,(IX+%6)
0058BC FD7E0F              A 22435    	LD	A,(IY+%F)
0058BF E602                A 22436    	AND	A,%2
0058C1 20 08               A 22437    	JR	NZ,L_1153
0058C3 21070000            A 22438    	LD	HL,7
0058C7 C3 0F 5A 00         A 22439    	JR	L_1155
0058CB                     A 22440    L_1153:
                           A 22441    ; 4854	
                           A 22442    ; 4855		if (fp->fptr < fp->obj.objsize) {	
                           A 22443    .LINE 4855
                           A 22444    
0058CB DD3106              A 22445    	LD	IY,(IX+%6)
0058CE FD0711              A 22446    	LD	BC,(IY+%11)
0058D1 FD7E14              A 22447    	LD	A,(IY+%14)
0058D4 DD0FF5              A 22448    	LD	(IX+%FFFFFFF5),BC
0058D7 DD77F8              A 22449    	LD	(IX+%FFFFFFF8),A
0058DA C5E1                A 22450    	LD	HL,BC
0058DC DD5EF8              A 22451    	LD	E,(IX+%FFFFFFF8)
0058DF FD070B              A 22452    	LD	BC,(IY+%B)
0058E2 FD7E0E              A 22453    	LD	A,(IY+%E)
0058E5 CD 00 00 00         A 22454    	CALL	__lcmpu
0058E9 D2 0C 5A 00         A 22455    	JR	NC,L_1154
                           A 22456    ; 4856			if (fp->fptr == 0) {	/* When
                           A 22457    .LINE 4856
                           A 22458    
0058ED DD27F5              A 22459    	LD	HL,(IX+%FFFFFFF5)
0058F0 DD5EF8              A 22460    	LD	E,(IX+%FFFFFFF8)
0058F3 01000000            A 22461    	LD	BC,0
0058F7 AF                  A 22462    	XOR	A,A
0058F8 CD 00 00 00         A 22463    	CALL	__lcmpu
0058FC 20 3F               A 22464    	JR	NZ,L_1148
                           A 22465    ; 4857				res = remove_chain(&fp->obj
                           A 22466    .LINE 4857
                           A 22467    
0058FE DD3106              A 22468    	LD	IY,(IX+%6)
005901 ED0300              A 22469    	LEA	BC,IY+%0
005904 DD0FEF              A 22470    	LD	(IX+%FFFFFFEF),BC
005907 01000000            A 22471    	LD	BC,0
00590B C5                  A 22472    	PUSH	BC
00590C C5                  A 22473    	PUSH	BC
00590D DD31EF              A 22474    	LD	IY,(IX+%FFFFFFEF)
005910 FD0707              A 22475    	LD	BC,(IY+%7)
005913 FD7E0A              A 22476    	LD	A,(IY+%A)
005916 2600                A 22477    	LD	H,%0
005918 6F                  A 22478    	LD	L,A
005919 E5                  A 22479    	PUSH	HL
00591A C5                  A 22480    	PUSH	BC
00591B DD07EF              A 22481    	LD	BC,(IX+%FFFFFFEF)
00591E C5                  A 22482    	PUSH	BC
00591F CD F4 0B 00         A 22483    	CALL	_remove_chain
005923 C1                  A 22484    	POP	BC
005924 C1                  A 22485    	POP	BC
005925 C1                  A 22486    	POP	BC
005926 C1                  A 22487    	POP	BC
005927 C1                  A 22488    	POP	BC
005928 DD2FFD              A 22489    	LD	(IX+%FFFFFFFD),HL
                           A 22490    ; 4858				fp->obj.sclust = 0;
                           A 22491    .LINE 4858
                           A 22492    
00592B 01000000            A 22493    	LD	BC,0
00592F DD3106              A 22494    	LD	IY,(IX+%6)
005932 FD0F07              A 22495    	LD	(IY+%7),BC
005935 FD360A00            A 22496    	LD	(IY+%A),%0
                           A 22497    ; 4859			} else {				/* When
                           A 22498    .LINE 4859
                           A 22499    
005939 C3 DB 59 00         A 22500    	JR	L_1149
00593D                     A 22501    L_1148:
                           A 22502    ; 4860				ncl = get_fat(&fp->obj, fp-
                           A 22503    .LINE 4860
                           A 22504    
00593D DD3106              A 22505    	LD	IY,(IX+%6)
005940 FD0715              A 22506    	LD	BC,(IY+%15)
005943 FD7E18              A 22507    	LD	A,(IY+%18)
005946 2600                A 22508    	LD	H,%0
005948 6F                  A 22509    	LD	L,A
005949 E5                  A 22510    	PUSH	HL
00594A C5                  A 22511    	PUSH	BC
00594B ED6600              A 22512    	PEA	IY+%0
00594E CD 64 06 00         A 22513    	CALL	_get_fat
005952 C1                  A 22514    	POP	BC
005953 C1                  A 22515    	POP	BC
005954 C1                  A 22516    	POP	BC
005955 DD2FF9              A 22517    	LD	(IX+%FFFFFFF9),HL
005958 DD73FC              A 22518    	LD	(IX+%FFFFFFFC),E
                           A 22519    ; 4861				res = FR_OK;
                           A 22520    .LINE 4861
                           A 22521    
00595B 01000000            A 22522    	LD	BC,0
00595F DD0FFD              A 22523    	LD	(IX+%FFFFFFFD),BC
                           A 22524    ; 4862				if (ncl == 0xFFFFFFFF) res 
                           A 22525    .LINE 4862
                           A 22526    
005962 DD27F9              A 22527    	LD	HL,(IX+%FFFFFFF9)
005965 DD5EFC              A 22528    	LD	E,(IX+%FFFFFFFC)
005968 01FFFFFF            A 22529    	LD	BC,16777215
00596C 3EFF                A 22530    	LD	A,%FF
00596E CD 00 00 00         A 22531    	CALL	__lcmpu
005972 20 07               A 22532    	JR	NZ,L_1143
005974 01010000            A 22533    	LD	BC,1
005978 DD0FFD              A 22534    	LD	(IX+%FFFFFFFD),BC
00597B                     A 22535    L_1143:
                           A 22536    ; 4863				if (ncl == 1) res = FR_INT_
                           A 22537    .LINE 4863
                           A 22538    
00597B DD27F9              A 22539    	LD	HL,(IX+%FFFFFFF9)
00597E DD5EFC              A 22540    	LD	E,(IX+%FFFFFFFC)
005981 01010000            A 22541    	LD	BC,1
005985 AF                  A 22542    	XOR	A,A
005986 CD 00 00 00         A 22543    	CALL	__lcmpu
00598A 20 07               A 22544    	JR	NZ,L_1146
00598C 01020000            A 22545    	LD	BC,2
005990 DD0FFD              A 22546    	LD	(IX+%FFFFFFFD),BC
005993                     A 22547    L_1146:
                           A 22548    ; 4864				if (res == FR_OK && ncl < f
                           A 22549    .LINE 4864
                           A 22550    
005993 01000000            A 22551    	LD	BC,0
005997 DD27FD              A 22552    	LD	HL,(IX+%FFFFFFFD)
00599A B7                  A 22553    	OR	A,A
00599B ED42                A 22554    	SBC	HL,BC
00599D 20 3C               A 22555    	JR	NZ,L_1149
00599F DD27F9              A 22556    	LD	HL,(IX+%FFFFFFF9)
0059A2 DD5EFC              A 22557    	LD	E,(IX+%FFFFFFFC)
0059A5 DD31F2              A 22558    	LD	IY,(IX+%FFFFFFF2)
0059A8 FD071A              A 22559    	LD	BC,(IY+%1A)
0059AB FD7E1D              A 22560    	LD	A,(IY+%1D)
0059AE CD 00 00 00         A 22561    	CALL	__lcmpu
0059B2 30 27               A 22562    	JR	NC,L_1149
                           A 22563    ; 4865					res = remove_chain(&fp-
                           A 22564    .LINE 4865
                           A 22565    
0059B4 DD3106              A 22566    	LD	IY,(IX+%6)
0059B7 FD0715              A 22567    	LD	BC,(IY+%15)
0059BA FD7E18              A 22568    	LD	A,(IY+%18)
0059BD 2600                A 22569    	LD	H,%0
0059BF 6F                  A 22570    	LD	L,A
0059C0 E5                  A 22571    	PUSH	HL
0059C1 C5                  A 22572    	PUSH	BC
0059C2 DD4EFC              A 22573    	LD	C,(IX+%FFFFFFFC)
0059C5 0600                A 22574    	LD	B,%0
0059C7 C5                  A 22575    	PUSH	BC
0059C8 DD07F9              A 22576    	LD	BC,(IX+%FFFFFFF9)
0059CB C5                  A 22577    	PUSH	BC
0059CC ED6600              A 22578    	PEA	IY+%0
0059CF CD F4 0B 00         A 22579    	CALL	_remove_chain
0059D3 C1                  A 22580    	POP	BC
0059D4 C1                  A 22581    	POP	BC
0059D5 C1                  A 22582    	POP	BC
0059D6 C1                  A 22583    	POP	BC
0059D7 C1                  A 22584    	POP	BC
0059D8 DD2FFD              A 22585    	LD	(IX+%FFFFFFFD),HL
                           A 22586    ; 4866				}
                           A 22587    ; 4867			}
0059DB                     A 22588    L_1149:
                           A 22589    .LINE 4867
                           A 22590    
                           A 22591    ; 4868			fp->obj.objsize = fp->fptr;	/* 
                           A 22592    .LINE 4868
                           A 22593    
0059DB DD3106              A 22594    	LD	IY,(IX+%6)
0059DE FD0711              A 22595    	LD	BC,(IY+%11)
0059E1 FD7E14              A 22596    	LD	A,(IY+%14)
0059E4 FD0F0B              A 22597    	LD	(IY+%B),BC
0059E7 FD770E              A 22598    	LD	(IY+%E),A
                           A 22599    ; 4869			fp->flag |= FA_MODIFIED;
                           A 22600    .LINE 4869
                           A 22601    
0059EA FD7E0F              A 22602    	LD	A,(IY+%F)
0059ED CBF7                A 22603    	SET	%6,A
0059EF FD770F              A 22604    	LD	(IY+%F),A
                           A 22605    ; 4870	#if !FF_FS_TINY
                           A 22606    ; 4871			if (res == FR_OK && (fp->flag &
                           A 22607    ; 4872				if (disk_write(fs->pdrv, fp
                           A 22608    ; 4873					res = FR_DISK_ERR;
                           A 22609    ; 4874				} else {
                           A 22610    ; 4875					fp->flag &= (BYTE)~FA_D
                           A 22611    ; 4876				}
                           A 22612    ; 4877			}
                           A 22613    ; 4878	#endif
                           A 22614    ; 4879			if (res != FR_OK) ABORT(fs, res
                           A 22615    .LINE 4879
                           A 22616    
0059F2 01000000            A 22617    	LD	BC,0
0059F6 DD27FD              A 22618    	LD	HL,(IX+%FFFFFFFD)
0059F9 B7                  A 22619    	OR	A,A
0059FA ED42                A 22620    	SBC	HL,BC
0059FC 28 0E               A 22621    	JR	Z,L_1154
0059FE DD7EFD              A 22622    	LD	A,(IX+%FFFFFFFD)
005A01 DD3106              A 22623    	LD	IY,(IX+%6)
005A04 FD7710              A 22624    	LD	(IY+%10),A
005A07 DD27FD              A 22625    	LD	HL,(IX+%FFFFFFFD)
005A0A 18 03               A 22626    	JR	L_1155
                           A 22627    ; 4880		}
005A0C                     A 22628    L_1154:
                           A 22629    .LINE 4880
                           A 22630    
                           A 22631    ; 4881	
                           A 22632    ; 4882		LEAVE_FF(fs, res);
                           A 22633    .LINE 4882
                           A 22634    
005A0C DD27FD              A 22635    	LD	HL,(IX+%FFFFFFFD)
                           A 22636    ; 4883	}
005A0F                     A 22637    L_1155:
                           A 22638    .LINE 4883
                           A 22639    
005A0F DDF9                A 22640    	LD	SP,IX
005A11 DDE1                A 22641    	POP	IX
005A13 C9                  A 22642    	RET	
                           A 22643    
                           A 22644    
                           A 22645    ;**************************** _f_truncate *****
                           A 22646    ;Name                         Addr/Register   S
                           A 22647    ;fs                                   IX-14    
                           A 22648    ;G_82                                 IX-11    
                           A 22649    ;ncl                                   IX-7    
                           A 22650    ;res                                   IX-3    
                           A 22651    ;fp                                    IX+6    
                           A 22652    
                           A 22653    
                           A 22654    ; Stack Frame Size: 26 (bytes)
                           A 22655    ;       Spill Code: -3 (instruction)
                           A 22656    
                           A 22657    
                           A 22658    .ENDFUNC "f_truncate",4883,"_f_truncate"
                           A 22659    ; 4884	
                           A 22660    ; 4885	
                           A 22661    ; 4886	
                           A 22662    ; 4887	
                           A 22663    ; 4888	/*-------------------------------------
                           A 22664    ; 4889	/* Delete a File/Directory             
                           A 22665    ; 4890	/*-------------------------------------
                           A 22666    ; 4891	
                           A 22667    ; 4892	FRESULT f_unlink (
                           A 22668    ; 4893		const TCHAR* path		/* Pointer 
                           A 22669    ; 4894	)
                           A 22670    ; 4895	{
005A14                     A 22671    _f_unlink:
                           A 22672    .DEFINE "_f_unlink"
                           A 22673    
                           A 22674    .VALUE _f_unlink
                           A 22675    
                           A 22676    .CLASS 2
                           A 22677    
                           A 22678    .TYPE 68
                           A 22679    
                           A 22680    .ENDEF
                           A 22681    
                           A 22682    .BEGFUNC "f_unlink",4895,"_f_unlink"
                           A 22683    
                           A 22684    .LINE 4895
                           A 22685    
                           A 22686    .DEFINE "path"
                           A 22687    
                           A 22688    .CLASS 65
                           A 22689    
                           A 22690    .VALUE 6
                           A 22691    
                           A 22692    .TYPE 194
                           A 22693    
                           A 22694    .ENDEF
                           A 22695    
                           A 22696    .DEFINE "res"
                           A 22697    
                           A 22698    .CLASS 65
                           A 22699    
                           A 22700    .VALUE -3
                           A 22701    
                           A 22702    .TYPE 4
                           A 22703    
                           A 22704    .ENDEF
                           A 22705    
                           A 22706    .DEFINE "fs"
                           A 22707    
                           A 22708    .CLASS 65
                           A 22709    
                           A 22710    .VALUE -6
                           A 22711    
                           A 22712    .TAG "NONAME0"
                           A 22713    
                           A 22714    .TYPE 40
                           A 22715    
                           A 22716    .ENDEF
                           A 22717    
                           A 22718    .DEFINE "dclst"
                           A 22719    
                           A 22720    .CLASS 65
                           A 22721    
                           A 22722    .VALUE -10
                           A 22723    
                           A 22724    .TYPE 15
                           A 22725    
                           A 22726    .ENDEF
                           A 22727    
                           A 22728    .DEFINE "dj"
                           A 22729    
                           A 22730    .CLASS 65
                           A 22731    
                           A 22732    .VALUE -56
                           A 22733    
                           A 22734    .TAG "NONAME3"
                           A 22735    
                           A 22736    .TYPE 8
                           A 22737    
                           A 22738    .ENDEF
                           A 22739    
                           A 22740    .DEFINE "sdj"
                           A 22741    
                           A 22742    .CLASS 65
                           A 22743    
                           A 22744    .VALUE -102
                           A 22745    
                           A 22746    .TAG "NONAME3"
                           A 22747    
                           A 22748    .TYPE 8
                           A 22749    
                           A 22750    .ENDEF
                           A 22751    
                           A 22752    .DEFINE "lbuf"
                           A 22753    
                           A 22754    .CLASS 65
                           A 22755    
                           A 22756    .VALUE -614
                           A 22757    
                           A 22758    .DIM 256
                           A 22759    
                           A 22760    .TYPE 109
                           A 22761    
                           A 22762    .ENDEF
                           A 22763    
005A14 DDE5                A 22764    	PUSH	IX
005A16 DD210000 00         A 22765    	LD	IX,0
005A1B DD39                A 22766    	ADD	IX,SP
005A1D 2197FDFF            A 22767    	LD	HL,-617
005A21 39                  A 22768    	ADD	HL,SP
005A22 F9                  A 22769    	LD	SP,HL
                           A 22770    ; 4896		FRESULT res;
                           A 22771    ; 4897		DIR dj, sdj;
                           A 22772    ; 4898		DWORD dclst = 0;
                           A 22773    .LINE 4898
                           A 22774    
005A23 01000000            A 22775    	LD	BC,0
005A27 AF                  A 22776    	XOR	A,A
005A28 DD0FF6              A 22777    	LD	(IX+%FFFFFFF6),BC
005A2B DD77F9              A 22778    	LD	(IX+%FFFFFFF9),A
                           A 22779    ; 4899		FATFS *fs;
                           A 22780    ; 4900	#if FF_FS_EXFAT
                           A 22781    ; 4901		FFOBJID obj;
                           A 22782    ; 4902	#endif
                           A 22783    ; 4903		DEF_NAMBUF
                           A 22784    ; 4904	
                           A 22785    ; 4905	
                           A 22786    ; 4906		/* Get logical drive */
                           A 22787    ; 4907		res = mount_volume(&path, &fs, FA_W
                           A 22788    .LINE 4907
                           A 22789    
005A2E 01020000            A 22790    	LD	BC,2
005A32 C5                  A 22791    	PUSH	BC
005A33 ED65FA              A 22792    	PEA	IX+%FFFFFFFA
005A36 ED6506              A 22793    	PEA	IX+%6
005A39 CD A9 34 00         A 22794    	CALL	_mount_volume
005A3D C1                  A 22795    	POP	BC
005A3E C1                  A 22796    	POP	BC
005A3F C1                  A 22797    	POP	BC
005A40 DD2FFD              A 22798    	LD	(IX+%FFFFFFFD),HL
                           A 22799    ; 4908		if (res == FR_OK) {
                           A 22800    .LINE 4908
                           A 22801    
005A43 01000000            A 22802    	LD	BC,0
005A47 DD27FD              A 22803    	LD	HL,(IX+%FFFFFFFD)
005A4A B7                  A 22804    	OR	A,A
005A4B ED42                A 22805    	SBC	HL,BC
005A4D C2 E8 5B 00         A 22806    	JR	NZ,L_1180
                           A 22807    ; 4909			dj.obj.fs = fs;
                           A 22808    .LINE 4909
                           A 22809    
005A51 DD07FA              A 22810    	LD	BC,(IX+%FFFFFFFA)
005A54 DD0FC8              A 22811    	LD	(IX+%FFFFFFC8),BC
                           A 22812    ; 4910			INIT_NAMBUF(fs);
                           A 22813    .LINE 4910
                           A 22814    
005A57 DDE5E1              A 22815    	LD	HL,IX
005A5A 019AFDFF            A 22816    	LD	BC,-614
005A5E 09                  A 22817    	ADD	HL,BC
005A5F DD31FA              A 22818    	LD	IY,(IX+%FFFFFFFA)
005A62 FD2F0B              A 22819    	LD	(IY+%B),HL
                           A 22820    ; 4911			res = follow_path(&dj, path);	
                           A 22821    .LINE 4911
                           A 22822    
005A65 DD0706              A 22823    	LD	BC,(IX+%6)
005A68 C5                  A 22824    	PUSH	BC
005A69 ED65C8              A 22825    	PEA	IX+%FFFFFFC8
005A6C CD DA 2E 00         A 22826    	CALL	_follow_path
005A70 C1                  A 22827    	POP	BC
005A71 C1                  A 22828    	POP	BC
005A72 DD2FFD              A 22829    	LD	(IX+%FFFFFFFD),HL
                           A 22830    ; 4912			if (FF_FS_RPATH && res == FR_OK
                           A 22831    .LINE 4912
                           A 22832    
005A75 01000000            A 22833    	LD	BC,0
005A79 DD27FD              A 22834    	LD	HL,(IX+%FFFFFFFD)
005A7C B7                  A 22835    	OR	A,A
005A7D ED42                A 22836    	SBC	HL,BC
005A7F 20 11               A 22837    	JR	NZ,L_1177
005A81 ED55E6              A 22838    	LEA	IY,IX+%FFFFFFE6
005A84 FD7E0B              A 22839    	LD	A,(IY+%B)
005A87 E620                A 22840    	AND	A,%20
005A89 28 07               A 22841    	JR	Z,L_1177
                           A 22842    ; 4913				res = FR_INVALID_NAME;		
                           A 22843    .LINE 4913
                           A 22844    
005A8B 01060000            A 22845    	LD	BC,6
005A8F DD0FFD              A 22846    	LD	(IX+%FFFFFFFD),BC
                           A 22847    ; 4914			}
005A92                     A 22848    L_1177:
                           A 22849    .LINE 4914
                           A 22850    
                           A 22851    ; 4915	#if FF_FS_LOCK != 0
                           A 22852    ; 4916			if (res == FR_OK) res = chk_loc
                           A 22853    ; 4917	#endif
                           A 22854    ; 4918			if (res == FR_OK) {				
                           A 22855    .LINE 4918
                           A 22856    
005A92 01000000            A 22857    	LD	BC,0
005A96 DD27FD              A 22858    	LD	HL,(IX+%FFFFFFFD)
005A99 B7                  A 22859    	OR	A,A
005A9A ED42                A 22860    	SBC	HL,BC
005A9C C2 E8 5B 00         A 22861    	JR	NZ,L_1178
                           A 22862    ; 4919				if (dj.fn[NSFLAG] & NS_NONA
                           A 22863    .LINE 4919
                           A 22864    
005AA0 ED55E6              A 22865    	LEA	IY,IX+%FFFFFFE6
005AA3 FD7E0B              A 22866    	LD	A,(IY+%B)
005AA6 E680                A 22867    	AND	A,%80
005AA8 28 09               A 22868    	JR	Z,L_1160
                           A 22869    ; 4920					res = FR_INVALID_NAME;	
                           A 22870    .LINE 4920
                           A 22871    
005AAA 01060000            A 22872    	LD	BC,6
005AAE DD0FFD              A 22873    	LD	(IX+%FFFFFFFD),BC
                           A 22874    ; 4921				} else {
                           A 22875    .LINE 4921
                           A 22876    
005AB1 18 0E               A 22877    	JR	L_1169
005AB3                     A 22878    L_1160:
                           A 22879    ; 4922					if (dj.obj.attr & AM_RD
                           A 22880    .LINE 4922
                           A 22881    
005AB3 DD7ECD              A 22882    	LD	A,(IX+%FFFFFFCD)
005AB6 E601                A 22883    	AND	A,%1
005AB8 28 07               A 22884    	JR	Z,L_1169
                           A 22885    ; 4923						res = FR_DENIED;	
                           A 22886    .LINE 4923
                           A 22887    
005ABA 01070000            A 22888    	LD	BC,7
005ABE DD0FFD              A 22889    	LD	(IX+%FFFFFFFD),BC
                           A 22890    ; 4924					}
                           A 22891    ; 4925				}
005AC1                     A 22892    L_1169:
                           A 22893    .LINE 4925
                           A 22894    
                           A 22895    ; 4926				if (res == FR_OK) {
                           A 22896    .LINE 4926
                           A 22897    
005AC1 01000000            A 22898    	LD	BC,0
005AC5 DD27FD              A 22899    	LD	HL,(IX+%FFFFFFFD)
005AC8 B7                  A 22900    	OR	A,A
005AC9 ED42                A 22901    	SBC	HL,BC
005ACB C2 85 5B 00         A 22902    	JR	NZ,L_1175
                           A 22903    ; 4927	#if FF_FS_EXFAT
                           A 22904    ; 4928					obj.fs = fs;
                           A 22905    ; 4929					if (fs->fs_type == FS_E
                           A 22906    ; 4930						init_alloc_info(fs,
                           A 22907    ; 4931						dclst = obj.sclust;
                           A 22908    ; 4932					} else
                           A 22909    ; 4933	#endif
                           A 22910    ; 4934					{
                           A 22911    ; 4935						dclst = ld_clust(fs
                           A 22912    .LINE 4935
                           A 22913    
005ACF DD07E3              A 22914    	LD	BC,(IX+%FFFFFFE3)
005AD2 C5                  A 22915    	PUSH	BC
005AD3 DD07FA              A 22916    	LD	BC,(IX+%FFFFFFFA)
005AD6 C5                  A 22917    	PUSH	BC
005AD7 CD EE 17 00         A 22918    	CALL	_ld_clust
005ADB C1                  A 22919    	POP	BC
005ADC C1                  A 22920    	POP	BC
005ADD DD2FF6              A 22921    	LD	(IX+%FFFFFFF6),HL
005AE0 DD73F9              A 22922    	LD	(IX+%FFFFFFF9),E
                           A 22923    ; 4936					}
                           A 22924    ; 4937					if (dj.obj.attr & AM_DI
                           A 22925    .LINE 4937
                           A 22926    
005AE3 DD7ECD              A 22927    	LD	A,(IX+%FFFFFFCD)
005AE6 E610                A 22928    	AND	A,%10
005AE8 CA 85 5B 00         A 22929    	JR	Z,L_1175
                           A 22930    ; 4938	#if FF_FS_RPATH != 0
                           A 22931    ; 4939						if (dclst == fs->cd
                           A 22932    .LINE 4939
                           A 22933    
005AEC DD31FA              A 22934    	LD	IY,(IX+%FFFFFFFA)
005AEF FD2716              A 22935    	LD	HL,(IY+%16)
005AF2 FD5E19              A 22936    	LD	E,(IY+%19)
005AF5 DD07F6              A 22937    	LD	BC,(IX+%FFFFFFF6)
005AF8 DD7EF9              A 22938    	LD	A,(IX+%FFFFFFF9)
005AFB CD 00 00 00         A 22939    	CALL	__lcmpu
005AFF 20 09               A 22940    	JR	NZ,L_1166
                           A 22941    ; 4940							res = FR_DENIED
                           A 22942    .LINE 4940
                           A 22943    
005B01 01070000            A 22944    	LD	BC,7
005B05 DD0FFD              A 22945    	LD	(IX+%FFFFFFFD),BC
                           A 22946    ; 4941						} else
                           A 22947    .LINE 4941
                           A 22948    
005B08 18 7B               A 22949    	JR	L_1175
005B0A                     A 22950    L_1166:
                           A 22951    ; 4942	#endif
                           A 22952    ; 4943						{
                           A 22953    ; 4944							sdj.obj.fs = fs
                           A 22954    .LINE 4944
                           A 22955    
005B0A ED029A              A 22956    	LEA	BC,IX+%FFFFFF9A
005B0D 2197FDFF            A 22957    	LD	HL,-617
005B11 DDE5D1              A 22958    	LD	DE,IX
005B14 19                  A 22959    	ADD	HL,DE
005B15 ED0F                A 22960    	LD	(HL),BC
005B17 DD07FA              A 22961    	LD	BC,(IX+%FFFFFFFA)
005B1A DD0F9A              A 22962    	LD	(IX+%FFFFFF9A),BC
                           A 22963    ; 4945							sdj.obj.sclust 
                           A 22964    .LINE 4945
                           A 22965    
005B1D 2197FDFF            A 22966    	LD	HL,-617
005B21 DDE5C1              A 22967    	LD	BC,IX
005B24 09                  A 22968    	ADD	HL,BC
005B25 ED31                A 22969    	LD	IY,(HL)
005B27 DD07F6              A 22970    	LD	BC,(IX+%FFFFFFF6)
005B2A DD7EF9              A 22971    	LD	A,(IX+%FFFFFFF9)
005B2D FD0F07              A 22972    	LD	(IY+%7),BC
005B30 FD770A              A 22973    	LD	(IY+%A),A
                           A 22974    ; 4946	#if FF_FS_EXFAT
                           A 22975    ; 4947							if (fs->fs_type
                           A 22976    ; 4948								sdj.obj.obj
                           A 22977    ; 4949								sdj.obj.sta
                           A 22978    ; 4950							}
                           A 22979    ; 4951	#endif
                           A 22980    ; 4952							res = dir_sdi(&
                           A 22981    .LINE 4952
                           A 22982    
005B33 01000000            A 22983    	LD	BC,0
005B37 C5                  A 22984    	PUSH	BC
005B38 C5                  A 22985    	PUSH	BC
005B39 ED659A              A 22986    	PEA	IX+%FFFFFF9A
005B3C CD 50 12 00         A 22987    	CALL	_dir_sdi
005B40 C1                  A 22988    	POP	BC
005B41 C1                  A 22989    	POP	BC
005B42 C1                  A 22990    	POP	BC
005B43 DD2FFD              A 22991    	LD	(IX+%FFFFFFFD),HL
                           A 22992    ; 4953							if (res == FR_O
                           A 22993    .LINE 4953
                           A 22994    
005B46 01000000            A 22995    	LD	BC,0
005B4A DD27FD              A 22996    	LD	HL,(IX+%FFFFFFFD)
005B4D B7                  A 22997    	OR	A,A
005B4E ED42                A 22998    	SBC	HL,BC
005B50 20 33               A 22999    	JR	NZ,L_1175
                           A 23000    ; 4954								res = DIR_R
                           A 23001    .LINE 4954
                           A 23002    
005B52 C5                  A 23003    	PUSH	BC
005B53 ED659A              A 23004    	PEA	IX+%FFFFFF9A
005B56 CD 46 1E 00         A 23005    	CALL	_dir_read
005B5A C1                  A 23006    	POP	BC
005B5B C1                  A 23007    	POP	BC
005B5C DD2FFD              A 23008    	LD	(IX+%FFFFFFFD),HL
                           A 23009    ; 4955								if (res == 
                           A 23010    .LINE 4955
                           A 23011    
005B5F 01000000            A 23012    	LD	BC,0
005B63 DD27FD              A 23013    	LD	HL,(IX+%FFFFFFFD)
005B66 B7                  A 23014    	OR	A,A
005B67 ED42                A 23015    	SBC	HL,BC
005B69 20 07               A 23016    	JR	NZ,L_1163
005B6B 01070000            A 23017    	LD	BC,7
005B6F DD0FFD              A 23018    	LD	(IX+%FFFFFFFD),BC
005B72                     A 23019    L_1163:
                           A 23020    ; 4956								if (res == 
                           A 23021    .LINE 4956
                           A 23022    
005B72 01040000            A 23023    	LD	BC,4
005B76 DD27FD              A 23024    	LD	HL,(IX+%FFFFFFFD)
005B79 B7                  A 23025    	OR	A,A
005B7A ED42                A 23026    	SBC	HL,BC
005B7C 20 07               A 23027    	JR	NZ,L_1175
005B7E 01000000            A 23028    	LD	BC,0
005B82 DD0FFD              A 23029    	LD	(IX+%FFFFFFFD),BC
                           A 23030    ; 4957							}
                           A 23031    ; 4958						}
                           A 23032    ; 4959					}
                           A 23033    ; 4960				}
005B85                     A 23034    L_1175:
                           A 23035    .LINE 4960
                           A 23036    
                           A 23037    ; 4961				if (res == FR_OK) {
                           A 23038    .LINE 4961
                           A 23039    
005B85 01000000            A 23040    	LD	BC,0
005B89 DD27FD              A 23041    	LD	HL,(IX+%FFFFFFFD)
005B8C B7                  A 23042    	OR	A,A
005B8D ED42                A 23043    	SBC	HL,BC
005B8F 20 57               A 23044    	JR	NZ,L_1178
                           A 23045    ; 4962					res = dir_remove(&dj);	
                           A 23046    .LINE 4962
                           A 23047    
005B91 ED65C8              A 23048    	PEA	IX+%FFFFFFC8
005B94 CD 90 24 00         A 23049    	CALL	_dir_remove
005B98 C1                  A 23050    	POP	BC
005B99 DD2FFD              A 23051    	LD	(IX+%FFFFFFFD),HL
                           A 23052    ; 4963					if (res == FR_OK && dcl
                           A 23053    .LINE 4963
                           A 23054    
005B9C 01000000            A 23055    	LD	BC,0
005BA0 DD27FD              A 23056    	LD	HL,(IX+%FFFFFFFD)
005BA3 B7                  A 23057    	OR	A,A
005BA4 ED42                A 23058    	SBC	HL,BC
005BA6 20 28               A 23059    	JR	NZ,L_1173
005BA8 DD27F6              A 23060    	LD	HL,(IX+%FFFFFFF6)
005BAB DD5EF9              A 23061    	LD	E,(IX+%FFFFFFF9)
005BAE AF                  A 23062    	XOR	A,A
005BAF CD 00 00 00         A 23063    	CALL	__lcmpu
005BB3 28 1B               A 23064    	JR	Z,L_1173
                           A 23065    ; 4964	#if FF_FS_EXFAT
                           A 23066    ; 4965						res = remove_chain(
                           A 23067    ; 4966	#else
                           A 23068    ; 4967						res = remove_chain(
                           A 23069    .LINE 4967
                           A 23070    
005BB5 C5                  A 23071    	PUSH	BC
005BB6 C5                  A 23072    	PUSH	BC
005BB7 DD4EF9              A 23073    	LD	C,(IX+%FFFFFFF9)
005BBA 0600                A 23074    	LD	B,%0
005BBC C5                  A 23075    	PUSH	BC
005BBD DD07F6              A 23076    	LD	BC,(IX+%FFFFFFF6)
005BC0 C5                  A 23077    	PUSH	BC
005BC1 ED65C8              A 23078    	PEA	IX+%FFFFFFC8
005BC4 CD F4 0B 00         A 23079    	CALL	_remove_chain
005BC8 C1                  A 23080    	POP	BC
005BC9 C1                  A 23081    	POP	BC
005BCA C1                  A 23082    	POP	BC
005BCB C1                  A 23083    	POP	BC
005BCC C1                  A 23084    	POP	BC
005BCD DD2FFD              A 23085    	LD	(IX+%FFFFFFFD),HL
                           A 23086    ; 4968	#endif
                           A 23087    ; 4969					}
005BD0                     A 23088    L_1173:
                           A 23089    .LINE 4969
                           A 23090    
                           A 23091    ; 4970					if (res == FR_OK) res =
                           A 23092    .LINE 4970
                           A 23093    
005BD0 01000000            A 23094    	LD	BC,0
005BD4 DD27FD              A 23095    	LD	HL,(IX+%FFFFFFFD)
005BD7 B7                  A 23096    	OR	A,A
005BD8 ED42                A 23097    	SBC	HL,BC
005BDA 20 0C               A 23098    	JR	NZ,L_1178
005BDC DD07FA              A 23099    	LD	BC,(IX+%FFFFFFFA)
005BDF C5                  A 23100    	PUSH	BC
005BE0 CD B3 04 00         A 23101    	CALL	_sync_fs
005BE4 C1                  A 23102    	POP	BC
005BE5 DD2FFD              A 23103    	LD	(IX+%FFFFFFFD),HL
                           A 23104    ; 4971				}
                           A 23105    ; 4972			}
005BE8                     A 23106    L_1178:
                           A 23107    .LINE 4972
                           A 23108    
                           A 23109    ; 4973			FREE_NAMBUF();
                           A 23110    ; 4974		}
005BE8                     A 23111    L_1180:
                           A 23112    .LINE 4974
                           A 23113    
                           A 23114    ; 4975	
                           A 23115    ; 4976		LEAVE_FF(fs, res);
                           A 23116    .LINE 4976
                           A 23117    
005BE8 DD27FD              A 23118    	LD	HL,(IX+%FFFFFFFD)
                           A 23119    ; 4977	}
                           A 23120    .LINE 4977
                           A 23121    
005BEB DDF9                A 23122    	LD	SP,IX
005BED DDE1                A 23123    	POP	IX
005BEF C9                  A 23124    	RET	
                           A 23125    
                           A 23126    
                           A 23127    ;**************************** _f_unlink *******
                           A 23128    ;Name                         Addr/Register   S
                           A 23129    ;lbuf                                IX-614    
                           A 23130    ;sdj                                 IX-102    
                           A 23131    ;dj                                   IX-56    
                           A 23132    ;dclst                                IX-10    
                           A 23133    ;fs                                    IX-6    
                           A 23134    ;res                                   IX-3    
                           A 23135    ;path                                  IX+6    
                           A 23136    
                           A 23137    
                           A 23138    ; Stack Frame Size: 626 (bytes)
                           A 23139    ;       Spill Code: -3 (instruction)
                           A 23140    
                           A 23141    
                           A 23142    .ENDFUNC "f_unlink",4977,"_f_unlink"
                           A 23143    ; 4978	
                           A 23144    ; 4979	
                           A 23145    ; 4980	
                           A 23146    ; 4981	
                           A 23147    ; 4982	/*-------------------------------------
                           A 23148    ; 4983	/* Create a Directory                  
                           A 23149    ; 4984	/*-------------------------------------
                           A 23150    ; 4985	
                           A 23151    ; 4986	FRESULT f_mkdir (
                           A 23152    ; 4987		const TCHAR* path		/* Pointer 
                           A 23153    ; 4988	)
                           A 23154    ; 4989	{
005BF0                     A 23155    _f_mkdir:
                           A 23156    .DEFINE "_f_mkdir"
                           A 23157    
                           A 23158    .VALUE _f_mkdir
                           A 23159    
                           A 23160    .CLASS 2
                           A 23161    
                           A 23162    .TYPE 68
                           A 23163    
                           A 23164    .ENDEF
                           A 23165    
                           A 23166    .BEGFUNC "f_mkdir",4989,"_f_mkdir"
                           A 23167    
                           A 23168    .LINE 4989
                           A 23169    
                           A 23170    .DEFINE "path"
                           A 23171    
                           A 23172    .CLASS 65
                           A 23173    
                           A 23174    .VALUE 6
                           A 23175    
                           A 23176    .TYPE 194
                           A 23177    
                           A 23178    .ENDEF
                           A 23179    
                           A 23180    .DEFINE "res"
                           A 23181    
                           A 23182    .CLASS 65
                           A 23183    
                           A 23184    .VALUE -3
                           A 23185    
                           A 23186    .TYPE 4
                           A 23187    
                           A 23188    .ENDEF
                           A 23189    
                           A 23190    .DEFINE "fs"
                           A 23191    
                           A 23192    .CLASS 65
                           A 23193    
                           A 23194    .VALUE -6
                           A 23195    
                           A 23196    .TAG "NONAME0"
                           A 23197    
                           A 23198    .TYPE 40
                           A 23199    
                           A 23200    .ENDEF
                           A 23201    
                           A 23202    .DEFINE "dcl"
                           A 23203    
                           A 23204    .CLASS 65
                           A 23205    
                           A 23206    .VALUE -10
                           A 23207    
                           A 23208    .TYPE 15
                           A 23209    
                           A 23210    .ENDEF
                           A 23211    
                           A 23212    .DEFINE "tm"
                           A 23213    
                           A 23214    .CLASS 65
                           A 23215    
                           A 23216    .VALUE -14
                           A 23217    
                           A 23218    .TYPE 15
                           A 23219    
                           A 23220    .ENDEF
                           A 23221    
                           A 23222    .DEFINE "pcl"
                           A 23223    
                           A 23224    .CLASS 65
                           A 23225    
                           A 23226    .VALUE -18
                           A 23227    
                           A 23228    .TYPE 15
                           A 23229    
                           A 23230    .ENDEF
                           A 23231    
                           A 23232    .DEFINE "sobj"
                           A 23233    
                           A 23234    .CLASS 65
                           A 23235    
                           A 23236    .VALUE -33
                           A 23237    
                           A 23238    .TAG "NONAME1"
                           A 23239    
                           A 23240    .TYPE 8
                           A 23241    
                           A 23242    .ENDEF
                           A 23243    
                           A 23244    .DEFINE "dj"
                           A 23245    
                           A 23246    .CLASS 65
                           A 23247    
                           A 23248    .VALUE -79
                           A 23249    
                           A 23250    .TAG "NONAME3"
                           A 23251    
                           A 23252    .TYPE 8
                           A 23253    
                           A 23254    .ENDEF
                           A 23255    
                           A 23256    .DEFINE "lbuf"
                           A 23257    
                           A 23258    .CLASS 65
                           A 23259    
                           A 23260    .VALUE -591
                           A 23261    
                           A 23262    .DIM 256
                           A 23263    
                           A 23264    .TYPE 109
                           A 23265    
                           A 23266    .ENDEF
                           A 23267    
005BF0 DDE5                A 23268    	PUSH	IX
005BF2 DD210000 00         A 23269    	LD	IX,0
005BF7 DD39                A 23270    	ADD	IX,SP
005BF9 21B1FDFF            A 23271    	LD	HL,-591
005BFD 39                  A 23272    	ADD	HL,SP
005BFE F9                  A 23273    	LD	SP,HL
                           A 23274    ; 4990		FRESULT res;
                           A 23275    ; 4991		DIR dj;
                           A 23276    ; 4992		FFOBJID sobj;
                           A 23277    ; 4993		FATFS *fs;
                           A 23278    ; 4994		DWORD dcl, pcl, tm;
                           A 23279    ; 4995		DEF_NAMBUF
                           A 23280    ; 4996	
                           A 23281    ; 4997	
                           A 23282    ; 4998		res = mount_volume(&path, &fs, FA_W
                           A 23283    .LINE 4998
                           A 23284    
005BFF 01020000            A 23285    	LD	BC,2
005C03 C5                  A 23286    	PUSH	BC
005C04 ED65FA              A 23287    	PEA	IX+%FFFFFFFA
005C07 ED6506              A 23288    	PEA	IX+%6
005C0A CD A9 34 00         A 23289    	CALL	_mount_volume
005C0E C1                  A 23290    	POP	BC
005C0F C1                  A 23291    	POP	BC
005C10 C1                  A 23292    	POP	BC
005C11 DD2FFD              A 23293    	LD	(IX+%FFFFFFFD),HL
                           A 23294    ; 4999		if (res == FR_OK) {
                           A 23295    .LINE 4999
                           A 23296    
005C14 01000000            A 23297    	LD	BC,0
005C18 DD27FD              A 23298    	LD	HL,(IX+%FFFFFFFD)
005C1B B7                  A 23299    	OR	A,A
005C1C ED42                A 23300    	SBC	HL,BC
005C1E C2 53 5E 00         A 23301    	JR	NZ,L_1204
                           A 23302    ; 5000			dj.obj.fs = fs;
                           A 23303    .LINE 5000
                           A 23304    
005C22 DD07FA              A 23305    	LD	BC,(IX+%FFFFFFFA)
005C25 DD0FB1              A 23306    	LD	(IX+%FFFFFFB1),BC
                           A 23307    ; 5001			INIT_NAMBUF(fs);
                           A 23308    .LINE 5001
                           A 23309    
005C28 DDE5E1              A 23310    	LD	HL,IX
005C2B 01B1FDFF            A 23311    	LD	BC,-591
005C2F 09                  A 23312    	ADD	HL,BC
005C30 DD31FA              A 23313    	LD	IY,(IX+%FFFFFFFA)
005C33 FD2F0B              A 23314    	LD	(IY+%B),HL
                           A 23315    ; 5002			res = follow_path(&dj, path);	
                           A 23316    .LINE 5002
                           A 23317    
005C36 DD0706              A 23318    	LD	BC,(IX+%6)
005C39 C5                  A 23319    	PUSH	BC
005C3A ED65B1              A 23320    	PEA	IX+%FFFFFFB1
005C3D CD DA 2E 00         A 23321    	CALL	_follow_path
005C41 C1                  A 23322    	POP	BC
005C42 C1                  A 23323    	POP	BC
005C43 DD2FFD              A 23324    	LD	(IX+%FFFFFFFD),HL
                           A 23325    ; 5003			if (res == FR_OK) res = FR_EXIS
                           A 23326    .LINE 5003
                           A 23327    
005C46 01000000            A 23328    	LD	BC,0
005C4A DD27FD              A 23329    	LD	HL,(IX+%FFFFFFFD)
005C4D B7                  A 23330    	OR	A,A
005C4E ED42                A 23331    	SBC	HL,BC
005C50 20 07               A 23332    	JR	NZ,L_1185
005C52 01080000            A 23333    	LD	BC,8
005C56 DD0FFD              A 23334    	LD	(IX+%FFFFFFFD),BC
005C59                     A 23335    L_1185:
                           A 23336    ; 5004			if (FF_FS_RPATH && res == FR_NO
                           A 23337    .LINE 5004
                           A 23338    
005C59 01040000            A 23339    	LD	BC,4
005C5D DD27FD              A 23340    	LD	HL,(IX+%FFFFFFFD)
005C60 B7                  A 23341    	OR	A,A
005C61 ED42                A 23342    	SBC	HL,BC
005C63 20 11               A 23343    	JR	NZ,L_1201
005C65 ED55CF              A 23344    	LEA	IY,IX+%FFFFFFCF
005C68 FD7E0B              A 23345    	LD	A,(IY+%B)
005C6B E620                A 23346    	AND	A,%20
005C6D 28 07               A 23347    	JR	Z,L_1201
                           A 23348    ; 5005				res = FR_INVALID_NAME;
                           A 23349    .LINE 5005
                           A 23350    
005C6F 01060000            A 23351    	LD	BC,6
005C73 DD0FFD              A 23352    	LD	(IX+%FFFFFFFD),BC
                           A 23353    ; 5006			}
005C76                     A 23354    L_1201:
                           A 23355    .LINE 5006
                           A 23356    
                           A 23357    ; 5007			if (res == FR_NO_FILE) {		
                           A 23358    .LINE 5007
                           A 23359    
005C76 01040000            A 23360    	LD	BC,4
005C7A DD27FD              A 23361    	LD	HL,(IX+%FFFFFFFD)
005C7D B7                  A 23362    	OR	A,A
005C7E ED42                A 23363    	SBC	HL,BC
005C80 C2 53 5E 00         A 23364    	JR	NZ,L_1202
                           A 23365    ; 5008				sobj.fs = fs;				
                           A 23366    .LINE 5008
                           A 23367    
005C84 DD07FA              A 23368    	LD	BC,(IX+%FFFFFFFA)
005C87 DD0FDF              A 23369    	LD	(IX+%FFFFFFDF),BC
                           A 23370    ; 5009				dcl = create_chain(&sobj, 0
                           A 23371    .LINE 5009
                           A 23372    
005C8A 01000000            A 23373    	LD	BC,0
005C8E C5                  A 23374    	PUSH	BC
005C8F C5                  A 23375    	PUSH	BC
005C90 ED65DF              A 23376    	PEA	IX+%FFFFFFDF
005C93 CD 8E 0D 00         A 23377    	CALL	_create_chain
005C97 C1                  A 23378    	POP	BC
005C98 C1                  A 23379    	POP	BC
005C99 C1                  A 23380    	POP	BC
005C9A DD2FF6              A 23381    	LD	(IX+%FFFFFFF6),HL
005C9D DD73F9              A 23382    	LD	(IX+%FFFFFFF9),E
                           A 23383    ; 5010				res = FR_OK;
                           A 23384    .LINE 5010
                           A 23385    
005CA0 01000000            A 23386    	LD	BC,0
005CA4 DD0FFD              A 23387    	LD	(IX+%FFFFFFFD),BC
                           A 23388    ; 5011				if (dcl == 0) res = FR_DENI
                           A 23389    .LINE 5011
                           A 23390    
005CA7 DD27F6              A 23391    	LD	HL,(IX+%FFFFFFF6)
005CAA DD5EF9              A 23392    	LD	E,(IX+%FFFFFFF9)
005CAD AF                  A 23393    	XOR	A,A
005CAE CD 00 00 00         A 23394    	CALL	__lcmpu
005CB2 20 07               A 23395    	JR	NZ,L_1188
005CB4 01070000            A 23396    	LD	BC,7
005CB8 DD0FFD              A 23397    	LD	(IX+%FFFFFFFD),BC
005CBB                     A 23398    L_1188:
                           A 23399    ; 5012				if (dcl == 1) res = FR_INT_
                           A 23400    .LINE 5012
                           A 23401    
005CBB DD27F6              A 23402    	LD	HL,(IX+%FFFFFFF6)
005CBE DD5EF9              A 23403    	LD	E,(IX+%FFFFFFF9)
005CC1 01010000            A 23404    	LD	BC,1
005CC5 AF                  A 23405    	XOR	A,A
005CC6 CD 00 00 00         A 23406    	CALL	__lcmpu
005CCA 20 07               A 23407    	JR	NZ,L_1190
005CCC 01020000            A 23408    	LD	BC,2
005CD0 DD0FFD              A 23409    	LD	(IX+%FFFFFFFD),BC
005CD3                     A 23410    L_1190:
                           A 23411    ; 5013				if (dcl == 0xFFFFFFFF) res 
                           A 23412    .LINE 5013
                           A 23413    
005CD3 DD27F6              A 23414    	LD	HL,(IX+%FFFFFFF6)
005CD6 DD5EF9              A 23415    	LD	E,(IX+%FFFFFFF9)
005CD9 01FFFFFF            A 23416    	LD	BC,16777215
005CDD 3EFF                A 23417    	LD	A,%FF
005CDF CD 00 00 00         A 23418    	CALL	__lcmpu
005CE3 20 07               A 23419    	JR	NZ,L_1191
005CE5 01010000            A 23420    	LD	BC,1
005CE9 DD0FFD              A 23421    	LD	(IX+%FFFFFFFD),BC
005CEC                     A 23422    L_1191:
                           A 23423    ; 5014				tm = GET_FATTIME();
                           A 23424    .LINE 5014
                           A 23425    
005CEC CD 00 00 00         A 23426    	CALL	_get_fattime
005CF0 DD2FF2              A 23427    	LD	(IX+%FFFFFFF2),HL
005CF3 DD73F5              A 23428    	LD	(IX+%FFFFFFF5),E
                           A 23429    ; 5015				if (res == FR_OK) {
                           A 23430    .LINE 5015
                           A 23431    
005CF6 01000000            A 23432    	LD	BC,0
005CFA DD27FD              A 23433    	LD	HL,(IX+%FFFFFFFD)
005CFD B7                  A 23434    	OR	A,A
005CFE ED42                A 23435    	SBC	HL,BC
005D00 C2 D4 5D 00         A 23436    	JR	NZ,L_1199
                           A 23437    ; 5016					res = dir_clear(fs, dcl
                           A 23438    .LINE 5016
                           A 23439    
005D04 DD4EF9              A 23440    	LD	C,(IX+%FFFFFFF9)
005D07 0600                A 23441    	LD	B,%0
005D09 C5                  A 23442    	PUSH	BC
005D0A DD07F6              A 23443    	LD	BC,(IX+%FFFFFFF6)
005D0D C5                  A 23444    	PUSH	BC
005D0E DD07FA              A 23445    	LD	BC,(IX+%FFFFFFFA)
005D11 C5                  A 23446    	PUSH	BC
005D12 CD 60 11 00         A 23447    	CALL	_dir_clear
005D16 C1                  A 23448    	POP	BC
005D17 C1                  A 23449    	POP	BC
005D18 C1                  A 23450    	POP	BC
005D19 DD2FFD              A 23451    	LD	(IX+%FFFFFFFD),HL
                           A 23452    ; 5017					if (res == FR_OK) {
                           A 23453    .LINE 5017
                           A 23454    
005D1C 01000000            A 23455    	LD	BC,0
005D20 DD27FD              A 23456    	LD	HL,(IX+%FFFFFFFD)
005D23 B7                  A 23457    	OR	A,A
005D24 ED42                A 23458    	SBC	HL,BC
005D26 C2 D4 5D 00         A 23459    	JR	NZ,L_1199
                           A 23460    ; 5018						if (!FF_FS_EXFAT ||
                           A 23461    ; 5019							memset(fs->win 
                           A 23462    .LINE 5019
                           A 23463    
005D2A 010B0000            A 23464    	LD	BC,11
005D2E C5                  A 23465    	PUSH	BC
005D2F 01200000            A 23466    	LD	BC,32
005D33 C5                  A 23467    	PUSH	BC
005D34 DD31FA              A 23468    	LD	IY,(IX+%FFFFFFFA)
005D37 ED6636              A 23469    	PEA	IY+%36
005D3A CD 00 00 00         A 23470    	CALL	_memset
005D3E C1                  A 23471    	POP	BC
005D3F C1                  A 23472    	POP	BC
005D40 C1                  A 23473    	POP	BC
                           A 23474    ; 5020							fs->win[DIR_Nam
                           A 23475    .LINE 5020
                           A 23476    
005D41 DD31FA              A 23477    	LD	IY,(IX+%FFFFFFFA)
005D44 FD36362E            A 23478    	LD	(IY+%36),%2E
                           A 23479    ; 5021							fs->win[DIR_Att
                           A 23480    .LINE 5021
                           A 23481    
005D48 ED2341              A 23482    	LEA	HL,IY+%41
005D4B 3610                A 23483    	LD	(HL),%10
                           A 23484    ; 5022							st_dword(fs->wi
                           A 23485    .LINE 5022
                           A 23486    
005D4D DD4EF5              A 23487    	LD	C,(IX+%FFFFFFF5)
005D50 0600                A 23488    	LD	B,%0
005D52 C5                  A 23489    	PUSH	BC
005D53 DD07F2              A 23490    	LD	BC,(IX+%FFFFFFF2)
005D56 C5                  A 23491    	PUSH	BC
005D57 ED034C              A 23492    	LEA	BC,IY+%4C
005D5A C5                  A 23493    	PUSH	BC
005D5B CD 45 01 00         A 23494    	CALL	_st_dword
005D5F C1                  A 23495    	POP	BC
005D60 C1                  A 23496    	POP	BC
005D61 C1                  A 23497    	POP	BC
                           A 23498    ; 5023							st_clust(fs, fs
                           A 23499    .LINE 5023
                           A 23500    
005D62 DD4EF9              A 23501    	LD	C,(IX+%FFFFFFF9)
005D65 0600                A 23502    	LD	B,%0
005D67 C5                  A 23503    	PUSH	BC
005D68 DD07F6              A 23504    	LD	BC,(IX+%FFFFFFF6)
005D6B C5                  A 23505    	PUSH	BC
005D6C DD31FA              A 23506    	LD	IY,(IX+%FFFFFFFA)
005D6F ED6636              A 23507    	PEA	IY+%36
005D72 DD07FA              A 23508    	LD	BC,(IX+%FFFFFFFA)
005D75 C5                  A 23509    	PUSH	BC
005D76 CD 5C 18 00         A 23510    	CALL	_st_clust
005D7A C1                  A 23511    	POP	BC
005D7B C1                  A 23512    	POP	BC
005D7C C1                  A 23513    	POP	BC
005D7D C1                  A 23514    	POP	BC
                           A 23515    ; 5024							memcpy(fs->win 
                           A 23516    .LINE 5024
                           A 23517    
005D7E 01200000            A 23518    	LD	BC,32
005D82 C5                  A 23519    	PUSH	BC
005D83 DD31FA              A 23520    	LD	IY,(IX+%FFFFFFFA)
005D86 ED6636              A 23521    	PEA	IY+%36
005D89 ED0356              A 23522    	LEA	BC,IY+%56
005D8C C5                  A 23523    	PUSH	BC
005D8D CD 00 00 00         A 23524    	CALL	_memcpy
005D91 C1                  A 23525    	POP	BC
005D92 C1                  A 23526    	POP	BC
005D93 C1                  A 23527    	POP	BC
                           A 23528    ; 5025							fs->win[SZDIRE 
                           A 23529    .LINE 5025
                           A 23530    
005D94 DD31FA              A 23531    	LD	IY,(IX+%FFFFFFFA)
005D97 ED2357              A 23532    	LEA	HL,IY+%57
005D9A 362E                A 23533    	LD	(HL),%2E
005D9C DD07B8              A 23534    	LD	BC,(IX+%FFFFFFB8)
005D9F DD7EBB              A 23535    	LD	A,(IX+%FFFFFFBB)
005DA2 DD0FEE              A 23536    	LD	(IX+%FFFFFFEE),BC
005DA5 DD77F1              A 23537    	LD	(IX+%FFFFFFF1),A
                           A 23538    ; 5026							st_clust(fs, fs
                           A 23539    .LINE 5026
                           A 23540    
005DA8 DD4EF1              A 23541    	LD	C,(IX+%FFFFFFF1)
005DAB 0600                A 23542    	LD	B,%0
005DAD C5                  A 23543    	PUSH	BC
005DAE DD07EE              A 23544    	LD	BC,(IX+%FFFFFFEE)
005DB1 C5                  A 23545    	PUSH	BC
005DB2 ED0356              A 23546    	LEA	BC,IY+%56
005DB5 C5                  A 23547    	PUSH	BC
005DB6 DD07FA              A 23548    	LD	BC,(IX+%FFFFFFFA)
005DB9 C5                  A 23549    	PUSH	BC
005DBA CD 5C 18 00         A 23550    	CALL	_st_clust
005DBE C1                  A 23551    	POP	BC
005DBF C1                  A 23552    	POP	BC
005DC0 C1                  A 23553    	POP	BC
005DC1 C1                  A 23554    	POP	BC
                           A 23555    ; 5027							fs->wflag = 1;
                           A 23556    .LINE 5027
                           A 23557    
005DC2 DD31FA              A 23558    	LD	IY,(IX+%FFFFFFFA)
005DC5 FD360301            A 23559    	LD	(IY+%3),%1
                           A 23560    ; 5028						}
                           A 23561    ; 5029						res = dir_register(
                           A 23562    .LINE 5029
                           A 23563    
005DC9 ED65B1              A 23564    	PEA	IX+%FFFFFFB1
005DCC CD ED 21 00         A 23565    	CALL	_dir_register
005DD0 C1                  A 23566    	POP	BC
005DD1 DD2FFD              A 23567    	LD	(IX+%FFFFFFFD),HL
                           A 23568    ; 5030					}
                           A 23569    ; 5031				}
005DD4                     A 23570    L_1199:
                           A 23571    .LINE 5031
                           A 23572    
                           A 23573    ; 5032				if (res == FR_OK) {
                           A 23574    .LINE 5032
                           A 23575    
005DD4 01000000            A 23576    	LD	BC,0
005DD8 DD27FD              A 23577    	LD	HL,(IX+%FFFFFFFD)
005DDB B7                  A 23578    	OR	A,A
005DDC ED42                A 23579    	SBC	HL,BC
005DDE 20 5B               A 23580    	JR	NZ,L_1198
                           A 23581    ; 5033	#if FF_FS_EXFAT
                           A 23582    ; 5034					if (fs->fs_type == FS_E
                           A 23583    ; 5035						st_dword(fs->dirbuf
                           A 23584    ; 5036						st_dword(fs->dirbuf
                           A 23585    ; 5037						st_dword(fs->dirbuf
                           A 23586    ; 5038						st_dword(fs->dirbuf
                           A 23587    ; 5039						fs->dirbuf[XDIR_Gen
                           A 23588    ; 5040						fs->dirbuf[XDIR_Att
                           A 23589    ; 5041						res = store_xdir(&d
                           A 23590    ; 5042					} else
                           A 23591    ; 5043	#endif
                           A 23592    ; 5044					{
                           A 23593    ; 5045						st_dword(dj.dir + D
                           A 23594    .LINE 5045
                           A 23595    
005DE0 DD4EF5              A 23596    	LD	C,(IX+%FFFFFFF5)
005DE3 0600                A 23597    	LD	B,%0
005DE5 C5                  A 23598    	PUSH	BC
005DE6 DD07F2              A 23599    	LD	BC,(IX+%FFFFFFF2)
005DE9 C5                  A 23600    	PUSH	BC
005DEA DD31CC              A 23601    	LD	IY,(IX+%FFFFFFCC)
005DED ED0316              A 23602    	LEA	BC,IY+%16
005DF0 C5                  A 23603    	PUSH	BC
005DF1 CD 45 01 00         A 23604    	CALL	_st_dword
005DF5 C1                  A 23605    	POP	BC
005DF6 C1                  A 23606    	POP	BC
005DF7 C1                  A 23607    	POP	BC
                           A 23608    ; 5046						st_clust(fs, dj.dir
                           A 23609    .LINE 5046
                           A 23610    
005DF8 DD4EF9              A 23611    	LD	C,(IX+%FFFFFFF9)
005DFB 0600                A 23612    	LD	B,%0
005DFD C5                  A 23613    	PUSH	BC
005DFE DD07F6              A 23614    	LD	BC,(IX+%FFFFFFF6)
005E01 C5                  A 23615    	PUSH	BC
005E02 DD07CC              A 23616    	LD	BC,(IX+%FFFFFFCC)
005E05 C5                  A 23617    	PUSH	BC
005E06 DD07FA              A 23618    	LD	BC,(IX+%FFFFFFFA)
005E09 C5                  A 23619    	PUSH	BC
005E0A CD 5C 18 00         A 23620    	CALL	_st_clust
005E0E C1                  A 23621    	POP	BC
005E0F C1                  A 23622    	POP	BC
005E10 C1                  A 23623    	POP	BC
005E11 C1                  A 23624    	POP	BC
                           A 23625    ; 5047						dj.dir[DIR_Attr] = 
                           A 23626    .LINE 5047
                           A 23627    
005E12 DD31CC              A 23628    	LD	IY,(IX+%FFFFFFCC)
005E15 ED230B              A 23629    	LEA	HL,IY+%B
005E18 3610                A 23630    	LD	(HL),%10
                           A 23631    ; 5048						fs->wflag = 1;
                           A 23632    .LINE 5048
                           A 23633    
005E1A DD31FA              A 23634    	LD	IY,(IX+%FFFFFFFA)
005E1D FD360301            A 23635    	LD	(IY+%3),%1
                           A 23636    ; 5049					}
                           A 23637    ; 5050					if (res == FR_OK) {
                           A 23638    .LINE 5050
                           A 23639    
005E21 01000000            A 23640    	LD	BC,0
005E25 DD27FD              A 23641    	LD	HL,(IX+%FFFFFFFD)
005E28 B7                  A 23642    	OR	A,A
005E29 ED42                A 23643    	SBC	HL,BC
005E2B 20 26               A 23644    	JR	NZ,L_1202
                           A 23645    ; 5051						res = sync_fs(fs);
                           A 23646    .LINE 5051
                           A 23647    
005E2D DD07FA              A 23648    	LD	BC,(IX+%FFFFFFFA)
005E30 C5                  A 23649    	PUSH	BC
005E31 CD B3 04 00         A 23650    	CALL	_sync_fs
005E35 C1                  A 23651    	POP	BC
005E36 DD2FFD              A 23652    	LD	(IX+%FFFFFFFD),HL
                           A 23653    ; 5052					}
                           A 23654    ; 5053				} else {
                           A 23655    .LINE 5053
                           A 23656    
005E39 18 18               A 23657    	JR	L_1202
005E3B                     A 23658    L_1198:
                           A 23659    ; 5054					remove_chain(&sobj, dcl
                           A 23660    .LINE 5054
                           A 23661    
005E3B C5                  A 23662    	PUSH	BC
005E3C C5                  A 23663    	PUSH	BC
005E3D DD4EF9              A 23664    	LD	C,(IX+%FFFFFFF9)
005E40 0600                A 23665    	LD	B,%0
005E42 C5                  A 23666    	PUSH	BC
005E43 DD07F6              A 23667    	LD	BC,(IX+%FFFFFFF6)
005E46 C5                  A 23668    	PUSH	BC
005E47 ED65DF              A 23669    	PEA	IX+%FFFFFFDF
005E4A CD F4 0B 00         A 23670    	CALL	_remove_chain
005E4E C1                  A 23671    	POP	BC
005E4F C1                  A 23672    	POP	BC
005E50 C1                  A 23673    	POP	BC
005E51 C1                  A 23674    	POP	BC
005E52 C1                  A 23675    	POP	BC
                           A 23676    ; 5055				}
                           A 23677    ; 5056			}
005E53                     A 23678    L_1202:
                           A 23679    .LINE 5056
                           A 23680    
                           A 23681    ; 5057			FREE_NAMBUF();
                           A 23682    ; 5058		}
005E53                     A 23683    L_1204:
                           A 23684    .LINE 5058
                           A 23685    
                           A 23686    ; 5059	
                           A 23687    ; 5060		LEAVE_FF(fs, res);
                           A 23688    .LINE 5060
                           A 23689    
005E53 DD27FD              A 23690    	LD	HL,(IX+%FFFFFFFD)
                           A 23691    ; 5061	}
                           A 23692    .LINE 5061
                           A 23693    
005E56 DDF9                A 23694    	LD	SP,IX
005E58 DDE1                A 23695    	POP	IX
005E5A C9                  A 23696    	RET	
                           A 23697    
                           A 23698    
                           A 23699    ;**************************** _f_mkdir ********
                           A 23700    ;Name                         Addr/Register   S
                           A 23701    ;_memcpy                             IMPORT  --
                           A 23702    ;_memset                             IMPORT  --
                           A 23703    ;_get_fattime                        IMPORT  --
                           A 23704    ;lbuf                                IX-591    
                           A 23705    ;dj                                   IX-79    
                           A 23706    ;sobj                                 IX-33    
                           A 23707    ;pcl                                  IX-18    
                           A 23708    ;tm                                   IX-14    
                           A 23709    ;dcl                                  IX-10    
                           A 23710    ;fs                                    IX-6    
                           A 23711    ;res                                   IX-3    
                           A 23712    ;path                                  IX+6    
                           A 23713    
                           A 23714    
                           A 23715    ; Stack Frame Size: 600 (bytes)
                           A 23716    ;       Spill Code: -3 (instruction)
                           A 23717    
                           A 23718    
                           A 23719    .ENDFUNC "f_mkdir",5061,"_f_mkdir"
                           A 23720    ; 5062	
                           A 23721    ; 5063	
                           A 23722    ; 5064	
                           A 23723    ; 5065	
                           A 23724    ; 5066	/*-------------------------------------
                           A 23725    ; 5067	/* Rename a File/Directory             
                           A 23726    ; 5068	/*-------------------------------------
                           A 23727    ; 5069	
                           A 23728    ; 5070	FRESULT f_rename (
                           A 23729    ; 5071		const TCHAR* path_old,	/* Pointer 
                           A 23730    ; 5072		const TCHAR* path_new	/* Pointer 
                           A 23731    ; 5073	)
                           A 23732    ; 5074	{
005E5B                     A 23733    _f_rename:
                           A 23734    .DEFINE "_f_rename"
                           A 23735    
                           A 23736    .VALUE _f_rename
                           A 23737    
                           A 23738    .CLASS 2
                           A 23739    
                           A 23740    .TYPE 68
                           A 23741    
                           A 23742    .ENDEF
                           A 23743    
                           A 23744    .BEGFUNC "f_rename",5074,"_f_rename"
                           A 23745    
                           A 23746    .LINE 5074
                           A 23747    
                           A 23748    .DEFINE "path_old"
                           A 23749    
                           A 23750    .CLASS 65
                           A 23751    
                           A 23752    .VALUE 6
                           A 23753    
                           A 23754    .TYPE 194
                           A 23755    
                           A 23756    .ENDEF
                           A 23757    
                           A 23758    .DEFINE "path_new"
                           A 23759    
                           A 23760    .CLASS 65
                           A 23761    
                           A 23762    .VALUE 9
                           A 23763    
                           A 23764    .TYPE 194
                           A 23765    
                           A 23766    .ENDEF
                           A 23767    
                           A 23768    .DEFINE "res"
                           A 23769    
                           A 23770    .CLASS 65
                           A 23771    
                           A 23772    .VALUE -3
                           A 23773    
                           A 23774    .TYPE 4
                           A 23775    
                           A 23776    .ENDEF
                           A 23777    
                           A 23778    .DEFINE "fs"
                           A 23779    
                           A 23780    .CLASS 65
                           A 23781    
                           A 23782    .VALUE -6
                           A 23783    
                           A 23784    .TAG "NONAME0"
                           A 23785    
                           A 23786    .TYPE 40
                           A 23787    
                           A 23788    .ENDEF
                           A 23789    
                           A 23790    .DEFINE "dir"
                           A 23791    
                           A 23792    .CLASS 65
                           A 23793    
                           A 23794    .VALUE -9
                           A 23795    
                           A 23796    .TYPE 44
                           A 23797    
                           A 23798    .ENDEF
                           A 23799    
                           A 23800    .DEFINE "sect"
                           A 23801    
                           A 23802    .CLASS 65
                           A 23803    
                           A 23804    .VALUE -19
                           A 23805    
                           A 23806    .TYPE 15
                           A 23807    
                           A 23808    .ENDEF
                           A 23809    
                           A 23810    .DEFINE "buf"
                           A 23811    
                           A 23812    .CLASS 65
                           A 23813    
                           A 23814    .VALUE -51
                           A 23815    
                           A 23816    .DIM 32
                           A 23817    
                           A 23818    .TYPE 108
                           A 23819    
                           A 23820    .ENDEF
                           A 23821    
                           A 23822    .DEFINE "djo"
                           A 23823    
                           A 23824    .CLASS 65
                           A 23825    
                           A 23826    .VALUE -97
                           A 23827    
                           A 23828    .TAG "NONAME3"
                           A 23829    
                           A 23830    .TYPE 8
                           A 23831    
                           A 23832    .ENDEF
                           A 23833    
                           A 23834    .DEFINE "djn"
                           A 23835    
                           A 23836    .CLASS 65
                           A 23837    
                           A 23838    .VALUE -143
                           A 23839    
                           A 23840    .TAG "NONAME3"
                           A 23841    
                           A 23842    .TYPE 8
                           A 23843    
                           A 23844    .ENDEF
                           A 23845    
                           A 23846    .DEFINE "lbuf"
                           A 23847    
                           A 23848    .CLASS 65
                           A 23849    
                           A 23850    .VALUE -655
                           A 23851    
                           A 23852    .DIM 256
                           A 23853    
                           A 23854    .TYPE 109
                           A 23855    
                           A 23856    .ENDEF
                           A 23857    
005E5B DDE5                A 23858    	PUSH	IX
005E5D DD210000 00         A 23859    	LD	IX,0
005E62 DD39                A 23860    	ADD	IX,SP
005E64 216EFDFF            A 23861    	LD	HL,-658
005E68 39                  A 23862    	ADD	HL,SP
005E69 F9                  A 23863    	LD	SP,HL
                           A 23864    ; 5075		FRESULT res;
                           A 23865    ; 5076		DIR djo, djn;
                           A 23866    ; 5077		FATFS *fs;
                           A 23867    ; 5078		BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 :
                           A 23868    ; 5079		LBA_t sect;
                           A 23869    ; 5080		DEF_NAMBUF
                           A 23870    ; 5081	
                           A 23871    ; 5082	
                           A 23872    ; 5083		get_ldnumber(&path_new);			
                           A 23873    .LINE 5083
                           A 23874    
005E6A ED6509              A 23875    	PEA	IX+%9
005E6D CD 6C 30 00         A 23876    	CALL	_get_ldnumber
005E71 C1                  A 23877    	POP	BC
                           A 23878    ; 5084		res = mount_volume(&path_old, &fs, 
                           A 23879    .LINE 5084
                           A 23880    
005E72 01020000            A 23881    	LD	BC,2
005E76 C5                  A 23882    	PUSH	BC
005E77 ED65FA              A 23883    	PEA	IX+%FFFFFFFA
005E7A ED6506              A 23884    	PEA	IX+%6
005E7D CD A9 34 00         A 23885    	CALL	_mount_volume
005E81 C1                  A 23886    	POP	BC
005E82 C1                  A 23887    	POP	BC
005E83 C1                  A 23888    	POP	BC
005E84 DD2FFD              A 23889    	LD	(IX+%FFFFFFFD),HL
                           A 23890    ; 5085		if (res == FR_OK) {
                           A 23891    .LINE 5085
                           A 23892    
005E87 01000000            A 23893    	LD	BC,0
005E8B DD27FD              A 23894    	LD	HL,(IX+%FFFFFFFD)
005E8E B7                  A 23895    	OR	A,A
005E8F ED42                A 23896    	SBC	HL,BC
005E91 C2 08 61 00         A 23897    	JR	NZ,L_1232
                           A 23898    ; 5086			djo.obj.fs = fs;
                           A 23899    .LINE 5086
                           A 23900    
005E95 DD07FA              A 23901    	LD	BC,(IX+%FFFFFFFA)
005E98 DD0F9F              A 23902    	LD	(IX+%FFFFFF9F),BC
                           A 23903    ; 5087			INIT_NAMBUF(fs);
                           A 23904    .LINE 5087
                           A 23905    
005E9B DDE5E1              A 23906    	LD	HL,IX
005E9E 0171FDFF            A 23907    	LD	BC,-655
005EA2 09                  A 23908    	ADD	HL,BC
005EA3 DD31FA              A 23909    	LD	IY,(IX+%FFFFFFFA)
005EA6 FD2F0B              A 23910    	LD	(IY+%B),HL
                           A 23911    ; 5088			res = follow_path(&djo, path_ol
                           A 23912    .LINE 5088
                           A 23913    
005EA9 DD0706              A 23914    	LD	BC,(IX+%6)
005EAC C5                  A 23915    	PUSH	BC
005EAD ED659F              A 23916    	PEA	IX+%FFFFFF9F
005EB0 CD DA 2E 00         A 23917    	CALL	_follow_path
005EB4 C1                  A 23918    	POP	BC
005EB5 C1                  A 23919    	POP	BC
005EB6 DD2FFD              A 23920    	LD	(IX+%FFFFFFFD),HL
                           A 23921    ; 5089			if (res == FR_OK && (djo.fn[NSF
                           A 23922    .LINE 5089
                           A 23923    
005EB9 01000000            A 23924    	LD	BC,0
005EBD DD27FD              A 23925    	LD	HL,(IX+%FFFFFFFD)
005EC0 B7                  A 23926    	OR	A,A
005EC1 ED42                A 23927    	SBC	HL,BC
005EC3 20 11               A 23928    	JR	NZ,L_1229
005EC5 ED55BD              A 23929    	LEA	IY,IX+%FFFFFFBD
005EC8 FD7E0B              A 23930    	LD	A,(IY+%B)
005ECB E6A0                A 23931    	AND	A,%A0
005ECD 28 07               A 23932    	JR	Z,L_1229
005ECF 01060000            A 23933    	LD	BC,6
005ED3 DD0FFD              A 23934    	LD	(IX+%FFFFFFFD),BC
005ED6                     A 23935    L_1229:
                           A 23936    ; 5090	#if FF_FS_LOCK != 0
                           A 23937    ; 5091			if (res == FR_OK) {
                           A 23938    ; 5092				res = chk_lock(&djo, 2);
                           A 23939    ; 5093			}
                           A 23940    ; 5094	#endif
                           A 23941    ; 5095			if (res == FR_OK) {				
                           A 23942    .LINE 5095
                           A 23943    
005ED6 01000000            A 23944    	LD	BC,0
005EDA DD27FD              A 23945    	LD	HL,(IX+%FFFFFFFD)
005EDD B7                  A 23946    	OR	A,A
005EDE ED42                A 23947    	SBC	HL,BC
005EE0 C2 08 61 00         A 23948    	JR	NZ,L_1230
                           A 23949    ; 5096	#if FF_FS_EXFAT
                           A 23950    ; 5097				if (fs->fs_type == FS_EXFAT
                           A 23951    ; 5098					BYTE nf, nn;
                           A 23952    ; 5099					WORD nh;
                           A 23953    ; 5100	
                           A 23954    ; 5101					memcpy(buf, fs->dirbuf,
                           A 23955    ; 5102					memcpy(&djn, &djo, size
                           A 23956    ; 5103					res = follow_path(&djn,
                           A 23957    ; 5104					if (res == FR_OK) {		
                           A 23958    ; 5105						res = (djn.obj.sclu
                           A 23959    ; 5106					}
                           A 23960    ; 5107					if (res == FR_NO_FILE) 
                           A 23961    ; 5108						res = dir_register(
                           A 23962    ; 5109						if (res == FR_OK) {
                           A 23963    ; 5110							nf = fs->dirbuf
                           A 23964    ; 5111							nh = ld_word(fs
                           A 23965    ; 5112							memcpy(fs->dirb
                           A 23966    ; 5113							fs->dirbuf[XDIR
                           A 23967    ; 5114							st_word(fs->dir
                           A 23968    ; 5115							if (!(fs->dirbu
                           A 23969    ; 5116	/* Start of critical section where an i
                           A 23970    ; 5117							res = store_xdi
                           A 23971    ; 5118						}
                           A 23972    ; 5119					}
                           A 23973    ; 5120				} else
                           A 23974    ; 5121	#endif
                           A 23975    ; 5122				{	/* At FAT/FAT32 volume 
                           A 23976    ; 5123					memcpy(buf, djo.dir, SZ
                           A 23977    .LINE 5123
                           A 23978    
005EE4 01200000            A 23979    	LD	BC,32
005EE8 C5                  A 23980    	PUSH	BC
005EE9 DD07BA              A 23981    	LD	BC,(IX+%FFFFFFBA)
005EEC C5                  A 23982    	PUSH	BC
005EED ED65CD              A 23983    	PEA	IX+%FFFFFFCD
005EF0 CD 00 00 00         A 23984    	CALL	_memcpy
005EF4 C1                  A 23985    	POP	BC
005EF5 C1                  A 23986    	POP	BC
005EF6 C1                  A 23987    	POP	BC
                           A 23988    ; 5124					memcpy(&djn, &djo, size
                           A 23989    .LINE 5124
                           A 23990    
005EF7 012E0000            A 23991    	LD	BC,46
005EFB C5                  A 23992    	PUSH	BC
005EFC ED659F              A 23993    	PEA	IX+%FFFFFF9F
005EFF DDE5E1              A 23994    	LD	HL,IX
005F02 0171FFFF            A 23995    	LD	BC,-143
005F06 09                  A 23996    	ADD	HL,BC
005F07 E5C1                A 23997    	LD	BC,HL
005F09 C5                  A 23998    	PUSH	BC
005F0A CD 00 00 00         A 23999    	CALL	_memcpy
005F0E C1                  A 24000    	POP	BC
005F0F C1                  A 24001    	POP	BC
005F10 C1                  A 24002    	POP	BC
                           A 24003    ; 5125					res = follow_path(&djn,
                           A 24004    .LINE 5125
                           A 24005    
005F11 DD0709              A 24006    	LD	BC,(IX+%9)
005F14 C5                  A 24007    	PUSH	BC
005F15 DDE5E1              A 24008    	LD	HL,IX
005F18 0171FFFF            A 24009    	LD	BC,-143
005F1C 09                  A 24010    	ADD	HL,BC
005F1D E5C1                A 24011    	LD	BC,HL
005F1F C5                  A 24012    	PUSH	BC
005F20 CD DA 2E 00         A 24013    	CALL	_follow_path
005F24 C1                  A 24014    	POP	BC
005F25 C1                  A 24015    	POP	BC
005F26 DD2FFD              A 24016    	LD	(IX+%FFFFFFFD),HL
                           A 24017    ; 5126					if (res == FR_OK) {		
                           A 24018    .LINE 5126
                           A 24019    
005F29 01000000            A 24020    	LD	BC,0
005F2D DD27FD              A 24021    	LD	HL,(IX+%FFFFFFFD)
005F30 B7                  A 24022    	OR	A,A
005F31 ED42                A 24023    	SBC	HL,BC
005F33 20 44               A 24024    	JR	NZ,L_1224
                           A 24025    ; 5127						res = (djn.obj.sclu
                           A 24026    .LINE 5127
                           A 24027    
005F35 FD2178FF FF         A 24028    	LD	IY,-136
005F3A DDE5C1              A 24029    	LD	BC,IX
005F3D FD09                A 24030    	ADD	IY,BC
005F3F FD2700              A 24031    	LD	HL,(IY)
005F42 FD5E03              A 24032    	LD	E,(IY+%3)
005F45 DD07A6              A 24033    	LD	BC,(IX+%FFFFFFA6)
005F48 DD7EA9              A 24034    	LD	A,(IX+%FFFFFFA9)
005F4B CD 00 00 00         A 24035    	CALL	__lcmpu
005F4F 20 1B               A 24036    	JR	NZ,L_1211
005F51 DD2780              A 24037    	LD	HL,(IX+%FFFFFF80)
005F54 DD5E83              A 24038    	LD	E,(IX+%FFFFFF83)
005F57 DD07AE              A 24039    	LD	BC,(IX+%FFFFFFAE)
005F5A DD7EB1              A 24040    	LD	A,(IX+%FFFFFFB1)
005F5D CD 00 00 00         A 24041    	CALL	__lcmpu
005F61 20 09               A 24042    	JR	NZ,L_1211
005F63 01040000            A 24043    	LD	BC,4
005F67 DD0FF4              A 24044    	LD	(IX+%FFFFFFF4),BC
005F6A 18 07               A 24045    	JR	L_1212
005F6C                     A 24046    L_1211:
005F6C 01080000            A 24047    	LD	BC,8
005F70 DD0FF4              A 24048    	LD	(IX+%FFFFFFF4),BC
005F73                     A 24049    L_1212:
005F73 DD07F4              A 24050    	LD	BC,(IX+%FFFFFFF4)
005F76 DD0FFD              A 24051    	LD	(IX+%FFFFFFFD),BC
                           A 24052    ; 5128					}
005F79                     A 24053    L_1224:
                           A 24054    .LINE 5128
                           A 24055    
                           A 24056    ; 5129					if (res == FR_NO_FILE) 
                           A 24057    .LINE 5129
                           A 24058    
005F79 01040000            A 24059    	LD	BC,4
005F7D DD27FD              A 24060    	LD	HL,(IX+%FFFFFFFD)
005F80 B7                  A 24061    	OR	A,A
005F81 ED42                A 24062    	SBC	HL,BC
005F83 C2 D9 60 00         A 24063    	JR	NZ,L_1227
                           A 24064    ; 5130						res = dir_register(
                           A 24065    .LINE 5130
                           A 24066    
005F87 DDE5E1              A 24067    	LD	HL,IX
005F8A 0171FFFF            A 24068    	LD	BC,-143
005F8E 09                  A 24069    	ADD	HL,BC
005F8F E5C1                A 24070    	LD	BC,HL
005F91 C5                  A 24071    	PUSH	BC
005F92 CD ED 21 00         A 24072    	CALL	_dir_register
005F96 C1                  A 24073    	POP	BC
005F97 DD2FFD              A 24074    	LD	(IX+%FFFFFFFD),HL
                           A 24075    ; 5131						if (res == FR_OK) {
                           A 24076    .LINE 5131
                           A 24077    
005F9A 01000000            A 24078    	LD	BC,0
005F9E DD27FD              A 24079    	LD	HL,(IX+%FFFFFFFD)
005FA1 B7                  A 24080    	OR	A,A
005FA2 ED42                A 24081    	SBC	HL,BC
005FA4 C2 D9 60 00         A 24082    	JR	NZ,L_1227
                           A 24083    ; 5132							dir = djn.dir;	
                           A 24084    .LINE 5132
                           A 24085    
005FA8 DD078C              A 24086    	LD	BC,(IX+%FFFFFF8C)
005FAB DD0FF7              A 24087    	LD	(IX+%FFFFFFF7),BC
                           A 24088    ; 5133							memcpy(dir + 13
                           A 24089    .LINE 5133
                           A 24090    
005FAE 01130000            A 24091    	LD	BC,19
005FB2 C5                  A 24092    	PUSH	BC
005FB3 ED02DA              A 24093    	LEA	BC,IX+%FFFFFFDA
005FB6 C5                  A 24094    	PUSH	BC
005FB7 DD31F7              A 24095    	LD	IY,(IX+%FFFFFFF7)
005FBA ED030D              A 24096    	LEA	BC,IY+%D
005FBD C5                  A 24097    	PUSH	BC
005FBE CD 00 00 00         A 24098    	CALL	_memcpy
005FC2 C1                  A 24099    	POP	BC
005FC3 C1                  A 24100    	POP	BC
005FC4 C1                  A 24101    	POP	BC
                           A 24102    ; 5134							dir[DIR_Attr] =
                           A 24103    .LINE 5134
                           A 24104    
005FC5 DD31F7              A 24105    	LD	IY,(IX+%FFFFFFF7)
005FC8 ED030B              A 24106    	LEA	BC,IY+%B
005FCB 216EFDFF            A 24107    	LD	HL,-658
005FCF DDE5D1              A 24108    	LD	DE,IX
005FD2 19                  A 24109    	ADD	HL,DE
005FD3 ED0F                A 24110    	LD	(HL),BC
005FD5 ED55CD              A 24111    	LEA	IY,IX+%FFFFFFCD
005FD8 216EFDFF            A 24112    	LD	HL,-658
005FDC DDE5C1              A 24113    	LD	BC,IX
005FDF 09                  A 24114    	ADD	HL,BC
005FE0 ED27                A 24115    	LD	HL,(HL)
005FE2 FD7E0B              A 24116    	LD	A,(IY+%B)
005FE5 77                  A 24117    	LD	(HL),A
                           A 24118    ; 5135							if (!(dir[DIR_A
                           A 24119    .LINE 5135
                           A 24120    
005FE6 216EFDFF            A 24121    	LD	HL,-658
005FEA DDE5C1              A 24122    	LD	BC,IX
005FED 09                  A 24123    	ADD	HL,BC
005FEE ED27                A 24124    	LD	HL,(HL)
005FF0 7E                  A 24125    	LD	A,(HL)
005FF1 E610                A 24126    	AND	A,%10
005FF3 20 0D               A 24127    	JR	NZ,L_1215
005FF5 DD31F7              A 24128    	LD	IY,(IX+%FFFFFFF7)
005FF8 ED230B              A 24129    	LEA	HL,IY+%B
005FFB 7E                  A 24130    	LD	A,(HL)
005FFC CBEF                A 24131    	SET	%5,A
005FFE ED230B              A 24132    	LEA	HL,IY+%B
006001 77                  A 24133    	LD	(HL),A
006002                     A 24134    L_1215:
                           A 24135    ; 5136							fs->wflag = 1;
                           A 24136    .LINE 5136
                           A 24137    
006002 DD31FA              A 24138    	LD	IY,(IX+%FFFFFFFA)
006005 FD360301            A 24139    	LD	(IY+%3),%1
                           A 24140    ; 5137							if ((dir[DIR_At
                           A 24141    .LINE 5137
                           A 24142    
006009 DD31F7              A 24143    	LD	IY,(IX+%FFFFFFF7)
00600C FD7E0B              A 24144    	LD	A,(IY+%B)
00600F E610                A 24145    	AND	A,%10
006011 CA D9 60 00         A 24146    	JR	Z,L_1227
006015 DDE5E1              A 24147    	LD	HL,IX
006018 0171FFFF            A 24148    	LD	BC,-143
00601C 09                  A 24149    	ADD	HL,BC
00601D DD2FF1              A 24150    	LD	(IX+%FFFFFFF1),HL
006020 DD27A6              A 24151    	LD	HL,(IX+%FFFFFFA6)
006023 DD5EA9              A 24152    	LD	E,(IX+%FFFFFFA9)
006026 DD31F1              A 24153    	LD	IY,(IX+%FFFFFFF1)
006029 FD0707              A 24154    	LD	BC,(IY+%7)
00602C FD7E0A              A 24155    	LD	A,(IY+%A)
00602F CD 00 00 00         A 24156    	CALL	__lcmpu
006033 CA D9 60 00         A 24157    	JR	Z,L_1227
                           A 24158    ; 5138								sect = clst
                           A 24159    .LINE 5138
                           A 24160    
006037 DD07F7              A 24161    	LD	BC,(IX+%FFFFFFF7)
00603A C5                  A 24162    	PUSH	BC
00603B DD07FA              A 24163    	LD	BC,(IX+%FFFFFFFA)
00603E C5                  A 24164    	PUSH	BC
00603F CD EE 17 00         A 24165    	CALL	_ld_clust
006043 C1                  A 24166    	POP	BC
006044 C1                  A 24167    	POP	BC
006045 4B                  A 24168    	LD	C,E
006046 0600                A 24169    	LD	B,%0
006048 C5                  A 24170    	PUSH	BC
006049 E5                  A 24171    	PUSH	HL
00604A DD07FA              A 24172    	LD	BC,(IX+%FFFFFFFA)
00604D C5                  A 24173    	PUSH	BC
00604E CD F9 05 00         A 24174    	CALL	_clst2sect
006052 C1                  A 24175    	POP	BC
006053 C1                  A 24176    	POP	BC
006054 C1                  A 24177    	POP	BC
006055 DD2FED              A 24178    	LD	(IX+%FFFFFFED),HL
006058 DD73F0              A 24179    	LD	(IX+%FFFFFFF0),E
                           A 24180    ; 5139								if (sect ==
                           A 24181    .LINE 5139
                           A 24182    
00605B DD27ED              A 24183    	LD	HL,(IX+%FFFFFFED)
00605E DD5EF0              A 24184    	LD	E,(IX+%FFFFFFF0)
006061 01000000            A 24185    	LD	BC,0
006065 AF                  A 24186    	XOR	A,A
006066 CD 00 00 00         A 24187    	CALL	__lcmpu
00606A 20 09               A 24188    	JR	NZ,L_1220
                           A 24189    ; 5140									res = F
                           A 24190    .LINE 5140
                           A 24191    
00606C 01020000            A 24192    	LD	BC,2
006070 DD0FFD              A 24193    	LD	(IX+%FFFFFFFD),BC
                           A 24194    ; 5141								} else {
                           A 24195    .LINE 5141
                           A 24196    
006073 18 64               A 24197    	JR	L_1227
006075                     A 24198    L_1220:
                           A 24199    ; 5142	/* Start of critical section where an i
                           A 24200    ; 5143									res = m
                           A 24201    .LINE 5143
                           A 24202    
006075 DD4EF0              A 24203    	LD	C,(IX+%FFFFFFF0)
006078 0600                A 24204    	LD	B,%0
00607A C5                  A 24205    	PUSH	BC
00607B DD07ED              A 24206    	LD	BC,(IX+%FFFFFFED)
00607E C5                  A 24207    	PUSH	BC
00607F DD07FA              A 24208    	LD	BC,(IX+%FFFFFFFA)
006082 C5                  A 24209    	PUSH	BC
006083 CD 1E 04 00         A 24210    	CALL	_move_window
006087 C1                  A 24211    	POP	BC
006088 C1                  A 24212    	POP	BC
006089 C1                  A 24213    	POP	BC
00608A DD2FFD              A 24214    	LD	(IX+%FFFFFFFD),HL
                           A 24215    ; 5144									dir = f
                           A 24216    .LINE 5144
                           A 24217    
00608D DD31FA              A 24218    	LD	IY,(IX+%FFFFFFFA)
006090 ED3356              A 24219    	LEA	IY,IY+%56
006093 DD3EF7              A 24220    	LD	(IX+%FFFFFFF7),IY
                           A 24221    ; 5145									if (res
                           A 24222    .LINE 5145
                           A 24223    
006096 01000000            A 24224    	LD	BC,0
00609A DD27FD              A 24225    	LD	HL,(IX+%FFFFFFFD)
00609D B7                  A 24226    	OR	A,A
00609E ED42                A 24227    	SBC	HL,BC
0060A0 20 37               A 24228    	JR	NZ,L_1227
0060A2 DD27F7              A 24229    	LD	HL,(IX+%FFFFFFF7)
0060A5 23                  A 24230    	INC	HL
0060A6 7E                  A 24231    	LD	A,(HL)
0060A7 B7ED62              A 24232    	UEXT	HL
0060AA 6F                  A 24233    	LD	L,A
0060AB 012E0000            A 24234    	LD	BC,46
0060AF B7                  A 24235    	OR	A,A
0060B0 ED42                A 24236    	SBC	HL,BC
0060B2 20 25               A 24237    	JR	NZ,L_1227
                           A 24238    ; 5146										st_
                           A 24239    .LINE 5146
                           A 24240    
0060B4 DD31F1              A 24241    	LD	IY,(IX+%FFFFFFF1)
0060B7 FD0707              A 24242    	LD	BC,(IY+%7)
0060BA FD7E0A              A 24243    	LD	A,(IY+%A)
0060BD 2600                A 24244    	LD	H,%0
0060BF 6F                  A 24245    	LD	L,A
0060C0 E5                  A 24246    	PUSH	HL
0060C1 C5                  A 24247    	PUSH	BC
0060C2 DD07F7              A 24248    	LD	BC,(IX+%FFFFFFF7)
0060C5 C5                  A 24249    	PUSH	BC
0060C6 DD07FA              A 24250    	LD	BC,(IX+%FFFFFFFA)
0060C9 C5                  A 24251    	PUSH	BC
0060CA CD 5C 18 00         A 24252    	CALL	_st_clust
0060CE C1                  A 24253    	POP	BC
0060CF C1                  A 24254    	POP	BC
0060D0 C1                  A 24255    	POP	BC
0060D1 C1                  A 24256    	POP	BC
                           A 24257    ; 5147										fs-
                           A 24258    .LINE 5147
                           A 24259    
0060D2 DD31FA              A 24260    	LD	IY,(IX+%FFFFFFFA)
0060D5 FD360301            A 24261    	LD	(IY+%3),%1
                           A 24262    ; 5148									}
                           A 24263    ; 5149								}
                           A 24264    ; 5150							}
                           A 24265    ; 5151						}
                           A 24266    ; 5152					}
                           A 24267    ; 5153				}
0060D9                     A 24268    L_1227:
                           A 24269    .LINE 5153
                           A 24270    
                           A 24271    ; 5154				if (res == FR_OK) {
                           A 24272    .LINE 5154
                           A 24273    
0060D9 01000000            A 24274    	LD	BC,0
0060DD DD27FD              A 24275    	LD	HL,(IX+%FFFFFFFD)
0060E0 B7                  A 24276    	OR	A,A
0060E1 ED42                A 24277    	SBC	HL,BC
0060E3 20 23               A 24278    	JR	NZ,L_1230
                           A 24279    ; 5155					res = dir_remove(&djo);
                           A 24280    .LINE 5155
                           A 24281    
0060E5 ED659F              A 24282    	PEA	IX+%FFFFFF9F
0060E8 CD 90 24 00         A 24283    	CALL	_dir_remove
0060EC C1                  A 24284    	POP	BC
0060ED DD2FFD              A 24285    	LD	(IX+%FFFFFFFD),HL
                           A 24286    ; 5156					if (res == FR_OK) {
                           A 24287    .LINE 5156
                           A 24288    
0060F0 01000000            A 24289    	LD	BC,0
0060F4 DD27FD              A 24290    	LD	HL,(IX+%FFFFFFFD)
0060F7 B7                  A 24291    	OR	A,A
0060F8 ED42                A 24292    	SBC	HL,BC
0060FA 20 0C               A 24293    	JR	NZ,L_1230
                           A 24294    ; 5157						res = sync_fs(fs);
                           A 24295    .LINE 5157
                           A 24296    
0060FC DD07FA              A 24297    	LD	BC,(IX+%FFFFFFFA)
0060FF C5                  A 24298    	PUSH	BC
006100 CD B3 04 00         A 24299    	CALL	_sync_fs
006104 C1                  A 24300    	POP	BC
006105 DD2FFD              A 24301    	LD	(IX+%FFFFFFFD),HL
                           A 24302    ; 5158					}
                           A 24303    ; 5159				}
                           A 24304    ; 5160	/* End of the critical section */
                           A 24305    ; 5161			}
006108                     A 24306    L_1230:
                           A 24307    .LINE 5161
                           A 24308    
                           A 24309    ; 5162			FREE_NAMBUF();
                           A 24310    ; 5163		}
006108                     A 24311    L_1232:
                           A 24312    .LINE 5163
                           A 24313    
                           A 24314    ; 5164	
                           A 24315    ; 5165		LEAVE_FF(fs, res);
                           A 24316    .LINE 5165
                           A 24317    
006108 DD27FD              A 24318    	LD	HL,(IX+%FFFFFFFD)
                           A 24319    ; 5166	}
                           A 24320    .LINE 5166
                           A 24321    
00610B DDF9                A 24322    	LD	SP,IX
00610D DDE1                A 24323    	POP	IX
00610F C9                  A 24324    	RET	
                           A 24325    
                           A 24326    
                           A 24327    ;**************************** _f_rename *******
                           A 24328    ;Name                         Addr/Register   S
                           A 24329    ;_memcpy                             IMPORT  --
                           A 24330    ;lbuf                                IX-655    
                           A 24331    ;djn                                 IX-143    
                           A 24332    ;djo                                  IX-97    
                           A 24333    ;buf                                  IX-51    
                           A 24334    ;sect                                 IX-19    
                           A 24335    ;G_86                                 IX-15    
                           A 24336    ;temp1209                             IX-12    
                           A 24337    ;dir                                   IX-9    
                           A 24338    ;fs                                    IX-6    
                           A 24339    ;res                                   IX-3    
                           A 24340    ;path_new                              IX+9    
                           A 24341    ;path_old                              IX+6    
                           A 24342    
                           A 24343    
                           A 24344    ; Stack Frame Size: 670 (bytes)
                           A 24345    ;       Spill Code: -3 (instruction)
                           A 24346    
                           A 24347    
                           A 24348    .ENDFUNC "f_rename",5166,"_f_rename"
                           A 24349    ; 5167	
                           A 24350    ; 5168	#endif /* !FF_FS_READONLY */
                           A 24351    ; 5169	#endif /* FF_FS_MINIMIZE == 0 */
                           A 24352    ; 5170	#endif /* FF_FS_MINIMIZE <= 1 */
                           A 24353    ; 5171	#endif /* FF_FS_MINIMIZE <= 2 */
                           A 24354    ; 5172	
                           A 24355    ; 5173	
                           A 24356    ; 5174	
                           A 24357    ; 5175	#if FF_USE_CHMOD && !FF_FS_READONLY
                           A 24358    ; 5176	/*-------------------------------------
                           A 24359    ; 5177	/* Change Attribute                    
                           A 24360    ; 5178	/*-------------------------------------
                           A 24361    ; 5179	
                           A 24362    ; 5180	FRESULT f_chmod (
                           A 24363    ; 5181		const TCHAR* path,	/* Pointer to t
                           A 24364    ; 5182		BYTE attr,			/* Attribute bi
                           A 24365    ; 5183		BYTE mask			/* Attribute ma
                           A 24366    ; 5184	)
                           A 24367    ; 5185	{
                           A 24368    ; 5186		FRESULT res;
                           A 24369    ; 5187		DIR dj;
                           A 24370    ; 5188		FATFS *fs;
                           A 24371    ; 5189		DEF_NAMBUF
                           A 24372    ; 5190	
                           A 24373    ; 5191	
                           A 24374    ; 5192		res = mount_volume(&path, &fs, FA_W
                           A 24375    ; 5193		if (res == FR_OK) {
                           A 24376    ; 5194			dj.obj.fs = fs;
                           A 24377    ; 5195			INIT_NAMBUF(fs);
                           A 24378    ; 5196			res = follow_path(&dj, path);	
                           A 24379    ; 5197			if (res == FR_OK && (dj.fn[NSFL
                           A 24380    ; 5198			if (res == FR_OK) {
                           A 24381    ; 5199				mask &= AM_RDO|AM_HID|AM_SY
                           A 24382    ; 5200	#if FF_FS_EXFAT
                           A 24383    ; 5201				if (fs->fs_type == FS_EXFAT
                           A 24384    ; 5202					fs->dirbuf[XDIR_Attr] =
                           A 24385    ; 5203					res = store_xdir(&dj);
                           A 24386    ; 5204				} else
                           A 24387    ; 5205	#endif
                           A 24388    ; 5206				{
                           A 24389    ; 5207					dj.dir[DIR_Attr] = (att
                           A 24390    ; 5208					fs->wflag = 1;
                           A 24391    ; 5209				}
                           A 24392    ; 5210				if (res == FR_OK) {
                           A 24393    ; 5211					res = sync_fs(fs);
                           A 24394    ; 5212				}
                           A 24395    ; 5213			}
                           A 24396    ; 5214			FREE_NAMBUF();
                           A 24397    ; 5215		}
                           A 24398    ; 5216	
                           A 24399    ; 5217		LEAVE_FF(fs, res);
                           A 24400    ; 5218	}
                           A 24401    ; 5219	
                           A 24402    ; 5220	
                           A 24403    ; 5221	
                           A 24404    ; 5222	
                           A 24405    ; 5223	/*-------------------------------------
                           A 24406    ; 5224	/* Change Timestamp                    
                           A 24407    ; 5225	/*-------------------------------------
                           A 24408    ; 5226	
                           A 24409    ; 5227	FRESULT f_utime (
                           A 24410    ; 5228		const TCHAR* path,	/* Pointer to t
                           A 24411    ; 5229		const FILINFO* fno	/* Pointer to t
                           A 24412    ; 5230	)
                           A 24413    ; 5231	{
                           A 24414    ; 5232		FRESULT res;
                           A 24415    ; 5233		DIR dj;
                           A 24416    ; 5234		FATFS *fs;
                           A 24417    ; 5235		DEF_NAMBUF
                           A 24418    ; 5236	
                           A 24419    ; 5237	
                           A 24420    ; 5238		res = mount_volume(&path, &fs, FA_W
                           A 24421    ; 5239		if (res == FR_OK) {
                           A 24422    ; 5240			dj.obj.fs = fs;
                           A 24423    ; 5241			INIT_NAMBUF(fs);
                           A 24424    ; 5242			res = follow_path(&dj, path);	
                           A 24425    ; 5243			if (res == FR_OK && (dj.fn[NSFL
                           A 24426    ; 5244			if (res == FR_OK) {
                           A 24427    ; 5245	#if FF_FS_EXFAT
                           A 24428    ; 5246				if (fs->fs_type == FS_EXFAT
                           A 24429    ; 5247					st_dword(fs->dirbuf + X
                           A 24430    ; 5248					res = store_xdir(&dj);
                           A 24431    ; 5249				} else
                           A 24432    ; 5250	#endif
                           A 24433    ; 5251				{
                           A 24434    ; 5252					st_dword(dj.dir + DIR_M
                           A 24435    ; 5253					fs->wflag = 1;
                           A 24436    ; 5254				}
                           A 24437    ; 5255				if (res == FR_OK) {
                           A 24438    ; 5256					res = sync_fs(fs);
                           A 24439    ; 5257				}
                           A 24440    ; 5258			}
                           A 24441    ; 5259			FREE_NAMBUF();
                           A 24442    ; 5260		}
                           A 24443    ; 5261	
                           A 24444    ; 5262		LEAVE_FF(fs, res);
                           A 24445    ; 5263	}
                           A 24446    ; 5264	
                           A 24447    ; 5265	#endif	/* FF_USE_CHMOD && !FF_FS_READO
                           A 24448    ; 5266	
                           A 24449    ; 5267	
                           A 24450    ; 5268	
                           A 24451    ; 5269	#if FF_USE_LABEL
                           A 24452    ; 5270	/*-------------------------------------
                           A 24453    ; 5271	/* Get Volume Label                    
                           A 24454    ; 5272	/*-------------------------------------
                           A 24455    ; 5273	
                           A 24456    ; 5274	FRESULT f_getlabel (
                           A 24457    ; 5275		const TCHAR* path,	/* Logical driv
                           A 24458    ; 5276		TCHAR* label,		/* Buffer to st
                           A 24459    ; 5277		DWORD* vsn			/* Variable to 
                           A 24460    ; 5278	)
                           A 24461    ; 5279	{
006110                     A 24462    _f_getlabel:
                           A 24463    .DEFINE "_f_getlabel"
                           A 24464    
                           A 24465    .VALUE _f_getlabel
                           A 24466    
                           A 24467    .CLASS 2
                           A 24468    
                           A 24469    .TYPE 68
                           A 24470    
                           A 24471    .ENDEF
                           A 24472    
                           A 24473    .BEGFUNC "f_getlabel",5279,"_f_getlabel"
                           A 24474    
                           A 24475    .LINE 5279
                           A 24476    
                           A 24477    .DEFINE "path"
                           A 24478    
                           A 24479    .CLASS 65
                           A 24480    
                           A 24481    .VALUE 6
                           A 24482    
                           A 24483    .TYPE 194
                           A 24484    
                           A 24485    .ENDEF
                           A 24486    
                           A 24487    .DEFINE "label"
                           A 24488    
                           A 24489    .CLASS 65
                           A 24490    
                           A 24491    .VALUE 9
                           A 24492    
                           A 24493    .TYPE 34
                           A 24494    
                           A 24495    .ENDEF
                           A 24496    
                           A 24497    .DEFINE "vsn"
                           A 24498    
                           A 24499    .CLASS 65
                           A 24500    
                           A 24501    .VALUE 12
                           A 24502    
                           A 24503    .TYPE 47
                           A 24504    
                           A 24505    .ENDEF
                           A 24506    
                           A 24507    .DEFINE "di"
                           A 24508    
                           A 24509    .CLASS 65
                           A 24510    
                           A 24511    .VALUE -3
                           A 24512    
                           A 24513    .TYPE 14
                           A 24514    
                           A 24515    .ENDEF
                           A 24516    
                           A 24517    .DEFINE "res"
                           A 24518    
                           A 24519    .CLASS 65
                           A 24520    
                           A 24521    .VALUE -6
                           A 24522    
                           A 24523    .TYPE 4
                           A 24524    
                           A 24525    .ENDEF
                           A 24526    
                           A 24527    .DEFINE "fs"
                           A 24528    
                           A 24529    .CLASS 65
                           A 24530    
                           A 24531    .VALUE -9
                           A 24532    
                           A 24533    .TAG "NONAME0"
                           A 24534    
                           A 24535    .TYPE 40
                           A 24536    
                           A 24537    .ENDEF
                           A 24538    
                           A 24539    .DEFINE "si"
                           A 24540    
                           A 24541    .CLASS 65
                           A 24542    
                           A 24543    .VALUE -12
                           A 24544    
                           A 24545    .TYPE 14
                           A 24546    
                           A 24547    .ENDEF
                           A 24548    
                           A 24549    .DEFINE "wc"
                           A 24550    
                           A 24551    .CLASS 65
                           A 24552    
                           A 24553    .VALUE -14
                           A 24554    
                           A 24555    .TYPE 13
                           A 24556    
                           A 24557    .ENDEF
                           A 24558    
                           A 24559    .DEFINE "dj"
                           A 24560    
                           A 24561    .CLASS 65
                           A 24562    
                           A 24563    .VALUE -60
                           A 24564    
                           A 24565    .TAG "NONAME3"
                           A 24566    
                           A 24567    .TYPE 8
                           A 24568    
                           A 24569    .ENDEF
                           A 24570    
006110 DDE5                A 24571    	PUSH	IX
006112 DD210000 00         A 24572    	LD	IX,0
006117 DD39                A 24573    	ADD	IX,SP
006119 ED22C1              A 24574    	LEA	HL,IX+%FFFFFFC1
00611C F9                  A 24575    	LD	SP,HL
                           A 24576    ; 5280		FRESULT res;
                           A 24577    ; 5281		DIR dj;
                           A 24578    ; 5282		FATFS *fs;
                           A 24579    ; 5283		UINT si, di;
                           A 24580    ; 5284		WCHAR wc;
                           A 24581    ; 5285	
                           A 24582    ; 5286		/* Get logical drive */
                           A 24583    ; 5287		res = mount_volume(&path, &fs, 0);
                           A 24584    .LINE 5287
                           A 24585    
00611D 01000000            A 24586    	LD	BC,0
006121 C5                  A 24587    	PUSH	BC
006122 ED65F7              A 24588    	PEA	IX+%FFFFFFF7
006125 ED6506              A 24589    	PEA	IX+%6
006128 CD A9 34 00         A 24590    	CALL	_mount_volume
00612C C1                  A 24591    	POP	BC
00612D C1                  A 24592    	POP	BC
00612E C1                  A 24593    	POP	BC
00612F DD2FFA              A 24594    	LD	(IX+%FFFFFFFA),HL
                           A 24595    ; 5288	
                           A 24596    ; 5289		/* Get volume label */
                           A 24597    ; 5290		if (res == FR_OK && label) {
                           A 24598    .LINE 5290
                           A 24599    
006132 01000000            A 24600    	LD	BC,0
006136 DD27FA              A 24601    	LD	HL,(IX+%FFFFFFFA)
006139 B7                  A 24602    	OR	A,A
00613A ED42                A 24603    	SBC	HL,BC
00613C C2 29 62 00         A 24604    	JR	NZ,L_1255
006140 DD2709              A 24605    	LD	HL,(IX+%9)
006143 B7                  A 24606    	OR	A,A
006144 ED42                A 24607    	SBC	HL,BC
006146 CA 29 62 00         A 24608    	JR	Z,L_1255
                           A 24609    ; 5291			dj.obj.fs = fs; dj.obj.sclust =
                           A 24610    .LINE 5291
                           A 24611    
00614A ED02C4              A 24612    	LEA	BC,IX+%FFFFFFC4
00614D DD0FC1              A 24613    	LD	(IX+%FFFFFFC1),BC
006150 DD07F7              A 24614    	LD	BC,(IX+%FFFFFFF7)
006153 DD0FC4              A 24615    	LD	(IX+%FFFFFFC4),BC
006156 01000000            A 24616    	LD	BC,0
00615A DD31C1              A 24617    	LD	IY,(IX+%FFFFFFC1)
00615D FD0F07              A 24618    	LD	(IY+%7),BC
006160 FD360A00            A 24619    	LD	(IY+%A),%0
                           A 24620    ; 5292			res = dir_sdi(&dj, 0);
                           A 24621    .LINE 5292
                           A 24622    
006164 C5                  A 24623    	PUSH	BC
006165 C5                  A 24624    	PUSH	BC
006166 ED65C4              A 24625    	PEA	IX+%FFFFFFC4
006169 CD 50 12 00         A 24626    	CALL	_dir_sdi
00616D C1                  A 24627    	POP	BC
00616E C1                  A 24628    	POP	BC
00616F C1                  A 24629    	POP	BC
006170 DD2FFA              A 24630    	LD	(IX+%FFFFFFFA),HL
                           A 24631    ; 5293			if (res == FR_OK) {
                           A 24632    .LINE 5293
                           A 24633    
006173 01000000            A 24634    	LD	BC,0
006177 DD27FA              A 24635    	LD	HL,(IX+%FFFFFFFA)
00617A B7                  A 24636    	OR	A,A
00617B ED42                A 24637    	SBC	HL,BC
00617D C2 11 62 00         A 24638    	JR	NZ,L_1246
                           A 24639    ; 5294			 	res = DIR_READ_LABEL(&dj);	
                           A 24640    .LINE 5294
                           A 24641    
006181 01010000            A 24642    	LD	BC,1
006185 C5                  A 24643    	PUSH	BC
006186 ED65C4              A 24644    	PEA	IX+%FFFFFFC4
006189 CD 46 1E 00         A 24645    	CALL	_dir_read
00618D C1                  A 24646    	POP	BC
00618E C1                  A 24647    	POP	BC
00618F DD2FFA              A 24648    	LD	(IX+%FFFFFFFA),HL
                           A 24649    ; 5295			 	if (res == FR_OK) {
                           A 24650    .LINE 5295
                           A 24651    
006192 01000000            A 24652    	LD	BC,0
006196 DD27FA              A 24653    	LD	HL,(IX+%FFFFFFFA)
006199 B7                  A 24654    	OR	A,A
00619A ED42                A 24655    	SBC	HL,BC
00619C 20 73               A 24656    	JR	NZ,L_1246
                           A 24657    ; 5296	#if FF_FS_EXFAT
                           A 24658    ; 5297					if (fs->fs_type == FS_E
                           A 24659    ; 5298						WCHAR hs;
                           A 24660    ; 5299						UINT nw;
                           A 24661    ; 5300	
                           A 24662    ; 5301						for (si = di = hs =
                           A 24663    ; 5302							wc = ld_word(dj
                           A 24664    ; 5303							if (hs == 0 && 
                           A 24665    ; 5304								hs = wc; co
                           A 24666    ; 5305							}
                           A 24667    ; 5306							nw = put_utf((D
                           A 24668    ; 5307							if (nw == 0) { 
                           A 24669    ; 5308							di += nw;
                           A 24670    ; 5309							hs = 0;
                           A 24671    ; 5310						}
                           A 24672    ; 5311						if (hs != 0) di = 0
                           A 24673    ; 5312						label[di] = 0;
                           A 24674    ; 5313					} else
                           A 24675    ; 5314	#endif
                           A 24676    ; 5315					{
                           A 24677    ; 5316						si = di = 0;		
                           A 24678    .LINE 5316
                           A 24679    
00619E DD0FFD              A 24680    	LD	(IX+%FFFFFFFD),BC
0061A1 DD0FF4              A 24681    	LD	(IX+%FFFFFFF4),BC
                           A 24682    ; 5317						while (si < 11) {
                           A 24683    .LINE 5317
                           A 24684    
0061A4 18 2B               A 24685    	JR	L_1237
0061A6                     A 24686    L_1238:
                           A 24687    ; 5318							wc = dj.dir[si+
                           A 24688    .LINE 5318
                           A 24689    
0061A6 DD07F4              A 24690    	LD	BC,(IX+%FFFFFFF4)
0061A9 DD27DF              A 24691    	LD	HL,(IX+%FFFFFFDF)
0061AC 09                  A 24692    	ADD	HL,BC
0061AD 4E                  A 24693    	LD	C,(HL)
0061AE 0600                A 24694    	LD	B,%0
0061B0 C5E1                A 24695    	LD	HL,BC
0061B2 DD75F2              A 24696    	LD	(IX+%FFFFFFF2),L
0061B5 DD74F3              A 24697    	LD	(IX+%FFFFFFF3),H
0061B8 DD07F4              A 24698    	LD	BC,(IX+%FFFFFFF4)
0061BB 03                  A 24699    	INC	BC
0061BC DD0FF4              A 24700    	LD	(IX+%FFFFFFF4),BC
                           A 24701    ; 5319	#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	
                           A 24702    ; 5320							if (dbc_1st((BY
                           A 24703    ; 5321							wc = ff_oem2uni
                           A 24704    ; 5322							if (wc == 0) { 
                           A 24705    ; 5323							di += put_utf(w
                           A 24706    ; 5324	#else									
                           A 24707    ; 5325							label[di++] = (
                           A 24708    .LINE 5325
                           A 24709    
0061BF DD7EF2              A 24710    	LD	A,(IX+%FFFFFFF2)
0061C2 DD07FD              A 24711    	LD	BC,(IX+%FFFFFFFD)
0061C5 DD2709              A 24712    	LD	HL,(IX+%9)
0061C8 09                  A 24713    	ADD	HL,BC
0061C9 77                  A 24714    	LD	(HL),A
0061CA DD07FD              A 24715    	LD	BC,(IX+%FFFFFFFD)
0061CD 03                  A 24716    	INC	BC
0061CE DD0FFD              A 24717    	LD	(IX+%FFFFFFFD),BC
                           A 24718    ; 5326	#endif
                           A 24719    ; 5327						}
0061D1                     A 24720    L_1237:
                           A 24721    .LINE 5327
                           A 24722    
0061D1 010B0000            A 24723    	LD	BC,11
0061D5 DD27F4              A 24724    	LD	HL,(IX+%FFFFFFF4)
0061D8 B7                  A 24725    	OR	A,A
0061D9 ED42                A 24726    	SBC	HL,BC
0061DB 38 C9               A 24727    	JR	C,L_1238
                           A 24728    ; 5328						do {				
0061DD                     A 24729    L_1240:
                           A 24730    .LINE 5328
                           A 24731    
                           A 24732    ; 5329							label[di] = 0;
                           A 24733    .LINE 5329
                           A 24734    
0061DD DD07FD              A 24735    	LD	BC,(IX+%FFFFFFFD)
0061E0 DD2709              A 24736    	LD	HL,(IX+%9)
0061E3 09                  A 24737    	ADD	HL,BC
0061E4 3600                A 24738    	LD	(HL),%0
                           A 24739    ; 5330							if (di == 0) br
                           A 24740    .LINE 5330
                           A 24741    
0061E6 01000000            A 24742    	LD	BC,0
0061EA DD27FD              A 24743    	LD	HL,(IX+%FFFFFFFD)
0061ED B7                  A 24744    	OR	A,A
0061EE ED42                A 24745    	SBC	HL,BC
0061F0 28 1F               A 24746    	JR	Z,L_1246
                           A 24747    ; 5331						} while (label[--di
                           A 24748    .LINE 5331
                           A 24749    
0061F2 DD31FD              A 24750    	LD	IY,(IX+%FFFFFFFD)
0061F5 ED33FF              A 24751    	LEA	IY,IY+%FFFFFFFF
0061F8 DD3EFD              A 24752    	LD	(IX+%FFFFFFFD),IY
0061FB FDE5C1              A 24753    	LD	BC,IY
0061FE DD2709              A 24754    	LD	HL,(IX+%9)
006201 09                  A 24755    	ADD	HL,BC
006202 7E                  A 24756    	LD	A,(HL)
006203 47                  A 24757    	LD	B,A
006204 17ED62              A 24758    	SEXT	HL
006207 68                  A 24759    	LD	L,B
006208 01200000            A 24760    	LD	BC,32
00620C B7                  A 24761    	OR	A,A
00620D ED42                A 24762    	SBC	HL,BC
00620F 28 CC               A 24763    	JR	Z,L_1240
                           A 24764    ; 5332					}
                           A 24765    ; 5333				}
                           A 24766    ; 5334			}
006211                     A 24767    L_1246:
                           A 24768    .LINE 5334
                           A 24769    
                           A 24770    ; 5335			if (res == FR_NO_FILE) {	/* 
                           A 24771    .LINE 5335
                           A 24772    
006211 01040000            A 24773    	LD	BC,4
006215 DD27FA              A 24774    	LD	HL,(IX+%FFFFFFFA)
006218 B7                  A 24775    	OR	A,A
006219 ED42                A 24776    	SBC	HL,BC
00621B 20 0C               A 24777    	JR	NZ,L_1255
                           A 24778    ; 5336				label[0] = 0;
                           A 24779    .LINE 5336
                           A 24780    
00621D DD2709              A 24781    	LD	HL,(IX+%9)
006220 3600                A 24782    	LD	(HL),%0
                           A 24783    ; 5337				res = FR_OK;
                           A 24784    .LINE 5337
                           A 24785    
006222 01000000            A 24786    	LD	BC,0
006226 DD0FFA              A 24787    	LD	(IX+%FFFFFFFA),BC
                           A 24788    ; 5338			}
                           A 24789    ; 5339		}
006229                     A 24790    L_1255:
                           A 24791    .LINE 5339
                           A 24792    
                           A 24793    ; 5340	
                           A 24794    ; 5341		/* Get volume serial number */
                           A 24795    ; 5342		if (res == FR_OK && vsn) {
                           A 24796    .LINE 5342
                           A 24797    
006229 01000000            A 24798    	LD	BC,0
00622D DD27FA              A 24799    	LD	HL,(IX+%FFFFFFFA)
006230 B7                  A 24800    	OR	A,A
006231 ED42                A 24801    	SBC	HL,BC
006233 C2 CD 62 00         A 24802    	JR	NZ,L_1256
006237 DD270C              A 24803    	LD	HL,(IX+%C)
00623A B7                  A 24804    	OR	A,A
00623B ED42                A 24805    	SBC	HL,BC
00623D CA CD 62 00         A 24806    	JR	Z,L_1256
                           A 24807    ; 5343			res = move_window(fs, fs->volba
                           A 24808    .LINE 5343
                           A 24809    
006241 DD31F7              A 24810    	LD	IY,(IX+%FFFFFFF7)
006244 FD0722              A 24811    	LD	BC,(IY+%22)
006247 FD7E25              A 24812    	LD	A,(IY+%25)
00624A 2600                A 24813    	LD	H,%0
00624C 6F                  A 24814    	LD	L,A
00624D E5                  A 24815    	PUSH	HL
00624E C5                  A 24816    	PUSH	BC
00624F DD07F7              A 24817    	LD	BC,(IX+%FFFFFFF7)
006252 C5                  A 24818    	PUSH	BC
006253 CD 1E 04 00         A 24819    	CALL	_move_window
006257 C1                  A 24820    	POP	BC
006258 C1                  A 24821    	POP	BC
006259 C1                  A 24822    	POP	BC
00625A DD2FFA              A 24823    	LD	(IX+%FFFFFFFA),HL
                           A 24824    ; 5344			if (res == FR_OK) {
                           A 24825    .LINE 5344
                           A 24826    
00625D 01000000            A 24827    	LD	BC,0
006261 DD27FA              A 24828    	LD	HL,(IX+%FFFFFFFA)
006264 B7                  A 24829    	OR	A,A
006265 ED42                A 24830    	SBC	HL,BC
006267 20 64               A 24831    	JR	NZ,L_1256
                           A 24832    ; 5345				switch (fs->fs_type) {
                           A 24833    .LINE 5345
                           A 24834    
006269 DD31F7              A 24835    	LD	IY,(IX+%FFFFFFF7)
00626C FD7E00              A 24836    	LD	A,(IY+%0)
00626F B7ED62              A 24837    	UEXT	HL
006272 6F                  A 24838    	LD	L,A
006273 E5C1                A 24839    	LD	BC,HL
006275                     A 24840    L__678:
006275 11030000            A 24841    	LD	DE,3
006279 B7                  A 24842    	OR	A,A
00627A ED52                A 24843    	SBC	HL,DE
00627C 38 2F               A 24844    	JR	C,L_1251
00627E 21040000            A 24845    	LD	HL,4
006282 B7                  A 24846    	OR	A,A
006283 ED42                A 24847    	SBC	HL,BC
006285 38 26               A 24848    	JR	C,L_1251
006287 C5E1                A 24849    	LD	HL,BC
006289 E5C1                A 24850    	LD	BC,HL
00628B 29                  A 24851    	ADD	HL,HL
00628C 09                  A 24852    	ADD	HL,BC
00628D 01 8C 62 00         A 24853    	LD	BC,L__677-9
006291 09                  A 24854    	ADD	HL,BC
006292 ED27                A 24855    	LD	HL,(HL)
006294 E9                  A 24856    	JP	(HL)
006295                     A 24857    L__677:
006295 A46200              A 24858    	DW24	L_1250	
                           A 24859    
006298 9B6200              A 24860    	DW24	L_1249	
                           A 24861    
                           A 24862    ; 5346				case FS_EXFAT:
00629B                     A 24863    L_1249:
                           A 24864    .LINE 5346
                           A 24865    
                           A 24866    ; 5347					di = BPB_VolIDEx;
                           A 24867    .LINE 5347
                           A 24868    
00629B 01640000            A 24869    	LD	BC,100
00629F DD0FFD              A 24870    	LD	(IX+%FFFFFFFD),BC
                           A 24871    ; 5348					break;
                           A 24872    .LINE 5348
                           A 24873    
0062A2 18 10               A 24874    	JR	L_1252
                           A 24875    ; 5349	
                           A 24876    ; 5350				case FS_FAT32:
0062A4                     A 24877    L_1250:
                           A 24878    .LINE 5350
                           A 24879    
                           A 24880    ; 5351					di = BS_VolID32;
                           A 24881    .LINE 5351
                           A 24882    
0062A4 01430000            A 24883    	LD	BC,67
0062A8 DD0FFD              A 24884    	LD	(IX+%FFFFFFFD),BC
                           A 24885    ; 5352					break;
                           A 24886    .LINE 5352
                           A 24887    
0062AB 18 07               A 24888    	JR	L_1252
                           A 24889    ; 5353	
                           A 24890    ; 5354				default:
0062AD                     A 24891    L_1251:
                           A 24892    .LINE 5354
                           A 24893    
                           A 24894    ; 5355					di = BS_VolID;
                           A 24895    .LINE 5355
                           A 24896    
0062AD 01270000            A 24897    	LD	BC,39
0062B1 DD0FFD              A 24898    	LD	(IX+%FFFFFFFD),BC
                           A 24899    ; 5356				}
0062B4                     A 24900    L_1252:
                           A 24901    .LINE 5356
                           A 24902    
                           A 24903    ; 5357				*vsn = ld_dword(fs->win + d
                           A 24904    .LINE 5357
                           A 24905    
0062B4 DD07FD              A 24906    	LD	BC,(IX+%FFFFFFFD)
0062B7 DD31F7              A 24907    	LD	IY,(IX+%FFFFFFF7)
0062BA ED2336              A 24908    	LEA	HL,IY+%36
0062BD 09                  A 24909    	ADD	HL,BC
0062BE E5                  A 24910    	PUSH	HL
0062BF CD 3C 00 00         A 24911    	CALL	_ld_dword
0062C3 C1                  A 24912    	POP	BC
0062C4 DD310C              A 24913    	LD	IY,(IX+%C)
0062C7 FD2F00              A 24914    	LD	(IY),HL
0062CA FD7303              A 24915    	LD	(IY+%3),E
                           A 24916    ; 5358			}
                           A 24917    ; 5359		}
0062CD                     A 24918    L_1256:
                           A 24919    .LINE 5359
                           A 24920    
                           A 24921    ; 5360	
                           A 24922    ; 5361		LEAVE_FF(fs, res);
                           A 24923    .LINE 5361
                           A 24924    
0062CD DD27FA              A 24925    	LD	HL,(IX+%FFFFFFFA)
                           A 24926    ; 5362	}
                           A 24927    .LINE 5362
                           A 24928    
0062D0 DDF9                A 24929    	LD	SP,IX
0062D2 DDE1                A 24930    	POP	IX
0062D4 C9                  A 24931    	RET	
                           A 24932    
                           A 24933    
                           A 24934    ;**************************** _f_getlabel *****
                           A 24935    ;Name                         Addr/Register   S
                           A 24936    ;dj                                   IX-60    
                           A 24937    ;wc                                   IX-14    
                           A 24938    ;si                                   IX-12    
                           A 24939    ;fs                                    IX-9    
                           A 24940    ;res                                   IX-6    
                           A 24941    ;di                                    IX-3    
                           A 24942    ;vsn                                  IX+12    
                           A 24943    ;label                                 IX+9    
                           A 24944    ;path                                  IX+6    
                           A 24945    
                           A 24946    
                           A 24947    ; Stack Frame Size: 78 (bytes)
                           A 24948    ;       Spill Code: -3 (instruction)
                           A 24949    
                           A 24950    
                           A 24951    .ENDFUNC "f_getlabel",5362,"_f_getlabel"
                           A 24952    ; 5363	
                           A 24953    ; 5364	
                           A 24954    ; 5365	
                           A 24955    ; 5366	#if !FF_FS_READONLY
                           A 24956    ; 5367	/*-------------------------------------
                           A 24957    ; 5368	/* Set Volume Label                    
                           A 24958    ; 5369	/*-------------------------------------
                           A 24959    ; 5370	
                           A 24960    ; 5371	FRESULT f_setlabel (
                           A 24961    ; 5372		const TCHAR* label	/* Volume label
                           A 24962    ; 5373	)
                           A 24963    ; 5374	{
0062D5                     A 24964    _f_setlabel:
                           A 24965    .DEFINE "_f_setlabel"
                           A 24966    
                           A 24967    .VALUE _f_setlabel
                           A 24968    
                           A 24969    .CLASS 2
                           A 24970    
                           A 24971    .TYPE 68
                           A 24972    
                           A 24973    .ENDEF
                           A 24974    
                           A 24975    .BEGFUNC "f_setlabel",5374,"_f_setlabel"
                           A 24976    
                           A 24977    .LINE 5374
                           A 24978    
                           A 24979    .DEFINE "label"
                           A 24980    
                           A 24981    .CLASS 65
                           A 24982    
                           A 24983    .VALUE 6
                           A 24984    
                           A 24985    .TYPE 194
                           A 24986    
                           A 24987    .ENDEF
                           A 24988    
                           A 24989    .DEFINE "di"
                           A 24990    
                           A 24991    .CLASS 65
                           A 24992    
                           A 24993    .VALUE -3
                           A 24994    
                           A 24995    .TYPE 14
                           A 24996    
                           A 24997    .ENDEF
                           A 24998    
                           A 24999    .DEFINE "res"
                           A 25000    
                           A 25001    .CLASS 65
                           A 25002    
                           A 25003    .VALUE -6
                           A 25004    
                           A 25005    .TYPE 4
                           A 25006    
                           A 25007    .ENDEF
                           A 25008    
                           A 25009    .DEFINE "wc"
                           A 25010    
                           A 25011    .CLASS 65
                           A 25012    
                           A 25013    .VALUE -8
                           A 25014    
                           A 25015    .TYPE 13
                           A 25016    
                           A 25017    .ENDEF
                           A 25018    
                           A 25019    .DEFINE "fs"
                           A 25020    
                           A 25021    .CLASS 65
                           A 25022    
                           A 25023    .VALUE -11
                           A 25024    
                           A 25025    .TAG "NONAME0"
                           A 25026    
                           A 25027    .TYPE 40
                           A 25028    
                           A 25029    .ENDEF
                           A 25030    
                           A 25031    .DEFINE "dc"
                           A 25032    
                           A 25033    .CLASS 65
                           A 25034    
                           A 25035    .VALUE -22
                           A 25036    
                           A 25037    .TYPE 15
                           A 25038    
                           A 25039    .ENDEF
                           A 25040    
                           A 25041    .DEFINE "dirvn"
                           A 25042    
                           A 25043    .CLASS 65
                           A 25044    
                           A 25045    .VALUE -44
                           A 25046    
                           A 25047    .DIM 22
                           A 25048    
                           A 25049    .TYPE 108
                           A 25050    
                           A 25051    .ENDEF
                           A 25052    
                           A 25053    .DEFINE "dj"
                           A 25054    
                           A 25055    .CLASS 65
                           A 25056    
                           A 25057    .VALUE -90
                           A 25058    
                           A 25059    .TAG "NONAME3"
                           A 25060    
                           A 25061    .TYPE 8
                           A 25062    
                           A 25063    .ENDEF
                           A 25064    
                           A 25065    ; 5375		FRESULT res;
                           A 25066    ; 5376		DIR dj;
                           A 25067    ; 5377		FATFS *fs;
                           A 25068    ; 5378		BYTE dirvn[22];
                           A 25069    ; 5379		UINT di;
                           A 25070    ; 5380		WCHAR wc;
                           A 25071    ; 5381		static const char badchr[18] = "+.,
                           A 25072    .LINE 5381
                           A 25073    
                           A 25074    .DEFINE "badchr"
                           A 25075    
                           A 25076    .ALIAS "_0badchr"
                           A 25077    
                           A 25078    .CLASS 84
                           A 25079    
                           A 25080    .VALUE _0badchr
                           A 25081    
                           A 25082    .DIM 18
                           A 25083    
                           A 25084    .TYPE 98
                           A 25085    
                           A 25086    .ENDEF
                           A 25087    
0062D5 DDE5                A 25088    	PUSH	IX
0062D7 DD210000 00         A 25089    	LD	IX,0
0062DC DD39                A 25090    	ADD	IX,SP
0062DE ED22A3              A 25091    	LEA	HL,IX+%FFFFFFA3
0062E1 F9                  A 25092    	LD	SP,HL
                           A 25093    ; 5382	#if FF_USE_LFN
                           A 25094    ; 5383		DWORD dc;
                           A 25095    ; 5384	#endif
                           A 25096    ; 5385	
                           A 25097    ; 5386		/* Get logical drive */
                           A 25098    ; 5387		res = mount_volume(&label, &fs, FA_
                           A 25099    .LINE 5387
                           A 25100    
0062E2 01020000            A 25101    	LD	BC,2
0062E6 C5                  A 25102    	PUSH	BC
0062E7 ED65F5              A 25103    	PEA	IX+%FFFFFFF5
0062EA ED6506              A 25104    	PEA	IX+%6
0062ED CD A9 34 00         A 25105    	CALL	_mount_volume
0062F1 C1                  A 25106    	POP	BC
0062F2 C1                  A 25107    	POP	BC
0062F3 C1                  A 25108    	POP	BC
0062F4 DD2FFA              A 25109    	LD	(IX+%FFFFFFFA),HL
                           A 25110    ; 5388		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 25111    .LINE 5388
                           A 25112    
0062F7 01000000            A 25113    	LD	BC,0
0062FB DD27FA              A 25114    	LD	HL,(IX+%FFFFFFFA)
0062FE B7                  A 25115    	OR	A,A
0062FF ED42                A 25116    	SBC	HL,BC
006301 28 07               A 25117    	JR	Z,L_1284
006303 DD27FA              A 25118    	LD	HL,(IX+%FFFFFFFA)
006306 C3 86 65 00         A 25119    	JR	L_1301
00630A                     A 25120    L_1284:
                           A 25121    ; 5389	
                           A 25122    ; 5390	#if FF_FS_EXFAT
                           A 25123    ; 5391		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 25124    ; 5392			memset(dirvn, 0, 22);
                           A 25125    ; 5393			di = 0;
                           A 25126    ; 5394			while ((UINT)*label >= ' ') {	
                           A 25127    ; 5395				dc = tchar2uni(&label);	/* 
                           A 25128    ; 5396				if (dc >= 0x10000) {
                           A 25129    ; 5397					if (dc == 0xFFFFFFFF ||
                           A 25130    ; 5398						dc = 0;
                           A 25131    ; 5399					} else {
                           A 25132    ; 5400						st_word(dirvn + di 
                           A 25133    ; 5401					}
                           A 25134    ; 5402				}
                           A 25135    ; 5403				if (dc == 0 || strchr(&badc
                           A 25136    ; 5404					LEAVE_FF(fs, FR_INVALID
                           A 25137    ; 5405				}
                           A 25138    ; 5406				st_word(dirvn + di * 2, (WC
                           A 25139    ; 5407			}
                           A 25140    ; 5408		} else
                           A 25141    ; 5409	#endif
                           A 25142    ; 5410		{	/* On the FAT/FAT32 volume */
                           A 25143    ; 5411			memset(dirvn, ' ', 11);
                           A 25144    .LINE 5411
                           A 25145    
00630A 010B0000            A 25146    	LD	BC,11
00630E C5                  A 25147    	PUSH	BC
00630F 01200000            A 25148    	LD	BC,32
006313 C5                  A 25149    	PUSH	BC
006314 ED65D4              A 25150    	PEA	IX+%FFFFFFD4
006317 CD 00 00 00         A 25151    	CALL	_memset
00631B C1                  A 25152    	POP	BC
00631C C1                  A 25153    	POP	BC
00631D C1                  A 25154    	POP	BC
                           A 25155    ; 5412			di = 0;
                           A 25156    .LINE 5412
                           A 25157    
00631E 01000000            A 25158    	LD	BC,0
006322 DD0FFD              A 25159    	LD	(IX+%FFFFFFFD),BC
                           A 25160    ; 5413			while ((UINT)*label >= ' ') {	
                           A 25161    .LINE 5413
                           A 25162    
006325 C3 26 64 00         A 25163    	JR	L_1275
006329                     A 25164    L_1276:
                           A 25165    ; 5414	#if FF_USE_LFN
                           A 25166    ; 5415				dc = tchar2uni(&label);
                           A 25167    .LINE 5415
                           A 25168    
006329 ED6506              A 25169    	PEA	IX+%6
00632C CD DA 01 00         A 25170    	CALL	_tchar2uni
006330 C1                  A 25171    	POP	BC
006331 DD2FEA              A 25172    	LD	(IX+%FFFFFFEA),HL
006334 DD73ED              A 25173    	LD	(IX+%FFFFFFED),E
                           A 25174    ; 5416				wc = (dc < 0x10000) ? ff_un
                           A 25175    .LINE 5416
                           A 25176    
006337 DD27EA              A 25177    	LD	HL,(IX+%FFFFFFEA)
00633A DD5EED              A 25178    	LD	E,(IX+%FFFFFFED)
00633D 01000001            A 25179    	LD	BC,65536
006341 AF                  A 25180    	XOR	A,A
006342 CD 00 00 00         A 25181    	CALL	__lcmpu
006346 30 2C               A 25182    	JR	NC,L_1261
006348 01B50100            A 25183    	LD	BC,437
00634C C5                  A 25184    	PUSH	BC
00634D DD4EED              A 25185    	LD	C,(IX+%FFFFFFED)
006350 0600                A 25186    	LD	B,%0
006352 C5                  A 25187    	PUSH	BC
006353 DD07EA              A 25188    	LD	BC,(IX+%FFFFFFEA)
006356 C5                  A 25189    	PUSH	BC
006357 CD 00 00 00         A 25190    	CALL	_ff_wtoupper
00635B C1                  A 25191    	POP	BC
00635C C1                  A 25192    	POP	BC
00635D 4B                  A 25193    	LD	C,E
00635E 0600                A 25194    	LD	B,%0
006360 C5                  A 25195    	PUSH	BC
006361 E5                  A 25196    	PUSH	HL
006362 CD 00 00 00         A 25197    	CALL	_ff_uni2oem
006366 C1                  A 25198    	POP	BC
006367 C1                  A 25199    	POP	BC
006368 C1                  A 25200    	POP	BC
006369 E5C1                A 25201    	LD	BC,HL
00636B CD 00 00 00         A 25202    	CALL	__stoiu
00636F DD2FF1              A 25203    	LD	(IX+%FFFFFFF1),HL
006372 18 07               A 25204    	JR	L_1262
006374                     A 25205    L_1261:
006374 01000000            A 25206    	LD	BC,0
006378 DD0FF1              A 25207    	LD	(IX+%FFFFFFF1),BC
00637B                     A 25208    L_1262:
00637B DD27F1              A 25209    	LD	HL,(IX+%FFFFFFF1)
00637E DD75F8              A 25210    	LD	(IX+%FFFFFFF8),L
006381 DD74F9              A 25211    	LD	(IX+%FFFFFFF9),H
                           A 25212    ; 5417	#else									
                           A 25213    ; 5418				wc = (BYTE)*label++;
                           A 25214    ; 5419				if (dbc_1st((BYTE)wc)) wc =
                           A 25215    ; 5420				if (IsLower(wc)) wc -= 0x20
                           A 25216    ; 5421	#if FF_CODE_PAGE == 0
                           A 25217    ; 5422				if (ExCvt && wc >= 0x80) wc
                           A 25218    ; 5423	#elif FF_CODE_PAGE < 900
                           A 25219    ; 5424				if (wc >= 0x80) wc = ExCvt[
                           A 25220    ; 5425	#endif
                           A 25221    ; 5426	#endif
                           A 25222    ; 5427				if (wc == 0 || strchr(&badc
                           A 25223    .LINE 5427
                           A 25224    
006384 49010000            A 25225    	LD.LIS	BC,0
006388 DD27F8              A 25226    	LD	HL,(IX+%FFFFFFF8)
00638B B7                  A 25227    	OR	A,A
00638C 40ED42              A 25228    	SBC.SIS	HL,BC
00638F 28 4F               A 25229    	JR	Z,L_1269
006391 DD07F8              A 25230    	LD	BC,(IX+%FFFFFFF8)
006394 CD 00 00 00         A 25231    	CALL	__stoiu
006398 E5                  A 25232    	PUSH	HL
006399 01 8D 00 00         A 25233    	LD	BC,_0badchr
00639D C5                  A 25234    	PUSH	BC
00639E CD 00 00 00         A 25235    	CALL	_strchr
0063A2 C1                  A 25236    	POP	BC
0063A3 C1                  A 25237    	POP	BC
0063A4 01000000            A 25238    	LD	BC,0
0063A8 B7                  A 25239    	OR	A,A
0063A9 ED42                A 25240    	SBC	HL,BC
0063AB 20 33               A 25241    	JR	NZ,L_1269
0063AD 49010001            A 25242    	LD.LIS	BC,256
0063B1 DD27F8              A 25243    	LD	HL,(IX+%FFFFFFF8)
0063B4 B7                  A 25244    	OR	A,A
0063B5 40ED42              A 25245    	SBC.SIS	HL,BC
0063B8 30 04               A 25246    	JR	NC,L__687
0063BA 3E01                A 25247    	LD	A,%1
0063BC 18 01               A 25248    	JR	L__688
0063BE                     A 25249    L__687:
0063BE AF                  A 25250    	XOR	A,A
0063BF                     A 25251    L__688:
0063BF DD77F4              A 25252    	LD	(IX+%FFFFFFF4),A
0063C2 B7                  A 25253    	OR	A,A
0063C3 20 09               A 25254    	JR	NZ,L_1266
0063C5 010A0000            A 25255    	LD	BC,10
0063C9 DD0FEE              A 25256    	LD	(IX+%FFFFFFEE),BC
0063CC 18 07               A 25257    	JR	L_1267
0063CE                     A 25258    L_1266:
0063CE 010B0000            A 25259    	LD	BC,11
0063D2 DD0FEE              A 25260    	LD	(IX+%FFFFFFEE),BC
0063D5                     A 25261    L_1267:
0063D5 DD07EE              A 25262    	LD	BC,(IX+%FFFFFFEE)
0063D8 DD27FD              A 25263    	LD	HL,(IX+%FFFFFFFD)
0063DB B7                  A 25264    	OR	A,A
0063DC ED42                A 25265    	SBC	HL,BC
0063DE 38 08               A 25266    	JR	C,L_1272
0063E0                     A 25267    L_1269:
                           A 25268    ; 5428					LEAVE_FF(fs, FR_INVALID
                           A 25269    .LINE 5428
                           A 25270    
0063E0 21060000            A 25271    	LD	HL,6
0063E4 C3 86 65 00         A 25272    	JR	L_1301
                           A 25273    ; 5429				}
0063E8                     A 25274    L_1272:
                           A 25275    .LINE 5429
                           A 25276    
                           A 25277    ; 5430				if (wc >= 0x100) dirvn[di++
                           A 25278    .LINE 5430
                           A 25279    
0063E8 DD7EF4              A 25280    	LD	A,(IX+%FFFFFFF4)
0063EB B7                  A 25281    	OR	A,A
0063EC 20 26               A 25282    	JR	NZ,L_1274
0063EE DD07F8              A 25283    	LD	BC,(IX+%FFFFFFF8)
0063F1 CD 00 00 00         A 25284    	CALL	__stoiu
0063F5 E5C1                A 25285    	LD	BC,HL
0063F7 3B                  A 25286    	DEC	SP
0063F8 C5                  A 25287    	PUSH	BC
0063F9 33                  A 25288    	INC	SP
0063FA F1                  A 25289    	POP	AF
0063FB 17ED62              A 25290    	SEXT	HL
0063FE E5                  A 25291    	PUSH	HL
0063FF C5                  A 25292    	PUSH	BC
006400 33                  A 25293    	INC	SP
006401 E1                  A 25294    	POP	HL
006402 33                  A 25295    	INC	SP
006403 33                  A 25296    	INC	SP
006404 7D                  A 25297    	LD	A,L
006405 DD07FD              A 25298    	LD	BC,(IX+%FFFFFFFD)
006408 ED22D4              A 25299    	LEA	HL,IX+%FFFFFFD4
00640B 09                  A 25300    	ADD	HL,BC
00640C 77                  A 25301    	LD	(HL),A
00640D DD07FD              A 25302    	LD	BC,(IX+%FFFFFFFD)
006410 03                  A 25303    	INC	BC
006411 DD0FFD              A 25304    	LD	(IX+%FFFFFFFD),BC
006414                     A 25305    L_1274:
                           A 25306    ; 5431				dirvn[di++] = (BYTE)wc;
                           A 25307    .LINE 5431
                           A 25308    
006414 DD7EF8              A 25309    	LD	A,(IX+%FFFFFFF8)
006417 DD07FD              A 25310    	LD	BC,(IX+%FFFFFFFD)
00641A ED22D4              A 25311    	LEA	HL,IX+%FFFFFFD4
00641D 09                  A 25312    	ADD	HL,BC
00641E 77                  A 25313    	LD	(HL),A
00641F DD07FD              A 25314    	LD	BC,(IX+%FFFFFFFD)
006422 03                  A 25315    	INC	BC
006423 DD0FFD              A 25316    	LD	(IX+%FFFFFFFD),BC
                           A 25317    ; 5432			}
006426                     A 25318    L_1275:
                           A 25319    .LINE 5432
                           A 25320    
006426 DD2706              A 25321    	LD	HL,(IX+%6)
006429 7E                  A 25322    	LD	A,(HL)
00642A 47                  A 25323    	LD	B,A
00642B 17ED62              A 25324    	SEXT	HL
00642E 68                  A 25325    	LD	L,B
00642F 01200000            A 25326    	LD	BC,32
006433 B7                  A 25327    	OR	A,A
006434 ED42                A 25328    	SBC	HL,BC
006436 D2 29 63 00         A 25329    	JR	NC,L_1276
                           A 25330    ; 5433			if (dirvn[0] == DDEM) LEAVE_FF(
                           A 25331    .LINE 5433
                           A 25332    
00643A DD7ED4              A 25333    	LD	A,(IX+%FFFFFFD4)
00643D B7ED62              A 25334    	UEXT	HL
006440 6F                  A 25335    	LD	L,A
006441 01E50000            A 25336    	LD	BC,229
006445 B7                  A 25337    	OR	A,A
006446 ED42                A 25338    	SBC	HL,BC
006448 20 11               A 25339    	JR	NZ,L_1281
00644A 21060000            A 25340    	LD	HL,6
00644E C3 86 65 00         A 25341    	JR	L_1301
                           A 25342    ; 5434			while (di && dirvn[di - 1] == '
                           A 25343    .LINE 5434
                           A 25344    
006452                     A 25345    L_1282:
006452 DD31FD              A 25346    	LD	IY,(IX+%FFFFFFFD)
006455 ED33FF              A 25347    	LEA	IY,IY+%FFFFFFFF
006458 DD3EFD              A 25348    	LD	(IX+%FFFFFFFD),IY
00645B                     A 25349    L_1281:
00645B 01000000            A 25350    	LD	BC,0
00645F DD27FD              A 25351    	LD	HL,(IX+%FFFFFFFD)
006462 B7                  A 25352    	OR	A,A
006463 ED42                A 25353    	SBC	HL,BC
006465 28 16               A 25354    	JR	Z,L_1285
006467 DD07FD              A 25355    	LD	BC,(IX+%FFFFFFFD)
00646A ED22D4              A 25356    	LEA	HL,IX+%FFFFFFD4
00646D 09                  A 25357    	ADD	HL,BC
00646E 2B                  A 25358    	DEC	HL
00646F 7E                  A 25359    	LD	A,(HL)
006470 B7ED62              A 25360    	UEXT	HL
006473 6F                  A 25361    	LD	L,A
006474 01200000            A 25362    	LD	BC,32
006478 B7                  A 25363    	OR	A,A
006479 ED42                A 25364    	SBC	HL,BC
00647B 28 D5               A 25365    	JR	Z,L_1282
                           A 25366    ; 5435		}
00647D                     A 25367    L_1285:
                           A 25368    .LINE 5435
                           A 25369    
                           A 25370    ; 5436	
                           A 25371    ; 5437		/* Set volume label */
                           A 25372    ; 5438		dj.obj.fs = fs; dj.obj.sclust = 0;	
                           A 25373    .LINE 5438
                           A 25374    
00647D ED02A6              A 25375    	LEA	BC,IX+%FFFFFFA6
006480 DD0FA3              A 25376    	LD	(IX+%FFFFFFA3),BC
006483 DD07F5              A 25377    	LD	BC,(IX+%FFFFFFF5)
006486 DD0FA6              A 25378    	LD	(IX+%FFFFFFA6),BC
006489 01000000            A 25379    	LD	BC,0
00648D DD31A3              A 25380    	LD	IY,(IX+%FFFFFFA3)
006490 FD0F07              A 25381    	LD	(IY+%7),BC
006493 FD360A00            A 25382    	LD	(IY+%A),%0
                           A 25383    ; 5439		res = dir_sdi(&dj, 0);
                           A 25384    .LINE 5439
                           A 25385    
006497 C5                  A 25386    	PUSH	BC
006498 C5                  A 25387    	PUSH	BC
006499 ED65A6              A 25388    	PEA	IX+%FFFFFFA6
00649C CD 50 12 00         A 25389    	CALL	_dir_sdi
0064A0 C1                  A 25390    	POP	BC
0064A1 C1                  A 25391    	POP	BC
0064A2 C1                  A 25392    	POP	BC
0064A3 DD2FFA              A 25393    	LD	(IX+%FFFFFFFA),HL
                           A 25394    ; 5440		if (res == FR_OK) {
                           A 25395    .LINE 5440
                           A 25396    
0064A6 01000000            A 25397    	LD	BC,0
0064AA DD27FA              A 25398    	LD	HL,(IX+%FFFFFFFA)
0064AD B7                  A 25399    	OR	A,A
0064AE ED42                A 25400    	SBC	HL,BC
0064B0 C2 83 65 00         A 25401    	JR	NZ,L_1300
                           A 25402    ; 5441			res = DIR_READ_LABEL(&dj);	/* 
                           A 25403    .LINE 5441
                           A 25404    
0064B4 01010000            A 25405    	LD	BC,1
0064B8 C5                  A 25406    	PUSH	BC
0064B9 ED65A6              A 25407    	PEA	IX+%FFFFFFA6
0064BC CD 46 1E 00         A 25408    	CALL	_dir_read
0064C0 C1                  A 25409    	POP	BC
0064C1 C1                  A 25410    	POP	BC
0064C2 DD2FFA              A 25411    	LD	(IX+%FFFFFFFA),HL
                           A 25412    ; 5442			if (res == FR_OK) {
                           A 25413    .LINE 5442
                           A 25414    
0064C5 01000000            A 25415    	LD	BC,0
0064C9 DD27FA              A 25416    	LD	HL,(IX+%FFFFFFFA)
0064CC B7                  A 25417    	OR	A,A
0064CD ED42                A 25418    	SBC	HL,BC
0064CF 20 37               A 25419    	JR	NZ,L_1298
                           A 25420    ; 5443				if (FF_FS_EXFAT && fs->fs_t
                           A 25421    ; 5444					dj.dir[XDIR_NumLabel] =
                           A 25422    ; 5445					memcpy(dj.dir + XDIR_La
                           A 25423    ; 5446				} else {
                           A 25424    ; 5447					if (di != 0) {
                           A 25425    .LINE 5447
                           A 25426    
0064D1 DD27FD              A 25427    	LD	HL,(IX+%FFFFFFFD)
0064D4 B7                  A 25428    	OR	A,A
0064D5 ED42                A 25429    	SBC	HL,BC
0064D7 28 15               A 25430    	JR	Z,L_1287
                           A 25431    ; 5448						memcpy(dj.dir, dirv
                           A 25432    .LINE 5448
                           A 25433    
0064D9 010B0000            A 25434    	LD	BC,11
0064DD C5                  A 25435    	PUSH	BC
0064DE ED65D4              A 25436    	PEA	IX+%FFFFFFD4
0064E1 DD07C1              A 25437    	LD	BC,(IX+%FFFFFFC1)
0064E4 C5                  A 25438    	PUSH	BC
0064E5 CD 00 00 00         A 25439    	CALL	_memcpy
0064E9 C1                  A 25440    	POP	BC
0064EA C1                  A 25441    	POP	BC
0064EB C1                  A 25442    	POP	BC
                           A 25443    ; 5449					} else {
                           A 25444    .LINE 5449
                           A 25445    
0064EC 18 05               A 25446    	JR	L_1290
0064EE                     A 25447    L_1287:
                           A 25448    ; 5450						dj.dir[DIR_Name] = 
                           A 25449    .LINE 5450
                           A 25450    
0064EE DD27C1              A 25451    	LD	HL,(IX+%FFFFFFC1)
0064F1 36E5                A 25452    	LD	(HL),%E5
                           A 25453    ; 5451					}
                           A 25454    ; 5452				}
0064F3                     A 25455    L_1290:
                           A 25456    .LINE 5452
                           A 25457    
                           A 25458    ; 5453				fs->wflag = 1;
                           A 25459    .LINE 5453
                           A 25460    
0064F3 DD31F5              A 25461    	LD	IY,(IX+%FFFFFFF5)
0064F6 FD360301            A 25462    	LD	(IY+%3),%1
                           A 25463    ; 5454				res = sync_fs(fs);
                           A 25464    .LINE 5454
                           A 25465    
0064FA DD07F5              A 25466    	LD	BC,(IX+%FFFFFFF5)
0064FD C5                  A 25467    	PUSH	BC
0064FE CD B3 04 00         A 25468    	CALL	_sync_fs
006502 C1                  A 25469    	POP	BC
006503 DD2FFA              A 25470    	LD	(IX+%FFFFFFFA),HL
                           A 25471    ; 5455			} else {			/* No volum
                           A 25472    .LINE 5455
                           A 25473    
006506 18 7B               A 25474    	JR	L_1300
006508                     A 25475    L_1298:
                           A 25476    ; 5456				if (res == FR_NO_FILE) {
                           A 25477    .LINE 5456
                           A 25478    
006508 01040000            A 25479    	LD	BC,4
00650C DD27FA              A 25480    	LD	HL,(IX+%FFFFFFFA)
00650F B7                  A 25481    	OR	A,A
006510 ED42                A 25482    	SBC	HL,BC
006512 20 6F               A 25483    	JR	NZ,L_1300
                           A 25484    ; 5457					res = FR_OK;
                           A 25485    .LINE 5457
                           A 25486    
006514 01000000            A 25487    	LD	BC,0
006518 DD0FFA              A 25488    	LD	(IX+%FFFFFFFA),BC
                           A 25489    ; 5458					if (di != 0) {	/* Crea
                           A 25490    .LINE 5458
                           A 25491    
00651B DD27FD              A 25492    	LD	HL,(IX+%FFFFFFFD)
00651E B7                  A 25493    	OR	A,A
00651F ED42                A 25494    	SBC	HL,BC
006521 28 60               A 25495    	JR	Z,L_1300
                           A 25496    ; 5459						res = dir_alloc(&dj
                           A 25497    .LINE 5459
                           A 25498    
006523 01010000            A 25499    	LD	BC,1
006527 C5                  A 25500    	PUSH	BC
006528 ED65A6              A 25501    	PEA	IX+%FFFFFFA6
00652B CD 15 17 00         A 25502    	CALL	_dir_alloc
00652F C1                  A 25503    	POP	BC
006530 C1                  A 25504    	POP	BC
006531 DD2FFA              A 25505    	LD	(IX+%FFFFFFFA),HL
                           A 25506    ; 5460						if (res == FR_OK) {
                           A 25507    .LINE 5460
                           A 25508    
006534 01000000            A 25509    	LD	BC,0
006538 DD27FA              A 25510    	LD	HL,(IX+%FFFFFFFA)
00653B B7                  A 25511    	OR	A,A
00653C ED42                A 25512    	SBC	HL,BC
00653E 20 43               A 25513    	JR	NZ,L_1300
                           A 25514    ; 5461							memset(dj.dir, 
                           A 25515    .LINE 5461
                           A 25516    
006540 01200000            A 25517    	LD	BC,32
006544 C5                  A 25518    	PUSH	BC
006545 01000000            A 25519    	LD	BC,0
006549 C5                  A 25520    	PUSH	BC
00654A DD07C1              A 25521    	LD	BC,(IX+%FFFFFFC1)
00654D C5                  A 25522    	PUSH	BC
00654E CD 00 00 00         A 25523    	CALL	_memset
006552 C1                  A 25524    	POP	BC
006553 C1                  A 25525    	POP	BC
006554 C1                  A 25526    	POP	BC
                           A 25527    ; 5462							if (FF_FS_EXFAT
                           A 25528    ; 5463								dj.dir[XDIR
                           A 25529    ; 5464								dj.dir[XDIR
                           A 25530    ; 5465								memcpy(dj.d
                           A 25531    ; 5466							} else {
                           A 25532    ; 5467								dj.dir[DIR_
                           A 25533    .LINE 5467
                           A 25534    
006555 DD31C1              A 25535    	LD	IY,(IX+%FFFFFFC1)
006558 ED230B              A 25536    	LEA	HL,IY+%B
00655B 3608                A 25537    	LD	(HL),%8
                           A 25538    ; 5468								memcpy(dj.d
                           A 25539    .LINE 5468
                           A 25540    
00655D 010B0000            A 25541    	LD	BC,11
006561 C5                  A 25542    	PUSH	BC
006562 ED65D4              A 25543    	PEA	IX+%FFFFFFD4
006565 DD07C1              A 25544    	LD	BC,(IX+%FFFFFFC1)
006568 C5                  A 25545    	PUSH	BC
006569 CD 00 00 00         A 25546    	CALL	_memcpy
00656D C1                  A 25547    	POP	BC
00656E C1                  A 25548    	POP	BC
00656F C1                  A 25549    	POP	BC
                           A 25550    ; 5469							}
                           A 25551    ; 5470							fs->wflag = 1;
                           A 25552    .LINE 5470
                           A 25553    
006570 DD31F5              A 25554    	LD	IY,(IX+%FFFFFFF5)
006573 FD360301            A 25555    	LD	(IY+%3),%1
                           A 25556    ; 5471							res = sync_fs(f
                           A 25557    .LINE 5471
                           A 25558    
006577 DD07F5              A 25559    	LD	BC,(IX+%FFFFFFF5)
00657A C5                  A 25560    	PUSH	BC
00657B CD B3 04 00         A 25561    	CALL	_sync_fs
00657F C1                  A 25562    	POP	BC
006580 DD2FFA              A 25563    	LD	(IX+%FFFFFFFA),HL
                           A 25564    ; 5472						}
                           A 25565    ; 5473					}
                           A 25566    ; 5474				}
                           A 25567    ; 5475			}
                           A 25568    ; 5476		}
006583                     A 25569    L_1300:
                           A 25570    .LINE 5476
                           A 25571    
                           A 25572    ; 5477	
                           A 25573    ; 5478		LEAVE_FF(fs, res);
                           A 25574    .LINE 5478
                           A 25575    
006583 DD27FA              A 25576    	LD	HL,(IX+%FFFFFFFA)
                           A 25577    ; 5479	}
006586                     A 25578    L_1301:
                           A 25579    .LINE 5479
                           A 25580    
006586 DDF9                A 25581    	LD	SP,IX
006588 DDE1                A 25582    	POP	IX
00658A C9                  A 25583    	RET	
                           A 25584    
                           A 25585    
                           A 25586    ;**************************** _f_setlabel *****
                           A 25587    ;Name                         Addr/Register   S
                           A 25588    ;_memcpy                             IMPORT  --
                           A 25589    ;_0badchr                            STATIC    
                           A 25590    ;_strchr                             IMPORT  --
                           A 25591    ;_ff_wtoupper                        IMPORT  --
                           A 25592    ;_ff_uni2oem                         IMPORT  --
                           A 25593    ;_memset                             IMPORT  --
                           A 25594    ;dj                                   IX-90    
                           A 25595    ;dirvn                                IX-44    
                           A 25596    ;dc                                   IX-22    
                           A 25597    ;temp1264                             IX-18    
                           A 25598    ;temp1259                             IX-15    
                           A 25599    ;G_87                                 IX-12    
                           A 25600    ;fs                                   IX-11    
                           A 25601    ;wc                                    IX-8    
                           A 25602    ;res                                   IX-6    
                           A 25603    ;di                                    IX-3    
                           A 25604    ;label                                 IX+6    
                           A 25605    
                           A 25606    
                           A 25607    ; Stack Frame Size: 102 (bytes)
                           A 25608    ;       Spill Code: -3 (instruction)
                           A 25609    
                           A 25610    
                           A 25611    .ENDFUNC "f_setlabel",5479,"_f_setlabel"
                           A 25612    	SEGMENT TEXT
00008D                     A 25613    _0badchr:
00008D 2B                  A 25614    	DB	43
00008E 2E                  A 25615    	DB	46
00008F 2C                  A 25616    	DB	44
000090 3B                  A 25617    	DB	59
000091 3D                  A 25618    	DB	61
000092 5B                  A 25619    	DB	91
000093 5D                  A 25620    	DB	93
000094 2F                  A 25621    	DB	47
000095 2A                  A 25622    	DB	42
000096 3A                  A 25623    	DB	58
000097 3C                  A 25624    	DB	60
000098 3E                  A 25625    	DB	62
000099 7C                  A 25626    	DB	124
00009A 5C                  A 25627    	DB	92
00009B 22                  A 25628    	DB	34
00009C 3F                  A 25629    	DB	63
00009D 7F                  A 25630    	DB	127
00009E 00                  A 25631    	DB	0
                           A 25632    	SEGMENT CODE
                           A 25633    ; 5480	
                           A 25634    ; 5481	#endif /* !FF_FS_READONLY */
                           A 25635    ; 5482	#endif /* FF_USE_LABEL */
                           A 25636    ; 5483	
                           A 25637    ; 5484	
                           A 25638    ; 5485	
                           A 25639    ; 5486	#if FF_USE_EXPAND && !FF_FS_READONLY
                           A 25640    ; 5487	/*-------------------------------------
                           A 25641    ; 5488	/* Allocate a Contiguous Blocks to the 
                           A 25642    ; 5489	/*-------------------------------------
                           A 25643    ; 5490	
                           A 25644    ; 5491	FRESULT f_expand (
                           A 25645    ; 5492		FIL* fp,		/* Pointer to the f
                           A 25646    ; 5493		FSIZE_t fsz,	/* File size to be 
                           A 25647    ; 5494		BYTE opt		/* Operation mode 0
                           A 25648    ; 5495	)
                           A 25649    ; 5496	{
                           A 25650    ; 5497		FRESULT res;
                           A 25651    ; 5498		FATFS *fs;
                           A 25652    ; 5499		DWORD n, clst, stcl, scl, ncl, tcl,
                           A 25653    ; 5500	
                           A 25654    ; 5501	
                           A 25655    ; 5502		res = validate(&fp->obj, &fs);		
                           A 25656    ; 5503		if (res != FR_OK || (res = (FRESULT
                           A 25657    ; 5504		if (fsz == 0 || fp->obj.objsize != 
                           A 25658    ; 5505	#if FF_FS_EXFAT
                           A 25659    ; 5506		if (fs->fs_type != FS_EXFAT && fsz 
                           A 25660    ; 5507	#endif
                           A 25661    ; 5508		n = (DWORD)fs->csize * SS(fs);	/* 
                           A 25662    ; 5509		tcl = (DWORD)(fsz / n) + ((fsz & (n
                           A 25663    ; 5510		stcl = fs->last_clst; lclst = 0;
                           A 25664    ; 5511		if (stcl < 2 || stcl >= fs->n_faten
                           A 25665    ; 5512	
                           A 25666    ; 5513	#if FF_FS_EXFAT
                           A 25667    ; 5514		if (fs->fs_type == FS_EXFAT) {
                           A 25668    ; 5515			scl = find_bitmap(fs, stcl, tcl
                           A 25669    ; 5516			if (scl == 0) res = FR_DENIED;	
                           A 25670    ; 5517			if (scl == 0xFFFFFFFF) res = FR
                           A 25671    ; 5518			if (res == FR_OK) {	/* A contig
                           A 25672    ; 5519				if (opt) {		/* Allocate
                           A 25673    ; 5520					res = change_bitmap(fs,
                           A 25674    ; 5521					lclst = scl + tcl - 1;
                           A 25675    ; 5522				} else {		/* Set it a
                           A 25676    ; 5523					lclst = scl - 1;
                           A 25677    ; 5524				}
                           A 25678    ; 5525			}
                           A 25679    ; 5526		} else
                           A 25680    ; 5527	#endif
                           A 25681    ; 5528		{
                           A 25682    ; 5529			scl = clst = stcl; ncl = 0;
                           A 25683    ; 5530			for (;;) {	/* Find a contiguou
                           A 25684    ; 5531				n = get_fat(&fp->obj, clst)
                           A 25685    ; 5532				if (++clst >= fs->n_fatent)
                           A 25686    ; 5533				if (n == 1) { res = FR_INT_
                           A 25687    ; 5534				if (n == 0xFFFFFFFF) { res 
                           A 25688    ; 5535				if (n == 0) {	/* Is it a 
                           A 25689    ; 5536					if (++ncl == tcl) break
                           A 25690    ; 5537				} else {
                           A 25691    ; 5538					scl = clst; ncl = 0;	
                           A 25692    ; 5539				}
                           A 25693    ; 5540				if (clst == stcl) { res = F
                           A 25694    ; 5541			}
                           A 25695    ; 5542			if (res == FR_OK) {	/* A contig
                           A 25696    ; 5543				if (opt) {		/* Allocate
                           A 25697    ; 5544					for (clst = scl, n = tc
                           A 25698    ; 5545						res = put_fat(fs, c
                           A 25699    ; 5546						if (res != FR_OK) b
                           A 25700    ; 5547						lclst = clst;
                           A 25701    ; 5548					}
                           A 25702    ; 5549				} else {		/* Set it a
                           A 25703    ; 5550					lclst = scl - 1;
                           A 25704    ; 5551				}
                           A 25705    ; 5552			}
                           A 25706    ; 5553		}
                           A 25707    ; 5554	
                           A 25708    ; 5555		if (res == FR_OK) {
                           A 25709    ; 5556			fs->last_clst = lclst;		/* 
                           A 25710    ; 5557			if (opt) {	/* Is it allocated 
                           A 25711    ; 5558				fp->obj.sclust = scl;		
                           A 25712    ; 5559				fp->obj.objsize = fsz;
                           A 25713    ; 5560				if (FF_FS_EXFAT) fp->obj.st
                           A 25714    ; 5561				fp->flag |= FA_MODIFIED;
                           A 25715    ; 5562				if (fs->free_clst <= fs->n_
                           A 25716    ; 5563					fs->free_clst -= tcl;
                           A 25717    ; 5564					fs->fsi_flag |= 1;
                           A 25718    ; 5565				}
                           A 25719    ; 5566			}
                           A 25720    ; 5567		}
                           A 25721    ; 5568	
                           A 25722    ; 5569		LEAVE_FF(fs, res);
                           A 25723    ; 5570	}
                           A 25724    ; 5571	
                           A 25725    ; 5572	#endif /* FF_USE_EXPAND && !FF_FS_READO
                           A 25726    ; 5573	
                           A 25727    ; 5574	
                           A 25728    ; 5575	
                           A 25729    ; 5576	#if FF_USE_FORWARD
                           A 25730    ; 5577	/*-------------------------------------
                           A 25731    ; 5578	/* Forward Data to the Stream Directly 
                           A 25732    ; 5579	/*-------------------------------------
                           A 25733    ; 5580	
                           A 25734    ; 5581	FRESULT f_forward (
                           A 25735    ; 5582		FIL* fp, 						/* 
                           A 25736    ; 5583		UINT (*func)(const BYTE*,UINT),	/* 
                           A 25737    ; 5584		UINT btf,						/* 
                           A 25738    ; 5585		UINT* bf						/* 
                           A 25739    ; 5586	)
                           A 25740    ; 5587	{
                           A 25741    ; 5588		FRESULT res;
                           A 25742    ; 5589		FATFS *fs;
                           A 25743    ; 5590		DWORD clst;
                           A 25744    ; 5591		LBA_t sect;
                           A 25745    ; 5592		FSIZE_t remain;
                           A 25746    ; 5593		UINT rcnt, csect;
                           A 25747    ; 5594		BYTE *dbuf;
                           A 25748    ; 5595	
                           A 25749    ; 5596	
                           A 25750    ; 5597		*bf = 0;	/* Clear transfer byte 
                           A 25751    ; 5598		res = validate(&fp->obj, &fs);		
                           A 25752    ; 5599		if (res != FR_OK || (res = (FRESULT
                           A 25753    ; 5600		if (!(fp->flag & FA_READ)) LEAVE_FF
                           A 25754    ; 5601	
                           A 25755    ; 5602		remain = fp->obj.objsize - fp->fptr
                           A 25756    ; 5603		if (btf > remain) btf = (UINT)remai
                           A 25757    ; 5604	
                           A 25758    ; 5605		for ( ; btf > 0 && (*func)(0, 0); f
                           A 25759    ; 5606			csect = (UINT)(fp->fptr / SS(fs
                           A 25760    ; 5607			if (fp->fptr % SS(fs) == 0) {	
                           A 25761    ; 5608				if (csect == 0) {			
                           A 25762    ; 5609					clst = (fp->fptr == 0) 
                           A 25763    ; 5610						fp->obj.sclust : ge
                           A 25764    ; 5611					if (clst <= 1) ABORT(fs
                           A 25765    ; 5612					if (clst == 0xFFFFFFFF)
                           A 25766    ; 5613					fp->clust = clst;		
                           A 25767    ; 5614				}
                           A 25768    ; 5615			}
                           A 25769    ; 5616			sect = clst2sect(fs, fp->clust)
                           A 25770    ; 5617			if (sect == 0) ABORT(fs, FR_INT
                           A 25771    ; 5618			sect += csect;
                           A 25772    ; 5619	#if FF_FS_TINY
                           A 25773    ; 5620			if (move_window(fs, sect) != FR
                           A 25774    ; 5621			dbuf = fs->win;
                           A 25775    ; 5622	#else
                           A 25776    ; 5623			if (fp->sect != sect) {		/* 
                           A 25777    ; 5624	#if !FF_FS_READONLY
                           A 25778    ; 5625				if (fp->flag & FA_DIRTY) {	
                           A 25779    ; 5626					if (disk_write(fs->pdrv
                           A 25780    ; 5627					fp->flag &= (BYTE)~FA_D
                           A 25781    ; 5628				}
                           A 25782    ; 5629	#endif
                           A 25783    ; 5630				if (disk_read(fs->pdrv, fp-
                           A 25784    ; 5631			}
                           A 25785    ; 5632			dbuf = fp->buf;
                           A 25786    ; 5633	#endif
                           A 25787    ; 5634			fp->sect = sect;
                           A 25788    ; 5635			rcnt = SS(fs) - (UINT)fp->fptr 
                           A 25789    ; 5636			if (rcnt > btf) rcnt = btf;		
                           A 25790    ; 5637			rcnt = (*func)(dbuf + ((UINT)fp
                           A 25791    ; 5638			if (rcnt == 0) ABORT(fs, FR_INT
                           A 25792    ; 5639		}
                           A 25793    ; 5640	
                           A 25794    ; 5641		LEAVE_FF(fs, FR_OK);
                           A 25795    ; 5642	}
                           A 25796    ; 5643	#endif /* FF_USE_FORWARD */
                           A 25797    ; 5644	
                           A 25798    ; 5645	
                           A 25799    ; 5646	
                           A 25800    ; 5647	#if !FF_FS_READONLY && FF_USE_MKFS
                           A 25801    ; 5648	/*-------------------------------------
                           A 25802    ; 5649	/* Create FAT/exFAT volume (with sub-fu
                           A 25803    ; 5650	/*-------------------------------------
                           A 25804    ; 5651	
                           A 25805    ; 5652	#define N_SEC_TRACK 63			/* Sect
                           A 25806    ; 5653	#define	GPT_ALIGN	0x100000	/* Alig
                           A 25807    ; 5654	#define GPT_ITEMS	128			/* Numb
                           A 25808    ; 5655	
                           A 25809    ; 5656	
                           A 25810    ; 5657	/* Create partitions on the physical dr
                           A 25811    ; 5658	
                           A 25812    ; 5659	static FRESULT create_partition (
                           A 25813    ; 5660		BYTE drv,			/* Physical dri
                           A 25814    ; 5661		const LBA_t plst[],	/* Partition li
                           A 25815    ; 5662		BYTE sys,			/* System ID (f
                           A 25816    ; 5663		BYTE* buf			/* Working buff
                           A 25817    ; 5664	)
                           A 25818    ; 5665	{
                           A 25819    ; 5666		UINT i, cy;
                           A 25820    ; 5667		LBA_t sz_drv;
                           A 25821    ; 5668		DWORD sz_drv32, nxt_alloc32, sz_par
                           A 25822    ; 5669		BYTE *pte;
                           A 25823    ; 5670		BYTE hd, n_hd, sc, n_sc;
                           A 25824    ; 5671	
                           A 25825    ; 5672		/* Get physical drive size */
                           A 25826    ; 5673		if (disk_ioctl(drv, GET_SECTOR_COUN
                           A 25827    ; 5674	
                           A 25828    ; 5675	#if FF_LBA64
                           A 25829    ; 5676		if (sz_drv >= FF_MIN_GPT) {	/* Crea
                           A 25830    ; 5677			WORD ss;
                           A 25831    ; 5678			UINT sz_ptbl, pi, si, ofs;
                           A 25832    ; 5679			DWORD bcc, rnd, align;
                           A 25833    ; 5680			QWORD nxt_alloc, sz_part, sz_po
                           A 25834    ; 5681			static const BYTE gpt_mbr[16] =
                           A 25835    ; 5682	
                           A 25836    ; 5683	#if FF_MAX_SS != FF_MIN_SS
                           A 25837    ; 5684			if (disk_ioctl(drv, GET_SECTOR_
                           A 25838    ; 5685			if (ss > FF_MAX_SS || ss < FF_M
                           A 25839    ; 5686	#else
                           A 25840    ; 5687			ss = FF_MAX_SS;
                           A 25841    ; 5688	#endif
                           A 25842    ; 5689			rnd = (DWORD)sz_drv + GET_FATTI
                           A 25843    ; 5690			align = GPT_ALIGN / ss;			
                           A 25844    ; 5691			sz_ptbl = GPT_ITEMS * SZ_GPTE /
                           A 25845    ; 5692			top_bpt = sz_drv - sz_ptbl - 1;
                           A 25846    ; 5693			nxt_alloc = 2 + sz_ptbl;		
                           A 25847    ; 5694			sz_pool = top_bpt - nxt_alloc;	
                           A 25848    ; 5695			bcc = 0xFFFFFFFF; sz_part = 1;
                           A 25849    ; 5696			pi = si = 0;	/* partition ta
                           A 25850    ; 5697			do {
                           A 25851    ; 5698				if (pi * SZ_GPTE % ss == 0)
                           A 25852    ; 5699				if (sz_part != 0) {			
                           A 25853    ; 5700					nxt_alloc = (nxt_alloc 
                           A 25854    ; 5701					sz_part = plst[si++];	
                           A 25855    ; 5702					if (sz_part <= 100) {	
                           A 25856    ; 5703						sz_part = sz_pool *
                           A 25857    ; 5704						sz_part = (sz_part 
                           A 25858    ; 5705					}
                           A 25859    ; 5706					if (nxt_alloc + sz_part
                           A 25860    ; 5707						sz_part = (nxt_allo
                           A 25861    ; 5708					}
                           A 25862    ; 5709				}
                           A 25863    ; 5710				if (sz_part != 0) {			
                           A 25864    ; 5711					ofs = pi * SZ_GPTE % ss
                           A 25865    ; 5712					memcpy(buf + ofs + GPTE
                           A 25866    ; 5713					rnd = make_rand(rnd, bu
                           A 25867    ; 5714					st_qword(buf + ofs + GP
                           A 25868    ; 5715					st_qword(buf + ofs + GP
                           A 25869    ; 5716					nxt_alloc += sz_part;	
                           A 25870    ; 5717				}
                           A 25871    ; 5718				if ((pi + 1) * SZ_GPTE % ss
                           A 25872    ; 5719					for (i = 0; i < ss; bcc
                           A 25873    ; 5720					if (disk_write(drv, buf
                           A 25874    ; 5721					if (disk_write(drv, buf
                           A 25875    ; 5722				}
                           A 25876    ; 5723			} while (++pi < GPT_ITEMS);
                           A 25877    ; 5724	
                           A 25878    ; 5725			/* Create primary GPT header */
                           A 25879    ; 5726			memset(buf, 0, ss);
                           A 25880    ; 5727			memcpy(buf + GPTH_Sign, "EFI PA
                           A 25881    ; 5728			st_dword(buf + GPTH_PtBcc, ~bcc
                           A 25882    ; 5729			st_qword(buf + GPTH_CurLba, 1);
                           A 25883    ; 5730			st_qword(buf + GPTH_BakLba, sz_
                           A 25884    ; 5731			st_qword(buf + GPTH_FstLba, 2 +
                           A 25885    ; 5732			st_qword(buf + GPTH_LstLba, top
                           A 25886    ; 5733			st_dword(buf + GPTH_PteSize, SZ
                           A 25887    ; 5734			st_dword(buf + GPTH_PtNum, GPT_
                           A 25888    ; 5735			st_dword(buf + GPTH_PtOfs, 2);	
                           A 25889    ; 5736			rnd = make_rand(rnd, buf + GPTH
                           A 25890    ; 5737			for (i = 0, bcc= 0xFFFFFFFF; i 
                           A 25891    ; 5738			st_dword(buf + GPTH_Bcc, ~bcc);
                           A 25892    ; 5739			if (disk_write(drv, buf, 1, 1) 
                           A 25893    ; 5740	
                           A 25894    ; 5741			/* Create secondary GPT header 
                           A 25895    ; 5742			st_qword(buf + GPTH_CurLba, sz_
                           A 25896    ; 5743			st_qword(buf + GPTH_BakLba, 1);
                           A 25897    ; 5744			st_qword(buf + GPTH_PtOfs, top_
                           A 25898    ; 5745			st_dword(buf + GPTH_Bcc, 0);
                           A 25899    ; 5746			for (i = 0, bcc= 0xFFFFFFFF; i 
                           A 25900    ; 5747			st_dword(buf + GPTH_Bcc, ~bcc);
                           A 25901    ; 5748			if (disk_write(drv, buf, sz_drv
                           A 25902    ; 5749	
                           A 25903    ; 5750			/* Create protective MBR */
                           A 25904    ; 5751			memset(buf, 0, ss);
                           A 25905    ; 5752			memcpy(buf + MBR_Table, gpt_mbr
                           A 25906    ; 5753			st_word(buf + BS_55AA, 0xAA55);
                           A 25907    ; 5754			if (disk_write(drv, buf, 0, 1) 
                           A 25908    ; 5755	
                           A 25909    ; 5756		} else
                           A 25910    ; 5757	#endif
                           A 25911    ; 5758		{	/* Create partitions in MBR for
                           A 25912    ; 5759			sz_drv32 = (DWORD)sz_drv;
                           A 25913    ; 5760			n_sc = N_SEC_TRACK;				
                           A 25914    ; 5761			for (n_hd = 8; n_hd != 0 && sz_
                           A 25915    ; 5762			if (n_hd == 0) n_hd = 255;		
                           A 25916    ; 5763	
                           A 25917    ; 5764			memset(buf, 0, FF_MAX_SS);		
                           A 25918    ; 5765			pte = buf + MBR_Table;	/* Part
                           A 25919    ; 5766			for (i = 0, nxt_alloc32 = n_sc;
                           A 25920    ; 5767				sz_part32 = (DWORD)plst[i];
                           A 25921    ; 5768				if (sz_part32 <= 100) sz_pa
                           A 25922    ; 5769				if (nxt_alloc32 + sz_part32
                           A 25923    ; 5770				if (sz_part32 == 0) break;	
                           A 25924    ; 5771	
                           A 25925    ; 5772				st_dword(pte + PTE_StLba, n
                           A 25926    ; 5773				st_dword(pte + PTE_SizLba, 
                           A 25927    ; 5774				pte[PTE_System] = sys;		
                           A 25928    ; 5775	
                           A 25929    ; 5776				cy = (UINT)(nxt_alloc32 / n
                           A 25930    ; 5777				hd = (BYTE)(nxt_alloc32 / n
                           A 25931    ; 5778				sc = (BYTE)(nxt_alloc32 % n
                           A 25932    ; 5779				pte[PTE_StHead] = hd;
                           A 25933    ; 5780				pte[PTE_StSec] = (BYTE)((cy
                           A 25934    ; 5781				pte[PTE_StCyl] = (BYTE)cy;
                           A 25935    ; 5782	
                           A 25936    ; 5783				cy = (UINT)((nxt_alloc32 + 
                           A 25937    ; 5784				hd = (BYTE)((nxt_alloc32 + 
                           A 25938    ; 5785				sc = (BYTE)((nxt_alloc32 + 
                           A 25939    ; 5786				pte[PTE_EdHead] = hd;
                           A 25940    ; 5787				pte[PTE_EdSec] = (BYTE)((cy
                           A 25941    ; 5788				pte[PTE_EdCyl] = (BYTE)cy;
                           A 25942    ; 5789	
                           A 25943    ; 5790				pte += SZ_PTE;		/* Next
                           A 25944    ; 5791			}
                           A 25945    ; 5792	
                           A 25946    ; 5793			st_word(buf + BS_55AA, 0xAA55);
                           A 25947    ; 5794			if (disk_write(drv, buf, 0, 1) 
                           A 25948    ; 5795		}
                           A 25949    ; 5796	
                           A 25950    ; 5797		return FR_OK;
                           A 25951    ; 5798	}
                           A 25952    ; 5799	
                           A 25953    ; 5800	
                           A 25954    ; 5801	
                           A 25955    ; 5802	FRESULT f_mkfs (
                           A 25956    ; 5803		const TCHAR* path,		/* Logical 
                           A 25957    ; 5804		const MKFS_PARM* opt,	/* Format o
                           A 25958    ; 5805		void* work,				/* Pointer 
                           A 25959    ; 5806		UINT len				/* Size of 
                           A 25960    ; 5807	)
                           A 25961    ; 5808	{
                           A 25962    ; 5809		static const WORD cst[] = {1, 4, 16
                           A 25963    ; 5810		static const WORD cst32[] = {1, 2, 
                           A 25964    ; 5811		static const MKFS_PARM defopt = {FM
                           A 25965    ; 5812		BYTE fsopt, fsty, sys, *buf, *pte, 
                           A 25966    ; 5813		WORD ss;	/* Sector size */
                           A 25967    ; 5814		DWORD sz_buf, sz_blk, n_clst, pau, 
                           A 25968    ; 5815		LBA_t sz_vol, b_vol, b_fat, b_data;
                           A 25969    ; 5816		LBA_t sect, lba[2];
                           A 25970    ; 5817		DWORD sz_rsv, sz_fat, sz_dir, sz_au
                           A 25971    ; 5818		UINT n_fat, n_root, i;				
                           A 25972    ; 5819		int vol;
                           A 25973    ; 5820		DSTATUS ds;
                           A 25974    ; 5821		FRESULT fr;
                           A 25975    ; 5822	
                           A 25976    ; 5823	
                           A 25977    ; 5824		/* Check mounted drive and clear wo
                           A 25978    ; 5825		vol = get_ldnumber(&path);			
                           A 25979    ; 5826		if (vol < 0) return FR_INVALID_DRIV
                           A 25980    ; 5827		if (FatFs[vol]) FatFs[vol]->fs_type
                           A 25981    ; 5828		pdrv = LD2PD(vol);			/* Phys
                           A 25982    ; 5829		ipart = LD2PT(vol);			/* Part
                           A 25983    ; 5830		if (!opt) opt = &defopt;	/* Use 
                           A 25984    ; 5831	
                           A 25985    ; 5832		/* Get physical drive status (sz_dr
                           A 25986    ; 5833		ds = disk_initialize(pdrv);
                           A 25987    ; 5834		if (ds & STA_NOINIT) return FR_NOT_
                           A 25988    ; 5835		if (ds & STA_PROTECT) return FR_WRI
                           A 25989    ; 5836		sz_blk = opt->align;
                           A 25990    ; 5837		if (sz_blk == 0 && disk_ioctl(pdrv,
                           A 25991    ; 5838	 	if (sz_blk == 0 || sz_blk > 0x8000 
                           A 25992    ; 5839	#if FF_MAX_SS != FF_MIN_SS
                           A 25993    ; 5840		if (disk_ioctl(pdrv, GET_SECTOR_SIZ
                           A 25994    ; 5841		if (ss > FF_MAX_SS || ss < FF_MIN_S
                           A 25995    ; 5842	#else
                           A 25996    ; 5843		ss = FF_MAX_SS;
                           A 25997    ; 5844	#endif
                           A 25998    ; 5845		/* Options for FAT sub-type and FAT
                           A 25999    ; 5846		fsopt = opt->fmt & (FM_ANY | FM_SFD
                           A 26000    ; 5847		n_fat = (opt->n_fat >= 1 && opt->n_
                           A 26001    ; 5848		n_root = (opt->n_root >= 1 && opt->
                           A 26002    ; 5849		sz_au = (opt->au_size <= 0x1000000 
                           A 26003    ; 5850		sz_au /= ss;	/* Byte --> Sector 
                           A 26004    ; 5851	
                           A 26005    ; 5852		/* Get working buffer */
                           A 26006    ; 5853		sz_buf = len / ss;		/* Size of 
                           A 26007    ; 5854		if (sz_buf == 0) return FR_NOT_ENOU
                           A 26008    ; 5855		buf = (BYTE*)work;		/* Working 
                           A 26009    ; 5856	#if FF_USE_LFN == 3
                           A 26010    ; 5857		if (!buf) buf = ff_memalloc(sz_buf 
                           A 26011    ; 5858	#endif
                           A 26012    ; 5859		if (!buf) return FR_NOT_ENOUGH_CORE
                           A 26013    ; 5860	
                           A 26014    ; 5861		/* Determine where the volume to be
                           A 26015    ; 5862		b_vol = sz_vol = 0;
                           A 26016    ; 5863		if (FF_MULTI_PARTITION && ipart != 
                           A 26017    ; 5864			/* Get partition location from 
                           A 26018    ; 5865			if (disk_read(pdrv, buf, 0, 1) 
                           A 26019    ; 5866			if (ld_word(buf + BS_55AA) != 0
                           A 26020    ; 5867	#if FF_LBA64
                           A 26021    ; 5868			if (buf[MBR_Table + PTE_System]
                           A 26022    ; 5869				DWORD n_ent, ofs;
                           A 26023    ; 5870				QWORD pt_lba;
                           A 26024    ; 5871	
                           A 26025    ; 5872				/* Get the partition locati
                           A 26026    ; 5873				if (disk_read(pdrv, buf, 1,
                           A 26027    ; 5874				if (!test_gpt_header(buf)) 
                           A 26028    ; 5875				n_ent = ld_dword(buf + GPTH
                           A 26029    ; 5876				pt_lba = ld_qword(buf + GPT
                           A 26030    ; 5877				ofs = i = 0;
                           A 26031    ; 5878				while (n_ent) {		/* Find
                           A 26032    ; 5879					if (ofs == 0 && disk_re
                           A 26033    ; 5880					if (!memcmp(buf + ofs +
                           A 26034    ; 5881						b_vol = ld_qword(bu
                           A 26035    ; 5882						sz_vol = ld_qword(b
                           A 26036    ; 5883						break;
                           A 26037    ; 5884					}
                           A 26038    ; 5885					n_ent--; ofs = (ofs + S
                           A 26039    ; 5886				}
                           A 26040    ; 5887				if (n_ent == 0) LEAVE_MKFS(
                           A 26041    ; 5888				fsopt |= 0x80;	/* Partitio
                           A 26042    ; 5889			} else
                           A 26043    ; 5890	#endif
                           A 26044    ; 5891			{	/* Get the partition locati
                           A 26045    ; 5892				pte = buf + (MBR_Table + (i
                           A 26046    ; 5893				if (ipart > 4 || pte[PTE_Sy
                           A 26047    ; 5894				b_vol = ld_dword(pte + PTE_
                           A 26048    ; 5895				sz_vol = ld_dword(pte + PTE
                           A 26049    ; 5896			}
                           A 26050    ; 5897		} else {	/* The volume is associ
                           A 26051    ; 5898			if (disk_ioctl(pdrv, GET_SECTOR
                           A 26052    ; 5899			if (!(fsopt & FM_SFD)) {	/* 
                           A 26053    ; 5900				/* Create a single-partitio
                           A 26054    ; 5901	#if FF_LBA64
                           A 26055    ; 5902				if (sz_vol >= FF_MIN_GPT) {
                           A 26056    ; 5903					fsopt |= 0x80;		/* 
                           A 26057    ; 5904					b_vol = GPT_ALIGN / ss;
                           A 26058    ; 5905				} else
                           A 26059    ; 5906	#endif
                           A 26060    ; 5907				{	/* Partitioning is in M
                           A 26061    ; 5908					if (sz_vol > N_SEC_TRAC
                           A 26062    ; 5909						b_vol = N_SEC_TRACK
                           A 26063    ; 5910					}
                           A 26064    ; 5911				}
                           A 26065    ; 5912			}
                           A 26066    ; 5913		}
                           A 26067    ; 5914		if (sz_vol < 128) LEAVE_MKFS(FR_MKF
                           A 26068    ; 5915	
                           A 26069    ; 5916		/* Now start to create an FAT volum
                           A 26070    ; 5917	
                           A 26071    ; 5918		do {	/* Pre-determine the FAT ty
                           A 26072    ; 5919			if (FF_FS_EXFAT && (fsopt & FM_
                           A 26073    ; 5920				if ((fsopt & FM_ANY) == FM_
                           A 26074    ; 5921					fsty = FS_EXFAT; break;
                           A 26075    ; 5922				}
                           A 26076    ; 5923			}
                           A 26077    ; 5924	#if FF_LBA64
                           A 26078    ; 5925			if (sz_vol >= 0x100000000) LEAV
                           A 26079    ; 5926	#endif
                           A 26080    ; 5927			if (sz_au > 128) sz_au = 128;	
                           A 26081    ; 5928			if (fsopt & FM_FAT32) {	/* FAT3
                           A 26082    ; 5929				if (!(fsopt & FM_FAT)) {	
                           A 26083    ; 5930					fsty = FS_FAT32; break;
                           A 26084    ; 5931				}
                           A 26085    ; 5932			}
                           A 26086    ; 5933			if (!(fsopt & FM_FAT)) LEAVE_MK
                           A 26087    ; 5934			fsty = FS_FAT16;
                           A 26088    ; 5935		} while (0);
                           A 26089    ; 5936	
                           A 26090    ; 5937		vsn = (DWORD)sz_vol + GET_FATTIME()
                           A 26091    ; 5938	
                           A 26092    ; 5939	#if FF_FS_EXFAT
                           A 26093    ; 5940		if (fsty == FS_EXFAT) {	/* Create a
                           A 26094    ; 5941			DWORD szb_bit, szb_case, sum, n
                           A 26095    ; 5942			WCHAR ch, si;
                           A 26096    ; 5943			UINT j, st;
                           A 26097    ; 5944	
                           A 26098    ; 5945			if (sz_vol < 0x1000) LEAVE_MKFS
                           A 26099    ; 5946	#if FF_USE_TRIM
                           A 26100    ; 5947			lba[0] = b_vol; lba[1] = b_vol 
                           A 26101    ; 5948			disk_ioctl(pdrv, CTRL_TRIM, lba
                           A 26102    ; 5949	#endif
                           A 26103    ; 5950			/* Determine FAT location, data
                           A 26104    ; 5951			if (sz_au == 0) {	/* AU auto-
                           A 26105    ; 5952				sz_au = 8;
                           A 26106    ; 5953				if (sz_vol >= 0x80000) sz_a
                           A 26107    ; 5954				if (sz_vol >= 0x4000000) sz
                           A 26108    ; 5955			}
                           A 26109    ; 5956			b_fat = b_vol + 32;				
                           A 26110    ; 5957			sz_fat = (DWORD)((sz_vol / sz_a
                           A 26111    ; 5958			b_data = (b_fat + sz_fat + sz_b
                           A 26112    ; 5959			if (b_data - b_vol >= sz_vol / 
                           A 26113    ; 5960			n_clst = (DWORD)(sz_vol - (b_da
                           A 26114    ; 5961			if (n_clst <16) LEAVE_MKFS(FR_M
                           A 26115    ; 5962			if (n_clst > MAX_EXFAT) LEAVE_M
                           A 26116    ; 5963	
                           A 26117    ; 5964			szb_bit = (n_clst + 7) / 8;		
                           A 26118    ; 5965			clen[0] = (szb_bit + sz_au * ss
                           A 26119    ; 5966	
                           A 26120    ; 5967			/* Create a compressed up-case 
                           A 26121    ; 5968			sect = b_data + sz_au * clen[0]
                           A 26122    ; 5969			sum = 0;						
                           A 26123    ; 5970			st = 0; si = 0; i = 0; j = 0; s
                           A 26124    ; 5971			do {
                           A 26125    ; 5972				switch (st) {
                           A 26126    ; 5973				case 0:
                           A 26127    ; 5974					ch = (WCHAR)ff_wtoupper
                           A 26128    ; 5975					if (ch != si) {
                           A 26129    ; 5976						si++; break;		
                           A 26130    ; 5977					}
                           A 26131    ; 5978					for (j = 1; (WCHAR)(si 
                           A 26132    ; 5979					if (j >= 128) {
                           A 26133    ; 5980						ch = 0xFFFF; st = 2
                           A 26134    ; 5981					}
                           A 26135    ; 5982					st = 1;			/* Do n
                           A 26136    ; 5983					/* FALLTHROUGH */
                           A 26137    ; 5984				case 1:
                           A 26138    ; 5985					ch = si++;		/* Fill
                           A 26139    ; 5986					if (--j == 0) st = 0;
                           A 26140    ; 5987					break;
                           A 26141    ; 5988	
                           A 26142    ; 5989				default:
                           A 26143    ; 5990					ch = (WCHAR)j; si += (W
                           A 26144    ; 5991					st = 0;
                           A 26145    ; 5992				}
                           A 26146    ; 5993				sum = xsum32(buf[i + 0] = (
                           A 26147    ; 5994				sum = xsum32(buf[i + 1] = (
                           A 26148    ; 5995				i += 2; szb_case += 2;
                           A 26149    ; 5996				if (si == 0 || i == sz_buf 
                           A 26150    ; 5997					n = (i + ss - 1) / ss;
                           A 26151    ; 5998					if (disk_write(pdrv, bu
                           A 26152    ; 5999					sect += n; i = 0;
                           A 26153    ; 6000				}
                           A 26154    ; 6001			} while (si);
                           A 26155    ; 6002			clen[1] = (szb_case + sz_au * s
                           A 26156    ; 6003			clen[2] = 1;	/* Number of ro
                           A 26157    ; 6004	
                           A 26158    ; 6005			/* Initialize the allocation bi
                           A 26159    ; 6006			sect = b_data; nsect = (szb_bit
                           A 26160    ; 6007			nbit = clen[0] + clen[1] + clen
                           A 26161    ; 6008			do {
                           A 26162    ; 6009				memset(buf, 0, sz_buf * ss)
                           A 26163    ; 6010				for (i = 0; nbit != 0 && i 
                           A 26164    ; 6011				n = (nsect > sz_buf) ? sz_b
                           A 26165    ; 6012				if (disk_write(pdrv, buf, s
                           A 26166    ; 6013				sect += n; nsect -= n;
                           A 26167    ; 6014			} while (nsect);
                           A 26168    ; 6015	
                           A 26169    ; 6016			/* Initialize the FAT */
                           A 26170    ; 6017			sect = b_fat; nsect = sz_fat;	
                           A 26171    ; 6018			j = nbit = clu = 0;
                           A 26172    ; 6019			do {
                           A 26173    ; 6020				memset(buf, 0, sz_buf * ss)
                           A 26174    ; 6021				if (clu == 0) {	/* Initiali
                           A 26175    ; 6022					st_dword(buf + i, 0xFFF
                           A 26176    ; 6023					st_dword(buf + i, 0xFFF
                           A 26177    ; 6024				}
                           A 26178    ; 6025				do {			/* Create c
                           A 26179    ; 6026					while (nbit != 0 && i <
                           A 26180    ; 6027						st_dword(buf + i, (
                           A 26181    ; 6028						i += 4; clu++; nbit
                           A 26182    ; 6029					}
                           A 26183    ; 6030					if (nbit == 0 && j < 3)
                           A 26184    ; 6031				} while (nbit != 0 && i < s
                           A 26185    ; 6032				n = (nsect > sz_buf) ? sz_b
                           A 26186    ; 6033				if (disk_write(pdrv, buf, s
                           A 26187    ; 6034				sect += n; nsect -= n;
                           A 26188    ; 6035			} while (nsect);
                           A 26189    ; 6036	
                           A 26190    ; 6037			/* Initialize the root director
                           A 26191    ; 6038			memset(buf, 0, sz_buf * ss);
                           A 26192    ; 6039			buf[SZDIRE * 0 + 0] = ET_VLABEL
                           A 26193    ; 6040			buf[SZDIRE * 1 + 0] = ET_BITMAP
                           A 26194    ; 6041			st_dword(buf + SZDIRE * 1 + 20,
                           A 26195    ; 6042			st_dword(buf + SZDIRE * 1 + 24,
                           A 26196    ; 6043			buf[SZDIRE * 2 + 0] = ET_UPCASE
                           A 26197    ; 6044			st_dword(buf + SZDIRE * 2 + 4, 
                           A 26198    ; 6045			st_dword(buf + SZDIRE * 2 + 20,
                           A 26199    ; 6046			st_dword(buf + SZDIRE * 2 + 24,
                           A 26200    ; 6047			sect = b_data + sz_au * (clen[0
                           A 26201    ; 6048			do {	/* Fill root directory 
                           A 26202    ; 6049				n = (nsect > sz_buf) ? sz_b
                           A 26203    ; 6050				if (disk_write(pdrv, buf, s
                           A 26204    ; 6051				memset(buf, 0, ss);	/* Rest
                           A 26205    ; 6052				sect += n; nsect -= n;
                           A 26206    ; 6053			} while (nsect);
                           A 26207    ; 6054	
                           A 26208    ; 6055			/* Create two set of the exFAT 
                           A 26209    ; 6056			sect = b_vol;
                           A 26210    ; 6057			for (n = 0; n < 2; n++) {
                           A 26211    ; 6058				/* Main record (+0) */
                           A 26212    ; 6059				memset(buf, 0, ss);
                           A 26213    ; 6060				memcpy(buf + BS_JmpBoot, "\
                           A 26214    ; 6061				st_qword(buf + BPB_VolOfsEx
                           A 26215    ; 6062				st_qword(buf + BPB_TotSecEx
                           A 26216    ; 6063				st_dword(buf + BPB_FatOfsEx
                           A 26217    ; 6064				st_dword(buf + BPB_FatSzEx,
                           A 26218    ; 6065				st_dword(buf + BPB_DataOfsE
                           A 26219    ; 6066				st_dword(buf + BPB_NumClusE
                           A 26220    ; 6067				st_dword(buf + BPB_RootClus
                           A 26221    ; 6068				st_dword(buf + BPB_VolIDEx,
                           A 26222    ; 6069				st_word(buf + BPB_FSVerEx, 
                           A 26223    ; 6070				for (buf[BPB_BytsPerSecEx] 
                           A 26224    ; 6071				for (buf[BPB_SecPerClusEx] 
                           A 26225    ; 6072				buf[BPB_NumFATsEx] = 1;		
                           A 26226    ; 6073				buf[BPB_DrvNumEx] = 0x80;	
                           A 26227    ; 6074				st_word(buf + BS_BootCodeEx
                           A 26228    ; 6075				st_word(buf + BS_55AA, 0xAA
                           A 26229    ; 6076				for (i = sum = 0; i < ss; i
                           A 26230    ; 6077					if (i != BPB_VolFlagEx 
                           A 26231    ; 6078				}
                           A 26232    ; 6079				if (disk_write(pdrv, buf, s
                           A 26233    ; 6080				/* Extended bootstrap recor
                           A 26234    ; 6081				memset(buf, 0, ss);
                           A 26235    ; 6082				st_word(buf + ss - 2, 0xAA5
                           A 26236    ; 6083				for (j = 1; j < 9; j++) {
                           A 26237    ; 6084					for (i = 0; i < ss; sum
                           A 26238    ; 6085					if (disk_write(pdrv, bu
                           A 26239    ; 6086				}
                           A 26240    ; 6087				/* OEM/Reserved record (+9.
                           A 26241    ; 6088				memset(buf, 0, ss);
                           A 26242    ; 6089				for ( ; j < 11; j++) {
                           A 26243    ; 6090					for (i = 0; i < ss; sum
                           A 26244    ; 6091					if (disk_write(pdrv, bu
                           A 26245    ; 6092				}
                           A 26246    ; 6093				/* Sum record (+11) */
                           A 26247    ; 6094				for (i = 0; i < ss; i += 4)
                           A 26248    ; 6095				if (disk_write(pdrv, buf, s
                           A 26249    ; 6096			}
                           A 26250    ; 6097	
                           A 26251    ; 6098		} else
                           A 26252    ; 6099	#endif	/* FF_FS_EXFAT */
                           A 26253    ; 6100		{	/* Create an FAT/FAT32 volume *
                           A 26254    ; 6101			do {
                           A 26255    ; 6102				pau = sz_au;
                           A 26256    ; 6103				/* Pre-determine number of 
                           A 26257    ; 6104				if (fsty == FS_FAT32) {	/* 
                           A 26258    ; 6105					if (pau == 0) {	/* AU a
                           A 26259    ; 6106						n = (DWORD)sz_vol /
                           A 26260    ; 6107						for (i = 0, pau = 1
                           A 26261    ; 6108					}
                           A 26262    ; 6109					n_clst = (DWORD)sz_vol 
                           A 26263    ; 6110					sz_fat = (n_clst * 4 + 
                           A 26264    ; 6111					sz_rsv = 32;	/* Numb
                           A 26265    ; 6112					sz_dir = 0;		/* No s
                           A 26266    ; 6113					if (n_clst <= MAX_FAT16
                           A 26267    ; 6114				} else {				/* 
                           A 26268    ; 6115					if (pau == 0) {	/* au a
                           A 26269    ; 6116						n = (DWORD)sz_vol /
                           A 26270    ; 6117						for (i = 0, pau = 1
                           A 26271    ; 6118					}
                           A 26272    ; 6119					n_clst = (DWORD)sz_vol 
                           A 26273    ; 6120					if (n_clst > MAX_FAT12)
                           A 26274    ; 6121						n = n_clst * 2 + 4;
                           A 26275    ; 6122					} else {
                           A 26276    ; 6123						fsty = FS_FAT12;
                           A 26277    ; 6124						n = (n_clst * 3 + 1
                           A 26278    ; 6125					}
                           A 26279    ; 6126					sz_fat = (n + ss - 1) /
                           A 26280    ; 6127					sz_rsv = 1;				
                           A 26281    ; 6128					sz_dir = (DWORD)n_root 
                           A 26282    ; 6129				}
                           A 26283    ; 6130				b_fat = b_vol + sz_rsv;		
                           A 26284    ; 6131				b_data = b_fat + sz_fat * n
                           A 26285    ; 6132	
                           A 26286    ; 6133				/* Align data area to erase
                           A 26287    ; 6134				n = (DWORD)(((b_data + sz_b
                           A 26288    ; 6135				if (fsty == FS_FAT32) {		
                           A 26289    ; 6136					sz_rsv += n; b_fat += n
                           A 26290    ; 6137				} else {					
                           A 26291    ; 6138					if (n % n_fat) {	/* 
                           A 26292    ; 6139						n--; sz_rsv++; b_fa
                           A 26293    ; 6140					}
                           A 26294    ; 6141					sz_fat += n / n_fat;
                           A 26295    ; 6142				}
                           A 26296    ; 6143	
                           A 26297    ; 6144				/* Determine number of clus
                           A 26298    ; 6145				if (sz_vol < b_data + pau *
                           A 26299    ; 6146				n_clst = ((DWORD)sz_vol - s
                           A 26300    ; 6147				if (fsty == FS_FAT32) {
                           A 26301    ; 6148					if (n_clst <= MAX_FAT16
                           A 26302    ; 6149						if (sz_au == 0 && (
                           A 26303    ; 6150						LEAVE_MKFS(FR_MKFS_
                           A 26304    ; 6151					}
                           A 26305    ; 6152				}
                           A 26306    ; 6153				if (fsty == FS_FAT16) {
                           A 26307    ; 6154					if (n_clst > MAX_FAT16)
                           A 26308    ; 6155						if (sz_au == 0 && (
                           A 26309    ; 6156							sz_au = pau * 2
                           A 26310    ; 6157						}
                           A 26311    ; 6158						if ((fsopt & FM_FAT
                           A 26312    ; 6159							fsty = FS_FAT32
                           A 26313    ; 6160						}
                           A 26314    ; 6161						if (sz_au == 0 && (
                           A 26315    ; 6162						LEAVE_MKFS(FR_MKFS_
                           A 26316    ; 6163					}
                           A 26317    ; 6164					if  (n_clst <= MAX_FAT1
                           A 26318    ; 6165						if (sz_au == 0 && (
                           A 26319    ; 6166						LEAVE_MKFS(FR_MKFS_
                           A 26320    ; 6167					}
                           A 26321    ; 6168				}
                           A 26322    ; 6169				if (fsty == FS_FAT12 && n_c
                           A 26323    ; 6170	
                           A 26324    ; 6171				/* Ok, it is the valid clus
                           A 26325    ; 6172				break;
                           A 26326    ; 6173			} while (1);
                           A 26327    ; 6174	
                           A 26328    ; 6175	#if FF_USE_TRIM
                           A 26329    ; 6176			lba[0] = b_vol; lba[1] = b_vol 
                           A 26330    ; 6177			disk_ioctl(pdrv, CTRL_TRIM, lba
                           A 26331    ; 6178	#endif
                           A 26332    ; 6179			/* Create FAT VBR */
                           A 26333    ; 6180			memset(buf, 0, ss);
                           A 26334    ; 6181			memcpy(buf + BS_JmpBoot, "\xEB\
                           A 26335    ; 6182			st_word(buf + BPB_BytsPerSec, s
                           A 26336    ; 6183			buf[BPB_SecPerClus] = (BYTE)pau
                           A 26337    ; 6184			st_word(buf + BPB_RsvdSecCnt, (
                           A 26338    ; 6185			buf[BPB_NumFATs] = (BYTE)n_fat;
                           A 26339    ; 6186			st_word(buf + BPB_RootEntCnt, (
                           A 26340    ; 6187			if (sz_vol < 0x10000) {
                           A 26341    ; 6188				st_word(buf + BPB_TotSec16,
                           A 26342    ; 6189			} else {
                           A 26343    ; 6190				st_dword(buf + BPB_TotSec32
                           A 26344    ; 6191			}
                           A 26345    ; 6192			buf[BPB_Media] = 0xF8;			
                           A 26346    ; 6193			st_word(buf + BPB_SecPerTrk, 63
                           A 26347    ; 6194			st_word(buf + BPB_NumHeads, 255
                           A 26348    ; 6195			st_dword(buf + BPB_HiddSec, (DW
                           A 26349    ; 6196			if (fsty == FS_FAT32) {
                           A 26350    ; 6197				st_dword(buf + BS_VolID32, 
                           A 26351    ; 6198				st_dword(buf + BPB_FATSz32,
                           A 26352    ; 6199				st_dword(buf + BPB_RootClus
                           A 26353    ; 6200				st_word(buf + BPB_FSInfo32,
                           A 26354    ; 6201				st_word(buf + BPB_BkBootSec
                           A 26355    ; 6202				buf[BS_DrvNum32] = 0x80;	
                           A 26356    ; 6203				buf[BS_BootSig32] = 0x29;	
                           A 26357    ; 6204				memcpy(buf + BS_VolLab32, "
                           A 26358    ; 6205			} else {
                           A 26359    ; 6206				st_dword(buf + BS_VolID, vs
                           A 26360    ; 6207				st_word(buf + BPB_FATSz16, 
                           A 26361    ; 6208				buf[BS_DrvNum] = 0x80;		
                           A 26362    ; 6209				buf[BS_BootSig] = 0x29;		
                           A 26363    ; 6210				memcpy(buf + BS_VolLab, "NO
                           A 26364    ; 6211			}
                           A 26365    ; 6212			st_word(buf + BS_55AA, 0xAA55);
                           A 26366    ; 6213			if (disk_write(pdrv, buf, b_vol
                           A 26367    ; 6214	
                           A 26368    ; 6215			/* Create FSINFO record if need
                           A 26369    ; 6216			if (fsty == FS_FAT32) {
                           A 26370    ; 6217				disk_write(pdrv, buf, b_vol
                           A 26371    ; 6218				memset(buf, 0, ss);
                           A 26372    ; 6219				st_dword(buf + FSI_LeadSig,
                           A 26373    ; 6220				st_dword(buf + FSI_StrucSig
                           A 26374    ; 6221				st_dword(buf + FSI_Free_Cou
                           A 26375    ; 6222				st_dword(buf + FSI_Nxt_Free
                           A 26376    ; 6223				st_word(buf + BS_55AA, 0xAA
                           A 26377    ; 6224				disk_write(pdrv, buf, b_vol
                           A 26378    ; 6225				disk_write(pdrv, buf, b_vol
                           A 26379    ; 6226			}
                           A 26380    ; 6227	
                           A 26381    ; 6228			/* Initialize FAT area */
                           A 26382    ; 6229			memset(buf, 0, sz_buf * ss);
                           A 26383    ; 6230			sect = b_fat;		/* FAT star
                           A 26384    ; 6231			for (i = 0; i < n_fat; i++) {	
                           A 26385    ; 6232				if (fsty == FS_FAT32) {
                           A 26386    ; 6233					st_dword(buf + 0, 0xFFF
                           A 26387    ; 6234					st_dword(buf + 4, 0xFFF
                           A 26388    ; 6235					st_dword(buf + 8, 0x0FF
                           A 26389    ; 6236				} else {
                           A 26390    ; 6237					st_dword(buf + 0, (fsty
                           A 26391    ; 6238				}
                           A 26392    ; 6239				nsect = sz_fat;		/* Numb
                           A 26393    ; 6240				do {	/* Fill FAT sectors
                           A 26394    ; 6241					n = (nsect > sz_buf) ? 
                           A 26395    ; 6242					if (disk_write(pdrv, bu
                           A 26396    ; 6243					memset(buf, 0, ss);	/* 
                           A 26397    ; 6244					sect += n; nsect -= n;
                           A 26398    ; 6245				} while (nsect);
                           A 26399    ; 6246			}
                           A 26400    ; 6247	
                           A 26401    ; 6248			/* Initialize root directory (f
                           A 26402    ; 6249			nsect = (fsty == FS_FAT32) ? pa
                           A 26403    ; 6250			do {
                           A 26404    ; 6251				n = (nsect > sz_buf) ? sz_b
                           A 26405    ; 6252				if (disk_write(pdrv, buf, s
                           A 26406    ; 6253				sect += n; nsect -= n;
                           A 26407    ; 6254			} while (nsect);
                           A 26408    ; 6255		}
                           A 26409    ; 6256	
                           A 26410    ; 6257		/* A FAT volume has been created he
                           A 26411    ; 6258	
                           A 26412    ; 6259		/* Determine system ID in the MBR p
                           A 26413    ; 6260		if (FF_FS_EXFAT && fsty == FS_EXFAT
                           A 26414    ; 6261			sys = 0x07;			/* exFAT */
                           A 26415    ; 6262		} else {
                           A 26416    ; 6263			if (fsty == FS_FAT32) {
                           A 26417    ; 6264				sys = 0x0C;		/* FAT32X *
                           A 26418    ; 6265			} else {
                           A 26419    ; 6266				if (sz_vol >= 0x10000) {
                           A 26420    ; 6267					sys = 0x06;	/* FAT12/16
                           A 26421    ; 6268				} else {
                           A 26422    ; 6269					sys = (fsty == FS_FAT16
                           A 26423    ; 6270				}
                           A 26424    ; 6271			}
                           A 26425    ; 6272		}
                           A 26426    ; 6273	
                           A 26427    ; 6274		/* Update partition information */
                           A 26428    ; 6275		if (FF_MULTI_PARTITION && ipart != 
                           A 26429    ; 6276			if (!FF_LBA64 || !(fsopt & 0x80
                           A 26430    ; 6277				/* Update system ID in the 
                           A 26431    ; 6278				if (disk_read(pdrv, buf, 0,
                           A 26432    ; 6279				buf[MBR_Table + (ipart - 1)
                           A 26433    ; 6280				if (disk_write(pdrv, buf, 0
                           A 26434    ; 6281			}
                           A 26435    ; 6282		} else {							
                           A 26436    ; 6283			if (!(fsopt & FM_SFD)) {		
                           A 26437    ; 6284				lba[0] = sz_vol; lba[1] = 0
                           A 26438    ; 6285				fr = create_partition(pdrv,
                           A 26439    ; 6286				if (fr != FR_OK) LEAVE_MKFS
                           A 26440    ; 6287			}
                           A 26441    ; 6288		}
                           A 26442    ; 6289	
                           A 26443    ; 6290		if (disk_ioctl(pdrv, CTRL_SYNC, 0) 
                           A 26444    ; 6291	
                           A 26445    ; 6292		LEAVE_MKFS(FR_OK);
                           A 26446    ; 6293	}
                           A 26447    ; 6294	
                           A 26448    ; 6295	
                           A 26449    ; 6296	
                           A 26450    ; 6297	
                           A 26451    ; 6298	#if FF_MULTI_PARTITION
                           A 26452    ; 6299	/*-------------------------------------
                           A 26453    ; 6300	/* Create Partition Table on the Physic
                           A 26454    ; 6301	/*-------------------------------------
                           A 26455    ; 6302	
                           A 26456    ; 6303	FRESULT f_fdisk (
                           A 26457    ; 6304		BYTE pdrv,			/* Physical dri
                           A 26458    ; 6305		const LBA_t ptbl[],	/* Pointer to t
                           A 26459    ; 6306		void* work			/* Pointer to t
                           A 26460    ; 6307	)
                           A 26461    ; 6308	{
                           A 26462    ; 6309		BYTE *buf = (BYTE*)work;
                           A 26463    ; 6310		DSTATUS stat;
                           A 26464    ; 6311	
                           A 26465    ; 6312	
                           A 26466    ; 6313		stat = disk_initialize(pdrv);
                           A 26467    ; 6314		if (stat & STA_NOINIT) return FR_NO
                           A 26468    ; 6315		if (stat & STA_PROTECT) return FR_W
                           A 26469    ; 6316	#if FF_USE_LFN == 3
                           A 26470    ; 6317		if (!buf) buf = ff_memalloc(FF_MAX_
                           A 26471    ; 6318	#endif
                           A 26472    ; 6319		if (!buf) return FR_NOT_ENOUGH_CORE
                           A 26473    ; 6320	
                           A 26474    ; 6321		LEAVE_MKFS(create_partition(pdrv, p
                           A 26475    ; 6322	}
                           A 26476    ; 6323	
                           A 26477    ; 6324	#endif /* FF_MULTI_PARTITION */
                           A 26478    ; 6325	#endif /* !FF_FS_READONLY && FF_USE_MKF
                           A 26479    ; 6326	
                           A 26480    ; 6327	
                           A 26481    ; 6328	
                           A 26482    ; 6329	
                           A 26483    ; 6330	#if FF_USE_STRFUNC
                           A 26484    ; 6331	#if FF_USE_LFN && FF_LFN_UNICODE && (FF
                           A 26485    ; 6332	#error Wrong FF_STRF_ENCODE setting
                           A 26486    ; 6333	#endif
                           A 26487    ; 6334	/*-------------------------------------
                           A 26488    ; 6335	/* Get a String from the File          
                           A 26489    ; 6336	/*-------------------------------------
                           A 26490    ; 6337	
                           A 26491    ; 6338	TCHAR* f_gets (
                           A 26492    ; 6339		TCHAR* buff,	/* Pointer to the b
                           A 26493    ; 6340		int len,		/* Size of string b
                           A 26494    ; 6341		FIL* fp			/* Pointer to the f
                           A 26495    ; 6342	)
                           A 26496    ; 6343	{
00658B                     A 26497    _f_gets:
                           A 26498    .DEFINE "_f_gets"
                           A 26499    
                           A 26500    .VALUE _f_gets
                           A 26501    
                           A 26502    .CLASS 2
                           A 26503    
                           A 26504    .TYPE 322
                           A 26505    
                           A 26506    .ENDEF
                           A 26507    
                           A 26508    .BEGFUNC "f_gets",6343,"_f_gets"
                           A 26509    
                           A 26510    .LINE 6343
                           A 26511    
                           A 26512    .DEFINE "buff"
                           A 26513    
                           A 26514    .CLASS 65
                           A 26515    
                           A 26516    .VALUE 6
                           A 26517    
                           A 26518    .TYPE 34
                           A 26519    
                           A 26520    .ENDEF
                           A 26521    
                           A 26522    .DEFINE "len"
                           A 26523    
                           A 26524    .CLASS 65
                           A 26525    
                           A 26526    .VALUE 9
                           A 26527    
                           A 26528    .TYPE 4
                           A 26529    
                           A 26530    .ENDEF
                           A 26531    
                           A 26532    .DEFINE "fp"
                           A 26533    
                           A 26534    .CLASS 65
                           A 26535    
                           A 26536    .VALUE 12
                           A 26537    
                           A 26538    .TAG "NONAME2"
                           A 26539    
                           A 26540    .TYPE 40
                           A 26541    
                           A 26542    .ENDEF
                           A 26543    
                           A 26544    .DEFINE "nc"
                           A 26545    
                           A 26546    .CLASS 65
                           A 26547    
                           A 26548    .VALUE -3
                           A 26549    
                           A 26550    .TYPE 4
                           A 26551    
                           A 26552    .ENDEF
                           A 26553    
                           A 26554    .DEFINE "p"
                           A 26555    
                           A 26556    .CLASS 65
                           A 26557    
                           A 26558    .VALUE -6
                           A 26559    
                           A 26560    .TYPE 34
                           A 26561    
                           A 26562    .ENDEF
                           A 26563    
                           A 26564    .DEFINE "rc"
                           A 26565    
                           A 26566    .CLASS 65
                           A 26567    
                           A 26568    .VALUE -12
                           A 26569    
                           A 26570    .TYPE 14
                           A 26571    
                           A 26572    .ENDEF
                           A 26573    
                           A 26574    .DEFINE "dc"
                           A 26575    
                           A 26576    .CLASS 65
                           A 26577    
                           A 26578    .VALUE -16
                           A 26579    
                           A 26580    .TYPE 15
                           A 26581    
                           A 26582    .ENDEF
                           A 26583    
                           A 26584    .DEFINE "s"
                           A 26585    
                           A 26586    .CLASS 65
                           A 26587    
                           A 26588    .VALUE -20
                           A 26589    
                           A 26590    .DIM 4
                           A 26591    
                           A 26592    .TYPE 108
                           A 26593    
                           A 26594    .ENDEF
                           A 26595    
00658B DDE5                A 26596    	PUSH	IX
00658D DD210000 00         A 26597    	LD	IX,0
006592 DD39                A 26598    	ADD	IX,SP
006594 ED22E8              A 26599    	LEA	HL,IX+%FFFFFFE8
006597 F9                  A 26600    	LD	SP,HL
                           A 26601    ; 6344		int nc = 0;
                           A 26602    .LINE 6344
                           A 26603    
006598 01000000            A 26604    	LD	BC,0
00659C DD0FFD              A 26605    	LD	(IX+%FFFFFFFD),BC
                           A 26606    ; 6345		TCHAR *p = buff;
                           A 26607    .LINE 6345
                           A 26608    
00659F DD0706              A 26609    	LD	BC,(IX+%6)
0065A2 DD0FFA              A 26610    	LD	(IX+%FFFFFFFA),BC
                           A 26611    ; 6346		BYTE s[4];
                           A 26612    ; 6347		UINT rc;
                           A 26613    ; 6348		DWORD dc;
                           A 26614    ; 6349	#if FF_USE_LFN && FF_LFN_UNICODE && FF_
                           A 26615    ; 6350		WCHAR wc;
                           A 26616    ; 6351	#endif
                           A 26617    ; 6352	#if FF_USE_LFN && FF_LFN_UNICODE && FF_
                           A 26618    ; 6353		UINT ct;
                           A 26619    ; 6354	#endif
                           A 26620    ; 6355	
                           A 26621    ; 6356	#if FF_USE_LFN && FF_LFN_UNICODE		
                           A 26622    ; 6357		/* Make a room for the character an
                           A 26623    ; 6358		if (FF_LFN_UNICODE == 1) len -= (FF
                           A 26624    ; 6359		if (FF_LFN_UNICODE == 2) len -= (FF
                           A 26625    ; 6360		if (FF_LFN_UNICODE == 3) len -= 1;
                           A 26626    ; 6361		while (nc < len) {
                           A 26627    ; 6362	#if FF_STRF_ENCODE == 0				/* 
                           A 26628    ; 6363			f_read(fp, s, 1, &rc);		/* 
                           A 26629    ; 6364			if (rc != 1) break;			/* 
                           A 26630    ; 6365			wc = s[0];
                           A 26631    ; 6366			if (dbc_1st((BYTE)wc)) {	/* 
                           A 26632    ; 6367				f_read(fp, s, 1, &rc);	/* 
                           A 26633    ; 6368				if (rc != 1 || !dbc_2nd(s[0
                           A 26634    ; 6369				wc = wc << 8 | s[0];
                           A 26635    ; 6370			}
                           A 26636    ; 6371			dc = ff_oem2uni(wc, CODEPAGE);	
                           A 26637    ; 6372			if (dc == 0) continue;		/* 
                           A 26638    ; 6373	#elif FF_STRF_ENCODE == 1 || FF_STRF_EN
                           A 26639    ; 6374			f_read(fp, s, 2, &rc);		/* 
                           A 26640    ; 6375			if (rc != 2) break;			/* 
                           A 26641    ; 6376			dc = (FF_STRF_ENCODE == 1) ? ld
                           A 26642    ; 6377			if (IsSurrogateL(dc)) continue;
                           A 26643    ; 6378			if (IsSurrogateH(dc)) {		/* 
                           A 26644    ; 6379				f_read(fp, s, 2, &rc);	/* 
                           A 26645    ; 6380				if (rc != 2) break;		/* 
                           A 26646    ; 6381				wc = (FF_STRF_ENCODE == 1) 
                           A 26647    ; 6382				if (!IsSurrogateL(wc)) cont
                           A 26648    ; 6383				dc = ((dc & 0x3FF) + 0x40) 
                           A 26649    ; 6384			}
                           A 26650    ; 6385	#else	/* Read a character in UTF-8 */
                           A 26651    ; 6386			f_read(fp, s, 1, &rc);		/* 
                           A 26652    ; 6387			if (rc != 1) break;			/* 
                           A 26653    ; 6388			dc = s[0];
                           A 26654    ; 6389			if (dc >= 0x80) {			/* 
                           A 26655    ; 6390				ct = 0;
                           A 26656    ; 6391				if ((dc & 0xE0) == 0xC0) { 
                           A 26657    ; 6392				if ((dc & 0xF0) == 0xE0) { 
                           A 26658    ; 6393				if ((dc & 0xF8) == 0xF0) { 
                           A 26659    ; 6394				if (ct == 0) continue;
                           A 26660    ; 6395				f_read(fp, s, ct, &rc);	/* 
                           A 26661    ; 6396				if (rc != ct) break;
                           A 26662    ; 6397				rc = 0;
                           A 26663    ; 6398				do {	/* Merge the byte s
                           A 26664    ; 6399					if ((s[rc] & 0xC0) != 0
                           A 26665    ; 6400					dc = dc << 6 | (s[rc] &
                           A 26666    ; 6401				} while (++rc < ct);
                           A 26667    ; 6402				if (rc != ct || dc < 0x80 |
                           A 26668    ; 6403			}
                           A 26669    ; 6404	#endif
                           A 26670    ; 6405			/* A code point is avaialble in
                           A 26671    ; 6406	
                           A 26672    ; 6407			if (FF_USE_STRFUNC == 2 && dc =
                           A 26673    ; 6408	#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICO
                           A 26674    ; 6409			if (FF_LFN_UNICODE == 1 && dc >
                           A 26675    ; 6410				*p++ = (TCHAR)(0xD800 | ((d
                           A 26676    ; 6411				dc = 0xDC00 | (dc & 0x3FF);
                           A 26677    ; 6412			}
                           A 26678    ; 6413			*p++ = (TCHAR)dc; nc++;
                           A 26679    ; 6414			if (dc == '\n') break;	/* End 
                           A 26680    ; 6415	#elif FF_LFN_UNICODE == 2		/* Outp
                           A 26681    ; 6416			if (dc < 0x80) {	/* Single b
                           A 26682    ; 6417				*p++ = (TCHAR)dc;
                           A 26683    ; 6418				nc++;
                           A 26684    ; 6419				if (dc == '\n') break;	/* 
                           A 26685    ; 6420			} else {
                           A 26686    ; 6421				if (dc < 0x800) {		/* 
                           A 26687    ; 6422					*p++ = (TCHAR)(0xC0 | (
                           A 26688    ; 6423					*p++ = (TCHAR)(0x80 | (
                           A 26689    ; 6424					nc += 2;
                           A 26690    ; 6425				} else {
                           A 26691    ; 6426					if (dc < 0x10000) {	/* 
                           A 26692    ; 6427						*p++ = (TCHAR)(0xE0
                           A 26693    ; 6428						*p++ = (TCHAR)(0x80
                           A 26694    ; 6429						*p++ = (TCHAR)(0x80
                           A 26695    ; 6430						nc += 3;
                           A 26696    ; 6431					} else {			/* 
                           A 26697    ; 6432						*p++ = (TCHAR)(0xF0
                           A 26698    ; 6433						*p++ = (TCHAR)(0x80
                           A 26699    ; 6434						*p++ = (TCHAR)(0x80
                           A 26700    ; 6435						*p++ = (TCHAR)(0x80
                           A 26701    ; 6436						nc += 4;
                           A 26702    ; 6437					}
                           A 26703    ; 6438				}
                           A 26704    ; 6439			}
                           A 26705    ; 6440	#endif
                           A 26706    ; 6441		}
                           A 26707    ; 6442	
                           A 26708    ; 6443	#else			/* Byte-by-byte read wi
                           A 26709    ; 6444		len -= 1;	/* Make a room for the 
                           A 26710    .LINE 6444
                           A 26711    
0065A5 DD0709              A 26712    	LD	BC,(IX+%9)
0065A8 0B                  A 26713    	DEC	BC
0065A9 DD0F09              A 26714    	LD	(IX+%9),BC
                           A 26715    ; 6445		while (nc < len) {
                           A 26716    .LINE 6445
                           A 26717    
0065AC 18 60               A 26718    	JR	L_1309
0065AE                     A 26719    L_1310:
                           A 26720    ; 6446			f_read(fp, s, 1, &rc);	/* Get 
                           A 26721    .LINE 6446
                           A 26722    
0065AE ED65F4              A 26723    	PEA	IX+%FFFFFFF4
0065B1 01010000            A 26724    	LD	BC,1
0065B5 C5                  A 26725    	PUSH	BC
0065B6 ED65EC              A 26726    	PEA	IX+%FFFFFFEC
0065B9 DD070C              A 26727    	LD	BC,(IX+%C)
0065BC C5                  A 26728    	PUSH	BC
0065BD DD77E8              A 26729    	LD	(IX+%FFFFFFE8),A
0065C0 CD 58 41 00         A 26730    	CALL	_f_read
0065C4 DD7EE8              A 26731    	LD	A,(IX+%FFFFFFE8)
0065C7 C1                  A 26732    	POP	BC
0065C8 C1                  A 26733    	POP	BC
0065C9 C1                  A 26734    	POP	BC
0065CA C1                  A 26735    	POP	BC
                           A 26736    ; 6447			if (rc != 1) break;		/* EOF?
                           A 26737    .LINE 6447
                           A 26738    
0065CB 01010000            A 26739    	LD	BC,1
0065CF DD27F4              A 26740    	LD	HL,(IX+%FFFFFFF4)
0065D2 B7                  A 26741    	OR	A,A
0065D3 ED42                A 26742    	SBC	HL,BC
0065D5 20 44               A 26743    	JR	NZ,L_1311
                           A 26744    ; 6448			dc = s[0];
                           A 26745    .LINE 6448
                           A 26746    
0065D7 B7ED62              A 26747    	UEXT	HL
0065DA DD6EEC              A 26748    	LD	L,(IX+%FFFFFFEC)
0065DD DD2FF0              A 26749    	LD	(IX+%FFFFFFF0),HL
0065E0 DD74F3              A 26750    	LD	(IX+%FFFFFFF3),H
                           A 26751    ; 6449			if (FF_USE_STRFUNC == 2 && dc =
                           A 26752    ; 6450			*p++ = (TCHAR)dc; nc++;
                           A 26753    .LINE 6450
                           A 26754    
0065E3 DD07FA              A 26755    	LD	BC,(IX+%FFFFFFFA)
0065E6 DD0FE9              A 26756    	LD	(IX+%FFFFFFE9),BC
0065E9 DD7EF0              A 26757    	LD	A,(IX+%FFFFFFF0)
0065EC C5E1                A 26758    	LD	HL,BC
0065EE 77                  A 26759    	LD	(HL),A
0065EF DD07FA              A 26760    	LD	BC,(IX+%FFFFFFFA)
0065F2 03                  A 26761    	INC	BC
0065F3 DD0FFA              A 26762    	LD	(IX+%FFFFFFFA),BC
0065F6 DD07FD              A 26763    	LD	BC,(IX+%FFFFFFFD)
0065F9 03                  A 26764    	INC	BC
0065FA DD0FFD              A 26765    	LD	(IX+%FFFFFFFD),BC
                           A 26766    ; 6451			if (dc == '\n') break;
                           A 26767    .LINE 6451
                           A 26768    
0065FD DD27F0              A 26769    	LD	HL,(IX+%FFFFFFF0)
006600 DD5EF3              A 26770    	LD	E,(IX+%FFFFFFF3)
006603 010A0000            A 26771    	LD	BC,10
006607 AF                  A 26772    	XOR	A,A
006608 CD 00 00 00         A 26773    	CALL	__lcmpu
00660C 28 0D               A 26774    	JR	Z,L_1311
                           A 26775    ; 6452		}
00660E                     A 26776    L_1309:
                           A 26777    .LINE 6452
                           A 26778    
00660E DD0709              A 26779    	LD	BC,(IX+%9)
006611 DD27FD              A 26780    	LD	HL,(IX+%FFFFFFFD)
006614 B7                  A 26781    	OR	A,A
006615 ED42                A 26782    	SBC	HL,BC
006617 FA AE 65 00         A 26783    	JP	M,L_1310
00661B                     A 26784    L_1311:
                           A 26785    ; 6453	#endif
                           A 26786    ; 6454	
                           A 26787    ; 6455		*p = 0;		/* Terminate the string
                           A 26788    .LINE 6455
                           A 26789    
00661B DD27FA              A 26790    	LD	HL,(IX+%FFFFFFFA)
00661E 3600                A 26791    	LD	(HL),%0
                           A 26792    ; 6456		return nc ? buff : 0;	/* When no 
                           A 26793    .LINE 6456
                           A 26794    
006620 01000000            A 26795    	LD	BC,0
006624 DD27FD              A 26796    	LD	HL,(IX+%FFFFFFFD)
006627 B7                  A 26797    	OR	A,A
006628 ED42                A 26798    	SBC	HL,BC
00662A 28 08               A 26799    	JR	Z,L_1314
00662C DD0706              A 26800    	LD	BC,(IX+%6)
00662F DD0FF7              A 26801    	LD	(IX+%FFFFFFF7),BC
006632 18 03               A 26802    	JR	L_1315
006634                     A 26803    L_1314:
006634 DD0FF7              A 26804    	LD	(IX+%FFFFFFF7),BC
006637                     A 26805    L_1315:
006637 DD27F7              A 26806    	LD	HL,(IX+%FFFFFFF7)
                           A 26807    ; 6457	}
                           A 26808    .LINE 6457
                           A 26809    
00663A DDF9                A 26810    	LD	SP,IX
00663C DDE1                A 26811    	POP	IX
00663E C9                  A 26812    	RET	
                           A 26813    
                           A 26814    
                           A 26815    ;**************************** _f_gets *********
                           A 26816    ;Name                         Addr/Register   S
                           A 26817    ;_f_read                             IMPORT  --
                           A 26818    ;s                                    IX-20    
                           A 26819    ;dc                                   IX-16    
                           A 26820    ;rc                                   IX-12    
                           A 26821    ;temp1312                              IX-9    
                           A 26822    ;p                                     IX-6    
                           A 26823    ;nc                                    IX-3    
                           A 26824    ;fp                                   IX+12    
                           A 26825    ;len                                   IX+9    
                           A 26826    ;buff                                  IX+6    
                           A 26827    
                           A 26828    
                           A 26829    ; Stack Frame Size: 39 (bytes)
                           A 26830    ;       Spill Code: -3 (instruction)
                           A 26831    
                           A 26832    
                           A 26833    .ENDFUNC "f_gets",6457,"_f_gets"
                           A 26834    ; 6458	
                           A 26835    ; 6459	
                           A 26836    ; 6460	
                           A 26837    ; 6461	
                           A 26838    ; 6462	#if !FF_FS_READONLY
                           A 26839    ; 6463	#include <stdarg.h>
                           A 26840    ; 6464	#define SZ_PUTC_BUF	64
                           A 26841    ; 6465	#define SZ_NUM_BUF	32
                           A 26842    ; 6466	
                           A 26843    ; 6467	/*-------------------------------------
                           A 26844    ; 6468	/* Put a Character to the File (with su
                           A 26845    ; 6469	/*-------------------------------------
                           A 26846    ; 6470	
                           A 26847    ; 6471	/* Output buffer and work area */
                           A 26848    ; 6472	
                           A 26849    ; 6473	typedef struct {
                           A 26850    ; 6474		FIL *fp;		/* Ptr to the writi
                           A 26851    ; 6475		int idx, nchr;	/* Write index of b
                           A 26852    ; 6476	#if FF_USE_LFN && FF_LFN_UNICODE == 1
                           A 26853    ; 6477		WCHAR hs;
                           A 26854    ; 6478	#elif FF_USE_LFN && FF_LFN_UNICODE == 2
                           A 26855    ; 6479		BYTE bs[4];
                           A 26856    ; 6480		UINT wi, ct;
                           A 26857    ; 6481	#endif
                           A 26858    ; 6482		BYTE buf[SZ_PUTC_BUF];	/* Write bu
                           A 26859    ; 6483	} putbuff;
                           A 26860    .BEGREC "NONAME6",73
                           A 26861    .DEFINE "fp"
                           A 26862    .VALUE 0
                           A 26863    .CLASS 8
                           A 26864    .TAG "NONAME2"
                           A 26865    .TYPE 40
                           A 26866    .ENDEF
                           A 26867    .DEFINE "idx"
                           A 26868    .VALUE 3
                           A 26869    .CLASS 8
                           A 26870    .TYPE 4
                           A 26871    .ENDEF
                           A 26872    .DEFINE "nchr"
                           A 26873    .VALUE 6
                           A 26874    .CLASS 8
                           A 26875    .TYPE 4
                           A 26876    .ENDEF
                           A 26877    .DEFINE "buf"
                           A 26878    .VALUE 9
                           A 26879    .CLASS 8
                           A 26880    .DIM 64
                           A 26881    .TYPE 108
                           A 26882    .ENDEF
                           A 26883    .ENDREC "NONAME6"
                           A 26884    ; 6484	
                           A 26885    ; 6485	
                           A 26886    ; 6486	/* Buffered file write with code conver
                           A 26887    ; 6487	
                           A 26888    ; 6488	static void putc_bfd (putbuff* pb, TCHA
                           A 26889    ; 6489	{
00663F                     A 26890    _putc_bfd:
                           A 26891    .DEFINE "_putc_bfd"
                           A 26892    
                           A 26893    .VALUE _putc_bfd
                           A 26894    
                           A 26895    .CLASS 3
                           A 26896    
                           A 26897    .TYPE 65
                           A 26898    
                           A 26899    .ENDEF
                           A 26900    
                           A 26901    .BEGFUNC "putc_bfd",6489,"_putc_bfd"
                           A 26902    
                           A 26903    .LINE 6489
                           A 26904    
                           A 26905    .DEFINE "pb"
                           A 26906    
                           A 26907    .CLASS 65
                           A 26908    
                           A 26909    .VALUE 6
                           A 26910    
                           A 26911    .TAG "NONAME6"
                           A 26912    
                           A 26913    .TYPE 40
                           A 26914    
                           A 26915    .ENDEF
                           A 26916    
                           A 26917    .DEFINE "c"
                           A 26918    
                           A 26919    .CLASS 65
                           A 26920    
                           A 26921    .VALUE 9
                           A 26922    
                           A 26923    .TYPE 2
                           A 26924    
                           A 26925    .ENDEF
                           A 26926    
                           A 26927    .DEFINE "i"
                           A 26928    
                           A 26929    .CLASS 65
                           A 26930    
                           A 26931    .VALUE -3
                           A 26932    
                           A 26933    .TYPE 4
                           A 26934    
                           A 26935    .ENDEF
                           A 26936    
                           A 26937    .DEFINE "nc"
                           A 26938    
                           A 26939    .CLASS 65
                           A 26940    
                           A 26941    .VALUE -9
                           A 26942    
                           A 26943    .TYPE 4
                           A 26944    
                           A 26945    .ENDEF
                           A 26946    
                           A 26947    .DEFINE "n"
                           A 26948    
                           A 26949    .CLASS 65
                           A 26950    
                           A 26951    .VALUE -12
                           A 26952    
                           A 26953    .TYPE 14
                           A 26954    
                           A 26955    .ENDEF
                           A 26956    
00663F DDE5                A 26957    	PUSH	IX
006641 DD210000 00         A 26958    	LD	IX,0
006646 DD39                A 26959    	ADD	IX,SP
006648 ED22F4              A 26960    	LEA	HL,IX+%FFFFFFF4
00664B F9                  A 26961    	LD	SP,HL
                           A 26962    ; 6490		UINT n;
                           A 26963    ; 6491		int i, nc;
                           A 26964    ; 6492	#if FF_USE_LFN && FF_LFN_UNICODE
                           A 26965    ; 6493		WCHAR hs, wc;
                           A 26966    ; 6494	#if FF_LFN_UNICODE == 2
                           A 26967    ; 6495		DWORD dc;
                           A 26968    ; 6496		const TCHAR *tp;
                           A 26969    ; 6497	#endif
                           A 26970    ; 6498	#endif
                           A 26971    ; 6499	
                           A 26972    ; 6500		if (FF_USE_STRFUNC == 2 && c == '\n
                           A 26973    ; 6501			putc_bfd(pb, '\r');
                           A 26974    ; 6502		}
                           A 26975    ; 6503	
                           A 26976    ; 6504		i = pb->idx;			/* Write in
                           A 26977    .LINE 6504
                           A 26978    
00664C DD3106              A 26979    	LD	IY,(IX+%6)
00664F FD0703              A 26980    	LD	BC,(IY+%3)
006652 DD0FFD              A 26981    	LD	(IX+%FFFFFFFD),BC
                           A 26982    ; 6505		if (i < 0) return;		/* In write
                           A 26983    .LINE 6505
                           A 26984    
006655 01000000            A 26985    	LD	BC,0
006659 DD27FD              A 26986    	LD	HL,(IX+%FFFFFFFD)
00665C B7                  A 26987    	OR	A,A
00665D ED42                A 26988    	SBC	HL,BC
00665F FA 69 66 00         A 26989    	JP	M,L__711
006663 EA EA 66 00         A 26990    	JP	PE,L_1328
006667 18 04               A 26991    	JR	L__712
006669                     A 26992    L__711:
006669 E2 EA 66 00         A 26993    	JP	PO,L_1328
00666D                     A 26994    L__712:
                           A 26995    ; 6506		nc = pb->nchr;			/* Write un
                           A 26996    .LINE 6506
                           A 26997    
00666D DD3106              A 26998    	LD	IY,(IX+%6)
006670 FD0706              A 26999    	LD	BC,(IY+%6)
006673 DD0FF7              A 27000    	LD	(IX+%FFFFFFF7),BC
                           A 27001    ; 6507	
                           A 27002    ; 6508	#if FF_USE_LFN && FF_LFN_UNICODE
                           A 27003    ; 6509	#if FF_LFN_UNICODE == 1		/* UTF-16 i
                           A 27004    ; 6510		if (IsSurrogateH(c)) {	/* High sur
                           A 27005    ; 6511			pb->hs = c; return;	/* Save it 
                           A 27006    ; 6512		}
                           A 27007    ; 6513		hs = pb->hs; pb->hs = 0;
                           A 27008    ; 6514		if (hs != 0) {			/* There is
                           A 27009    ; 6515			if (!IsSurrogateL(c)) hs = 0;	
                           A 27010    ; 6516		} else {
                           A 27011    ; 6517			if (IsSurrogateL(c)) return;	
                           A 27012    ; 6518		}
                           A 27013    ; 6519		wc = c;
                           A 27014    ; 6520	#elif FF_LFN_UNICODE == 2	/* UTF-8 in
                           A 27015    ; 6521		for (;;) {
                           A 27016    ; 6522			if (pb->ct == 0) {	/* Out of m
                           A 27017    ; 6523				pb->bs[pb->wi = 0] = (BYTE)
                           A 27018    ; 6524				if ((BYTE)c < 0x80) break;	
                           A 27019    ; 6525				if (((BYTE)c & 0xE0) == 0xC
                           A 27020    ; 6526				if (((BYTE)c & 0xF0) == 0xE
                           A 27021    ; 6527				if (((BYTE)c & 0xF1) == 0xF
                           A 27022    ; 6528				return;
                           A 27023    ; 6529			} else {				/* In t
                           A 27024    ; 6530				if (((BYTE)c & 0xC0) != 0x8
                           A 27025    ; 6531					pb->ct = 0; continue;
                           A 27026    ; 6532				}
                           A 27027    ; 6533				pb->bs[++pb->wi] = (BYTE)c;
                           A 27028    ; 6534				if (--pb->ct == 0) break;	
                           A 27029    ; 6535				return;
                           A 27030    ; 6536			}
                           A 27031    ; 6537		}
                           A 27032    ; 6538		tp = (const TCHAR*)pb->bs;
                           A 27033    ; 6539		dc = tchar2uni(&tp);	/* UTF-8 ==
                           A 27034    ; 6540		if (dc == 0xFFFFFFFF) return;	/* 
                           A 27035    ; 6541		wc = (WCHAR)dc;
                           A 27036    ; 6542		hs = (WCHAR)(dc >> 16);
                           A 27037    ; 6543	#elif FF_LFN_UNICODE == 3	/* UTF-32 i
                           A 27038    ; 6544		if (IsSurrogate(c) || c >= 0x110000
                           A 27039    ; 6545		if (c >= 0x10000) {		/* Out of B
                           A 27040    ; 6546			hs = (WCHAR)(0xD800 | ((c >> 10
                           A 27041    ; 6547			wc = 0xDC00 | (c & 0x3FF);		
                           A 27042    ; 6548		} else {
                           A 27043    ; 6549			hs = 0;
                           A 27044    ; 6550			wc = (WCHAR)c;
                           A 27045    ; 6551		}
                           A 27046    ; 6552	#endif
                           A 27047    ; 6553		/* A code point in UTF-16 is availa
                           A 27048    ; 6554	
                           A 27049    ; 6555	#if FF_STRF_ENCODE == 1		/* Write a 
                           A 27050    ; 6556		if (hs != 0) {	/* Surrogate pair? 
                           A 27051    ; 6557			st_word(&pb->buf[i], hs);
                           A 27052    ; 6558			i += 2;
                           A 27053    ; 6559			nc++;
                           A 27054    ; 6560		}
                           A 27055    ; 6561		st_word(&pb->buf[i], wc);
                           A 27056    ; 6562		i += 2;
                           A 27057    ; 6563	#elif FF_STRF_ENCODE == 2	/* Write a 
                           A 27058    ; 6564		if (hs != 0) {	/* Surrogate pair? 
                           A 27059    ; 6565			pb->buf[i++] = (BYTE)(hs >> 8);
                           A 27060    ; 6566			pb->buf[i++] = (BYTE)hs;
                           A 27061    ; 6567			nc++;
                           A 27062    ; 6568		}
                           A 27063    ; 6569		pb->buf[i++] = (BYTE)(wc >> 8);
                           A 27064    ; 6570		pb->buf[i++] = (BYTE)wc;
                           A 27065    ; 6571	#elif FF_STRF_ENCODE == 3	/* Write a 
                           A 27066    ; 6572		if (hs != 0) {	/* 4-byte sequence?
                           A 27067    ; 6573			nc += 3;
                           A 27068    ; 6574			hs = (hs & 0x3FF) + 0x40;
                           A 27069    ; 6575			pb->buf[i++] = (BYTE)(0xF0 | hs
                           A 27070    ; 6576			pb->buf[i++] = (BYTE)(0x80 | (h
                           A 27071    ; 6577			pb->buf[i++] = (BYTE)(0x80 | (h
                           A 27072    ; 6578			pb->buf[i++] = (BYTE)(0x80 | (w
                           A 27073    ; 6579		} else {
                           A 27074    ; 6580			if (wc < 0x80) {	/* Single b
                           A 27075    ; 6581				pb->buf[i++] = (BYTE)wc;
                           A 27076    ; 6582			} else {
                           A 27077    ; 6583				if (wc < 0x800) {	/* 2-by
                           A 27078    ; 6584					nc += 1;
                           A 27079    ; 6585					pb->buf[i++] = (BYTE)(0
                           A 27080    ; 6586				} else {			/* 3-by
                           A 27081    ; 6587					nc += 2;
                           A 27082    ; 6588					pb->buf[i++] = (BYTE)(0
                           A 27083    ; 6589					pb->buf[i++] = (BYTE)(0
                           A 27084    ; 6590				}
                           A 27085    ; 6591				pb->buf[i++] = (BYTE)(0x80 
                           A 27086    ; 6592			}
                           A 27087    ; 6593		}
                           A 27088    ; 6594	#else						/* Write a 
                           A 27089    ; 6595		if (hs != 0) return;
                           A 27090    ; 6596		wc = ff_uni2oem(wc, CODEPAGE);	/* 
                           A 27091    ; 6597		if (wc == 0) return;
                           A 27092    ; 6598		if (wc >= 0x100) {
                           A 27093    ; 6599			pb->buf[i++] = (BYTE)(wc >> 8);
                           A 27094    ; 6600		}
                           A 27095    ; 6601		pb->buf[i++] = (BYTE)wc;
                           A 27096    ; 6602	#endif
                           A 27097    ; 6603	
                           A 27098    ; 6604	#else							/* ANSI
                           A 27099    ; 6605		pb->buf[i++] = (BYTE)c;
                           A 27100    .LINE 6605
                           A 27101    
006676 DD07FD              A 27102    	LD	BC,(IX+%FFFFFFFD)
006679 ED2309              A 27103    	LEA	HL,IY+%9
00667C 09                  A 27104    	ADD	HL,BC
00667D DD7E09              A 27105    	LD	A,(IX+%9)
006680 77                  A 27106    	LD	(HL),A
006681 DD07FD              A 27107    	LD	BC,(IX+%FFFFFFFD)
006684 03                  A 27108    	INC	BC
006685 DD0FFD              A 27109    	LD	(IX+%FFFFFFFD),BC
                           A 27110    ; 6606	#endif
                           A 27111    ; 6607	
                           A 27112    ; 6608		if (i >= (int)(sizeof pb->buf) - 4)
                           A 27113    .LINE 6608
                           A 27114    
006688 013C0000            A 27115    	LD	BC,60
00668C DD27FD              A 27116    	LD	HL,(IX+%FFFFFFFD)
00668F B7                  A 27117    	OR	A,A
006690 ED42                A 27118    	SBC	HL,BC
006692 FA 9C 66 00         A 27119    	JP	M,L__713
006696 EA DA 66 00         A 27120    	JP	PE,L_1327
00669A 18 04               A 27121    	JR	L__714
00669C                     A 27122    L__713:
00669C E2 DA 66 00         A 27123    	JP	PO,L_1327
0066A0                     A 27124    L__714:
                           A 27125    ; 6609			f_write(pb->fp, pb->buf, (UINT)
                           A 27126    .LINE 6609
                           A 27127    
0066A0 ED65F4              A 27128    	PEA	IX+%FFFFFFF4
0066A3 DD07FD              A 27129    	LD	BC,(IX+%FFFFFFFD)
0066A6 C5                  A 27130    	PUSH	BC
0066A7 DD3106              A 27131    	LD	IY,(IX+%6)
0066AA ED6609              A 27132    	PEA	IY+%9
0066AD FD0700              A 27133    	LD	BC,(IY+%0)
0066B0 C5                  A 27134    	PUSH	BC
0066B1 CD 0A 45 00         A 27135    	CALL	_f_write
0066B5 C1                  A 27136    	POP	BC
0066B6 C1                  A 27137    	POP	BC
0066B7 C1                  A 27138    	POP	BC
0066B8 C1                  A 27139    	POP	BC
                           A 27140    ; 6610			i = (n == (UINT)i) ? 0 : -1;
                           A 27141    .LINE 6610
                           A 27142    
0066B9 DD07F4              A 27143    	LD	BC,(IX+%FFFFFFF4)
0066BC DD27FD              A 27144    	LD	HL,(IX+%FFFFFFFD)
0066BF B7                  A 27145    	OR	A,A
0066C0 ED42                A 27146    	SBC	HL,BC
0066C2 20 09               A 27147    	JR	NZ,L_1324
0066C4 01000000            A 27148    	LD	BC,0
0066C8 DD0FFA              A 27149    	LD	(IX+%FFFFFFFA),BC
0066CB 18 07               A 27150    	JR	L_1325
0066CD                     A 27151    L_1324:
0066CD 01FFFFFF            A 27152    	LD	BC,16777215
0066D1 DD0FFA              A 27153    	LD	(IX+%FFFFFFFA),BC
0066D4                     A 27154    L_1325:
0066D4 DD07FA              A 27155    	LD	BC,(IX+%FFFFFFFA)
0066D7 DD0FFD              A 27156    	LD	(IX+%FFFFFFFD),BC
                           A 27157    ; 6611		}
0066DA                     A 27158    L_1327:
                           A 27159    .LINE 6611
                           A 27160    
                           A 27161    ; 6612		pb->idx = i;
                           A 27162    .LINE 6612
                           A 27163    
0066DA DD07FD              A 27164    	LD	BC,(IX+%FFFFFFFD)
0066DD DD3106              A 27165    	LD	IY,(IX+%6)
0066E0 FD0F03              A 27166    	LD	(IY+%3),BC
                           A 27167    ; 6613		pb->nchr = nc + 1;
                           A 27168    .LINE 6613
                           A 27169    
0066E3 DD07F7              A 27170    	LD	BC,(IX+%FFFFFFF7)
0066E6 03                  A 27171    	INC	BC
0066E7 FD0F06              A 27172    	LD	(IY+%6),BC
                           A 27173    ; 6614	}
0066EA                     A 27174    L_1328:
                           A 27175    .LINE 6614
                           A 27176    
0066EA DDF9                A 27177    	LD	SP,IX
0066EC DDE1                A 27178    	POP	IX
0066EE C9                  A 27179    	RET	
                           A 27180    
                           A 27181    
                           A 27182    ;**************************** _putc_bfd *******
                           A 27183    ;Name                         Addr/Register   S
                           A 27184    ;_f_write                            IMPORT  --
                           A 27185    ;n                                    IX-12    
                           A 27186    ;nc                                    IX-9    
                           A 27187    ;temp1322                              IX-6    
                           A 27188    ;i                                     IX-3    
                           A 27189    ;c                                     IX+9    
                           A 27190    ;pb                                    IX+6    
                           A 27191    
                           A 27192    
                           A 27193    ; Stack Frame Size: 24 (bytes)
                           A 27194    ;       Spill Code: -3 (instruction)
                           A 27195    
                           A 27196    
                           A 27197    .ENDFUNC "putc_bfd",6614,"_putc_bfd"
                           A 27198    ; 6615	
                           A 27199    ; 6616	
                           A 27200    ; 6617	/* Flush remaining characters in the bu
                           A 27201    ; 6618	
                           A 27202    ; 6619	static int putc_flush (putbuff* pb)
                           A 27203    ; 6620	{
0066EF                     A 27204    _putc_flush:
                           A 27205    .DEFINE "_putc_flush"
                           A 27206    
                           A 27207    .VALUE _putc_flush
                           A 27208    
                           A 27209    .CLASS 3
                           A 27210    
                           A 27211    .TYPE 68
                           A 27212    
                           A 27213    .ENDEF
                           A 27214    
                           A 27215    .BEGFUNC "putc_flush",6620,"_putc_flush"
                           A 27216    
                           A 27217    .LINE 6620
                           A 27218    
                           A 27219    .DEFINE "pb"
                           A 27220    
                           A 27221    .CLASS 65
                           A 27222    
                           A 27223    .VALUE 6
                           A 27224    
                           A 27225    .TAG "NONAME6"
                           A 27226    
                           A 27227    .TYPE 40
                           A 27228    
                           A 27229    .ENDEF
                           A 27230    
                           A 27231    .DEFINE "nw"
                           A 27232    
                           A 27233    .CLASS 65
                           A 27234    
                           A 27235    .VALUE -6
                           A 27236    
                           A 27237    .TYPE 14
                           A 27238    
                           A 27239    .ENDEF
                           A 27240    
0066EF DDE5                A 27241    	PUSH	IX
0066F1 DD210000 00         A 27242    	LD	IX,0
0066F6 DD39                A 27243    	ADD	IX,SP
0066F8 C5                  A 27244    	PUSH	BC
0066F9 C5                  A 27245    	PUSH	BC
                           A 27246    ; 6621		UINT nw;
                           A 27247    ; 6622	
                           A 27248    ; 6623		if (   pb->idx >= 0	/* Flush buffer
                           A 27249    ; 6624			&& f_write(pb->fp, pb->buf, (UI
                           A 27250    .LINE 6624
                           A 27251    
0066FA DD3106              A 27252    	LD	IY,(IX+%6)
0066FD FD0703              A 27253    	LD	BC,(IY+%3)
006700 DD0FFD              A 27254    	LD	(IX+%FFFFFFFD),BC
006703 01000000            A 27255    	LD	BC,0
006707 DD27FD              A 27256    	LD	HL,(IX+%FFFFFFFD)
00670A B7                  A 27257    	OR	A,A
00670B ED42                A 27258    	SBC	HL,BC
00670D FA 17 67 00         A 27259    	JP	M,L__719
006711 EA 53 67 00         A 27260    	JP	PE,L_1332
006715 18 04               A 27261    	JR	L__720
006717                     A 27262    L__719:
006717 E2 53 67 00         A 27263    	JP	PO,L_1332
00671B                     A 27264    L__720:
                           A 27265    ; 6625			&& (UINT)pb->idx == nw) return 
                           A 27266    .LINE 6625
                           A 27267    
00671B ED65FA              A 27268    	PEA	IX+%FFFFFFFA
00671E DD07FD              A 27269    	LD	BC,(IX+%FFFFFFFD)
006721 C5                  A 27270    	PUSH	BC
006722 DD3106              A 27271    	LD	IY,(IX+%6)
006725 ED6609              A 27272    	PEA	IY+%9
006728 FD0700              A 27273    	LD	BC,(IY+%0)
00672B C5                  A 27274    	PUSH	BC
00672C CD 0A 45 00         A 27275    	CALL	_f_write
006730 C1                  A 27276    	POP	BC
006731 C1                  A 27277    	POP	BC
006732 C1                  A 27278    	POP	BC
006733 C1                  A 27279    	POP	BC
006734 01000000            A 27280    	LD	BC,0
006738 B7                  A 27281    	OR	A,A
006739 ED42                A 27282    	SBC	HL,BC
00673B 20 16               A 27283    	JR	NZ,L_1332
00673D DD07FA              A 27284    	LD	BC,(IX+%FFFFFFFA)
006740 DD3106              A 27285    	LD	IY,(IX+%6)
006743 FD2703              A 27286    	LD	HL,(IY+%3)
006746 B7                  A 27287    	OR	A,A
006747 ED42                A 27288    	SBC	HL,BC
006749 20 08               A 27289    	JR	NZ,L_1332
00674B DD3106              A 27290    	LD	IY,(IX+%6)
00674E FD2706              A 27291    	LD	HL,(IY+%6)
006751 18 04               A 27292    	JR	L_1333
006753                     A 27293    L_1332:
                           A 27294    ; 6626		return -1;
                           A 27295    .LINE 6626
                           A 27296    
006753 21FFFFFF            A 27297    	LD	HL,16777215
                           A 27298    ; 6627	}
006757                     A 27299    L_1333:
                           A 27300    .LINE 6627
                           A 27301    
006757 DDF9                A 27302    	LD	SP,IX
006759 DDE1                A 27303    	POP	IX
00675B C9                  A 27304    	RET	
                           A 27305    
                           A 27306    
                           A 27307    ;**************************** _putc_flush *****
                           A 27308    ;Name                         Addr/Register   S
                           A 27309    ;_f_write                            IMPORT  --
                           A 27310    ;nw                                    IX-6    
                           A 27311    ;G_89                                  IX-3    
                           A 27312    ;pb                                    IX+6    
                           A 27313    
                           A 27314    
                           A 27315    ; Stack Frame Size: 15 (bytes)
                           A 27316    ;       Spill Code: -3 (instruction)
                           A 27317    
                           A 27318    
                           A 27319    .ENDFUNC "putc_flush",6627,"_putc_flush"
                           A 27320    ; 6628	
                           A 27321    ; 6629	
                           A 27322    ; 6630	/* Initialize write buffer */
                           A 27323    ; 6631	
                           A 27324    ; 6632	static void putc_init (putbuff* pb, FIL
                           A 27325    ; 6633	{
00675C                     A 27326    _putc_init:
                           A 27327    .DEFINE "_putc_init"
                           A 27328    
                           A 27329    .VALUE _putc_init
                           A 27330    
                           A 27331    .CLASS 3
                           A 27332    
                           A 27333    .TYPE 65
                           A 27334    
                           A 27335    .ENDEF
                           A 27336    
                           A 27337    .BEGFUNC "putc_init",6633,"_putc_init"
                           A 27338    
                           A 27339    .LINE 6633
                           A 27340    
                           A 27341    .DEFINE "pb"
                           A 27342    
                           A 27343    .CLASS 65
                           A 27344    
                           A 27345    .VALUE 6
                           A 27346    
                           A 27347    .TAG "NONAME6"
                           A 27348    
                           A 27349    .TYPE 40
                           A 27350    
                           A 27351    .ENDEF
                           A 27352    
                           A 27353    .DEFINE "fp"
                           A 27354    
                           A 27355    .CLASS 65
                           A 27356    
                           A 27357    .VALUE 9
                           A 27358    
                           A 27359    .TAG "NONAME2"
                           A 27360    
                           A 27361    .TYPE 40
                           A 27362    
                           A 27363    .ENDEF
                           A 27364    
00675C DDE5                A 27365    	PUSH	IX
00675E DD210000 00         A 27366    	LD	IX,0
006763 DD39                A 27367    	ADD	IX,SP
                           A 27368    ; 6634		memset(pb, 0, sizeof (putbuff));
                           A 27369    .LINE 6634
                           A 27370    
006765 01490000            A 27371    	LD	BC,73
006769 C5                  A 27372    	PUSH	BC
00676A 01000000            A 27373    	LD	BC,0
00676E C5                  A 27374    	PUSH	BC
00676F DD0706              A 27375    	LD	BC,(IX+%6)
006772 C5                  A 27376    	PUSH	BC
006773 CD 00 00 00         A 27377    	CALL	_memset
006777 C1                  A 27378    	POP	BC
006778 C1                  A 27379    	POP	BC
006779 C1                  A 27380    	POP	BC
                           A 27381    ; 6635		pb->fp = fp;
                           A 27382    .LINE 6635
                           A 27383    
00677A DD0709              A 27384    	LD	BC,(IX+%9)
00677D DD3106              A 27385    	LD	IY,(IX+%6)
006780 FD0F00              A 27386    	LD	(IY+%0),BC
                           A 27387    ; 6636	}
                           A 27388    .LINE 6636
                           A 27389    
006783 DDF9                A 27390    	LD	SP,IX
006785 DDE1                A 27391    	POP	IX
006787 C9                  A 27392    	RET	
                           A 27393    
                           A 27394    
                           A 27395    ;**************************** _putc_init ******
                           A 27396    ;Name                         Addr/Register   S
                           A 27397    ;_memset                             IMPORT  --
                           A 27398    ;fp                                    IX+9    
                           A 27399    ;pb                                    IX+6    
                           A 27400    
                           A 27401    
                           A 27402    ; Stack Frame Size: 12 (bytes)
                           A 27403    ;       Spill Code: -3 (instruction)
                           A 27404    
                           A 27405    
                           A 27406    .ENDFUNC "putc_init",6636,"_putc_init"
                           A 27407    ; 6637	
                           A 27408    ; 6638	
                           A 27409    ; 6639	
                           A 27410    ; 6640	int f_putc (
                           A 27411    ; 6641		TCHAR c,	/* A character to be ou
                           A 27412    ; 6642		FIL* fp		/* Pointer to the file 
                           A 27413    ; 6643	)
                           A 27414    ; 6644	{
006788                     A 27415    _f_putc:
                           A 27416    .DEFINE "_f_putc"
                           A 27417    
                           A 27418    .VALUE _f_putc
                           A 27419    
                           A 27420    .CLASS 2
                           A 27421    
                           A 27422    .TYPE 68
                           A 27423    
                           A 27424    .ENDEF
                           A 27425    
                           A 27426    .BEGFUNC "f_putc",6644,"_f_putc"
                           A 27427    
                           A 27428    .LINE 6644
                           A 27429    
                           A 27430    .DEFINE "c"
                           A 27431    
                           A 27432    .CLASS 65
                           A 27433    
                           A 27434    .VALUE 6
                           A 27435    
                           A 27436    .TYPE 2
                           A 27437    
                           A 27438    .ENDEF
                           A 27439    
                           A 27440    .DEFINE "fp"
                           A 27441    
                           A 27442    .CLASS 65
                           A 27443    
                           A 27444    .VALUE 9
                           A 27445    
                           A 27446    .TAG "NONAME2"
                           A 27447    
                           A 27448    .TYPE 40
                           A 27449    
                           A 27450    .ENDEF
                           A 27451    
                           A 27452    .DEFINE "pb"
                           A 27453    
                           A 27454    .CLASS 65
                           A 27455    
                           A 27456    .VALUE -73
                           A 27457    
                           A 27458    .TAG "NONAME6"
                           A 27459    
                           A 27460    .TYPE 8
                           A 27461    
                           A 27462    .ENDEF
                           A 27463    
006788 DDE5                A 27464    	PUSH	IX
00678A DD210000 00         A 27465    	LD	IX,0
00678F DD39                A 27466    	ADD	IX,SP
006791 ED22B7              A 27467    	LEA	HL,IX+%FFFFFFB7
006794 F9                  A 27468    	LD	SP,HL
                           A 27469    ; 6645		putbuff pb;
                           A 27470    ; 6646	
                           A 27471    ; 6647	
                           A 27472    ; 6648		putc_init(&pb, fp);
                           A 27473    .LINE 6648
                           A 27474    
006795 DD0709              A 27475    	LD	BC,(IX+%9)
006798 C5                  A 27476    	PUSH	BC
006799 ED65B7              A 27477    	PEA	IX+%FFFFFFB7
00679C CD 5C 67 00         A 27478    	CALL	_putc_init
0067A0 C1                  A 27479    	POP	BC
0067A1 C1                  A 27480    	POP	BC
                           A 27481    ; 6649		putc_bfd(&pb, c);	/* Put the char
                           A 27482    .LINE 6649
                           A 27483    
0067A2 DD4E06              A 27484    	LD	C,(IX+%6)
0067A5 0600                A 27485    	LD	B,%0
0067A7 C5                  A 27486    	PUSH	BC
0067A8 ED65B7              A 27487    	PEA	IX+%FFFFFFB7
0067AB CD 3F 66 00         A 27488    	CALL	_putc_bfd
0067AF C1                  A 27489    	POP	BC
0067B0 C1                  A 27490    	POP	BC
                           A 27491    ; 6650		return putc_flush(&pb);
                           A 27492    .LINE 6650
                           A 27493    
0067B1 ED65B7              A 27494    	PEA	IX+%FFFFFFB7
0067B4 CD EF 66 00         A 27495    	CALL	_putc_flush
0067B8 C1                  A 27496    	POP	BC
                           A 27497    ; 6651	}
                           A 27498    .LINE 6651
                           A 27499    
0067B9 DDF9                A 27500    	LD	SP,IX
0067BB DDE1                A 27501    	POP	IX
0067BD C9                  A 27502    	RET	
                           A 27503    
                           A 27504    
                           A 27505    ;**************************** _f_putc *********
                           A 27506    ;Name                         Addr/Register   S
                           A 27507    ;pb                                   IX-73    
                           A 27508    ;fp                                    IX+9    
                           A 27509    ;c                                     IX+6    
                           A 27510    
                           A 27511    
                           A 27512    ; Stack Frame Size: 85 (bytes)
                           A 27513    ;       Spill Code: -3 (instruction)
                           A 27514    
                           A 27515    
                           A 27516    .ENDFUNC "f_putc",6651,"_f_putc"
                           A 27517    ; 6652	
                           A 27518    ; 6653	
                           A 27519    ; 6654	
                           A 27520    ; 6655	
                           A 27521    ; 6656	/*-------------------------------------
                           A 27522    ; 6657	/* Put a String to the File            
                           A 27523    ; 6658	/*-------------------------------------
                           A 27524    ; 6659	
                           A 27525    ; 6660	int f_puts (
                           A 27526    ; 6661		const TCHAR* str,	/* Pointer to t
                           A 27527    ; 6662		FIL* fp				/* Pointer to t
                           A 27528    ; 6663	)
                           A 27529    ; 6664	{
0067BE                     A 27530    _f_puts:
                           A 27531    .DEFINE "_f_puts"
                           A 27532    
                           A 27533    .VALUE _f_puts
                           A 27534    
                           A 27535    .CLASS 2
                           A 27536    
                           A 27537    .TYPE 68
                           A 27538    
                           A 27539    .ENDEF
                           A 27540    
                           A 27541    .BEGFUNC "f_puts",6664,"_f_puts"
                           A 27542    
                           A 27543    .LINE 6664
                           A 27544    
                           A 27545    .DEFINE "str"
                           A 27546    
                           A 27547    .CLASS 65
                           A 27548    
                           A 27549    .VALUE 6
                           A 27550    
                           A 27551    .TYPE 194
                           A 27552    
                           A 27553    .ENDEF
                           A 27554    
                           A 27555    .DEFINE "fp"
                           A 27556    
                           A 27557    .CLASS 65
                           A 27558    
                           A 27559    .VALUE 9
                           A 27560    
                           A 27561    .TAG "NONAME2"
                           A 27562    
                           A 27563    .TYPE 40
                           A 27564    
                           A 27565    .ENDEF
                           A 27566    
                           A 27567    .DEFINE "pb"
                           A 27568    
                           A 27569    .CLASS 65
                           A 27570    
                           A 27571    .VALUE -73
                           A 27572    
                           A 27573    .TAG "NONAME6"
                           A 27574    
                           A 27575    .TYPE 8
                           A 27576    
                           A 27577    .ENDEF
                           A 27578    
0067BE DDE5                A 27579    	PUSH	IX
0067C0 DD210000 00         A 27580    	LD	IX,0
0067C5 DD39                A 27581    	ADD	IX,SP
0067C7 ED22B4              A 27582    	LEA	HL,IX+%FFFFFFB4
0067CA F9                  A 27583    	LD	SP,HL
                           A 27584    ; 6665		putbuff pb;
                           A 27585    ; 6666	
                           A 27586    ; 6667	
                           A 27587    ; 6668		putc_init(&pb, fp);
                           A 27588    .LINE 6668
                           A 27589    
0067CB DD0709              A 27590    	LD	BC,(IX+%9)
0067CE C5                  A 27591    	PUSH	BC
0067CF ED65B7              A 27592    	PEA	IX+%FFFFFFB7
0067D2 CD 5C 67 00         A 27593    	CALL	_putc_init
0067D6 C1                  A 27594    	POP	BC
0067D7 C1                  A 27595    	POP	BC
                           A 27596    ; 6669		while (*str) putc_bfd(&pb, *str++);
                           A 27597    .LINE 6669
                           A 27598    
0067D8 18 1D               A 27599    	JR	L_1337
0067DA                     A 27600    L_1338:
0067DA DD0706              A 27601    	LD	BC,(IX+%6)
0067DD DD0FB4              A 27602    	LD	(IX+%FFFFFFB4),BC
0067E0 DD0706              A 27603    	LD	BC,(IX+%6)
0067E3 03                  A 27604    	INC	BC
0067E4 DD0F06              A 27605    	LD	(IX+%6),BC
0067E7 DD27B4              A 27606    	LD	HL,(IX+%FFFFFFB4)
0067EA 4E                  A 27607    	LD	C,(HL)
0067EB 0600                A 27608    	LD	B,%0
0067ED C5                  A 27609    	PUSH	BC
0067EE ED65B7              A 27610    	PEA	IX+%FFFFFFB7
0067F1 CD 3F 66 00         A 27611    	CALL	_putc_bfd
0067F5 C1                  A 27612    	POP	BC
0067F6 C1                  A 27613    	POP	BC
0067F7                     A 27614    L_1337:
0067F7 DD2706              A 27615    	LD	HL,(IX+%6)
0067FA 7E                  A 27616    	LD	A,(HL)
0067FB B7                  A 27617    	OR	A,A
0067FC 20 DC               A 27618    	JR	NZ,L_1338
                           A 27619    ; 6670		return putc_flush(&pb);
                           A 27620    .LINE 6670
                           A 27621    
0067FE ED65B7              A 27622    	PEA	IX+%FFFFFFB7
006801 CD EF 66 00         A 27623    	CALL	_putc_flush
006805 C1                  A 27624    	POP	BC
                           A 27625    ; 6671	}
                           A 27626    .LINE 6671
                           A 27627    
006806 DDF9                A 27628    	LD	SP,IX
006808 DDE1                A 27629    	POP	IX
00680A C9                  A 27630    	RET	
                           A 27631    
                           A 27632    
                           A 27633    ;**************************** _f_puts *********
                           A 27634    ;Name                         Addr/Register   S
                           A 27635    ;pb                                   IX-73    
                           A 27636    ;fp                                    IX+9    
                           A 27637    ;str                                   IX+6    
                           A 27638    
                           A 27639    
                           A 27640    ; Stack Frame Size: 88 (bytes)
                           A 27641    ;       Spill Code: -3 (instruction)
                           A 27642    
                           A 27643    
                           A 27644    .ENDFUNC "f_puts",6671,"_f_puts"
                           A 27645    ; 6672	
                           A 27646    ; 6673	
                           A 27647    ; 6674	
                           A 27648    ; 6675	
                           A 27649    ; 6676	/*-------------------------------------
                           A 27650    ; 6677	/* Put a Formatted String to the File (
                           A 27651    ; 6678	/*-------------------------------------
                           A 27652    ; 6679	#if FF_PRINT_FLOAT && FF_INTDEF == 2
                           A 27653    ; 6680	#include <math.h>
                           A 27654    ; 6681	
                           A 27655    ; 6682	static int ilog10 (double n)	/* Calc
                           A 27656    ; 6683	{
                           A 27657    ; 6684		int rv = 0;
                           A 27658    ; 6685	
                           A 27659    ; 6686		while (n >= 10) {	/* Decimate dig
                           A 27660    ; 6687			if (n >= 100000) {
                           A 27661    ; 6688				n /= 100000; rv += 5;
                           A 27662    ; 6689			} else {
                           A 27663    ; 6690				n /= 10; rv++;
                           A 27664    ; 6691			}
                           A 27665    ; 6692		}
                           A 27666    ; 6693		while (n < 1) {		/* Decimate dig
                           A 27667    ; 6694			if (n < 0.00001) {
                           A 27668    ; 6695				n *= 100000; rv -= 5;
                           A 27669    ; 6696			} else {
                           A 27670    ; 6697				n *= 10; rv--;
                           A 27671    ; 6698			}
                           A 27672    ; 6699		}
                           A 27673    ; 6700		return rv;
                           A 27674    ; 6701	}
                           A 27675    ; 6702	
                           A 27676    ; 6703	
                           A 27677    ; 6704	static double i10x (int n)	/* Calculat
                           A 27678    ; 6705	{
                           A 27679    ; 6706		double rv = 1;
                           A 27680    ; 6707	
                           A 27681    ; 6708		while (n > 0) {		/* Left shift *
                           A 27682    ; 6709			if (n >= 5) {
                           A 27683    ; 6710				rv *= 100000; n -= 5;
                           A 27684    ; 6711			} else {
                           A 27685    ; 6712				rv *= 10; n--;
                           A 27686    ; 6713			}
                           A 27687    ; 6714		}
                           A 27688    ; 6715		while (n < 0) {		/* Right shift 
                           A 27689    ; 6716			if (n <= -5) {
                           A 27690    ; 6717				rv /= 100000; n += 5;
                           A 27691    ; 6718			} else {
                           A 27692    ; 6719				rv /= 10; n++;
                           A 27693    ; 6720			}
                           A 27694    ; 6721		}
                           A 27695    ; 6722		return rv;
                           A 27696    ; 6723	}
                           A 27697    ; 6724	
                           A 27698    ; 6725	
                           A 27699    ; 6726	static void ftoa (
                           A 27700    ; 6727		char* buf,	/* Buffer to output the
                           A 27701    ; 6728		double val,	/* Value to output */
                           A 27702    ; 6729		int prec,	/* Number of fractional
                           A 27703    ; 6730		TCHAR fmt	/* Notation */
                           A 27704    ; 6731	)
                           A 27705    ; 6732	{
                           A 27706    ; 6733		int d;
                           A 27707    ; 6734		int e = 0, m = 0;
                           A 27708    ; 6735		char sign = 0;
                           A 27709    ; 6736		double w;
                           A 27710    ; 6737		const char *er = 0;
                           A 27711    ; 6738		const char ds = FF_PRINT_FLOAT == 2
                           A 27712    ; 6739	
                           A 27713    ; 6740	
                           A 27714    ; 6741		if (isnan(val)) {			/* Not 
                           A 27715    ; 6742			er = "NaN";
                           A 27716    ; 6743		} else {
                           A 27717    ; 6744			if (prec < 0) prec = 6;	/* Defa
                           A 27718    ; 6745			if (val < 0) {			/* Naga
                           A 27719    ; 6746				val = 0 - val; sign = '-';
                           A 27720    ; 6747			} else {
                           A 27721    ; 6748				sign = '+';
                           A 27722    ; 6749			}
                           A 27723    ; 6750			if (isinf(val)) {		/* Infi
                           A 27724    ; 6751				er = "INF";
                           A 27725    ; 6752			} else {
                           A 27726    ; 6753				if (fmt == 'f') {	/* Deci
                           A 27727    ; 6754					val += i10x(0 - prec) /
                           A 27728    ; 6755					m = ilog10(val);
                           A 27729    ; 6756					if (m < 0) m = 0;
                           A 27730    ; 6757					if (m + prec + 3 >= SZ_
                           A 27731    ; 6758				} else {			/* E no
                           A 27732    ; 6759					if (val != 0) {		/* 
                           A 27733    ; 6760						val += i10x(ilog10(
                           A 27734    ; 6761						e = ilog10(val);
                           A 27735    ; 6762						if (e > 99 || prec 
                           A 27736    ; 6763							er = "OV";
                           A 27737    ; 6764						} else {
                           A 27738    ; 6765							if (e < -99) e 
                           A 27739    ; 6766							val /= i10x(e);
                           A 27740    ; 6767						}
                           A 27741    ; 6768					}
                           A 27742    ; 6769				}
                           A 27743    ; 6770			}
                           A 27744    ; 6771			if (!er) {	/* Not error condit
                           A 27745    ; 6772				if (sign == '-') *buf++ = s
                           A 27746    ; 6773				do {				/* Put 
                           A 27747    ; 6774					if (m == -1) *buf++ = d
                           A 27748    ; 6775					w = i10x(m);			
                           A 27749    ; 6776					d = (int)(val / w); val
                           A 27750    ; 6777					*buf++ = (char)('0' + d
                           A 27751    ; 6778				} while (--m >= -prec);		
                           A 27752    ; 6779				if (fmt != 'f') {	/* Put 
                           A 27753    ; 6780					*buf++ = (char)fmt;
                           A 27754    ; 6781					if (e < 0) {
                           A 27755    ; 6782						e = 0 - e; *buf++ =
                           A 27756    ; 6783					} else {
                           A 27757    ; 6784						*buf++ = '+';
                           A 27758    ; 6785					}
                           A 27759    ; 6786					*buf++ = (char)('0' + e
                           A 27760    ; 6787					*buf++ = (char)('0' + e
                           A 27761    ; 6788				}
                           A 27762    ; 6789			}
                           A 27763    ; 6790		}
                           A 27764    ; 6791		if (er) {	/* Error condition */
                           A 27765    ; 6792			if (sign) *buf++ = sign;		
                           A 27766    ; 6793			do *buf++ = *er++; while (*er);
                           A 27767    ; 6794		}
                           A 27768    ; 6795		*buf = 0;	/* Term */
                           A 27769    ; 6796	}
                           A 27770    ; 6797	#endif	/* FF_PRINT_FLOAT && FF_INTDEF 
                           A 27771    ; 6798	
                           A 27772    ; 6799	
                           A 27773    ; 6800	
                           A 27774    ; 6801	int f_printf (
                           A 27775    ; 6802		FIL* fp,			/* Pointer to t
                           A 27776    ; 6803		const TCHAR* fmt,	/* Pointer to t
                           A 27777    ; 6804		...					/* Optional arg
                           A 27778    ; 6805	)
                           A 27779    ; 6806	{
00680B                     A 27780    _f_printf:
                           A 27781    .DEFINE "_f_printf"
                           A 27782    
                           A 27783    .VALUE _f_printf
                           A 27784    
                           A 27785    .CLASS 2
                           A 27786    
                           A 27787    .TYPE 68
                           A 27788    
                           A 27789    .ENDEF
                           A 27790    
                           A 27791    .BEGFUNC "f_printf",6806,"_f_printf"
                           A 27792    
                           A 27793    .LINE 6806
                           A 27794    
                           A 27795    .DEFINE "fp"
                           A 27796    
                           A 27797    .CLASS 65
                           A 27798    
                           A 27799    .VALUE 6
                           A 27800    
                           A 27801    .TAG "NONAME2"
                           A 27802    
                           A 27803    .TYPE 40
                           A 27804    
                           A 27805    .ENDEF
                           A 27806    
                           A 27807    .DEFINE "fmt"
                           A 27808    
                           A 27809    .CLASS 65
                           A 27810    
                           A 27811    .VALUE 9
                           A 27812    
                           A 27813    .TYPE 194
                           A 27814    
                           A 27815    .ENDEF
                           A 27816    
                           A 27817    .DEFINE "tc"
                           A 27818    
                           A 27819    .CLASS 65
                           A 27820    
                           A 27821    .VALUE -1
                           A 27822    
                           A 27823    .TYPE 2
                           A 27824    
                           A 27825    .ENDEF
                           A 27826    
                           A 27827    .DEFINE "j"
                           A 27828    
                           A 27829    .CLASS 65
                           A 27830    
                           A 27831    .VALUE -4
                           A 27832    
                           A 27833    .TYPE 14
                           A 27834    
                           A 27835    .ENDEF
                           A 27836    
                           A 27837    .DEFINE "arp"
                           A 27838    
                           A 27839    .CLASS 65
                           A 27840    
                           A 27841    .VALUE -7
                           A 27842    
                           A 27843    .TYPE 34
                           A 27844    
                           A 27845    .ENDEF
                           A 27846    
                           A 27847    .DEFINE "i"
                           A 27848    
                           A 27849    .CLASS 65
                           A 27850    
                           A 27851    .VALUE -10
                           A 27852    
                           A 27853    .TYPE 14
                           A 27854    
                           A 27855    .ENDEF
                           A 27856    
                           A 27857    .DEFINE "prec"
                           A 27858    
                           A 27859    .CLASS 65
                           A 27860    
                           A 27861    .VALUE -13
                           A 27862    
                           A 27863    .TYPE 4
                           A 27864    
                           A 27865    .ENDEF
                           A 27866    
                           A 27867    .DEFINE "f"
                           A 27868    
                           A 27869    .CLASS 65
                           A 27870    
                           A 27871    .VALUE -16
                           A 27872    
                           A 27873    .TYPE 14
                           A 27874    
                           A 27875    .ENDEF
                           A 27876    
                           A 27877    .DEFINE "v"
                           A 27878    
                           A 27879    .CLASS 65
                           A 27880    
                           A 27881    .VALUE -20
                           A 27882    
                           A 27883    .TYPE 15
                           A 27884    
                           A 27885    .ENDEF
                           A 27886    
                           A 27887    .DEFINE "w"
                           A 27888    
                           A 27889    .CLASS 65
                           A 27890    
                           A 27891    .VALUE -23
                           A 27892    
                           A 27893    .TYPE 14
                           A 27894    
                           A 27895    .ENDEF
                           A 27896    
                           A 27897    .DEFINE "tp"
                           A 27898    
                           A 27899    .CLASS 65
                           A 27900    
                           A 27901    .VALUE -26
                           A 27902    
                           A 27903    .TYPE 34
                           A 27904    
                           A 27905    .ENDEF
                           A 27906    
                           A 27907    .DEFINE "d"
                           A 27908    
                           A 27909    .CLASS 65
                           A 27910    
                           A 27911    .VALUE -27
                           A 27912    
                           A 27913    .TYPE 2
                           A 27914    
                           A 27915    .ENDEF
                           A 27916    
                           A 27917    .DEFINE "r"
                           A 27918    
                           A 27919    .CLASS 65
                           A 27920    
                           A 27921    .VALUE -30
                           A 27922    
                           A 27923    .TYPE 14
                           A 27924    
                           A 27925    .ENDEF
                           A 27926    
                           A 27927    .DEFINE "pad"
                           A 27928    
                           A 27929    .CLASS 65
                           A 27930    
                           A 27931    .VALUE -31
                           A 27932    
                           A 27933    .TYPE 2
                           A 27934    
                           A 27935    .ENDEF
                           A 27936    
                           A 27937    .DEFINE "nul"
                           A 27938    
                           A 27939    .CLASS 65
                           A 27940    
                           A 27941    .VALUE -32
                           A 27942    
                           A 27943    .TYPE 2
                           A 27944    
                           A 27945    .ENDEF
                           A 27946    
                           A 27947    .DEFINE "str"
                           A 27948    
                           A 27949    .CLASS 65
                           A 27950    
                           A 27951    .VALUE -71
                           A 27952    
                           A 27953    .DIM 32
                           A 27954    
                           A 27955    .TYPE 98
                           A 27956    
                           A 27957    .ENDEF
                           A 27958    
                           A 27959    .DEFINE "pb"
                           A 27960    
                           A 27961    .CLASS 65
                           A 27962    
                           A 27963    .VALUE -144
                           A 27964    
                           A 27965    .TAG "NONAME6"
                           A 27966    
                           A 27967    .TYPE 8
                           A 27968    
                           A 27969    .ENDEF
                           A 27970    
00680B DDE5                A 27971    	PUSH	IX
00680D DD210000 00         A 27972    	LD	IX,0
006812 DD39                A 27973    	ADD	IX,SP
006814 214FFFFF            A 27974    	LD	HL,-177
006818 39                  A 27975    	ADD	HL,SP
006819 F9                  A 27976    	LD	SP,HL
                           A 27977    ; 6807		va_list arp;
                           A 27978    ; 6808		putbuff pb;
                           A 27979    ; 6809		UINT i, j, w, f, r;
                           A 27980    ; 6810		int prec;
                           A 27981    ; 6811	#if FF_PRINT_LLI && FF_INTDEF == 2
                           A 27982    ; 6812		QWORD v;
                           A 27983    ; 6813	#else
                           A 27984    ; 6814		DWORD v;
                           A 27985    ; 6815	#endif
                           A 27986    ; 6816		TCHAR tc, pad, *tp;
                           A 27987    ; 6817		TCHAR nul = 0;
                           A 27988    .LINE 6817
                           A 27989    
00681A DD36E000            A 27990    	LD	(IX+%FFFFFFE0),%0
                           A 27991    ; 6818		char d, str[SZ_NUM_BUF];
                           A 27992    ; 6819	
                           A 27993    ; 6820	
                           A 27994    ; 6821		putc_init(&pb, fp);
                           A 27995    .LINE 6821
                           A 27996    
00681E DD0706              A 27997    	LD	BC,(IX+%6)
006821 C5                  A 27998    	PUSH	BC
006822 DDE5E1              A 27999    	LD	HL,IX
006825 0170FFFF            A 28000    	LD	BC,-144
006829 09                  A 28001    	ADD	HL,BC
00682A E5C1                A 28002    	LD	BC,HL
00682C C5                  A 28003    	PUSH	BC
00682D CD 5C 67 00         A 28004    	CALL	_putc_init
006831 C1                  A 28005    	POP	BC
006832 C1                  A 28006    	POP	BC
                           A 28007    ; 6822	
                           A 28008    ; 6823		va_start(arp, fmt);
                           A 28009    .LINE 6823
                           A 28010    
006833 ED550C              A 28011    	LEA	IY,IX+%C
006836 DD3EF9              A 28012    	LD	(IX+%FFFFFFF9),IY
                           A 28013    ; 6824	
                           A 28014    ; 6825		for (;;) {
006839                     A 28015    L_1448:
                           A 28016    .LINE 6825
                           A 28017    
                           A 28018    ; 6826			tc = *fmt++;
                           A 28019    .LINE 6826
                           A 28020    
006839 DD0709              A 28021    	LD	BC,(IX+%9)
00683C 216DFFFF            A 28022    	LD	HL,-147
006840 DDE5D1              A 28023    	LD	DE,IX
006843 19                  A 28024    	ADD	HL,DE
006844 ED0F                A 28025    	LD	(HL),BC
006846 216DFFFF            A 28026    	LD	HL,-147
00684A DDE5C1              A 28027    	LD	BC,IX
00684D 09                  A 28028    	ADD	HL,BC
00684E ED27                A 28029    	LD	HL,(HL)
006850 7E                  A 28030    	LD	A,(HL)
006851 DD77FF              A 28031    	LD	(IX+%FFFFFFFF),A
006854 DD0709              A 28032    	LD	BC,(IX+%9)
006857 03                  A 28033    	INC	BC
006858 DD0F09              A 28034    	LD	(IX+%9),BC
                           A 28035    ; 6827			if (tc == 0) break;			/* 
                           A 28036    .LINE 6827
                           A 28037    
00685B DD7EFF              A 28038    	LD	A,(IX+%FFFFFFFF)
00685E B7                  A 28039    	OR	A,A
00685F CA EA 6E 00         A 28040    	JR	Z,L_1450
                           A 28041    ; 6828			if (tc != '%') {			/* 
                           A 28042    .LINE 6828
                           A 28043    
006863 DD7EFF              A 28044    	LD	A,(IX+%FFFFFFFF)
006866 FE25                A 28045    	CP	A,%25
006868 28 19               A 28046    	JR	Z,L_1345
                           A 28047    ; 6829				putc_bfd(&pb, tc);
                           A 28048    .LINE 6829
                           A 28049    
00686A DD4EFF              A 28050    	LD	C,(IX+%FFFFFFFF)
00686D 0600                A 28051    	LD	B,%0
00686F C5                  A 28052    	PUSH	BC
006870 DDE5E1              A 28053    	LD	HL,IX
006873 0170FFFF            A 28054    	LD	BC,-144
006877 09                  A 28055    	ADD	HL,BC
006878 E5C1                A 28056    	LD	BC,HL
00687A C5                  A 28057    	PUSH	BC
00687B CD 3F 66 00         A 28058    	CALL	_putc_bfd
00687F C1                  A 28059    	POP	BC
006880 C1                  A 28060    	POP	BC
                           A 28061    ; 6830				continue;
                           A 28062    .LINE 6830
                           A 28063    
006881 18 B6               A 28064    	JR	L_1448
                           A 28065    ; 6831			}
006883                     A 28066    L_1345:
                           A 28067    .LINE 6831
                           A 28068    
                           A 28069    ; 6832			f = w = 0; pad = ' '; prec = -1
                           A 28070    .LINE 6832
                           A 28071    
006883 01000000            A 28072    	LD	BC,0
006887 DD0FE9              A 28073    	LD	(IX+%FFFFFFE9),BC
00688A DD0FF0              A 28074    	LD	(IX+%FFFFFFF0),BC
00688D DD36E120            A 28075    	LD	(IX+%FFFFFFE1),%20
006891 01FFFFFF            A 28076    	LD	BC,16777215
006895 DD0FF3              A 28077    	LD	(IX+%FFFFFFF3),BC
                           A 28078    ; 6833			tc = *fmt++;
                           A 28079    .LINE 6833
                           A 28080    
006898 DD0709              A 28081    	LD	BC,(IX+%9)
00689B 216AFFFF            A 28082    	LD	HL,-150
00689F DDE5D1              A 28083    	LD	DE,IX
0068A2 19                  A 28084    	ADD	HL,DE
0068A3 ED0F                A 28085    	LD	(HL),BC
0068A5 216AFFFF            A 28086    	LD	HL,-150
0068A9 DDE5C1              A 28087    	LD	BC,IX
0068AC 09                  A 28088    	ADD	HL,BC
0068AD ED27                A 28089    	LD	HL,(HL)
0068AF 7E                  A 28090    	LD	A,(HL)
0068B0 DD77FF              A 28091    	LD	(IX+%FFFFFFFF),A
0068B3 DD0709              A 28092    	LD	BC,(IX+%9)
0068B6 03                  A 28093    	INC	BC
0068B7 DD0F09              A 28094    	LD	(IX+%9),BC
                           A 28095    ; 6834			if (tc == '0') {			/* 
                           A 28096    .LINE 6834
                           A 28097    
0068BA DD7EFF              A 28098    	LD	A,(IX+%FFFFFFFF)
0068BD FE30                A 28099    	CP	A,%30
0068BF 20 28               A 28100    	JR	NZ,L_1351
                           A 28101    ; 6835				pad = '0'; tc = *fmt++;
                           A 28102    .LINE 6835
                           A 28103    
0068C1 DD36E130            A 28104    	LD	(IX+%FFFFFFE1),%30
0068C5 DD0709              A 28105    	LD	BC,(IX+%9)
0068C8 2167FFFF            A 28106    	LD	HL,-153
0068CC DDE5D1              A 28107    	LD	DE,IX
0068CF 19                  A 28108    	ADD	HL,DE
0068D0 ED0F                A 28109    	LD	(HL),BC
0068D2 2167FFFF            A 28110    	LD	HL,-153
0068D6 DDE5C1              A 28111    	LD	BC,IX
0068D9 09                  A 28112    	ADD	HL,BC
0068DA ED27                A 28113    	LD	HL,(HL)
0068DC 7E                  A 28114    	LD	A,(HL)
0068DD DD77FF              A 28115    	LD	(IX+%FFFFFFFF),A
0068E0 DD0709              A 28116    	LD	BC,(IX+%9)
0068E3 03                  A 28117    	INC	BC
0068E4 DD0F09              A 28118    	LD	(IX+%9),BC
                           A 28119    ; 6836			} else if (tc == '-') {		/* 
                           A 28120    .LINE 6836
                           A 28121    
0068E7 18 30               A 28122    	JR	L_1359
0068E9                     A 28123    L_1351:
0068E9 DD7EFF              A 28124    	LD	A,(IX+%FFFFFFFF)
0068EC FE2D                A 28125    	CP	A,%2D
0068EE 20 29               A 28126    	JR	NZ,L_1359
                           A 28127    ; 6837				f = 2; tc = *fmt++;
                           A 28128    .LINE 6837
                           A 28129    
0068F0 01020000            A 28130    	LD	BC,2
0068F4 DD0FF0              A 28131    	LD	(IX+%FFFFFFF0),BC
0068F7 DD0709              A 28132    	LD	BC,(IX+%9)
0068FA 2164FFFF            A 28133    	LD	HL,-156
0068FE DDE5D1              A 28134    	LD	DE,IX
006901 19                  A 28135    	ADD	HL,DE
006902 ED0F                A 28136    	LD	(HL),BC
006904 2164FFFF            A 28137    	LD	HL,-156
006908 DDE5C1              A 28138    	LD	BC,IX
00690B 09                  A 28139    	ADD	HL,BC
00690C ED27                A 28140    	LD	HL,(HL)
00690E 7E                  A 28141    	LD	A,(HL)
00690F DD77FF              A 28142    	LD	(IX+%FFFFFFFF),A
006912 DD0709              A 28143    	LD	BC,(IX+%9)
006915 03                  A 28144    	INC	BC
006916 DD0F09              A 28145    	LD	(IX+%9),BC
                           A 28146    ; 6838			}
006919                     A 28147    L_1359:
                           A 28148    .LINE 6838
                           A 28149    
                           A 28150    ; 6839			if (tc == '*') {			/* 
                           A 28151    .LINE 6839
                           A 28152    
006919 DD7EFF              A 28153    	LD	A,(IX+%FFFFFFFF)
00691C FE2A                A 28154    	CP	A,%2A
00691E 20 78               A 28155    	JR	NZ,L_1355
                           A 28156    ; 6840				w = va_arg(arp, int);
                           A 28157    .LINE 6840
                           A 28158    
006920 DD31F9              A 28159    	LD	IY,(IX+%FFFFFFF9)
006923 ED0303              A 28160    	LEA	BC,IY+%3
006926 DD0FF9              A 28161    	LD	(IX+%FFFFFFF9),BC
006929 DD31F9              A 28162    	LD	IY,(IX+%FFFFFFF9)
00692C ED23FD              A 28163    	LEA	HL,IY+%FFFFFFFD
00692F ED07                A 28164    	LD	BC,(HL)
006931 DD0FE9              A 28165    	LD	(IX+%FFFFFFE9),BC
                           A 28166    ; 6841				tc = *fmt++;
                           A 28167    .LINE 6841
                           A 28168    
006934 DD0709              A 28169    	LD	BC,(IX+%9)
006937 2161FFFF            A 28170    	LD	HL,-159
00693B DDE5D1              A 28171    	LD	DE,IX
00693E 19                  A 28172    	ADD	HL,DE
00693F ED0F                A 28173    	LD	(HL),BC
006941 2161FFFF            A 28174    	LD	HL,-159
006945 DDE5C1              A 28175    	LD	BC,IX
006948 09                  A 28176    	ADD	HL,BC
006949 ED27                A 28177    	LD	HL,(HL)
00694B 7E                  A 28178    	LD	A,(HL)
00694C DD77FF              A 28179    	LD	(IX+%FFFFFFFF),A
00694F DD0709              A 28180    	LD	BC,(IX+%9)
006952 03                  A 28181    	INC	BC
006953 DD0F09              A 28182    	LD	(IX+%9),BC
                           A 28183    ; 6842			} else {
                           A 28184    .LINE 6842
                           A 28185    
006956 18 5C               A 28186    	JR	L_1369
                           A 28187    ; 6843				while (IsDigit(tc)) {	/* 
                           A 28188    .LINE 6843
                           A 28189    
006958                     A 28190    L_1356:
                           A 28191    ; 6844					w = w * 10 + tc - '0';
                           A 28192    .LINE 6844
                           A 28193    
006958 DD27E9              A 28194    	LD	HL,(IX+%FFFFFFE9)
00695B 3E0A                A 28195    	LD	A,%A
00695D CD 00 00 00         A 28196    	CALL	__imul_b
006961 E5C1                A 28197    	LD	BC,HL
006963 DD7EFF              A 28198    	LD	A,(IX+%FFFFFFFF)
006966 17ED62              A 28199    	SEXT	HL
006969 DD6EFF              A 28200    	LD	L,(IX+%FFFFFFFF)
00696C 09                  A 28201    	ADD	HL,BC
00696D E5FDE1              A 28202    	LD	IY,HL
006970 ED33D0              A 28203    	LEA	IY,IY+%FFFFFFD0
006973 DD3EE9              A 28204    	LD	(IX+%FFFFFFE9),IY
                           A 28205    ; 6845					tc = *fmt++;
                           A 28206    .LINE 6845
                           A 28207    
006976 DD0709              A 28208    	LD	BC,(IX+%9)
006979 215EFFFF            A 28209    	LD	HL,-162
00697D DDE5D1              A 28210    	LD	DE,IX
006980 19                  A 28211    	ADD	HL,DE
006981 ED0F                A 28212    	LD	(HL),BC
006983 215EFFFF            A 28213    	LD	HL,-162
006987 DDE5C1              A 28214    	LD	BC,IX
00698A 09                  A 28215    	ADD	HL,BC
00698B ED27                A 28216    	LD	HL,(HL)
00698D 7E                  A 28217    	LD	A,(HL)
00698E DD77FF              A 28218    	LD	(IX+%FFFFFFFF),A
006991 DD0709              A 28219    	LD	BC,(IX+%9)
006994 03                  A 28220    	INC	BC
006995 DD0F09              A 28221    	LD	(IX+%9),BC
                           A 28222    ; 6846				}
006998                     A 28223    L_1355:
                           A 28224    .LINE 6846
                           A 28225    
006998 DD7EFF              A 28226    	LD	A,(IX+%FFFFFFFF)
00699B FE30                A 28227    	CP	A,%30
00699D FA B4 69 00         A 28228    	JP	M,L_1369
0069A1 3E39                A 28229    	LD	A,%39
0069A3 DDBEFF              A 28230    	CP	A,(IX+%FFFFFFFF)
0069A6 F2 B0 69 00         A 28231    	JP	P,L__772
0069AA EA 58 69 00         A 28232    	JP	PE,L_1356
0069AE 18 04               A 28233    	JR	L__773
0069B0                     A 28234    L__772:
0069B0 E2 58 69 00         A 28235    	JP	PO,L_1356
0069B4                     A 28236    L__773:
                           A 28237    ; 6847			}
0069B4                     A 28238    L_1369:
                           A 28239    .LINE 6847
                           A 28240    
                           A 28241    ; 6848			if (tc == '.') {			/* 
                           A 28242    .LINE 6848
                           A 28243    
0069B4 DD7EFF              A 28244    	LD	A,(IX+%FFFFFFFF)
0069B7 FE2E                A 28245    	CP	A,%2E
0069B9 C2 8D 6A 00         A 28246    	JR	NZ,L_1372
                           A 28247    ; 6849				tc = *fmt++;
                           A 28248    .LINE 6849
                           A 28249    
0069BD DD0709              A 28250    	LD	BC,(IX+%9)
0069C0 215BFFFF            A 28251    	LD	HL,-165
0069C4 DDE5D1              A 28252    	LD	DE,IX
0069C7 19                  A 28253    	ADD	HL,DE
0069C8 ED0F                A 28254    	LD	(HL),BC
0069CA 215BFFFF            A 28255    	LD	HL,-165
0069CE DDE5C1              A 28256    	LD	BC,IX
0069D1 09                  A 28257    	ADD	HL,BC
0069D2 ED27                A 28258    	LD	HL,(HL)
0069D4 7E                  A 28259    	LD	A,(HL)
0069D5 DD77FF              A 28260    	LD	(IX+%FFFFFFFF),A
0069D8 DD0709              A 28261    	LD	BC,(IX+%9)
0069DB 03                  A 28262    	INC	BC
0069DC DD0F09              A 28263    	LD	(IX+%9),BC
                           A 28264    ; 6850				if (tc == '*') {		/* 
                           A 28265    .LINE 6850
                           A 28266    
0069DF DD7EFF              A 28267    	LD	A,(IX+%FFFFFFFF)
0069E2 FE2A                A 28268    	CP	A,%2A
0069E4 20 38               A 28269    	JR	NZ,L_1367
                           A 28270    ; 6851					prec = va_arg(arp, int)
                           A 28271    .LINE 6851
                           A 28272    
0069E6 DD31F9              A 28273    	LD	IY,(IX+%FFFFFFF9)
0069E9 ED0303              A 28274    	LEA	BC,IY+%3
0069EC DD0FF9              A 28275    	LD	(IX+%FFFFFFF9),BC
0069EF DD31F9              A 28276    	LD	IY,(IX+%FFFFFFF9)
0069F2 ED23FD              A 28277    	LEA	HL,IY+%FFFFFFFD
0069F5 ED07                A 28278    	LD	BC,(HL)
0069F7 DD0FF3              A 28279    	LD	(IX+%FFFFFFF3),BC
                           A 28280    ; 6852					tc = *fmt++;
                           A 28281    .LINE 6852
                           A 28282    
0069FA DD0709              A 28283    	LD	BC,(IX+%9)
0069FD 2158FFFF            A 28284    	LD	HL,-168
006A01 DDE5D1              A 28285    	LD	DE,IX
006A04 19                  A 28286    	ADD	HL,DE
006A05 ED0F                A 28287    	LD	(HL),BC
006A07 2158FFFF            A 28288    	LD	HL,-168
006A0B DDE5C1              A 28289    	LD	BC,IX
006A0E 09                  A 28290    	ADD	HL,BC
006A0F ED27                A 28291    	LD	HL,(HL)
006A11 7E                  A 28292    	LD	A,(HL)
006A12 DD77FF              A 28293    	LD	(IX+%FFFFFFFF),A
006A15 DD0709              A 28294    	LD	BC,(IX+%9)
006A18 03                  A 28295    	INC	BC
006A19 DD0F09              A 28296    	LD	(IX+%9),BC
                           A 28297    ; 6853				} else {
                           A 28298    .LINE 6853
                           A 28299    
006A1C 18 6F               A 28300    	JR	L_1372
006A1E                     A 28301    L_1367:
                           A 28302    ; 6854					prec = 0;
                           A 28303    .LINE 6854
                           A 28304    
006A1E 01000000            A 28305    	LD	BC,0
006A22 DD0FF3              A 28306    	LD	(IX+%FFFFFFF3),BC
                           A 28307    ; 6855					while (IsDigit(tc)) {	
                           A 28308    .LINE 6855
                           A 28309    
006A25 18 40               A 28310    	JR	L_1364
006A27                     A 28311    L_1365:
                           A 28312    ; 6856						prec = prec * 10 + 
                           A 28313    .LINE 6856
                           A 28314    
006A27 DD27F3              A 28315    	LD	HL,(IX+%FFFFFFF3)
006A2A 3E0A                A 28316    	LD	A,%A
006A2C CD 00 00 00         A 28317    	CALL	__imul_b
006A30 E5C1                A 28318    	LD	BC,HL
006A32 DD7EFF              A 28319    	LD	A,(IX+%FFFFFFFF)
006A35 17ED62              A 28320    	SEXT	HL
006A38 DD6EFF              A 28321    	LD	L,(IX+%FFFFFFFF)
006A3B 09                  A 28322    	ADD	HL,BC
006A3C E5FDE1              A 28323    	LD	IY,HL
006A3F ED33D0              A 28324    	LEA	IY,IY+%FFFFFFD0
006A42 DD3EF3              A 28325    	LD	(IX+%FFFFFFF3),IY
                           A 28326    ; 6857						tc = *fmt++;
                           A 28327    .LINE 6857
                           A 28328    
006A45 DD0709              A 28329    	LD	BC,(IX+%9)
006A48 2155FFFF            A 28330    	LD	HL,-171
006A4C DDE5D1              A 28331    	LD	DE,IX
006A4F 19                  A 28332    	ADD	HL,DE
006A50 ED0F                A 28333    	LD	(HL),BC
006A52 2155FFFF            A 28334    	LD	HL,-171
006A56 DDE5C1              A 28335    	LD	BC,IX
006A59 09                  A 28336    	ADD	HL,BC
006A5A ED27                A 28337    	LD	HL,(HL)
006A5C 7E                  A 28338    	LD	A,(HL)
006A5D DD77FF              A 28339    	LD	(IX+%FFFFFFFF),A
006A60 DD0709              A 28340    	LD	BC,(IX+%9)
006A63 03                  A 28341    	INC	BC
006A64 DD0F09              A 28342    	LD	(IX+%9),BC
                           A 28343    ; 6858					}
006A67                     A 28344    L_1364:
                           A 28345    .LINE 6858
                           A 28346    
006A67 DD7EFF              A 28347    	LD	A,(IX+%FFFFFFFF)
006A6A FE30                A 28348    	CP	A,%30
006A6C FA 76 6A 00         A 28349    	JP	M,L__774
006A70 EA 8D 6A 00         A 28350    	JP	PE,L_1372
006A74 18 04               A 28351    	JR	L__775
006A76                     A 28352    L__774:
006A76 E2 8D 6A 00         A 28353    	JP	PO,L_1372
006A7A                     A 28354    L__775:
006A7A 3E39                A 28355    	LD	A,%39
006A7C DDBEFF              A 28356    	CP	A,(IX+%FFFFFFFF)
006A7F F2 89 6A 00         A 28357    	JP	P,L__776
006A83 EA 27 6A 00         A 28358    	JP	PE,L_1365
006A87 18 04               A 28359    	JR	L__777
006A89                     A 28360    L__776:
006A89 E2 27 6A 00         A 28361    	JP	PO,L_1365
006A8D                     A 28362    L__777:
                           A 28363    ; 6859				}
                           A 28364    ; 6860			}
006A8D                     A 28365    L_1372:
                           A 28366    .LINE 6860
                           A 28367    
                           A 28368    ; 6861			if (tc == 'l') {			/* 
                           A 28369    .LINE 6861
                           A 28370    
006A8D DD7EFF              A 28371    	LD	A,(IX+%FFFFFFFF)
006A90 FE6C                A 28372    	CP	A,%6C
006A92 20 30               A 28373    	JR	NZ,L_1374
                           A 28374    ; 6862				f |= 4; tc = *fmt++;
                           A 28375    .LINE 6862
                           A 28376    
006A94 01040000            A 28377    	LD	BC,4
006A98 DD27F0              A 28378    	LD	HL,(IX+%FFFFFFF0)
006A9B CD 00 00 00         A 28379    	CALL	__ior
006A9F DD2FF0              A 28380    	LD	(IX+%FFFFFFF0),HL
006AA2 DD0709              A 28381    	LD	BC,(IX+%9)
006AA5 2152FFFF            A 28382    	LD	HL,-174
006AA9 DDE5D1              A 28383    	LD	DE,IX
006AAC 19                  A 28384    	ADD	HL,DE
006AAD ED0F                A 28385    	LD	(HL),BC
006AAF 2152FFFF            A 28386    	LD	HL,-174
006AB3 DDE5C1              A 28387    	LD	BC,IX
006AB6 09                  A 28388    	ADD	HL,BC
006AB7 ED27                A 28389    	LD	HL,(HL)
006AB9 7E                  A 28390    	LD	A,(HL)
006ABA DD77FF              A 28391    	LD	(IX+%FFFFFFFF),A
006ABD DD0709              A 28392    	LD	BC,(IX+%9)
006AC0 03                  A 28393    	INC	BC
006AC1 DD0F09              A 28394    	LD	(IX+%9),BC
                           A 28395    ; 6863	#if FF_PRINT_LLI && FF_INTDEF == 2
                           A 28396    ; 6864				if (tc == 'l') {		/* 
                           A 28397    ; 6865					f |= 8; tc = *fmt++;
                           A 28398    ; 6866				}
                           A 28399    ; 6867	#endif
                           A 28400    ; 6868			}
006AC4                     A 28401    L_1374:
                           A 28402    .LINE 6868
                           A 28403    
                           A 28404    ; 6869			if (tc == 0) break;			/* 
                           A 28405    .LINE 6869
                           A 28406    
006AC4 DD7EFF              A 28407    	LD	A,(IX+%FFFFFFFF)
006AC7 B7                  A 28408    	OR	A,A
006AC8 CA EA 6E 00         A 28409    	JR	Z,L_1450
                           A 28410    ; 6870			switch (tc) {				/* 
                           A 28411    .LINE 6870
                           A 28412    
006ACC DD7EFF              A 28413    	LD	A,(IX+%FFFFFFFF)
006ACF 17ED62              A 28414    	SEXT	HL
006AD2 DD6EFF              A 28415    	LD	L,(IX+%FFFFFFFF)
006AD5 E5C1                A 28416    	LD	BC,HL
006AD7                     A 28417    L__741:
006AD7 116F0000            A 28418    	LD	DE,111
006ADB B7                  A 28419    	OR	A,A
006ADC ED52                A 28420    	SBC	HL,DE
006ADE CA 6A 6B 00         A 28421    	JR	Z,L_1376
006AE2 216F0000            A 28422    	LD	HL,111
006AE6 B7                  A 28423    	OR	A,A
006AE7 ED42                A 28424    	SBC	HL,BC
006AE9 38 3C               A 28425    	JR	C,L__743
006AEB 11620000            A 28426    	LD	DE,98
006AEF C5E1                A 28427    	LD	HL,BC
006AF1 B7                  A 28428    	OR	A,A
006AF2 ED52                A 28429    	SBC	HL,DE
006AF4 38 22               A 28430    	JR	C,L__745
006AF6 21640000            A 28431    	LD	HL,100
006AFA B7                  A 28432    	OR	A,A
006AFB ED42                A 28433    	SBC	HL,BC
006AFD DA CD 6C 00         A 28434    	JR	C,L_1409
006B01 C5E1                A 28435    	LD	HL,BC
006B03 E5D1                A 28436    	LD	DE,HL
006B05 29                  A 28437    	ADD	HL,HL
006B06 19                  A 28438    	ADD	HL,DE
006B07 11 E9 69 00         A 28439    	LD	DE,L__739-294
006B0B 19                  A 28440    	ADD	HL,DE
006B0C ED27                A 28441    	LD	HL,(HL)
006B0E E9                  A 28442    	JP	(HL)
006B0F                     A 28443    L__739:
006B0F 5F6B00              A 28444    	DW24	L_1375	
                           A 28445    
006B12 8B6B00              A 28446    	DW24	L_1381	
                           A 28447    
006B15 756B00              A 28448    	DW24	L_1377	
                           A 28449    
006B18                     A 28450    L__745:
006B18 11580000            A 28451    	LD	DE,88
006B1C C5E1                A 28452    	LD	HL,BC
006B1E B7                  A 28453    	OR	A,A
006B1F ED52                A 28454    	SBC	HL,DE
006B21 28 5D               A 28455    	JR	Z,L_1380
006B23 C3 CD 6C 00         A 28456    	JR	L_1409
006B27                     A 28457    L__743:
006B27 11730000            A 28458    	LD	DE,115
006B2B C5E1                A 28459    	LD	HL,BC
006B2D B7                  A 28460    	OR	A,A
006B2E ED52                A 28461    	SBC	HL,DE
006B30 DA CD 6C 00         A 28462    	JR	C,L_1409
006B34 21780000            A 28463    	LD	HL,120
006B38 B7                  A 28464    	OR	A,A
006B39 ED42                A 28465    	SBC	HL,BC
006B3B DA CD 6C 00         A 28466    	JR	C,L_1409
006B3F C5E1                A 28467    	LD	HL,BC
006B41 E5C1                A 28468    	LD	BC,HL
006B43 29                  A 28469    	ADD	HL,HL
006B44 09                  A 28470    	ADD	HL,BC
006B45 01 F4 69 00         A 28471    	LD	BC,L__740-345
006B49 09                  A 28472    	ADD	HL,BC
006B4A ED27                A 28473    	LD	HL,(HL)
006B4C E9                  A 28474    	JP	(HL)
006B4D                     A 28475    L__740:
006B4D B36B00              A 28476    	DW24	L_1382	
                           A 28477    
006B50 CD6C00              A 28478    	DW24	L_1409	
                           A 28479    
006B53 756B00              A 28480    	DW24	L_1378	
                           A 28481    
006B56 CD6C00              A 28482    	DW24	L_1409	
                           A 28483    
006B59 CD6C00              A 28484    	DW24	L_1409	
                           A 28485    
006B5C 806B00              A 28486    	DW24	L_1379	
                           A 28487    
                           A 28488    ; 6871			case 'b':					/* 
006B5F                     A 28489    L_1375:
                           A 28490    .LINE 6871
                           A 28491    
                           A 28492    ; 6872				r = 2; break;
                           A 28493    .LINE 6872
                           A 28494    
006B5F 01020000            A 28495    	LD	BC,2
006B63 DD0FE2              A 28496    	LD	(IX+%FFFFFFE2),BC
006B66 C3 E8 6C 00         A 28497    	JR	L_1417
                           A 28498    ; 6873			case 'o':					/* 
006B6A                     A 28499    L_1376:
                           A 28500    .LINE 6873
                           A 28501    
                           A 28502    ; 6874				r = 8; break;
                           A 28503    .LINE 6874
                           A 28504    
006B6A 01080000            A 28505    	LD	BC,8
006B6E DD0FE2              A 28506    	LD	(IX+%FFFFFFE2),BC
006B71 C3 E8 6C 00         A 28507    	JR	L_1417
                           A 28508    ; 6875			case 'd':					/* 
006B75                     A 28509    L_1377:
                           A 28510    .LINE 6875
                           A 28511    
                           A 28512    ; 6876			case 'u':					/* 
006B75                     A 28513    L_1378:
                           A 28514    .LINE 6876
                           A 28515    
                           A 28516    ; 6877				r = 10; break;
                           A 28517    .LINE 6877
                           A 28518    
006B75 010A0000            A 28519    	LD	BC,10
006B79 DD0FE2              A 28520    	LD	(IX+%FFFFFFE2),BC
006B7C C3 E8 6C 00         A 28521    	JR	L_1417
                           A 28522    ; 6878			case 'x':					/* 
006B80                     A 28523    L_1379:
                           A 28524    .LINE 6878
                           A 28525    
                           A 28526    ; 6879			case 'X':					/* 
006B80                     A 28527    L_1380:
                           A 28528    .LINE 6879
                           A 28529    
                           A 28530    ; 6880				r = 16; break;
                           A 28531    .LINE 6880
                           A 28532    
006B80 01100000            A 28533    	LD	BC,16
006B84 DD0FE2              A 28534    	LD	(IX+%FFFFFFE2),BC
006B87 C3 E8 6C 00         A 28535    	JR	L_1417
                           A 28536    ; 6881			case 'c':					/* 
006B8B                     A 28537    L_1381:
                           A 28538    .LINE 6881
                           A 28539    
                           A 28540    ; 6882				putc_bfd(&pb, (TCHAR)va_arg
                           A 28541    .LINE 6882
                           A 28542    
006B8B DD31F9              A 28543    	LD	IY,(IX+%FFFFFFF9)
006B8E ED0303              A 28544    	LEA	BC,IY+%3
006B91 DD0FF9              A 28545    	LD	(IX+%FFFFFFF9),BC
006B94 DD31F9              A 28546    	LD	IY,(IX+%FFFFFFF9)
006B97 ED23FD              A 28547    	LEA	HL,IY+%FFFFFFFD
006B9A 4E                  A 28548    	LD	C,(HL)
006B9B 0600                A 28549    	LD	B,%0
006B9D C5                  A 28550    	PUSH	BC
006B9E DDE5E1              A 28551    	LD	HL,IX
006BA1 0170FFFF            A 28552    	LD	BC,-144
006BA5 09                  A 28553    	ADD	HL,BC
006BA6 E5C1                A 28554    	LD	BC,HL
006BA8 C5                  A 28555    	PUSH	BC
006BA9 CD 3F 66 00         A 28556    	CALL	_putc_bfd
006BAD C1                  A 28557    	POP	BC
006BAE C1                  A 28558    	POP	BC
                           A 28559    ; 6883				continue;
                           A 28560    .LINE 6883
                           A 28561    
006BAF C3 39 68 00         A 28562    	JR	L_1448
                           A 28563    ; 6884			case 's':					/* 
006BB3                     A 28564    L_1382:
                           A 28565    .LINE 6884
                           A 28566    
                           A 28567    ; 6885				tp = va_arg(arp, TCHAR*);	
                           A 28568    .LINE 6885
                           A 28569    
006BB3 DD31F9              A 28570    	LD	IY,(IX+%FFFFFFF9)
006BB6 ED0303              A 28571    	LEA	BC,IY+%3
006BB9 DD0FF9              A 28572    	LD	(IX+%FFFFFFF9),BC
006BBC DD31F9              A 28573    	LD	IY,(IX+%FFFFFFF9)
006BBF ED23FD              A 28574    	LEA	HL,IY+%FFFFFFFD
006BC2 ED07                A 28575    	LD	BC,(HL)
006BC4 DD0FE6              A 28576    	LD	(IX+%FFFFFFE6),BC
                           A 28577    ; 6886				if (!tp) tp = &nul;		/* 
                           A 28578    .LINE 6886
                           A 28579    
006BC7 01000000            A 28580    	LD	BC,0
006BCB DD27E6              A 28581    	LD	HL,(IX+%FFFFFFE6)
006BCE B7                  A 28582    	OR	A,A
006BCF ED42                A 28583    	SBC	HL,BC
006BD1 20 06               A 28584    	JR	NZ,L_1388
006BD3 ED02E0              A 28585    	LEA	BC,IX+%FFFFFFE0
006BD6 DD0FE6              A 28586    	LD	(IX+%FFFFFFE6),BC
006BD9                     A 28587    L_1388:
                           A 28588    ; 6887				for (j = 0; tp[j]; j++) ;	
                           A 28589    .LINE 6887
                           A 28590    
006BD9 01000000            A 28591    	LD	BC,0
006BDD DD0FFC              A 28592    	LD	(IX+%FFFFFFFC),BC
006BE0 18 07               A 28593    	JR	L_1387
006BE2                     A 28594    L_1385:
006BE2 DD07FC              A 28595    	LD	BC,(IX+%FFFFFFFC)
006BE5 03                  A 28596    	INC	BC
006BE6 DD0FFC              A 28597    	LD	(IX+%FFFFFFFC),BC
006BE9                     A 28598    L_1387:
006BE9 DD07FC              A 28599    	LD	BC,(IX+%FFFFFFFC)
006BEC DD27E6              A 28600    	LD	HL,(IX+%FFFFFFE6)
006BEF 09                  A 28601    	ADD	HL,BC
006BF0 7E                  A 28602    	LD	A,(HL)
006BF1 B7                  A 28603    	OR	A,A
006BF2 20 EE               A 28604    	JR	NZ,L_1385
                           A 28605    ; 6888				if (prec >= 0 && j > (UINT)
                           A 28606    .LINE 6888
                           A 28607    
006BF4 01000000            A 28608    	LD	BC,0
006BF8 DD27F3              A 28609    	LD	HL,(IX+%FFFFFFF3)
006BFB B7                  A 28610    	OR	A,A
006BFC ED42                A 28611    	SBC	HL,BC
006BFE FA 33 6C 00         A 28612    	JP	M,L_1396
006C02 DD07FC              A 28613    	LD	BC,(IX+%FFFFFFFC)
006C05 DD27F3              A 28614    	LD	HL,(IX+%FFFFFFF3)
006C08 B7                  A 28615    	OR	A,A
006C09 ED42                A 28616    	SBC	HL,BC
006C0B 30 26               A 28617    	JR	NC,L_1396
006C0D DD07F3              A 28618    	LD	BC,(IX+%FFFFFFF3)
006C10 DD0FFC              A 28619    	LD	(IX+%FFFFFFFC),BC
                           A 28620    ; 6889				for ( ; !(f & 2) && j < w; 
                           A 28621    .LINE 6889
                           A 28622    
006C13 18 1E               A 28623    	JR	L_1396
006C15                     A 28624    L_1394:
006C15 DD4EE1              A 28625    	LD	C,(IX+%FFFFFFE1)
006C18 0600                A 28626    	LD	B,%0
006C1A C5                  A 28627    	PUSH	BC
006C1B DDE5E1              A 28628    	LD	HL,IX
006C1E 0170FFFF            A 28629    	LD	BC,-144
006C22 09                  A 28630    	ADD	HL,BC
006C23 E5C1                A 28631    	LD	BC,HL
006C25 C5                  A 28632    	PUSH	BC
006C26 CD 3F 66 00         A 28633    	CALL	_putc_bfd
006C2A C1                  A 28634    	POP	BC
006C2B C1                  A 28635    	POP	BC
006C2C DD07FC              A 28636    	LD	BC,(IX+%FFFFFFFC)
006C2F 03                  A 28637    	INC	BC
006C30 DD0FFC              A 28638    	LD	(IX+%FFFFFFFC),BC
006C33                     A 28639    L_1396:
006C33 DD7EF0              A 28640    	LD	A,(IX+%FFFFFFF0)
006C36 E602                A 28641    	AND	A,%2
006C38 B7ED62              A 28642    	UEXT	HL
006C3B 6F                  A 28643    	LD	L,A
006C3C 01000000            A 28644    	LD	BC,0
006C40 B7                  A 28645    	OR	A,A
006C41 ED42                A 28646    	SBC	HL,BC
006C43 20 40               A 28647    	JR	NZ,L_1401
006C45 DD07E9              A 28648    	LD	BC,(IX+%FFFFFFE9)
006C48 DD27FC              A 28649    	LD	HL,(IX+%FFFFFFFC)
006C4B B7                  A 28650    	OR	A,A
006C4C ED42                A 28651    	SBC	HL,BC
006C4E 38 C5               A 28652    	JR	C,L_1394
                           A 28653    ; 6890				while (*tp && prec--) putc_
                           A 28654    .LINE 6890
                           A 28655    
006C50 18 33               A 28656    	JR	L_1401
006C52                     A 28657    L_1402:
006C52 DD07E6              A 28658    	LD	BC,(IX+%FFFFFFE6)
006C55 214FFFFF            A 28659    	LD	HL,-177
006C59 DDE5D1              A 28660    	LD	DE,IX
006C5C 19                  A 28661    	ADD	HL,DE
006C5D ED0F                A 28662    	LD	(HL),BC
006C5F DD07E6              A 28663    	LD	BC,(IX+%FFFFFFE6)
006C62 03                  A 28664    	INC	BC
006C63 DD0FE6              A 28665    	LD	(IX+%FFFFFFE6),BC
006C66 214FFFFF            A 28666    	LD	HL,-177
006C6A DDE5C1              A 28667    	LD	BC,IX
006C6D 09                  A 28668    	ADD	HL,BC
006C6E ED27                A 28669    	LD	HL,(HL)
006C70 4E                  A 28670    	LD	C,(HL)
006C71 0600                A 28671    	LD	B,%0
006C73 C5                  A 28672    	PUSH	BC
006C74 DDE5E1              A 28673    	LD	HL,IX
006C77 0170FFFF            A 28674    	LD	BC,-144
006C7B 09                  A 28675    	ADD	HL,BC
006C7C E5C1                A 28676    	LD	BC,HL
006C7E C5                  A 28677    	PUSH	BC
006C7F CD 3F 66 00         A 28678    	CALL	_putc_bfd
006C83 C1                  A 28679    	POP	BC
006C84 C1                  A 28680    	POP	BC
006C85                     A 28681    L_1401:
006C85 DD27E6              A 28682    	LD	HL,(IX+%FFFFFFE6)
006C88 7E                  A 28683    	LD	A,(HL)
006C89 B7                  A 28684    	OR	A,A
006C8A 28 2B               A 28685    	JR	Z,L_1405
006C8C DD27F3              A 28686    	LD	HL,(IX+%FFFFFFF3)
006C8F DD07F3              A 28687    	LD	BC,(IX+%FFFFFFF3)
006C92 0B                  A 28688    	DEC	BC
006C93 DD0FF3              A 28689    	LD	(IX+%FFFFFFF3),BC
006C96 01000000            A 28690    	LD	BC,0
006C9A B7                  A 28691    	OR	A,A
006C9B ED42                A 28692    	SBC	HL,BC
006C9D 20 B3               A 28693    	JR	NZ,L_1402
                           A 28694    ; 6891				while (j++ < w) putc_bfd(&p
                           A 28695    .LINE 6891
                           A 28696    
006C9F 18 16               A 28697    	JR	L_1405
006CA1                     A 28698    L_1406:
006CA1 01200000            A 28699    	LD	BC,32
006CA5 C5                  A 28700    	PUSH	BC
006CA6 DDE5E1              A 28701    	LD	HL,IX
006CA9 0170FFFF            A 28702    	LD	BC,-144
006CAD 09                  A 28703    	ADD	HL,BC
006CAE E5C1                A 28704    	LD	BC,HL
006CB0 C5                  A 28705    	PUSH	BC
006CB1 CD 3F 66 00         A 28706    	CALL	_putc_bfd
006CB5 C1                  A 28707    	POP	BC
006CB6 C1                  A 28708    	POP	BC
006CB7                     A 28709    L_1405:
006CB7 DD27FC              A 28710    	LD	HL,(IX+%FFFFFFFC)
006CBA DD07FC              A 28711    	LD	BC,(IX+%FFFFFFFC)
006CBD 03                  A 28712    	INC	BC
006CBE DD0FFC              A 28713    	LD	(IX+%FFFFFFFC),BC
006CC1 DD07E9              A 28714    	LD	BC,(IX+%FFFFFFE9)
006CC4 B7                  A 28715    	OR	A,A
006CC5 ED42                A 28716    	SBC	HL,BC
006CC7 38 D8               A 28717    	JR	C,L_1406
                           A 28718    ; 6892				continue;
                           A 28719    .LINE 6892
                           A 28720    
006CC9 C3 39 68 00         A 28721    	JR	L_1448
                           A 28722    ; 6893	#if FF_PRINT_FLOAT && FF_INTDEF == 2
                           A 28723    ; 6894			case 'f':					/* 
                           A 28724    ; 6895			case 'e':					/* 
                           A 28725    ; 6896			case 'E':					/* 
                           A 28726    ; 6897				ftoa(str, va_arg(arp, doubl
                           A 28727    ; 6898				for (j = strlen(str); !(f &
                           A 28728    ; 6899				for (i = 0; str[i]; putc_bf
                           A 28729    ; 6900				while (j++ < w) putc_bfd(&p
                           A 28730    ; 6901				continue;
                           A 28731    ; 6902	#endif
                           A 28732    ; 6903			default:					/* 
006CCD                     A 28733    L_1409:
                           A 28734    .LINE 6903
                           A 28735    
                           A 28736    ; 6904				putc_bfd(&pb, tc); continue
                           A 28737    .LINE 6904
                           A 28738    
006CCD DD4EFF              A 28739    	LD	C,(IX+%FFFFFFFF)
006CD0 0600                A 28740    	LD	B,%0
006CD2 C5                  A 28741    	PUSH	BC
006CD3 DDE5E1              A 28742    	LD	HL,IX
006CD6 0170FFFF            A 28743    	LD	BC,-144
006CDA 09                  A 28744    	ADD	HL,BC
006CDB E5C1                A 28745    	LD	BC,HL
006CDD C5                  A 28746    	PUSH	BC
006CDE CD 3F 66 00         A 28747    	CALL	_putc_bfd
006CE2 C1                  A 28748    	POP	BC
006CE3 C1                  A 28749    	POP	BC
006CE4 C3 39 68 00         A 28750    	JR	L_1448
                           A 28751    ; 6905			}
006CE8                     A 28752    L_1417:
                           A 28753    .LINE 6905
                           A 28754    
                           A 28755    ; 6906	
                           A 28756    ; 6907			/* Get an integer argument and 
                           A 28757    ; 6908	#if FF_PRINT_LLI && FF_INTDEF == 2
                           A 28758    ; 6909			if (f & 8) {	/* long long ar
                           A 28759    ; 6910				v = (QWORD)va_arg(arp, LONG
                           A 28760    ; 6911			} else {
                           A 28761    ; 6912				if (f & 4) {	/* long arg
                           A 28762    ; 6913					v = (tc == 'd') ? (QWOR
                           A 28763    ; 6914				} else {		/* int/shor
                           A 28764    ; 6915					v = (tc == 'd') ? (QWOR
                           A 28765    ; 6916				}
                           A 28766    ; 6917			}
                           A 28767    ; 6918			if (tc == 'd' && (v & 0x8000000
                           A 28768    ; 6919				v = 0 - v; f |= 1;
                           A 28769    ; 6920			}
                           A 28770    ; 6921	#else
                           A 28771    ; 6922			if (f & 4) {	/* long argumen
                           A 28772    .LINE 6922
                           A 28773    
006CE8 DD7EF0              A 28774    	LD	A,(IX+%FFFFFFF0)
006CEB E604                A 28775    	AND	A,%4
006CED B7ED62              A 28776    	UEXT	HL
006CF0 6F                  A 28777    	LD	L,A
006CF1 01000000            A 28778    	LD	BC,0
006CF5 B7                  A 28779    	OR	A,A
006CF6 ED42                A 28780    	SBC	HL,BC
006CF8 28 1D               A 28781    	JR	Z,L_1416
                           A 28782    ; 6923				v = (DWORD)va_arg(arp, long
                           A 28783    .LINE 6923
                           A 28784    
006CFA DD31F9              A 28785    	LD	IY,(IX+%FFFFFFF9)
006CFD ED0306              A 28786    	LEA	BC,IY+%6
006D00 DD0FF9              A 28787    	LD	(IX+%FFFFFFF9),BC
006D03 DD31F9              A 28788    	LD	IY,(IX+%FFFFFFF9)
006D06 ED23FA              A 28789    	LEA	HL,IY+%FFFFFFFA
006D09 ED07                A 28790    	LD	BC,(HL)
006D0B 23                  A 28791    	INC	HL
006D0C 23                  A 28792    	INC	HL
006D0D 23                  A 28793    	INC	HL
006D0E 7E                  A 28794    	LD	A,(HL)
006D0F DD0FEC              A 28795    	LD	(IX+%FFFFFFEC),BC
006D12 DD77EF              A 28796    	LD	(IX+%FFFFFFEF),A
                           A 28797    ; 6924			} else {		/* int/short/ch
                           A 28798    .LINE 6924
                           A 28799    
006D15 18 44               A 28800    	JR	L_1420
006D17                     A 28801    L_1416:
                           A 28802    ; 6925				v = (tc == 'd') ? (DWORD)(l
                           A 28803    .LINE 6925
                           A 28804    
006D17 DD7EFF              A 28805    	LD	A,(IX+%FFFFFFFF)
006D1A FE64                A 28806    	CP	A,%64
006D1C 20 1B               A 28807    	JR	NZ,L_1413
006D1E DD31F9              A 28808    	LD	IY,(IX+%FFFFFFF9)
006D21 ED0303              A 28809    	LEA	BC,IY+%3
006D24 DD0FF9              A 28810    	LD	(IX+%FFFFFFF9),BC
006D27 DD31F9              A 28811    	LD	IY,(IX+%FFFFFFF9)
006D2A FD07FD              A 28812    	LD	BC,(IY+%FFFFFFFD)
006D2D CD 00 00 00         A 28813    	CALL	__itol
006D31 DD0FD9              A 28814    	LD	(IX+%FFFFFFD9),BC
006D34 DD77DC              A 28815    	LD	(IX+%FFFFFFDC),A
006D37 18 16               A 28816    	JR	L_1414
006D39                     A 28817    L_1413:
006D39 DD31F9              A 28818    	LD	IY,(IX+%FFFFFFF9)
006D3C ED0303              A 28819    	LEA	BC,IY+%3
006D3F DD0FF9              A 28820    	LD	(IX+%FFFFFFF9),BC
006D42 DD31F9              A 28821    	LD	IY,(IX+%FFFFFFF9)
006D45 FD07FD              A 28822    	LD	BC,(IY+%FFFFFFFD)
006D48 AF                  A 28823    	XOR	A,A
006D49 DD0FD9              A 28824    	LD	(IX+%FFFFFFD9),BC
006D4C DD77DC              A 28825    	LD	(IX+%FFFFFFDC),A
006D4F                     A 28826    L_1414:
006D4F DD07D9              A 28827    	LD	BC,(IX+%FFFFFFD9)
006D52 DD7EDC              A 28828    	LD	A,(IX+%FFFFFFDC)
006D55 DD0FEC              A 28829    	LD	(IX+%FFFFFFEC),BC
006D58 DD77EF              A 28830    	LD	(IX+%FFFFFFEF),A
                           A 28831    ; 6926			}
006D5B                     A 28832    L_1420:
                           A 28833    .LINE 6926
                           A 28834    
                           A 28835    ; 6927			if (tc == 'd' && (v & 0x8000000
                           A 28836    .LINE 6927
                           A 28837    
006D5B DD7EFF              A 28838    	LD	A,(IX+%FFFFFFFF)
006D5E FE64                A 28839    	CP	A,%64
006D60 20 39               A 28840    	JR	NZ,L_1421
006D62 DD27EC              A 28841    	LD	HL,(IX+%FFFFFFEC)
006D65 DD5EEF              A 28842    	LD	E,(IX+%FFFFFFEF)
006D68 01000000            A 28843    	LD	BC,0
006D6C 3E80                A 28844    	LD	A,%80
006D6E CD 00 00 00         A 28845    	CALL	__land
006D72 01000000            A 28846    	LD	BC,0
006D76 AF                  A 28847    	XOR	A,A
006D77 CD 00 00 00         A 28848    	CALL	__lcmpu
006D7B 28 1E               A 28849    	JR	Z,L_1421
                           A 28850    ; 6928				v = 0 - v; f |= 1;
                           A 28851    .LINE 6928
                           A 28852    
006D7D DD27EC              A 28853    	LD	HL,(IX+%FFFFFFEC)
006D80 DD5EEF              A 28854    	LD	E,(IX+%FFFFFFEF)
006D83 CD 00 00 00         A 28855    	CALL	__lneg
006D87 DD2FEC              A 28856    	LD	(IX+%FFFFFFEC),HL
006D8A DD73EF              A 28857    	LD	(IX+%FFFFFFEF),E
006D8D 01010000            A 28858    	LD	BC,1
006D91 DD27F0              A 28859    	LD	HL,(IX+%FFFFFFF0)
006D94 CD 00 00 00         A 28860    	CALL	__ior
006D98 DD2FF0              A 28861    	LD	(IX+%FFFFFFF0),HL
                           A 28862    ; 6929			}
006D9B                     A 28863    L_1421:
                           A 28864    .LINE 6929
                           A 28865    
                           A 28866    ; 6930	#endif
                           A 28867    ; 6931			i = 0;
                           A 28868    .LINE 6931
                           A 28869    
006D9B 01000000            A 28870    	LD	BC,0
006D9F DD0FF6              A 28871    	LD	(IX+%FFFFFFF6),BC
                           A 28872    ; 6932			do {	/* Make an integer numb
006DA2                     A 28873    L_1430:
                           A 28874    .LINE 6932
                           A 28875    
                           A 28876    ; 6933				d = (char)(v % r); v /= r;
                           A 28877    .LINE 6933
                           A 28878    
006DA2 DD07E2              A 28879    	LD	BC,(IX+%FFFFFFE2)
006DA5 AF                  A 28880    	XOR	A,A
006DA6 DD27EC              A 28881    	LD	HL,(IX+%FFFFFFEC)
006DA9 DD5EEF              A 28882    	LD	E,(IX+%FFFFFFEF)
006DAC CD 00 00 00         A 28883    	CALL	__lremu
006DB0 E5C1                A 28884    	LD	BC,HL
006DB2 DD71E5              A 28885    	LD	(IX+%FFFFFFE5),C
006DB5 DD07E2              A 28886    	LD	BC,(IX+%FFFFFFE2)
006DB8 AF                  A 28887    	XOR	A,A
006DB9 DD27EC              A 28888    	LD	HL,(IX+%FFFFFFEC)
006DBC DD5EEF              A 28889    	LD	E,(IX+%FFFFFFEF)
006DBF CD 00 00 00         A 28890    	CALL	__ldivu
006DC3 DD2FEC              A 28891    	LD	(IX+%FFFFFFEC),HL
006DC6 DD73EF              A 28892    	LD	(IX+%FFFFFFEF),E
                           A 28893    ; 6934				if (d > 9) d += (tc == 'x')
                           A 28894    .LINE 6934
                           A 28895    
006DC9 3E09                A 28896    	LD	A,%9
006DCB DDBEE5              A 28897    	CP	A,(IX+%FFFFFFE5)
006DCE F2 F3 6D 00         A 28898    	JP	P,L_1428
006DD2 DD7EFF              A 28899    	LD	A,(IX+%FFFFFFFF)
006DD5 FE78                A 28900    	CP	A,%78
006DD7 20 09               A 28901    	JR	NZ,L_1424
006DD9 01270000            A 28902    	LD	BC,39
006DDD DD0FDD              A 28903    	LD	(IX+%FFFFFFDD),BC
006DE0 18 07               A 28904    	JR	L_1425
006DE2                     A 28905    L_1424:
006DE2 01070000            A 28906    	LD	BC,7
006DE6 DD0FDD              A 28907    	LD	(IX+%FFFFFFDD),BC
006DE9                     A 28908    L_1425:
006DE9 DD46DD              A 28909    	LD	B,(IX+%FFFFFFDD)
006DEC DD7EE5              A 28910    	LD	A,(IX+%FFFFFFE5)
006DEF 80                  A 28911    	ADD	A,B
006DF0 DD77E5              A 28912    	LD	(IX+%FFFFFFE5),A
006DF3                     A 28913    L_1428:
                           A 28914    ; 6935				str[i++] = d + '0';
                           A 28915    .LINE 6935
                           A 28916    
006DF3 DD07F6              A 28917    	LD	BC,(IX+%FFFFFFF6)
006DF6 ED22B9              A 28918    	LEA	HL,IX+%FFFFFFB9
006DF9 09                  A 28919    	ADD	HL,BC
006DFA DD7EE5              A 28920    	LD	A,(IX+%FFFFFFE5)
006DFD C630                A 28921    	ADD	A,%30
006DFF 77                  A 28922    	LD	(HL),A
006E00 DD07F6              A 28923    	LD	BC,(IX+%FFFFFFF6)
006E03 03                  A 28924    	INC	BC
006E04 DD0FF6              A 28925    	LD	(IX+%FFFFFFF6),BC
                           A 28926    ; 6936			} while (v && i < SZ_NUM_BUF);
                           A 28927    .LINE 6936
                           A 28928    
006E07 DD27EC              A 28929    	LD	HL,(IX+%FFFFFFEC)
006E0A DD5EEF              A 28930    	LD	E,(IX+%FFFFFFEF)
006E0D 01000000            A 28931    	LD	BC,0
006E11 AF                  A 28932    	XOR	A,A
006E12 CD 00 00 00         A 28933    	CALL	__lcmpu
006E16 28 0E               A 28934    	JR	Z,L_1434
006E18 01200000            A 28935    	LD	BC,32
006E1C DD27F6              A 28936    	LD	HL,(IX+%FFFFFFF6)
006E1F B7                  A 28937    	OR	A,A
006E20 ED42                A 28938    	SBC	HL,BC
006E22 DA A2 6D 00         A 28939    	JR	C,L_1430
006E26                     A 28940    L_1434:
                           A 28941    ; 6937			if (f & 1) str[i++] = '-';	/* 
                           A 28942    .LINE 6937
                           A 28943    
006E26 DD7EF0              A 28944    	LD	A,(IX+%FFFFFFF0)
006E29 E601                A 28945    	AND	A,%1
006E2B B7ED62              A 28946    	UEXT	HL
006E2E 6F                  A 28947    	LD	L,A
006E2F 01000000            A 28948    	LD	BC,0
006E33 B7                  A 28949    	OR	A,A
006E34 ED42                A 28950    	SBC	HL,BC
006E36 28 10               A 28951    	JR	Z,L_1440
006E38 DD07F6              A 28952    	LD	BC,(IX+%FFFFFFF6)
006E3B ED22B9              A 28953    	LEA	HL,IX+%FFFFFFB9
006E3E 09                  A 28954    	ADD	HL,BC
006E3F 362D                A 28955    	LD	(HL),%2D
006E41 DD07F6              A 28956    	LD	BC,(IX+%FFFFFFF6)
006E44 03                  A 28957    	INC	BC
006E45 DD0FF6              A 28958    	LD	(IX+%FFFFFFF6),BC
006E48                     A 28959    L_1440:
                           A 28960    ; 6938			/* Write it */
                           A 28961    ; 6939			for (j = i; !(f & 2) && j < w; 
                           A 28962    .LINE 6939
                           A 28963    
006E48 DD07F6              A 28964    	LD	BC,(IX+%FFFFFFF6)
006E4B DD0FFC              A 28965    	LD	(IX+%FFFFFFFC),BC
006E4E 18 1E               A 28966    	JR	L_1439
006E50                     A 28967    L_1437:
006E50 DD4EE1              A 28968    	LD	C,(IX+%FFFFFFE1)
006E53 0600                A 28969    	LD	B,%0
006E55 C5                  A 28970    	PUSH	BC
006E56 DDE5E1              A 28971    	LD	HL,IX
006E59 0170FFFF            A 28972    	LD	BC,-144
006E5D 09                  A 28973    	ADD	HL,BC
006E5E E5C1                A 28974    	LD	BC,HL
006E60 C5                  A 28975    	PUSH	BC
006E61 CD 3F 66 00         A 28976    	CALL	_putc_bfd
006E65 C1                  A 28977    	POP	BC
006E66 C1                  A 28978    	POP	BC
006E67 DD07FC              A 28979    	LD	BC,(IX+%FFFFFFFC)
006E6A 03                  A 28980    	INC	BC
006E6B DD0FFC              A 28981    	LD	(IX+%FFFFFFFC),BC
006E6E                     A 28982    L_1439:
006E6E DD7EF0              A 28983    	LD	A,(IX+%FFFFFFF0)
006E71 E602                A 28984    	AND	A,%2
006E73 B7ED62              A 28985    	UEXT	HL
006E76 6F                  A 28986    	LD	L,A
006E77 01000000            A 28987    	LD	BC,0
006E7B B7                  A 28988    	OR	A,A
006E7C ED42                A 28989    	SBC	HL,BC
006E7E 20 0B               A 28990    	JR	NZ,L_1441
006E80 DD07E9              A 28991    	LD	BC,(IX+%FFFFFFE9)
006E83 DD27FC              A 28992    	LD	HL,(IX+%FFFFFFFC)
006E86 B7                  A 28993    	OR	A,A
006E87 ED42                A 28994    	SBC	HL,BC
006E89 38 C5               A 28995    	JR	C,L_1437
                           A 28996    ; 6940			do putc_bfd(&pb, (TCHAR)str[--i
006E8B                     A 28997    L_1441:
                           A 28998    .LINE 6940
                           A 28999    
006E8B DD31F6              A 29000    	LD	IY,(IX+%FFFFFFF6)
006E8E ED33FF              A 29001    	LEA	IY,IY+%FFFFFFFF
006E91 DD3EF6              A 29002    	LD	(IX+%FFFFFFF6),IY
006E94 FDE5C1              A 29003    	LD	BC,IY
006E97 ED22B9              A 29004    	LEA	HL,IX+%FFFFFFB9
006E9A 09                  A 29005    	ADD	HL,BC
006E9B 4E                  A 29006    	LD	C,(HL)
006E9C 0600                A 29007    	LD	B,%0
006E9E C5                  A 29008    	PUSH	BC
006E9F DDE5E1              A 29009    	LD	HL,IX
006EA2 0170FFFF            A 29010    	LD	BC,-144
006EA6 09                  A 29011    	ADD	HL,BC
006EA7 E5C1                A 29012    	LD	BC,HL
006EA9 C5                  A 29013    	PUSH	BC
006EAA CD 3F 66 00         A 29014    	CALL	_putc_bfd
006EAE C1                  A 29015    	POP	BC
006EAF C1                  A 29016    	POP	BC
006EB0 01000000            A 29017    	LD	BC,0
006EB4 DD27F6              A 29018    	LD	HL,(IX+%FFFFFFF6)
006EB7 B7                  A 29019    	OR	A,A
006EB8 ED42                A 29020    	SBC	HL,BC
006EBA 20 CF               A 29021    	JR	NZ,L_1441
                           A 29022    ; 6941			while (j++ < w) putc_bfd(&pb, '
                           A 29023    .LINE 6941
                           A 29024    
006EBC 18 16               A 29025    	JR	L_1445
006EBE                     A 29026    L_1446:
006EBE 01200000            A 29027    	LD	BC,32
006EC2 C5                  A 29028    	PUSH	BC
006EC3 DDE5E1              A 29029    	LD	HL,IX
006EC6 0170FFFF            A 29030    	LD	BC,-144
006ECA 09                  A 29031    	ADD	HL,BC
006ECB E5C1                A 29032    	LD	BC,HL
006ECD C5                  A 29033    	PUSH	BC
006ECE CD 3F 66 00         A 29034    	CALL	_putc_bfd
006ED2 C1                  A 29035    	POP	BC
006ED3 C1                  A 29036    	POP	BC
006ED4                     A 29037    L_1445:
006ED4 DD27FC              A 29038    	LD	HL,(IX+%FFFFFFFC)
006ED7 DD07FC              A 29039    	LD	BC,(IX+%FFFFFFFC)
006EDA 03                  A 29040    	INC	BC
006EDB DD0FFC              A 29041    	LD	(IX+%FFFFFFFC),BC
006EDE DD07E9              A 29042    	LD	BC,(IX+%FFFFFFE9)
006EE1 B7                  A 29043    	OR	A,A
006EE2 ED42                A 29044    	SBC	HL,BC
006EE4 38 D8               A 29045    	JR	C,L_1446
                           A 29046    ; 6942		}
                           A 29047    .LINE 6942
                           A 29048    
006EE6 C3 39 68 00         A 29049    	JR	L_1448
006EEA                     A 29050    L_1450:
                           A 29051    ; 6943	
                           A 29052    ; 6944		va_end(arp);
                           A 29053    ; 6945	
                           A 29054    ; 6946		return putc_flush(&pb);
                           A 29055    .LINE 6946
                           A 29056    
006EEA DDE5E1              A 29057    	LD	HL,IX
006EED 0170FFFF            A 29058    	LD	BC,-144
006EF1 09                  A 29059    	ADD	HL,BC
006EF2 E5C1                A 29060    	LD	BC,HL
006EF4 C5                  A 29061    	PUSH	BC
006EF5 CD EF 66 00         A 29062    	CALL	_putc_flush
006EF9 C1                  A 29063    	POP	BC
                           A 29064    ; 6947	}
                           A 29065    .LINE 6947
                           A 29066    
006EFA DDF9                A 29067    	LD	SP,IX
006EFC DDE1                A 29068    	POP	IX
006EFE C9                  A 29069    	RET	
                           A 29070    
                           A 29071    
                           A 29072    ;**************************** _f_printf *******
                           A 29073    ;Name                         Addr/Register   S
                           A 29074    ;pb                                  IX-144    
                           A 29075    ;str                                  IX-71    
                           A 29076    ;temp1411                             IX-39    
                           A 29077    ;temp1422                             IX-35    
                           A 29078    ;nul                                  IX-32    
                           A 29079    ;pad                                  IX-31    
                           A 29080    ;r                                    IX-30    
                           A 29081    ;d                                    IX-27    
                           A 29082    ;tp                                   IX-26    
                           A 29083    ;w                                    IX-23    
                           A 29084    ;v                                    IX-20    
                           A 29085    ;f                                    IX-16    
                           A 29086    ;prec                                 IX-13    
                           A 29087    ;i                                    IX-10    
                           A 29088    ;arp                                   IX-7    
                           A 29089    ;j                                     IX-4    
                           A 29090    ;tc                                    IX-1    
                           A 29091    ;fmt                                   IX+9    
                           A 29092    ;fp                                    IX+6    
                           A 29093    
                           A 29094    
                           A 29095    ; Stack Frame Size: 189 (bytes)
                           A 29096    ;       Spill Code: -3 (instruction)
                           A 29097    
                           A 29098    
                           A 29099    .ENDFUNC "f_printf",6947,"_f_printf"
                           A 29100    	XREF _disk_ioctl:ROM
                           A 29101    	XREF _disk_write:ROM
                           A 29102    	XREF _disk_read:ROM
                           A 29103    	XREF _disk_status:ROM
                           A 29104    	XREF _disk_initialize:ROM
                           A 29105    	XREF _ff_wtoupper:ROM
                           A 29106    	XREF _ff_uni2oem:ROM
                           A 29107    	XREF _ff_oem2uni:ROM
                           A 29108    	XREF _get_fattime:ROM
                           A 29109    	XREF _strchr:ROM
                           A 29110    	XREF _memset:ROM
                           A 29111    	XREF _memcmp:ROM
                           A 29112    	XREF _memcpy:ROM
                           A 29113    	XREF __lcmpu:ROM
                           A 29114    	XREF __ladd:ROM
                           A 29115    	XREF __lsub:ROM
                           A 29116    	XREF __idivu:ROM
                           A 29117    	XREF __ldivu:ROM
                           A 29118    	XREF __lmulu:ROM
                           A 29119    	XREF __lneg:ROM
                           A 29120    	XREF __lnot:ROM
                           A 29121    	XREF __sor:ROM
                           A 29122    	XREF __ior:ROM
                           A 29123    	XREF __lor:ROM
                           A 29124    	XREF __sand:ROM
                           A 29125    	XREF __iand:ROM
                           A 29126    	XREF __land:ROM
                           A 29127    	XREF __bshl:ROM
                           A 29128    	XREF __lshl:ROM
                           A 29129    	XREF __lremu:ROM
                           A 29130    	XREF __lxor:ROM
                           A 29131    	XREF __lshru:ROM
                           A 29132    	XREF __stoiu:ROM
                           A 29133    	XREF __itol:ROM
                           A 29134    	XREF __imul_b:ROM
                           A 29135    	XREF __ladd_b:ROM
                           A 29136    	XREF __ishl_b:ROM
                           A 29137    	XREF __ishru_b:ROM
                           A 29138    	XREF __ishrs_b:ROM
                           A 29139    	XDEF _f_printf
                           A 29140    	XDEF _f_puts
                           A 29141    	XDEF _f_putc
                           A 29142    	XDEF _f_gets
                           A 29143    	XDEF _f_setlabel
                           A 29144    	XDEF _f_getlabel
                           A 29145    	XDEF _f_rename
                           A 29146    	XDEF _f_mkdir
                           A 29147    	XDEF _f_unlink
                           A 29148    	XDEF _f_truncate
                           A 29149    	XDEF _f_getfree
                           A 29150    	XDEF _f_stat
                           A 29151    	XDEF _f_readdir
                           A 29152    	XDEF _f_closedir
                           A 29153    	XDEF _f_opendir
                           A 29154    	XDEF _f_lseek
                           A 29155    	XDEF _f_getcwd
                           A 29156    	XDEF _f_chdir
                           A 29157    	XDEF _f_chdrive
                           A 29158    	XDEF _f_close
                           A 29159    	XDEF _f_sync
                           A 29160    	XDEF _f_write
                           A 29161    	XDEF _f_read
                           A 29162    	XDEF _f_open
                           A 29163    	XDEF _f_mount
                           A 29164    	END


Errors: 0
Warnings: 0
Lines Assembled: 29165
