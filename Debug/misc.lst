Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     07:37:02     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	AGON Electron OS - Miscellaneous he
                           A     3    ; Author:	Dean Belfield
                           A     4    ; Created:	24/07/2022
                           A     5    ; Last Updated: 15/04/2023
                           A     6    
                           B     0    			INCLUDE	"macros.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Useful Macros
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/09/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 08/08/2022:	Added GET_GPIO
                           B     9    ; 09/09/2022:	Commented
                           B    10    
                           B    11    ; Add A to HL (unsigned)
                           B    12    ;
                           B    13    ADD8U_HL:		MACRO 
                           B    14    			ADD	A, L 
                           B    15    			LD	L, A 
                           B    16    			ADC	A, H
                           B    17    			SUB	L
                           B    18    			LD	H, A 
                           B    19    			ENDMACRO 
                           B    20    
                           B    21    ; Set a GPIO register
                           B    22    ; Parameters:
                           B    23    ; - REG: Register to set
                           B    24    ; - VAL: Bit(s) to set (1: set, 0: ignore)
                           B    25    ;
                           B    26    SET_GPIO:		MACRO	REG, VAL
                           B    27    			IN0	A,(REG)
                           B    28    			OR	VAL
                           B    29    			OUT0	(REG),A
                           B    30    			ENDMACRO
                           B    31    
                           B    32    ; Reset a GPIO register
                           B    33    ; Parameters:
                           B    34    ; - REG: Register to set
                           B    35    ; - VAL: Bit(s) to reset (1: reset, 0: ignore)
                           B    36    ;	
                           B    37    RES_GPIO:		MACRO	REG, VAL
                           B    38    			PUSH	BC
                           B    39    			LD	A, VAL
                           B    40    			CPL
                           B    41    			LD	C, A
                           B    42    			IN0	A,(REG)
                           B    43    			AND	C
                           B    44    			OUT0	(REG),A
                           B    45    			POP	BC
                           B    46    			ENDMACRO
                           B    47    
                           B    48    ; Get a GPIO register
                           B    49    ; Parameters:
                           B    50    ; - REG: Register to test
                           B    51    ; - VAL: Bit(s) to test
                           B    52    ;	
                           B    53    GET_GPIO:		MACRO	REG, VAL
                           B    54    			IN0	A,(REG)
                           B    55    			TST	A, VAL
                           B    56    			ENDMACRO
                           B    57    				
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B   102    
       00000083            B   103    TMR1_CTL		EQU	83h
       00000084            B   104    TMR1_DR_L               EQU     84h
       00000084            B   105    TMR1_RR_L               EQU     84h
       00000085            B   106    TMR1_DR_H               EQU     85h
       00000085            B   107    TMR1_RR_H               EQU     85h
                           B   108    
                           B   109    ; UART constants
       00000050            B   110    UART0_SEND_BUFFER_SIZE  EQU     80
       00000050            B   111    UART0_RECV_BUFFER_SIZE  EQU     80
       00000002            B   112    UART_IER_TRANSMITINT    EQU     00000010b
                           B     0    			INCLUDE "ez80f92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
                           B    11    TMR0_CTL:	.equ  %80
                           B    12    TMR0_DR_L:	.equ  %81
                           B    13    TMR0_RR_L:	.equ  %81
                           B    14    TMR0_DR_H:	.equ  %82
                           B    15    TMR0_RR_H:	.equ  %82
                           B    16    TMR1_CTL:	.equ  %83
                           B    17    TMR1_DR_L:	.equ  %84
                           B    18    TMR1_RR_L:	.equ  %84
                           B    19    TMR1_DR_H:	.equ  %85
                           B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
                           B    51    PB_DR:		.equ %9A
                           B    52    PB_DDR:		.equ %9B
                           B    53    PB_ALT1:	.equ %9C
                           B    54    PB_ALT2:	.equ %9D
                           B    55    PC_DR:		.equ %9E
                           B    56    PC_DDR:		.equ %9F
                           B    57    PC_ALT1:	.equ %A0
                           B    58    PC_ALT2:	.equ %A1
                           B    59    PD_DR:		.equ %A2
                           B    60    PD_DDR:		.equ %A3
                           B    61    PD_ALT1:	.equ %A4
                           B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A    10    
                           A    11    			.ASSUME	ADL = 1
                           A    12    
                           A    13    			DEFINE .STARTUP, SPACE = ROM
                           A    14    			SEGMENT .STARTUP
                           A    15    							
                           A    16    			XDEF	SWITCH_A
                           A    17    			XDEF	SET_AHL24
                           A    18    			XDEF	GET_AHL24
                           A    19    			XDEF	SET_ADE24
                           A    20    			
                           A    21    			XDEF	__exec16
                           A    22    			XDEF	__exec24
                           A    23    			XDEF	__wait_timer0 
                           A    24    			
                           A    25    			XDEF	_exec16			
                           A    26    			XDEF	_exec24
                           A    27    			XDEF	_wait_timer0
                           A    28    
                           A    29    			XREF	_callSM
                           A    30    	
                           A    31    			
                           A    32    ; Switch on A - lookup table immediately after 
                           A    33    ;  A: Index into lookup table
                           A    34    ;
000000 E3                  A    35    SWITCH_A:		EX	(SP), HL		; Swap HL w
000001 87                  A    36    			ADD	A, A			; Multiply A by
                           A    37    			ADD8U_HL 			; Add to HL (ma
000007 7E                  A    38    			LD	A, (HL)			; follow the ca
000008 23                  A    39    			INC	HL 			; table.
000009 66                  A    40    			LD	H, (HL)
00000A 6F                  A    41    			LD	L, A
00000B E3                  A    42    			EX	(SP), HL		; Swap this new
00000C C9                  A    43    			RET				; Return program co
                           A    44    			
                           A    45    ; Set the MSB of HL (U) to A
                           A    46    ;
00000D E5                  A    47    SET_AHL24:		PUSH	HL			
00000E 21020000            A    48    			LD	HL, 2
000012 39                  A    49    			ADD	HL, SP
000013 77                  A    50    			LD	(HL), A
000014 E1                  A    51    			POP	HL
000015 C9                  A    52    			RET	
                           A    53    
                           A    54    ; Get the MSB of HL (U) in A
                           A    55    ;
000016 E5                  A    56    GET_AHL24:		PUSH	HL 
000017 21020000            A    57    			LD	HL, 2
00001B 39                  A    58    			ADD	HL, SP
00001C 7E                  A    59    			LD	A, (HL)
00001D E1                  A    60    			POP	HL
00001E C9                  A    61    			RET
                           A    62    
                           A    63    ; Set the MSB of DE (U) to A
                           A    64    ;
00001F EB                  A    65    SET_ADE24:		EX	DE, HL
000020 E5                  A    66    			PUSH	HL
000021 21020000            A    67    			LD	HL, 2
000025 39                  A    68    			ADD	HL, SP
000026 77                  A    69    			LD	(HL), A
000027 E1                  A    70    			POP	HL
000028 EB                  A    71    			EX	DE, HL
000029 C9                  A    72    			RET
                           A    73    
                           A    74    ; Execute a program in RAM
                           A    75    ; int * _exec24(UINT24 address, char * params)
                           A    76    ; Params:
                           A    77    ; - address: The 24-bit address to call
                           A    78    ; - params: 24-bit pointer to the params buffer
                           A    79    ;
                           A    80    ; This function will call the 24 bit address an
                           A    81    ; The called function must do a RET and take ca
                           A    82    ;
00002A                     A    83    __exec24:
00002A FDE5                A    84    _exec24:		PUSH 	IY
00002C FD210000 00         A    85    			LD	IY, 0
000031 FD39                A    86    			ADD	IY, SP		; Standard prologue
000033 F5                  A    87    			PUSH 	AF		; Stack any registe
000034 D5                  A    88    			PUSH	DE
000035 DDE5                A    89    			PUSH	IX
000037 ED6E                A    90    			LD	A, MB 		; Preserve the MBAS
000039 F5                  A    91    			PUSH	AF 
00003A FD1706              A    92    			LD	DE, (IY+6)	; Get the address
00003D FD7E08              A    93    			LD	A, (IY+8)	; And the high byte
000040 FD2709              A    94    			LD	HL, (IY+9)	; Load HLU with the
                           A    95    ;
                           A    96    ; Write out a short subroutine "JP (DE)" to RAM
                           A    97    ;			
000043 DD21 00 00 00       A    98    			LD	IX, _callSM	; Storage for the s
000048 DD3600C3            A    99    			LD	(IX + 0), C3h	; JP llhhuu
00004C DD7301              A   100    			LD	(IX + 1), E
00004F DD7202              A   101    			LD	(IX + 2), D
000052 DD7703              A   102    			LD	(IX + 3), A	
                           A   103    ;
000055 18 35               A   104    			JR	_execSM		; Save some bytes, 
                           A   105    
                           A   106    ; Execute a program in RAM
                           A   107    ; int * _exec16(UINT24 address, char * params)
                           A   108    ; Params:
                           A   109    ; - address: The 24-bit address to call
                           A   110    ; - params: 24-bit pointer to the params buffer
                           A   111    ;
                           A   112    ; This function will call the 24 bit address an
                           A   113    ; The called function must do a RET.LIS (49h, C
                           A   114    ;
000057                     A   115    __exec16:
000057                     A   116    _exec16:		
000057 FDE5                A   117    			PUSH 	IY
000059 FD210000 00         A   118    			LD	IY, 0
00005E FD39                A   119    			ADD	IY, SP		; Standard prologue
000060 F5                  A   120    			PUSH 	AF		; Stack any registe
000061 D5                  A   121    			PUSH	DE
000062 DDE5                A   122    			PUSH	IX
000064 ED6E                A   123    			LD	A, MB		; Preserve the MBAS
000066 F5                  A   124    			PUSH	AF
000067 FD1706              A   125    			LD	DE, (IY+6)	; Get the address
00006A FD7E08              A   126    			LD	A, (IY+8)	; And the high byte
00006D ED6D                A   127    			LD	MB, A		; Set the MBASE reg
00006F ED39B5              A   128    			out0 (RAM_ADDR_U), a ; MSM: map int
000072 FD2709              A   129    			LD	HL, (IY+9)	; Load HLU with the
                           A   130    ;
                           A   131    ; Write out a short subroutine "CALL.IS (DE): R
                           A   132    ;
                           A   133    
000075 DD21 00 00 00       A   134    			LD	IX, _callSM	; Storage for the s
00007A DD360049            A   135    			LD	(IX + 0), 49h	; CALL.IS llhh
00007E DD3601CD            A   136    			LD	(IX + 1), CDh
000082 DD7302              A   137    			LD	(IX + 2), E
000085 DD7203              A   138    			LD	(IX + 3), D
000088 DD3604C9            A   139    			LD	(IX + 4), C9h	; RET		
                           A   140    ;
00008C                     A   141    _execSM:	
00008C CD 00 00 00         A   142    			CALL	_callSM		; Call the subr
                           A   143    ;
000090 F1                  A   144    			POP	AF		; Restore the MBASE reg
000091 ED6D                A   145    			LD	MB, A
000093 ED39B5              A   146    			out0 (RAM_ADDR_U), a ; MSM: map int
000096 DDE1                A   147    			POP	IX
000098 D1                  A   148    			POP	DE
000099 F1                  A   149    			POP AF
00009A FDF9                A   150    			LD	SP, IY          ; Standard epil
00009C FDE1                A   151    			POP	IY
00009E C9                  A   152    			RET	
                           A   153    
                           A   154    ; Wait for timer0 to hit 0
                           A   155    ;
00009F                     A   156    __wait_timer0:
00009F F5                  A   157    _wait_timer0:		PUSH	AF 
0000A0 C5                  A   158    			PUSH	BC 
0000A1 ED3880              A   159    			IN0	A, (TMR0_CTL)	; Enable the ti
0000A4 F603                A   160    			OR	3
0000A6 ED3980              A   161    			OUT0	(TMR0_CTL), A
0000A9 ED0081              A   162    $$:			IN0	B, (TMR0_DR_L)	; Fetch the cou
0000AC ED3882              A   163    			IN0 	A, (TMR0_DR_H)	; And the c
0000AF B0                  A   164    			OR	B 
0000B0 20 F7               A   165    			JR	NZ, $B
0000B2 C1                  A   166    			POP	BC 
0000B3 F1                  A   167    			POP	AF 
0000B4 C9                  A   168    			RET
                           A   169    
                           A   170    ; Wait for timer1 to hit 0
                           A   171    ;
0000B5                     A   172    __wait_timer1:
0000B5 F5                  A   173    _wait_timer1:		PUSH	AF 
0000B6 C5                  A   174    			PUSH	BC 
0000B7 ED3883              A   175    			IN0	A, (TMR1_CTL)	; Enable the ti
0000BA F603                A   176    			OR	3
0000BC ED3983              A   177    			OUT0	(TMR1_CTL), A
0000BF ED0084              A   178    $$:			IN0	B, (TMR1_DR_L)	; Fetch the cou
0000C2 ED3885              A   179    			IN0 	A, (TMR1_DR_H)	; And the c
0000C5 B0                  A   180    			OR	B 
0000C6 20 F7               A   181    			JR	NZ, $B
0000C8 C1                  A   182    			POP	BC 
0000C9 F1                  A   183    			POP	AF 
0000CA C9                  A   184    			RET		


Errors: 0
Warnings: 0
Lines Assembled: 539
