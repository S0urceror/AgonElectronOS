Zilog eZ80 Macro Assembler Version 4.3 (19073001)24-Jun-23     22:46:08     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	AGON Electron OS - C Startup Code
                           A     3    ; Author:	Copyright (C) 2005 by ZiLOG, Inc.  
                           A     4    ; Modified:	Dean Belfield, Mario Smit
                           A     5    
                           A     6    
                           B     0    			INCLUDE	"../src/macros.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Useful Macros
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/09/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 08/08/2022:	Added GET_GPIO
                           B     9    ; 09/09/2022:	Commented
                           B    10    
                           B    11    ; Add A to HL (unsigned)
                           B    12    ;
                           B    13    ADD8U_HL:		MACRO 
                           B    14    			ADD	A, L 
                           B    15    			LD	L, A 
                           B    16    			ADC	A, H
                           B    17    			SUB	L
                           B    18    			LD	H, A 
                           B    19    			ENDMACRO 
                           B    20    
                           B    21    ; Set a GPIO register
                           B    22    ; Parameters:
                           B    23    ; - REG: Register to set
                           B    24    ; - VAL: Bit(s) to set (1: set, 0: ignore)
                           B    25    ;
                           B    26    SET_GPIO:		MACRO	REG, VAL
                           B    27    			IN0	A,(REG)
                           B    28    			OR	VAL
                           B    29    			OUT0	(REG),A
                           B    30    			ENDMACRO
                           B    31    
                           B    32    ; Reset a GPIO register
                           B    33    ; Parameters:
                           B    34    ; - REG: Register to set
                           B    35    ; - VAL: Bit(s) to reset (1: reset, 0: ignore)
                           B    36    ;	
                           B    37    RES_GPIO:		MACRO	REG, VAL
                           B    38    			PUSH	BC
                           B    39    			LD	A, VAL
                           B    40    			CPL
                           B    41    			LD	C, A
                           B    42    			IN0	A,(REG)
                           B    43    			AND	C
                           B    44    			OUT0	(REG),A
                           B    45    			POP	BC
                           B    46    			ENDMACRO
                           B    47    
                           B    48    ; Get a GPIO register
                           B    49    ; Parameters:
                           B    50    ; - REG: Register to test
                           B    51    ; - VAL: Bit(s) to test
                           B    52    ;	
                           B    53    GET_GPIO:		MACRO	REG, VAL
                           B    54    			IN0	A,(REG)
                           B    55    			TST	A, VAL
                           B    56    			ENDMACRO
                           B    57    				
                           B     0    			INCLUDE	"../src/equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B   102    
       00000083            B   103    TMR1_CTL		EQU	83h
       00000084            B   104    TMR1_DR_L               EQU     84h
       00000084            B   105    TMR1_RR_L               EQU     84h
       00000085            B   106    TMR1_DR_H               EQU     85h
       00000085            B   107    TMR1_RR_H               EQU     85h
                           B   108    
                           B   109    ; UART constants
       00000050            B   110    UART0_SEND_BUFFER_SIZE  EQU     80
       00000050            B   111    UART0_RECV_BUFFER_SIZE  EQU     80
       00000002            B   112    UART_IER_TRANSMITINT    EQU     00000010b
                           A     9    
                           A    10    			XREF 	__init
                           A    11    			XREF 	__low_rom
                           A    12    			
                           A    13    			XDEF 	_reset
                           A    14    			XDEF 	__default_nmi_handler
                           A    15    			XDEF 	__default_mi_handler
                           A    16    			XDEF 	__nvectors
                           A    17    			XDEF 	_init_default_vectors
                           A    18    			XDEF 	__init_default_vectors
                           A    19    			XDEF 	_set_vector
                           A    20    			XDEF	__set_vector
                           A    21    			XDEF	__2nd_jump_table
                           A    22    			XDEF	__1st_jump_table
                           A    23    			XDEF	__vector_table
                           A    24    			
                           A    25    			XREF	uart0_send_fifo_add
                           A    26    			XREF	uart0_recv_fifo_get
                           A    27    			XREF	uart0_recv_fifo_nrchars
                           A    28    			XREF	electron_os_api
                           A    29    			XREF	call_address_ix
                           A    30    
       00000030            A    31    NVECTORS 	EQU 48			; Number of interru
                           A    32    
                           A    33    ; Save Interrupt State
                           A    34    ;
                           A    35    SAVEIMASK	MACRO
                           A    36    			LD	A, I		; Sets parity bit t
                           A    37    			PUSH	AF
                           A    38    			DI				; Disable interrupt
                           A    39    			MACEND
                           A    40    
                           A    41    ; Restore Interrupt State
                           A    42    ;
                           A    43    RESTOREIMASK MACRO
                           A    44    			 POP	AF
                           A    45    			 JP	PO, $+5		; Parity bit is IEF
                           A    46    			 EI
                           A    47    			 MACEND
                           A    48    
                           A    49    ; Reset and all RST nn's
                           A    50    ;
                           A    51    			DEFINE .RESET, SPACE = ROM
                           A    52    			SEGMENT .RESET
                           A    53    
000000                     A    54    _reset:	
000000 F3                  A    55    _rst0:		DI
000001 ED7D                A    56    			STMIX
000003 5BC3 00 00 00       A    57    			JP.LIL	__init
                           A    58    		
000008 5BC3 02 00 00       A    59    _rst8:		JP.LIL	_rst_08_handler
00000D                     A    60    			DS	3
                           A    61    		
000010 5BC3 08 00 00       A    62    _rst10:		JP.LIL	_rst_10_handler
000015                     A    63    			DS	3
                           A    64    
000018 5BC3 0E 00 00       A    65    _rst18:		JP.LIL	_rst_18_handler
00001D                     A    66    			DS	3
                           A    67    		
000020 5BC3 15 00 00       A    68    _rst20:		JP.LIL	_rst_20_handler
000025                     A    69    			DS	3
                           A    70    		
000028 5BC3 1B 00 00       A    71    _rst28:		JP.LIL	_rst_28_handler
00002D                     A    72    			DS	3
                           A    73    
000030 5BC3 1B 00 00       A    74    _rst30:		JP.LIL	_rst_30_handler
000035                     A    75    			DS	3
                           A    76    
000038 5BC3 1D 00 00       A    77    _rst38:		JP.LIL	_rst_38_handler
                           A    78    
00003D                     A    79    			DS 29h
000066 5BC3 31 00 00       A    80    _nmi:		JP.LIL	__default_nmi_handler
                           A    81    
                           A    82    ;
                           A    83    ; Startup code
                           A    84    ;
                           A    85    	DEFINE .STARTUP, SPACE = ROM
                           A    86    	SEGMENT .STARTUP
                           A    87    
                           A    88    	.ASSUME ADL=1
                           A    89    
                           A    90    ; Number of vectors supported
                           A    91    ;
000000 3000                A    92    __nvectors:		DW NVECTORS            ; extern
                           A    93    
                           A    94    ;	
                           A    95    ; RST handlers
                           A    96    ;
                           A    97    
                           A    98    ; add a character specified by A to the output 
                           A    99    ; returns character added in A
000002                     A   100    _rst_08_handler:	
000002 CD 00 00 00         A   101    	call uart0_send_fifo_add
000006 5BC9                A   102    	RET.L
                           A   103    
                           A   104    ; get a character from the input fifo in A
                           A   105    ; non-blocking, returns C when no char availabl
000008                     A   106    _rst_10_handler:
000008 CD 00 00 00         A   107    	call uart0_recv_fifo_get
00000C 5BC9                A   108    	RET.L
                           A   109    
00000E                     A   110    _rst_18_handler:
00000E DD22 00 00 00       A   111    	ld (call_address_ix),ix
000013 5BC9                A   112    	RET.L
                           A   113    
000015                     A   114    _rst_20_handler:
000015 CD 00 00 00         A   115    	call uart0_recv_fifo_nrchars
000019 5BC9                A   116    	RET.L
00001B                     A   117    _rst_28_handler:
00001B                     A   118    _rst_30_handler:
00001B 5BC9                A   119    	RET.L
                           A   120    
00001D                     A   121    _rst_38_handler:
00001D CD 00 00 00         A   122    	CALL electron_os_api
000021 5BC9                A   123    	RET.L
                           A   124    
000023                     A   125    	DS 00eh
                           A   126    ; Default Non-Maskable Interrupt handler
                           A   127    ;
000031                     A   128    __default_nmi_handler:	
000031 5BED45              A   129    	RETN.LIL
                           A   130    
                           A   131    ; Default Maskable Interrupt handler
                           A   132    ;
000034                     A   133    __default_mi_handler:	
000034 FB                  A   134    	EI
000035 5BED4D              A   135    	RETI.L
                           A   136    					
                           A   137    ; Initialize all potential interrupt vector loc
                           A   138    ; default handler.
                           A   139    ;
                           A   140    ; void _init_default_vectors(void);
                           A   141    ;
000038                     A   142    __init_default_vectors:
000038 F5                  A   143    _init_default_vectors:	PUSH	AF
                           A   144    	SAVEIMASK
00003D 21 34 00 00         A   145    	LD	HL, __default_mi_handler
000041 3EC3                A   146    	LD	A, %C3
000043 32 00 00 00         A   147    	LD 	(__2nd_jump_table), A		; Place jp 
000047 22 01 00 00         A   148    	LD 	(__2nd_jump_table + 1), HL	; __default
00004B 21 00 00 00         A   149    	LD 	HL, __2nd_jump_table
00004F 11 04 00 00         A   150    	LD	DE, __2nd_jump_table + 4
000053 01BC0000            A   151    	LD	BC, NVECTORS * 4 - 4
000057 EDB0                A   152    	LDIR
000059 ED5E                A   153    	IM	2
00005B 3E 00               A   154    	LD 	A, __vector_table >> 8
00005D ED47                A   155    	LD 	I, A				; Load interrupt ve
                           A   156    	RESTOREIMASK
000065 F1                  A   157    	POP	AF
000066 C9                  A   158    	RET
                           A   159    
                           A   160    ; Installs a user interrupt handler in the 2nd 
                           A   161    ;
                           A   162    ; void * _set_vector(unsigned int vector, void(
                           A   163    ;
000067                     A   164    __set_vector:
000067                     A   165    _set_vector:		
000067 FDE5                A   166    	PUSH	IY
000069 FD210000 00         A   167    	LD	IY, 0
00006E FD39                A   168    	ADD	IY, SP				; Standard prologue
000070 F5                  A   169    	PUSH	AF
                           A   170    	SAVEIMASK
000075 01000000            A   171    	LD	BC, 0				; Clear BC
000079 0602                A   172    	LD	B, 2				; Calculate 2nd jum
00007B FD4E06              A   173    	LD	C, (IY + 6)			; Vector offset
00007E ED4C                A   174    	MLT	BC				; BC is 2nd jp table of
000080 21 00 00 00         A   175    	LD	HL, __2nd_jump_table
000084 09                  A   176    	ADD	HL, BC				; HL is location of
000085 36C3                A   177    	LD 	(HL), %C3			; Place jp opcode j
000087 23                  A   178    	INC	HL				; HL is jp destination 
000088 FD0709              A   179    	LD	BC, (IY + 9)			; BC is isr add
00008B ED17                A   180    	LD 	DE, (HL)			; Save previous han
00008D ED0F                A   181    	LD 	(HL), BC			; Store new isr add
00008F D5                  A   182    	PUSH	DE
000090 E1                  A   183    	POP	HL				; Return previous handl
                           A   184    	RESTOREIMASK
000097 F1                  A   185    	POP	AF
000098 FDF9                A   186    	LD 	SP, IY				; Standard epilogue
00009A FDE1                A   187    	POP	IY
00009C C9                  A   188    	RET
                           A   189    
                           A   190    ; Interrupt Vector Table
                           A   191    ;  - this segment must be aligned on a 256 byte
                           A   192    ;    the 64K byte boundry
                           A   193    ;  - each 2-byte entry is a 2-byte vector addre
                           A   194    ;
                           A   195    			DEFINE .IVECTS, SPACE = ROM, ALIGN 
                           A   196    			SEGMENT .IVECTS
                           A   197    
000000 6000                A   198    __vector_table:		DW __1st_jump_table + %00
000002 6400                A   199    			DW __1st_jump_table + %04
000004 6800                A   200    			DW __1st_jump_table + %08
000006 6C00                A   201    			DW __1st_jump_table + %0c
000008 7000                A   202    			DW __1st_jump_table + %10
00000A 7400                A   203    			DW __1st_jump_table + %14
00000C 7800                A   204    			DW __1st_jump_table + %18
00000E 7C00                A   205    			DW __1st_jump_table + %1c
000010 8000                A   206    			DW __1st_jump_table + %20
000012 8400                A   207    			DW __1st_jump_table + %24
000014 8800                A   208    			DW __1st_jump_table + %28
000016 8C00                A   209    			DW __1st_jump_table + %2c
000018 9000                A   210    			DW __1st_jump_table + %30
00001A 9400                A   211    			DW __1st_jump_table + %34
00001C 9800                A   212    			DW __1st_jump_table + %38
00001E 9C00                A   213    			DW __1st_jump_table + %3c
000020 A000                A   214    			DW __1st_jump_table + %40
000022 A400                A   215    			DW __1st_jump_table + %44
000024 A800                A   216    			DW __1st_jump_table + %48
000026 AC00                A   217    			DW __1st_jump_table + %4c
000028 B000                A   218    			DW __1st_jump_table + %50
00002A B400                A   219    			DW __1st_jump_table + %54
00002C B800                A   220    			DW __1st_jump_table + %58
00002E BC00                A   221    			DW __1st_jump_table + %5c
000030 C000                A   222    			DW __1st_jump_table + %60
000032 C400                A   223    			DW __1st_jump_table + %64
000034 C800                A   224    			DW __1st_jump_table + %68
000036 CC00                A   225    			DW __1st_jump_table + %6c
000038 D000                A   226    			DW __1st_jump_table + %70
00003A D400                A   227    			DW __1st_jump_table + %74
00003C D800                A   228    			DW __1st_jump_table + %78
00003E DC00                A   229    			DW __1st_jump_table + %7c
000040 E000                A   230    			DW __1st_jump_table + %80
000042 E400                A   231    			DW __1st_jump_table + %84
000044 E800                A   232    			DW __1st_jump_table + %88
000046 EC00                A   233    			DW __1st_jump_table + %8c
000048 F000                A   234    			DW __1st_jump_table + %90
00004A F400                A   235    			DW __1st_jump_table + %94
00004C F800                A   236    			DW __1st_jump_table + %98
00004E FC00                A   237    			DW __1st_jump_table + %9c
000050 0001                A   238    			DW __1st_jump_table + %a0
000052 0401                A   239    			DW __1st_jump_table + %a4
000054 0801                A   240    			DW __1st_jump_table + %a8
000056 0C01                A   241    			DW __1st_jump_table + %ac
000058 1001                A   242    			DW __1st_jump_table + %b0
00005A 1401                A   243    			DW __1st_jump_table + %b4
00005C 1801                A   244    			DW __1st_jump_table + %b8
00005E 1C01                A   245    			DW __1st_jump_table + %bc
                           A   246    
                           A   247    ; 1st Interrupt Vector Jump Table
                           A   248    ;  - this table must reside in the first 64K by
                           A   249    ;  - each 4-byte entry is a jump to the 2nd jum
                           A   250    ;
000060 C3 00 00 00         A   251    __1st_jump_table:	JP __2nd_jump_table + %00
000064 C3 04 00 00         A   252    			JP __2nd_jump_table + %04
000068 C3 08 00 00         A   253    			JP __2nd_jump_table + %08
00006C C3 0C 00 00         A   254    			JP __2nd_jump_table + %0c
000070 C3 10 00 00         A   255    			JP __2nd_jump_table + %10
000074 C3 14 00 00         A   256    			JP __2nd_jump_table + %14
000078 C3 18 00 00         A   257    			JP __2nd_jump_table + %18
00007C C3 1C 00 00         A   258    			JP __2nd_jump_table + %1c
000080 C3 20 00 00         A   259    			JP __2nd_jump_table + %20
000084 C3 24 00 00         A   260    			JP __2nd_jump_table + %24
000088 C3 28 00 00         A   261    			JP __2nd_jump_table + %28
00008C C3 2C 00 00         A   262    			JP __2nd_jump_table + %2c
000090 C3 30 00 00         A   263    			JP __2nd_jump_table + %30
000094 C3 34 00 00         A   264    			JP __2nd_jump_table + %34
000098 C3 38 00 00         A   265    			JP __2nd_jump_table + %38
00009C C3 3C 00 00         A   266    			JP __2nd_jump_table + %3c
0000A0 C3 40 00 00         A   267    			JP __2nd_jump_table + %40
0000A4 C3 44 00 00         A   268    			JP __2nd_jump_table + %44
0000A8 C3 48 00 00         A   269    			JP __2nd_jump_table + %48
0000AC C3 4C 00 00         A   270    			JP __2nd_jump_table + %4c
0000B0 C3 50 00 00         A   271    			JP __2nd_jump_table + %50
0000B4 C3 54 00 00         A   272    			JP __2nd_jump_table + %54
0000B8 C3 58 00 00         A   273    			JP __2nd_jump_table + %58
0000BC C3 5C 00 00         A   274    			JP __2nd_jump_table + %5c
0000C0 C3 60 00 00         A   275    			JP __2nd_jump_table + %60
0000C4 C3 64 00 00         A   276    			JP __2nd_jump_table + %64
0000C8 C3 68 00 00         A   277    			JP __2nd_jump_table + %68
0000CC C3 6C 00 00         A   278    			JP __2nd_jump_table + %6c
0000D0 C3 70 00 00         A   279    			JP __2nd_jump_table + %70
0000D4 C3 74 00 00         A   280    			JP __2nd_jump_table + %74
0000D8 C3 78 00 00         A   281    			JP __2nd_jump_table + %78
0000DC C3 7C 00 00         A   282    			JP __2nd_jump_table + %7c
0000E0 C3 80 00 00         A   283    			JP __2nd_jump_table + %80
0000E4 C3 84 00 00         A   284    			JP __2nd_jump_table + %84
0000E8 C3 88 00 00         A   285    			JP __2nd_jump_table + %88
0000EC C3 8C 00 00         A   286    			JP __2nd_jump_table + %8c
0000F0 C3 90 00 00         A   287    			JP __2nd_jump_table + %90
0000F4 C3 94 00 00         A   288    			JP __2nd_jump_table + %94
0000F8 C3 98 00 00         A   289    			JP __2nd_jump_table + %98
0000FC C3 9C 00 00         A   290    			JP __2nd_jump_table + %9c
000100 C3 A0 00 00         A   291    			JP __2nd_jump_table + %a0
000104 C3 A4 00 00         A   292    			JP __2nd_jump_table + %a4
000108 C3 A8 00 00         A   293    			JP __2nd_jump_table + %a8
00010C C3 AC 00 00         A   294    			JP __2nd_jump_table + %ac
000110 C3 B0 00 00         A   295    			JP __2nd_jump_table + %b0
000114 C3 B4 00 00         A   296    			JP __2nd_jump_table + %b4
000118 C3 B8 00 00         A   297    			JP __2nd_jump_table + %b8
00011C C3 BC 00 00         A   298    			JP __2nd_jump_table + %bc
                           A   299    
                           A   300    
                           A   301    			DEFINE IVJMPTBL, SPACE = RAM
                           A   302    			SEGMENT IVJMPTBL
                           A   303    
                           A   304    ; 2nd Interrupt Vector Jump Table
                           A   305    ;  - this table must reside in RAM anywhere in 
                           A   306    ;  - each 4-byte entry is a jump to an interrup
                           A   307    ;
000000                     A   308    __2nd_jump_table:	DS NVECTORS * 4
                           A   309    
                           A   310    
                           A   311    			END
                           A   312    
                           A   313    


Errors: 0
Warnings: 0
Lines Assembled: 497
